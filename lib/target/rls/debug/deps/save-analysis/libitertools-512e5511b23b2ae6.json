{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3","program":"/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","itertools","--edition=2018","/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_alloc\"","--cfg","feature=\"use_std\"","-C","metadata=512e5511b23b2ae6","-C","extra-filename=-512e5511b23b2ae6","--out-dir","/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","-L","dependency=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","--extern","either=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libeither-4b5da52ea3e75845.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libitertools-512e5511b23b2ae6.rmeta"},"prelude":{"crate_id":{"name":"itertools","disambiguator":[5083600546365673793,0]},"crate_root":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src","external_crates":[{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","num":20,"id":{"name":"either","disambiguator":[10174564351280660459,0]}}],"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":0,"byte_end":122881,"line_start":1,"line_end":3608,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":181},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":1436,"byte_end":1442,"line_start":60,"line_end":60,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":5028},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2004,"byte_end":2008,"line_start":84,"line_end":84,"column_start":14,"column_end":18},"alias_span":null,"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2115,"byte_end":2120,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":390},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2130,"byte_end":2137,"line_start":90,"line_end":90,"column_start":9,"column_end":16},"alias_span":null,"name":"DedupBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2147,"byte_end":2161,"line_start":91,"line_end":91,"column_start":9,"column_end":23},"alias_span":null,"name":"DedupWithCount","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2171,"byte_end":2187,"line_start":92,"line_end":92,"column_start":9,"column_end":25},"alias_span":null,"name":"DedupByWithCount","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2908},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2197,"byte_end":2207,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2922},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2217,"byte_end":2235,"line_start":94,"line_end":94,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":790},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2245,"byte_end":2256,"line_start":95,"line_end":95,"column_start":9,"column_end":20},"alias_span":null,"name":"FilterMapOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3329},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2266,"byte_end":2274,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"alias_span":null,"name":"FilterOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2946},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2284,"byte_end":2291,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2936},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2301,"byte_end":2308,"line_start":98,"line_end":98,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2961},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2318,"byte_end":2326,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2336,"byte_end":2343,"line_start":100,"line_end":100,"column_start":9,"column_end":16},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2353,"byte_end":2358,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"alias_span":null,"name":"MapOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":667},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2368,"byte_end":2373,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":673},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2383,"byte_end":2390,"line_start":103,"line_end":103,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":708},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2400,"byte_end":2412,"line_start":104,"line_end":104,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2990},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2422,"byte_end":2431,"line_start":105,"line_end":105,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2441,"byte_end":2449,"line_start":106,"line_end":106,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2999},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2459,"byte_end":2476,"line_start":107,"line_end":107,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3340},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2486,"byte_end":2495,"line_start":108,"line_end":108,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3351},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2505,"byte_end":2511,"line_start":109,"line_end":109,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":467},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2575,"byte_end":2585,"line_start":112,"line_end":112,"column_start":31,"column_end":41},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2971},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2587,"byte_end":2591,"line_start":112,"line_end":112,"column_start":43,"column_end":47},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2882},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2657,"byte_end":2669,"line_start":114,"line_end":114,"column_start":30,"column_end":42},"alias_span":null,"name":"MultiProduct","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1049},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2738,"byte_end":2750,"line_start":116,"line_end":116,"column_start":34,"column_end":46},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3703},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2836,"byte_end":2863,"line_start":118,"line_end":118,"column_start":51,"column_end":78},"alias_span":null,"name":"CombinationsWithReplacement","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3692},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2902,"byte_end":2912,"line_start":119,"line_end":119,"column_start":38,"column_end":48},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3712},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2950,"byte_end":2965,"line_start":120,"line_end":120,"column_start":37,"column_end":52},"alias_span":null,"name":"ExactlyOneError","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3732},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2995,"byte_end":3001,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3721},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3003,"byte_end":3013,"line_start":121,"line_end":121,"column_start":37,"column_end":47},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1193},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3047,"byte_end":3056,"line_start":122,"line_end":122,"column_start":32,"column_end":41},"alias_span":null,"name":"FlattenOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3791},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3124,"byte_end":3135,"line_start":124,"line_end":124,"column_start":35,"column_end":46},"alias_span":null,"name":"GroupingMap","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1292},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3137,"byte_end":3150,"line_start":124,"line_end":124,"column_start":48,"column_end":61},"alias_span":null,"name":"GroupingMapBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1494},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3220,"byte_end":3230,"line_start":126,"line_end":126,"column_start":34,"column_end":44},"alias_span":null,"name":"IntoChunks","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1518},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3232,"byte_end":3237,"line_start":126,"line_end":126,"column_start":46,"column_end":51},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1508},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3239,"byte_end":3245,"line_start":126,"line_end":126,"column_start":53,"column_end":59},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1433},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3247,"byte_end":3254,"line_start":126,"line_end":126,"column_start":61,"column_end":68},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1471},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3256,"byte_end":3261,"line_start":126,"line_end":126,"column_start":70,"column_end":75},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1457},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3263,"byte_end":3269,"line_start":126,"line_end":126,"column_start":77,"column_end":83},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3305,"byte_end":3316,"line_start":127,"line_end":127,"column_start":34,"column_end":45},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3816},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3318,"byte_end":3333,"line_start":127,"line_end":127,"column_start":47,"column_end":62},"alias_span":null,"name":"IntersperseWith","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1618},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3403,"byte_end":3409,"line_start":129,"line_end":129,"column_start":34,"column_end":40},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1632},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3411,"byte_end":3419,"line_start":129,"line_end":129,"column_start":42,"column_end":50},"alias_span":null,"name":"KMergeBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1701},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3453,"byte_end":3464,"line_start":130,"line_end":130,"column_start":32,"column_end":43},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3884},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3535,"byte_end":3544,"line_start":132,"line_end":132,"column_start":36,"column_end":45},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3907},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3609,"byte_end":3616,"line_start":134,"line_end":134,"column_start":30,"column_end":37},"alias_span":null,"name":"PeekNth","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3895},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3647,"byte_end":3655,"line_start":135,"line_end":135,"column_start":30,"column_end":38},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1858},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3696,"byte_end":3712,"line_start":136,"line_end":136,"column_start":40,"column_end":56},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1892},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3781,"byte_end":3793,"line_start":138,"line_end":138,"column_start":34,"column_end":46},"alias_span":null,"name":"Permutations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3993},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3836,"byte_end":3850,"line_start":139,"line_end":139,"column_start":42,"column_end":56},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1956},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3915,"byte_end":3923,"line_start":141,"line_end":141,"column_start":30,"column_end":38},"alias_span":null,"name":"Powerset","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4004},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":3995,"byte_end":4003,"line_start":143,"line_end":143,"column_start":37,"column_end":45},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4014},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4071,"byte_end":4077,"line_start":145,"line_end":145,"column_start":33,"column_end":39},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4021},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4107,"byte_end":4114,"line_start":146,"line_end":146,"column_start":29,"column_end":36},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4031},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4170,"byte_end":4180,"line_start":148,"line_end":148,"column_start":30,"column_end":40},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4039},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4182,"byte_end":4188,"line_start":148,"line_end":148,"column_start":42,"column_end":48},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4048},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4190,"byte_end":4197,"line_start":148,"line_end":148,"column_start":50,"column_end":57},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4068},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4258,"byte_end":4261,"line_start":150,"line_end":150,"column_start":25,"column_end":28},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4075},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4295,"byte_end":4306,"line_start":151,"line_end":151,"column_start":33,"column_end":44},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4098},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4308,"byte_end":4320,"line_start":151,"line_end":151,"column_start":46,"column_end":58},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4111},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4322,"byte_end":4342,"line_start":151,"line_end":151,"column_start":60,"column_end":80},"alias_span":null,"name":"CircularTupleWindows","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4085},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4344,"byte_end":4350,"line_start":151,"line_end":151,"column_start":82,"column_end":88},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2321},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4422,"byte_end":4432,"line_start":153,"line_end":153,"column_start":38,"column_end":48},"alias_span":null,"name":"Duplicates","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2313},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4434,"byte_end":4446,"line_start":153,"line_end":153,"column_start":50,"column_end":62},"alias_span":null,"name":"DuplicatesBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4357},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4514,"byte_end":4520,"line_start":155,"line_end":155,"column_start":34,"column_end":40},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4344},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4522,"byte_end":4530,"line_start":155,"line_end":155,"column_start":42,"column_end":50},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2406},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4567,"byte_end":4579,"line_start":156,"line_end":156,"column_start":35,"column_end":47},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4601},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4613,"byte_end":4618,"line_start":157,"line_end":157,"column_start":33,"column_end":38},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4614},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4652,"byte_end":4662,"line_start":158,"line_end":158,"column_start":33,"column_end":43},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4627},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4693,"byte_end":4696,"line_start":159,"line_end":159,"column_start":30,"column_end":33},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2171},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4827,"byte_end":4843,"line_start":164,"line_end":164,"column_start":32,"column_end":48},"alias_span":null,"name":"HomogeneousTuple","value":"","parent":{"krate":0,"index":276}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4893,"byte_end":4894,"line_start":168,"line_end":168,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Batching, FilterOk, Interleave, DedupBy, WhileSome, Combinations, PadUsing, MergeJoinBy, KMerge, Intersperse, Positions, GroupingMapBy, FlattenOk, ZipLongest, Format, UniqueBy, MultiProduct, Tuples, Coalesce, MergeBy, MapInto, Product, InterleaveShortest, PutBackN, DedupWithCount, DuplicatesBy, Permutations, Update, KMergeBy, IntersperseWith, FormatWith, ZipEq, CombinationsWithReplacement, TupleWindows, Tee, MapOk, PutBack, FilterMapOk, DedupByWithCount, Dedup, PeekingTakeWhile, TakeWhileRef, TupleCombinations, Powerset, MultiPeek, GroupBy, IntoChunks, GroupingMap, ExactlyOneError, WithPosition, Unique, Step, CircularTupleWindows, Duplicates, Merge","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1025},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4924,"byte_end":4930,"line_start":169,"line_end":169,"column_start":29,"column_end":35},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1033},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4965,"byte_end":4976,"line_start":170,"line_end":170,"column_start":34,"column_end":45},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1169},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4999,"byte_end":5008,"line_start":171,"line_end":171,"column_start":22,"column_end":31},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1153},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5031,"byte_end":5035,"line_start":172,"line_end":172,"column_start":22,"column_end":26},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1640},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5096,"byte_end":5105,"line_start":174,"line_end":174,"column_start":30,"column_end":39},"alias_span":null,"name":"kmerge_by","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3859},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5131,"byte_end":5143,"line_start":175,"line_end":175,"column_start":24,"column_end":36},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1843},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5180,"byte_end":5191,"line_start":176,"line_end":176,"column_start":36,"column_end":47},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1988},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5230,"byte_end":5245,"line_start":177,"line_end":177,"column_start":38,"column_end":53},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2053},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5271,"byte_end":5279,"line_start":178,"line_end":178,"column_start":25,"column_end":33},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2099},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5327,"byte_end":5338,"line_start":180,"line_end":180,"column_start":26,"column_end":37},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2108},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5340,"byte_end":5346,"line_start":180,"line_end":180,"column_start":39,"column_end":45},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2130},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5348,"byte_end":5355,"line_start":180,"line_end":180,"column_start":47,"column_end":54},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4573},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5388,"byte_end":5396,"line_start":181,"line_end":181,"column_start":31,"column_end":39},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2388},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5426,"byte_end":5436,"line_start":182,"line_end":182,"column_start":29,"column_end":39},"alias_span":null,"name":"multiunzip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2391},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5438,"byte_end":5448,"line_start":182,"line_end":182,"column_start":41,"column_end":51},"alias_span":null,"name":"MultiUnzip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2489},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5476,"byte_end":5484,"line_start":183,"line_end":183,"column_start":26,"column_end":34},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":123936,"byte_end":123937,"line_start":10,"line_end":10,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"DedupBy, Coalesce, dedup_by, dedup_by_with_count, dedup, DedupWithCount, coalesce, DedupByWithCount, Dedup, dedup_with_count","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":123977,"byte_end":123984,"line_start":11,"line_end":11,"column_start":39,"column_end":46},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":123986,"byte_end":123991,"line_start":11,"line_end":11,"column_start":48,"column_end":53},"alias_span":null,"name":"MapOk","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":467},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124034,"byte_end":124044,"line_start":13,"line_end":13,"column_start":20,"column_end":30},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":332}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124105,"byte_end":124106,"line_start":15,"line_end":15,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"MultiProduct, multi_cartesian_product","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":3361},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5551,"byte_end":5563,"line_start":186,"line_end":186,"column_start":32,"column_end":44},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":577},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177126,"byte_end":177136,"line_start":21,"line_end":21,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":670},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177142,"byte_end":177147,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":602},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177153,"byte_end":177161,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":2002},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177228,"byte_end":177238,"line_start":26,"line_end":26,"column_start":33,"column_end":43},"alias_span":null,"name":"put_back_n","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":1748},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177301,"byte_end":177310,"line_start":28,"line_end":28,"column_start":32,"column_end":41},"alias_span":null,"name":"multipeek","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":1814},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177367,"byte_end":177375,"line_start":30,"line_end":30,"column_start":26,"column_end":34},"alias_span":null,"name":"peek_nth","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177435,"byte_end":177441,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"alias_span":null,"name":"kmerge","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":2430},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177471,"byte_end":177477,"line_start":33,"line_end":33,"column_start":29,"column_end":35},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":1697},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177506,"byte_end":177519,"line_start":34,"line_end":34,"column_start":28,"column_end":41},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":925}},{"kind":"Use","ref_id":{"krate":0,"index":2027},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177579,"byte_end":177585,"line_start":36,"line_end":36,"column_start":29,"column_end":35},"alias_span":null,"name":"rciter","value":"","parent":{"krate":0,"index":925}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5630,"byte_end":5631,"line_start":190,"line_end":190,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"kmerge, merge_join_by, zip_eq, merge, interleave","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":0,"byte_end":122881,"line_start":1,"line_end":3608,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":276},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":877},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1028},{"krate":0,"index":1036},{"krate":0,"index":1073},{"krate":0,"index":1100},{"krate":0,"index":1146},{"krate":0,"index":1174},{"krate":0,"index":1226},{"krate":0,"index":1253},{"krate":0,"index":1345},{"krate":0,"index":1366},{"krate":0,"index":1533},{"krate":0,"index":1574},{"krate":0,"index":1585},{"krate":0,"index":1659},{"krate":0,"index":1677},{"krate":0,"index":1726},{"krate":0,"index":1735},{"krate":0,"index":1768},{"krate":0,"index":1801},{"krate":0,"index":1833},{"krate":0,"index":1879},{"krate":0,"index":1933},{"krate":0,"index":1974},{"krate":0,"index":1995},{"krate":0,"index":2013},{"krate":0,"index":2049},{"krate":0,"index":2067},{"krate":0,"index":2090},{"krate":0,"index":2133},{"krate":0,"index":2155},{"krate":0,"index":2232},{"krate":0,"index":2325},{"krate":0,"index":2387},{"krate":0,"index":2395},{"krate":0,"index":2426},{"krate":0,"index":2442},{"krate":0,"index":2485},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2808},{"krate":0,"index":2810},{"krate":0,"index":2813},{"krate":0,"index":2816},{"krate":0,"index":5056},{"krate":0,"index":5064},{"krate":0,"index":5066},{"krate":0,"index":5069},{"krate":0,"index":5072},{"krate":0,"index":5074},{"krate":0,"index":5077},{"krate":0,"index":5079},{"krate":0,"index":2821}],"decl_id":null,"docs":" Extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"/ Extra iterator adaptors, functions and macros.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98,"byte_end":148,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":149,"byte_end":152,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ To extend [`Iterator`] with methods in this crate, import","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":153,"byte_end":214,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/ the [`Itertools`] trait:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":215,"byte_end":243,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":244,"byte_end":247,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":248,"byte_end":255,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":256,"byte_end":285,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":286,"byte_end":293,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":294,"byte_end":297,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Now, new methods like [`interleave`](Itertools::interleave)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":298,"byte_end":361,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ are available on all iterators:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":362,"byte_end":397,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":398,"byte_end":401,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":402,"byte_end":409,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":410,"byte_end":439,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":440,"byte_end":443,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let it = (1..3).interleave(vec![-1, -2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":444,"byte_end":489,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":490,"byte_end":542,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":543,"byte_end":550,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":551,"byte_end":554,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Most iterator methods are also provided as functions (with the benefit","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":555,"byte_end":629,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ that they convert parameters using [`IntoIterator`]):","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":630,"byte_end":687,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":688,"byte_end":691,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":692,"byte_end":699,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use itertools::interleave;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":700,"byte_end":730,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":731,"byte_end":734,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ for elt in interleave(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":735,"byte_end":786,"line_start":30,"line_end":30,"column_start":1,"column_end":52}},{"value":"/     /* loop body */","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":787,"byte_end":810,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":811,"byte_end":816,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":817,"byte_end":824,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":825,"byte_end":828,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Crate Features","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":829,"byte_end":850,"line_start":35,"line_end":35,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":851,"byte_end":854,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ - `use_std`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":855,"byte_end":870,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/   - Enabled by default.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":871,"byte_end":898,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/   - Disable to compile itertools using `#![no_std]`. This disables","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":899,"byte_end":969,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/     any items that depend on collections (like `group_by`, `unique`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":970,"byte_end":1042,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/     `kmerge`, `join` and many more).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":1043,"byte_end":1083,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":1084,"byte_end":1087,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Rust Version","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":1088,"byte_end":1107,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":1108,"byte_end":1111,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This version of itertools requires Rust 1.32 or later.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":1112,"byte_end":1170,"line_start":45,"line_end":45,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2066,"byte_end":2073,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[{"value":"/ The concrete iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":2025,"byte_end":2057,"line_start":86,"line_end":86,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":276},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4787,"byte_end":4793,"line_start":163,"line_end":163,"column_start":9,"column_end":15},"name":"traits","qualname":"::traits","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":277}],"decl_id":null,"docs":" Traits helpful for using certain `Itertools` methods in generic contexts.\n","sig":null,"attributes":[{"value":"/ Traits helpful for using certain `Itertools` methods in generic contexts.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":4701,"byte_end":4778,"line_start":162,"line_end":162,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":343},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":154608,"byte_end":154618,"line_start":6,"line_end":6,"column_start":12,"column_end":22},"name":"CoalesceBy","qualname":"::adaptors::coalesce::CoalesceBy","value":"CoalesceBy {  }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":358},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":154987,"byte_end":155004,"line_start":30,"line_end":30,"column_start":11,"column_end":28},"name":"CoalescePredicate","qualname":"::adaptors::coalesce::CoalescePredicate","value":"CoalescePredicate<Item, T>","parent":null,"children":[{"krate":0,"index":361}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":155023,"byte_end":155036,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"coalesce_pair","qualname":"::adaptors::coalesce::CoalescePredicate::coalesce_pair","value":"pub fn coalesce_pair(&mut Self, T, Item) -> Result<T, (T, T)>","parent":{"krate":0,"index":358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":379},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":156895,"byte_end":156903,"line_start":90,"line_end":90,"column_start":10,"column_end":18},"name":"Coalesce","qualname":"::adaptors::coalesce::Coalesce","value":"CoalesceBy<I, F, <I as Iterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"/ An iterator adaptor that may join together adjacent elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":156668,"byte_end":156733,"line_start":86,"line_end":86,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":156734,"byte_end":156737,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ See [`.coalesce()`](crate::Itertools::coalesce) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":156738,"byte_end":156811,"line_start":88,"line_end":88,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":156812,"byte_end":156885,"line_start":89,"line_end":89,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":390},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157659,"byte_end":157666,"line_start":117,"line_end":117,"column_start":10,"column_end":17},"name":"DedupBy","qualname":"::adaptors::coalesce::DedupBy","value":"CoalesceBy<I, DedupPred2CoalescePred<Pred>, <I as Iterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157349,"byte_end":157456,"line_start":113,"line_end":113,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157457,"byte_end":157460,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_by()`](crate::Itertools::dedup_by) or [`.dedup()`](crate::Itertools::dedup) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157461,"byte_end":157575,"line_start":115,"line_end":115,"column_start":1,"column_end":115}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157576,"byte_end":157649,"line_start":116,"line_end":116,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2827},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157775,"byte_end":157797,"line_start":120,"line_end":120,"column_start":12,"column_end":34},"name":"DedupPred2CoalescePred","qualname":"::adaptors::coalesce::DedupPred2CoalescePred","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":395},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157922,"byte_end":157936,"line_start":126,"line_end":126,"column_start":11,"column_end":25},"name":"DedupPredicate","qualname":"::adaptors::coalesce::DedupPredicate","value":"DedupPredicate<T>","parent":null,"children":[{"krate":0,"index":397}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158011,"byte_end":158021,"line_start":128,"line_end":128,"column_start":8,"column_end":18},"name":"dedup_pair","qualname":"::adaptors::coalesce::DedupPredicate::dedup_pair","value":"pub fn dedup_pair(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2835},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158389,"byte_end":158396,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"DedupEq","qualname":"::adaptors::coalesce::DedupEq","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":412},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159047,"byte_end":159052,"line_start":174,"line_end":174,"column_start":10,"column_end":15},"name":"Dedup","qualname":"::adaptors::coalesce::Dedup","value":"DedupBy<I, DedupEq>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158908,"byte_end":158965,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158966,"byte_end":158969,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup()`](crate::Itertools::dedup) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158970,"byte_end":159037,"line_start":173,"line_end":173,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":416},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159635,"byte_end":159651,"line_start":190,"line_end":190,"column_start":10,"column_end":26},"name":"DedupByWithCount","qualname":"::adaptors::coalesce::DedupByWithCount","value":"CoalesceBy<I, DedupPredWithCount2CoalescePred<Pred>,\n(usize, <I as Iterator>::Item)>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, while keeping a count of how many\n repeated elements were present. This will determine equality using a comparison function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, while keeping a count of how many","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159199,"byte_end":159290,"line_start":184,"line_end":184,"column_start":1,"column_end":92}},{"value":"/ repeated elements were present. This will determine equality using a comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159291,"byte_end":159384,"line_start":185,"line_end":185,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159385,"byte_end":159388,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_by_with_count()`](crate::Itertools::dedup_by_with_count) or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159389,"byte_end":159465,"line_start":187,"line_end":187,"column_start":1,"column_end":77}},{"value":"/ [`.dedup_with_count()`](crate::Itertools::dedup_with_count) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159466,"byte_end":159551,"line_start":188,"line_end":188,"column_start":1,"column_end":86}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159552,"byte_end":159625,"line_start":189,"line_end":189,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2841},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159789,"byte_end":159820,"line_start":194,"line_end":194,"column_start":12,"column_end":43},"name":"DedupPredWithCount2CoalescePred","qualname":"::adaptors::coalesce::DedupPredWithCount2CoalescePred","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":423},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":160466,"byte_end":160480,"line_start":217,"line_end":217,"column_start":10,"column_end":24},"name":"DedupWithCount","qualname":"::adaptors::coalesce::DedupWithCount","value":"DedupByWithCount<I, DedupEq>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, while keeping a count of how many\n repeated elements were present.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, while keeping a count of how many","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":160235,"byte_end":160326,"line_start":213,"line_end":213,"column_start":1,"column_end":92}},{"value":"/ repeated elements were present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":160327,"byte_end":160362,"line_start":214,"line_end":214,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":160363,"byte_end":160366,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_with_count()`](crate::Itertools::dedup_with_count) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":160367,"byte_end":160456,"line_start":216,"line_end":216,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":2851},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":161148,"byte_end":161162,"line_start":6,"line_end":6,"column_start":12,"column_end":26},"name":"MapSpecialCase","qualname":"::adaptors::map::MapSpecialCase","value":"MapSpecialCase {  }","parent":null,"children":[{"krate":0,"index":2854},{"krate":0,"index":2855}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":161063,"byte_end":161136,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":438},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":161207,"byte_end":161223,"line_start":11,"line_end":11,"column_start":11,"column_end":27},"name":"MapSpecialCaseFn","qualname":"::adaptors::map::MapSpecialCaseFn","value":"MapSpecialCaseFn<T>","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":440},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":161238,"byte_end":161241,"line_start":12,"line_end":12,"column_start":10,"column_end":13},"name":"Out","qualname":"::adaptors::map::MapSpecialCaseFn::Out","value":"type Out;","parent":{"krate":0,"index":438},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":161250,"byte_end":161254,"line_start":13,"line_end":13,"column_start":8,"column_end":12},"name":"call","qualname":"::adaptors::map::MapSpecialCaseFn::call","value":"pub fn call(&mut Self, T) -> Self::Out","parent":{"krate":0,"index":438},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":464},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162538,"byte_end":162543,"line_start":68,"line_end":68,"column_start":10,"column_end":15},"name":"MapOk","qualname":"::adaptors::map::MapOk","value":"MapSpecialCase<I, MapSpecialCaseFnOk<F>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a transformation within a nested `Result::Ok`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162375,"byte_end":162454,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162455,"byte_end":162458,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ See [`.map_ok()`](crate::Itertools::map_ok) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162459,"byte_end":162528,"line_start":67,"line_end":67,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":467},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162683,"byte_end":162693,"line_start":72,"line_end":72,"column_start":10,"column_end":20},"name":"MapResults","qualname":"::adaptors::map::MapResults","value":"MapOk<I, F>","parent":null,"children":[],"decl_id":null,"docs":" See [`MapOk`].\n","sig":null,"attributes":[{"value":"/ See [`MapOk`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162595,"byte_end":162613,"line_start":70,"line_end":70,"column_start":1,"column_end":19}},{"value":"deprecated(note = \"Use MapOk instead\", since = \"0.10.0\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162614,"byte_end":162673,"line_start":71,"line_end":71,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2864},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162970,"byte_end":162988,"line_start":85,"line_end":85,"column_start":12,"column_end":30},"name":"MapSpecialCaseFnOk","qualname":"::adaptors::map::MapSpecialCaseFnOk","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":486},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163491,"byte_end":163498,"line_start":106,"line_end":106,"column_start":10,"column_end":17},"name":"MapInto","qualname":"::adaptors::map::MapInto","value":"MapSpecialCase<I, MapSpecialCaseFnInto<R>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to apply `Into` conversion to each element.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply `Into` conversion to each element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163336,"byte_end":163403,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163404,"byte_end":163407,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ See [`.map_into()`](crate::Itertools::map_into) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163408,"byte_end":163481,"line_start":105,"line_end":105,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2872},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163745,"byte_end":163765,"line_start":116,"line_end":116,"column_start":12,"column_end":32},"name":"MapSpecialCaseFnInto","qualname":"::adaptors::map::MapSpecialCaseFnInto","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2882},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164429,"byte_end":164441,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"MultiProduct","qualname":"::adaptors::multi_product::MultiProduct","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n multiple iterators of type `I`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164082,"byte_end":164149,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ multiple iterators of type `I`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164150,"byte_end":164185,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164186,"byte_end":164189,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ An iterator element type is `Vec<I>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164190,"byte_end":164231,"line_start":12,"line_end":12,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164232,"byte_end":164235,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [`.multi_cartesian_product()`](crate::Itertools::multi_cartesian_product)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164236,"byte_end":164317,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"/ for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164318,"byte_end":164343,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164344,"byte_end":164417,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2908},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124555,"byte_end":124565,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2913}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from two iterators until both","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124238,"byte_end":124316,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ run out.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124317,"byte_end":124329,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124330,"byte_end":124333,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124334,"byte_end":124363,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124364,"byte_end":124367,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave()`](crate::Itertools::interleave) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124368,"byte_end":124445,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124470,"byte_end":124543,"line_start":29,"line_end":29,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":577},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124842,"byte_end":124852,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"pub fn interleave<I, J>(I, J)\n-> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that interleaves elements in `i` and `j`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124625,"byte_end":124689,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124690,"byte_end":124693,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of `i.interleave(j)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124694,"byte_end":124752,"line_start":38,"line_end":38,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124753,"byte_end":124756,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave()`](crate::Itertools::interleave) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":124757,"byte_end":124834,"line_start":40,"line_end":40,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":2922},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":126218,"byte_end":126236,"line_start":92,"line_end":92,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":2925},{"krate":0,"index":2926},{"krate":0,"index":2927}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from the two iterators until","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":125867,"byte_end":125944,"line_start":83,"line_end":83,"column_start":1,"column_end":78}},{"value":"/ one of them runs out.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":125945,"byte_end":125970,"line_start":84,"line_end":84,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":125971,"byte_end":125974,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":125975,"byte_end":126004,"line_start":86,"line_end":86,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":126005,"byte_end":126008,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave_shortest()`](crate::Itertools::interleave_shortest)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":126009,"byte_end":126082,"line_start":88,"line_end":88,"column_start":1,"column_end":74}},{"value":"/ for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":126083,"byte_end":126108,"line_start":89,"line_end":89,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":126133,"byte_end":126206,"line_start":91,"line_end":91,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2936},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128508,"byte_end":128515,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":2938},{"krate":0,"index":2939}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting back a single","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128356,"byte_end":128413,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/ item to the front of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128414,"byte_end":128452,"line_start":172,"line_end":172,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128453,"byte_end":128456,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128457,"byte_end":128496,"line_start":174,"line_end":174,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":602},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128652,"byte_end":128660,"line_start":183,"line_end":183,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"pub fn put_back<I>(I) -> PutBack<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back a single item","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128585,"byte_end":128644,"line_start":182,"line_end":182,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128909,"byte_end":128919,"line_start":196,"line_end":196,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"pub fn with_value(Self, I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[{"value":"/ put back value `value` (builder method)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128854,"byte_end":128897,"line_start":195,"line_end":195,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129075,"byte_end":129085,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"pub fn into_parts(Self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"/ Split the `PutBack` into its parts.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129010,"byte_end":129049,"line_start":201,"line_end":201,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129054,"byte_end":129063,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129350,"byte_end":129358,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"/ Put back a single value to the front of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129188,"byte_end":129245,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129250,"byte_end":129253,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ If a value is already in the put back slot, it is overwritten.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129258,"byte_end":129324,"line_start":210,"line_end":210,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129329,"byte_end":129338,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2946},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131349,"byte_end":131356,"line_start":286,"line_end":286,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":2949},{"krate":0,"index":2950},{"krate":0,"index":2951},{"krate":0,"index":2952}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":130994,"byte_end":131061,"line_start":279,"line_end":279,"column_start":1,"column_end":68}},{"value":"/ the element sets of two iterators `I` and `J`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131062,"byte_end":131112,"line_start":280,"line_end":280,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131113,"byte_end":131116,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(I::Item, J::Item)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131117,"byte_end":131167,"line_start":282,"line_end":282,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131168,"byte_end":131171,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ See [`.cartesian_product()`](crate::Itertools::cartesian_product) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131172,"byte_end":131263,"line_start":284,"line_end":284,"column_start":1,"column_end":92}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131264,"byte_end":131337,"line_start":285,"line_end":285,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2961},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134311,"byte_end":134319,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":2964},{"krate":0,"index":2965}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":133876,"byte_end":133959,"line_start":380,"line_end":380,"column_start":1,"column_end":80}},{"value":"/ and may pick off as many elements as it likes, to produce the next iterator element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":133960,"byte_end":134048,"line_start":381,"line_end":381,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134049,"byte_end":134052,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is *X*, if the return type of `F` is *Option\\<X\\>*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134053,"byte_end":134130,"line_start":383,"line_end":383,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134131,"byte_end":134134,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ See [`.batching()`](crate::Itertools::batching) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134135,"byte_end":134208,"line_start":385,"line_end":385,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134226,"byte_end":134299,"line_start":387,"line_end":387,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2971},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":135293,"byte_end":135297,"line_start":424,"line_end":424,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":2973},{"krate":0,"index":2974}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ An iterator adaptor that steps a number elements in the base iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134809,"byte_end":134882,"line_start":413,"line_end":413,"column_start":1,"column_end":74}},{"value":"/ for each iteration.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134883,"byte_end":134906,"line_start":414,"line_end":414,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134907,"byte_end":134910,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134911,"byte_end":134986,"line_start":416,"line_end":416,"column_start":1,"column_end":76}},{"value":"/ then skipping forward *n-1* elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134987,"byte_end":135028,"line_start":417,"line_end":417,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":135029,"byte_end":135032,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ See [`.step()`](crate::Itertools::step) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":135033,"byte_end":135098,"line_start":419,"line_end":419,"column_start":1,"column_end":66}},{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8.0\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":135099,"byte_end":135162,"line_start":420,"line_end":420,"column_start":1,"column_end":64}},{"value":"allow(deprecated)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":135163,"byte_end":135183,"line_start":421,"line_end":421,"column_start":1,"column_end":21}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":135208,"byte_end":135281,"line_start":423,"line_end":423,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":661},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136318,"byte_end":136332,"line_start":476,"line_end":476,"column_start":11,"column_end":25},"name":"MergePredicate","qualname":"::adaptors::MergePredicate","value":"MergePredicate<T>","parent":null,"children":[{"krate":0,"index":663}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136345,"byte_end":136355,"line_start":477,"line_end":477,"column_start":8,"column_end":18},"name":"merge_pred","qualname":"::adaptors::MergePredicate::merge_pred","value":"pub fn merge_pred(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2981},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136428,"byte_end":136436,"line_start":481,"line_end":481,"column_start":12,"column_end":20},"name":"MergeLte","qualname":"::adaptors::MergeLte","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":667},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136923,"byte_end":136928,"line_start":496,"line_end":496,"column_start":10,"column_end":15},"name":"Merge","qualname":"::adaptors::Merge","value":"MergeBy<I, J, MergeLte>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136569,"byte_end":136647,"line_start":489,"line_end":489,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136648,"byte_end":136720,"line_start":490,"line_end":490,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136721,"byte_end":136724,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136725,"byte_end":136764,"line_start":492,"line_end":492,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136765,"byte_end":136768,"line_start":493,"line_end":493,"column_start":1,"column_end":4}},{"value":"/ See [`.merge()`](crate::Itertools::merge_by) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136769,"byte_end":136839,"line_start":494,"line_end":494,"column_start":1,"column_end":71}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136840,"byte_end":136913,"line_start":495,"line_end":495,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137248,"byte_end":137253,"line_start":509,"line_end":509,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"pub fn merge<I, J>(I, J)\n-> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter> where\nI: IntoIterator, J: IntoIterator<Item = I::Item>, I::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements in `i` and `j`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136963,"byte_end":137022,"line_start":498,"line_end":498,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137023,"byte_end":137026,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::merge`](crate::Itertools::merge).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137027,"byte_end":137113,"line_start":500,"line_end":500,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137114,"byte_end":137117,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137118,"byte_end":137125,"line_start":502,"line_end":502,"column_start":1,"column_end":8}},{"value":"/ use itertools::merge;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137126,"byte_end":137151,"line_start":503,"line_end":503,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137152,"byte_end":137155,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ for elt in merge(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137156,"byte_end":137202,"line_start":505,"line_end":505,"column_start":1,"column_end":47}},{"value":"/     /* loop body */","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137203,"byte_end":137226,"line_start":506,"line_end":506,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137227,"byte_end":137232,"line_start":507,"line_end":507,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137233,"byte_end":137240,"line_start":508,"line_end":508,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":673},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137840,"byte_end":137847,"line_start":524,"line_end":524,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137481,"byte_end":137559,"line_start":517,"line_end":517,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137560,"byte_end":137632,"line_start":518,"line_end":518,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137633,"byte_end":137636,"line_start":519,"line_end":519,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137637,"byte_end":137676,"line_start":520,"line_end":520,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137677,"byte_end":137680,"line_start":521,"line_end":521,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_by()`](crate::Itertools::merge_by) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137681,"byte_end":137754,"line_start":522,"line_end":522,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":137755,"byte_end":137828,"line_start":523,"line_end":523,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":708},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140432,"byte_end":140444,"line_start":618,"line_end":618,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140125,"byte_end":140190,"line_start":613,"line_end":613,"column_start":1,"column_end":66}},{"value":"/ to only pick off elements while the predicate returns `true`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140191,"byte_end":140256,"line_start":614,"line_end":614,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140257,"byte_end":140260,"line_start":615,"line_end":615,"column_start":1,"column_end":4}},{"value":"/ See [`.take_while_ref()`](crate::Itertools::take_while_ref) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140261,"byte_end":140346,"line_start":616,"line_end":616,"column_start":1,"column_end":86}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140347,"byte_end":140420,"line_start":617,"line_end":617,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2990},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":141774,"byte_end":141783,"line_start":668,"line_end":668,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":2992}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ An iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":141455,"byte_end":141521,"line_start":662,"line_end":662,"column_start":1,"column_end":67}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":141522,"byte_end":141582,"line_start":663,"line_end":663,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":141583,"byte_end":141586,"line_start":664,"line_end":664,"column_start":1,"column_end":4}},{"value":"/ See [`.while_some()`](crate::Itertools::while_some) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":141587,"byte_end":141664,"line_start":665,"line_end":665,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":141689,"byte_end":141762,"line_start":667,"line_end":667,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2999},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142610,"byte_end":142627,"line_start":701,"line_end":701,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":3002},{"krate":0,"index":3003}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142275,"byte_end":142374,"line_start":694,"line_end":694,"column_start":1,"column_end":100}},{"value":"/ of a specific size.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142375,"byte_end":142398,"line_start":695,"line_end":695,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142399,"byte_end":142402,"line_start":696,"line_end":696,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_combinations()`](crate::Itertools::tuple_combinations) for more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142403,"byte_end":142483,"line_start":697,"line_end":697,"column_start":1,"column_end":81}},{"value":"/ information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142484,"byte_end":142500,"line_start":698,"line_end":698,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142525,"byte_end":142598,"line_start":700,"line_end":700,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":736},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142754,"byte_end":142768,"line_start":709,"line_end":709,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":738}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":738},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142790,"byte_end":142801,"line_start":710,"line_end":710,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3012},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143520,"byte_end":143537,"line_start":742,"line_end":742,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":3014}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3038},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146064,"byte_end":146081,"line_start":830,"line_end":830,"column_start":25,"column_end":42},"name":"Tuple2Combination","qualname":"::adaptors::Tuple2Combination","value":"Tuple2Combination {  }","parent":null,"children":[{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3066},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146129,"byte_end":146146,"line_start":831,"line_end":831,"column_start":25,"column_end":42},"name":"Tuple3Combination","qualname":"::adaptors::Tuple3Combination","value":"Tuple3Combination {  }","parent":null,"children":[{"krate":0,"index":3068},{"krate":0,"index":3069},{"krate":0,"index":3070}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3094},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146196,"byte_end":146213,"line_start":832,"line_end":832,"column_start":25,"column_end":42},"name":"Tuple4Combination","qualname":"::adaptors::Tuple4Combination","value":"Tuple4Combination {  }","parent":null,"children":[{"krate":0,"index":3096},{"krate":0,"index":3097},{"krate":0,"index":3098}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3122},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146265,"byte_end":146282,"line_start":833,"line_end":833,"column_start":25,"column_end":42},"name":"Tuple5Combination","qualname":"::adaptors::Tuple5Combination","value":"Tuple5Combination {  }","parent":null,"children":[{"krate":0,"index":3124},{"krate":0,"index":3125},{"krate":0,"index":3126}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3150},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146336,"byte_end":146353,"line_start":834,"line_end":834,"column_start":25,"column_end":42},"name":"Tuple6Combination","qualname":"::adaptors::Tuple6Combination","value":"Tuple6Combination {  }","parent":null,"children":[{"krate":0,"index":3152},{"krate":0,"index":3153},{"krate":0,"index":3154}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3178},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146409,"byte_end":146426,"line_start":835,"line_end":835,"column_start":25,"column_end":42},"name":"Tuple7Combination","qualname":"::adaptors::Tuple7Combination","value":"Tuple7Combination {  }","parent":null,"children":[{"krate":0,"index":3180},{"krate":0,"index":3181},{"krate":0,"index":3182}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3206},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146484,"byte_end":146501,"line_start":836,"line_end":836,"column_start":25,"column_end":42},"name":"Tuple8Combination","qualname":"::adaptors::Tuple8Combination","value":"Tuple8Combination {  }","parent":null,"children":[{"krate":0,"index":3208},{"krate":0,"index":3209},{"krate":0,"index":3210}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3234},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146561,"byte_end":146578,"line_start":837,"line_end":837,"column_start":25,"column_end":42},"name":"Tuple9Combination","qualname":"::adaptors::Tuple9Combination","value":"Tuple9Combination {  }","parent":null,"children":[{"krate":0,"index":3236},{"krate":0,"index":3237},{"krate":0,"index":3238}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3262},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146640,"byte_end":146658,"line_start":838,"line_end":838,"column_start":25,"column_end":43},"name":"Tuple10Combination","qualname":"::adaptors::Tuple10Combination","value":"Tuple10Combination {  }","parent":null,"children":[{"krate":0,"index":3264},{"krate":0,"index":3265},{"krate":0,"index":3266}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3290},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146722,"byte_end":146740,"line_start":839,"line_end":839,"column_start":25,"column_end":43},"name":"Tuple11Combination","qualname":"::adaptors::Tuple11Combination","value":"Tuple11Combination {  }","parent":null,"children":[{"krate":0,"index":3292},{"krate":0,"index":3293},{"krate":0,"index":3294}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3318},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146807,"byte_end":146825,"line_start":840,"line_end":840,"column_start":25,"column_end":43},"name":"Tuple12Combination","qualname":"::adaptors::Tuple12Combination","value":"Tuple12Combination {  }","parent":null,"children":[{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3329},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":147124,"byte_end":147132,"line_start":847,"line_end":847,"column_start":12,"column_end":20},"name":"FilterOk","qualname":"::adaptors::FilterOk","value":"FilterOk {  }","parent":null,"children":[{"krate":0,"index":3332},{"krate":0,"index":3333}],"decl_id":null,"docs":" An iterator adapter to filter values within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter values within a nested `Result::Ok`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146871,"byte_end":146941,"line_start":842,"line_end":842,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146942,"byte_end":146945,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_ok()`](crate::Itertools::filter_ok) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":146946,"byte_end":147021,"line_start":844,"line_end":844,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":147039,"byte_end":147112,"line_start":846,"line_end":846,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":790},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":149020,"byte_end":149031,"line_start":922,"line_end":922,"column_start":12,"column_end":23},"name":"FilterMapOk","qualname":"::adaptors::FilterMapOk","value":"FilterMapOk {  }","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794}],"decl_id":null,"docs":" An iterator adapter to filter and apply a transformation on values within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter and apply a transformation on values within a nested `Result::Ok`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":148746,"byte_end":148846,"line_start":918,"line_end":918,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":148847,"byte_end":148850,"line_start":919,"line_end":919,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_map_ok()`](crate::Itertools::filter_map_ok) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":148851,"byte_end":148934,"line_start":920,"line_end":920,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":148935,"byte_end":149008,"line_start":921,"line_end":921,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3340},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":151168,"byte_end":151177,"line_start":1006,"line_end":1006,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":3343},{"krate":0,"index":3344},{"krate":0,"index":3345}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"/ An iterator adapter to get the positions of each element that matches a predicate.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":150899,"byte_end":150985,"line_start":1001,"line_end":1001,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":150986,"byte_end":150989,"line_start":1002,"line_end":1002,"column_start":1,"column_end":4}},{"value":"/ See [`.positions()`](crate::Itertools::positions) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":150990,"byte_end":151065,"line_start":1003,"line_end":1003,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":151083,"byte_end":151156,"line_start":1005,"line_end":1005,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3351},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152821,"byte_end":152827,"line_start":1077,"line_end":1077,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":3354},{"krate":0,"index":3355}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a mutating function to each element before yielding it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152556,"byte_end":152644,"line_start":1072,"line_end":1072,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152645,"byte_end":152648,"line_start":1073,"line_end":1073,"column_start":1,"column_end":4}},{"value":"/ See [`.update()`](crate::Itertools::update) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152649,"byte_end":152718,"line_start":1074,"line_end":1074,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152736,"byte_end":152809,"line_start":1076,"line_end":1076,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3364},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170609,"byte_end":170613,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[{"value":"/ Both values are present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170576,"byte_end":170604,"line_start":8,"line_end":8,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3368},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170677,"byte_end":170681,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[{"value":"/ Only the left value of type `A` is present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170625,"byte_end":170672,"line_start":10,"line_end":10,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3371},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170743,"byte_end":170748,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[{"value":"/ Only the right value of type `B` is present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170690,"byte_end":170738,"line_start":12,"line_end":12,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":3361},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170551,"byte_end":170563,"line_start":7,"line_end":7,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"pub enum EitherOrBoth<A, B> { Both(A, B), Left(A), Right(B), }","parent":null,"children":[{"krate":0,"index":3364},{"krate":0,"index":3368},{"krate":0,"index":3371}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"/ Value that either holds a single A or B, or both.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170443,"byte_end":170496,"line_start":5,"line_end":5,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170867,"byte_end":170875,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"has_left","qualname":"<EitherOrBoth<A, B>>::has_left","value":"pub fn has_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170792,"byte_end":170855,"line_start":17,"line_end":17,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171019,"byte_end":171028,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"has_right","qualname":"<EitherOrBoth<A, B>>::has_right","value":"pub fn has_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170943,"byte_end":171007,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171225,"byte_end":171232,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"is_left","qualname":"<EitherOrBoth<A, B>>::is_left","value":"pub fn is_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Left, return true otherwise, return false.\n Exclusive version of [`has_left`](EitherOrBoth::has_left).\n","sig":null,"attributes":[{"value":"/ If Left, return true otherwise, return false.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171097,"byte_end":171146,"line_start":27,"line_end":27,"column_start":5,"column_end":54}},{"value":"/ Exclusive version of [`has_left`](EitherOrBoth::has_left).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171151,"byte_end":171213,"line_start":28,"line_end":28,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171477,"byte_end":171485,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_right","qualname":"<EitherOrBoth<A, B>>::is_right","value":"pub fn is_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Exclusive version of [`has_right`](EitherOrBoth::has_right).\n","sig":null,"attributes":[{"value":"/ If Right, return true otherwise, return false.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171346,"byte_end":171396,"line_start":36,"line_end":36,"column_start":5,"column_end":55}},{"value":"/ Exclusive version of [`has_right`](EitherOrBoth::has_right).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171401,"byte_end":171465,"line_start":37,"line_end":37,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171718,"byte_end":171725,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"is_both","qualname":"<EitherOrBoth<A, B>>::is_both","value":"pub fn is_both(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Equivalent to `self.as_ref().both().is_some()`.\n","sig":null,"attributes":[{"value":"/ If Right, return true otherwise, return false.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171600,"byte_end":171650,"line_start":45,"line_end":45,"column_start":5,"column_end":55}},{"value":"/ Equivalent to `self.as_ref().both().is_some()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171655,"byte_end":171706,"line_start":46,"line_end":46,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171891,"byte_end":171895,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"left","qualname":"<EitherOrBoth<A, B>>::left","value":"pub fn left(Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":171793,"byte_end":171879,"line_start":51,"line_end":51,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":172136,"byte_end":172141,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"right","qualname":"<EitherOrBoth<A, B>>::right","value":"pub fn right(Self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":172036,"byte_end":172124,"line_start":59,"line_end":59,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":172357,"byte_end":172361,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"both","qualname":"<EitherOrBoth<A, B>>::both","value":"pub fn both(Self) -> Option<(A, B)>","parent":null,"children":[],"decl_id":null,"docs":" If Both, return `Some` tuple containing left and right.\n","sig":null,"attributes":[{"value":"/ If Both, return `Some` tuple containing left and right.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":172286,"byte_end":172345,"line_start":67,"line_end":67,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":172571,"byte_end":172577,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<EitherOrBoth<A, B>>::as_ref","value":"pub fn as_ref(&Self) -> EitherOrBoth<&A, &B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":172493,"byte_end":172559,"line_start":75,"line_end":75,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":172892,"byte_end":172898,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<EitherOrBoth<A, B>>::as_mut","value":"pub fn as_mut(&mut Self) -> EitherOrBoth<&mut A, &mut B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":172802,"byte_end":172880,"line_start":84,"line_end":84,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":173220,"byte_end":173224,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"flip","qualname":"<EitherOrBoth<A, B>>::flip","value":"pub fn flip(Self) -> EitherOrBoth<B, A>","parent":null,"children":[],"decl_id":null,"docs":" Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.\n","sig":null,"attributes":[{"value":"/ Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":173151,"byte_end":173208,"line_start":93,"line_end":93,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":173572,"byte_end":173580,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"map_left","qualname":"<EitherOrBoth<A, B>>::map_left","value":"pub fn map_left<F, M>(Self, F) -> EitherOrBoth<M, B> where F: FnOnce(A) -> M","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is\n present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":173401,"byte_end":173492,"line_start":102,"line_end":102,"column_start":5,"column_end":96}},{"value":"/ present rewrapping the result in `self`'s original variant.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":173497,"byte_end":173560,"line_start":103,"line_end":103,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":173988,"byte_end":173997,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"map_right","qualname":"<EitherOrBoth<A, B>>::map_right","value":"pub fn map_right<F, M>(Self, F) -> EitherOrBoth<A, M> where F: FnOnce(B) -> M","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.\n If it is present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":173816,"byte_end":173899,"line_start":115,"line_end":115,"column_start":5,"column_end":88}},{"value":"/ If it is present rewrapping the result in `self`'s original variant.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":173904,"byte_end":173976,"line_start":116,"line_end":116,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":174444,"byte_end":174451,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"map_any","qualname":"<EitherOrBoth<A, B>>::map_any","value":"pub fn map_any<F, L, G, R>(Self, F, G) -> EitherOrBoth<L, R> where\nF: FnOnce(A) -> L, G: FnOnce(B) -> R","parent":null,"children":[],"decl_id":null,"docs":" Apply the functions `f` and `g` on the value `a` and `b` respectively;\n found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.\n The Result is rewrapped `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the functions `f` and `g` on the value `a` and `b` respectively;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":174233,"byte_end":174307,"line_start":128,"line_end":128,"column_start":5,"column_end":79}},{"value":"/ found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":174312,"byte_end":174373,"line_start":129,"line_end":129,"column_start":5,"column_end":66}},{"value":"/ The Result is rewrapped `self`'s original variant.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":174378,"byte_end":174432,"line_start":130,"line_end":130,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":174851,"byte_end":174864,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"left_and_then","qualname":"<EitherOrBoth<A, B>>::left_and_then","value":"pub fn left_and_then<F, L>(Self, F) -> EitherOrBoth<L, B> where F: FnOnce(A)\n-> EitherOrBoth<L, B>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a` in `Left(a)` or `Both(a, _)` variants if it is\n present.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `a` in `Left(a)` or `Both(a, _)` variants if it is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":174732,"byte_end":174822,"line_start":143,"line_end":143,"column_start":5,"column_end":95}},{"value":"/ present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":174827,"byte_end":174839,"line_start":144,"line_end":144,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175203,"byte_end":175217,"line_start":157,"line_end":157,"column_start":12,"column_end":26},"name":"right_and_then","qualname":"<EitherOrBoth<A, B>>::right_and_then","value":"pub fn right_and_then<F, R>(Self, F) -> EitherOrBoth<A, R> where F: FnOnce(B)\n-> EitherOrBoth<A, R>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b`\n in `Right(b)` or `Both(_, b)` variants if it is present.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `b`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175083,"byte_end":175126,"line_start":155,"line_end":155,"column_start":5,"column_end":48}},{"value":"/ in `Right(b)` or `Both(_, b)` variants if it is present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175131,"byte_end":175191,"line_start":156,"line_end":156,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175656,"byte_end":175666,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"or_default","qualname":"<EitherOrBoth<A, B>>::or_default","value":"pub fn or_default(Self) -> (A, B) where A: Default, B: Default","parent":null,"children":[],"decl_id":null,"docs":" Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.\n Otherwise, returns the wrapped value for the present element, and the [`default`](Default::default)\n for the other.\n","sig":null,"attributes":[{"value":"/ Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175435,"byte_end":175513,"line_start":167,"line_end":167,"column_start":5,"column_end":83}},{"value":"/ Otherwise, returns the wrapped value for the present element, and the [`default`](Default::default)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175518,"byte_end":175621,"line_start":168,"line_end":168,"column_start":5,"column_end":108}},{"value":"/ for the other.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175626,"byte_end":175644,"line_start":169,"line_end":169,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":176080,"byte_end":176086,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"reduce","qualname":"<EitherOrBoth<T, T>>::reduce","value":"pub fn reduce<F>(Self, F) -> T where F: FnOnce(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return either value of left, right, or the product of `f` applied where `Both` are present.\n","sig":null,"attributes":[{"value":"/ Return either value of left, right, or the product of `f` applied where `Both` are present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175973,"byte_end":176068,"line_start":184,"line_end":184,"column_start":5,"column_end":100}}]},{"kind":"Mod","id":{"krate":0,"index":925},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":974},{"krate":0,"index":977},{"krate":0,"index":980},{"krate":0,"index":983},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1002},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1018}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[{"value":"/ Free functions that create iterator adaptors or call iterator methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":176573,"byte_end":176647,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":176648,"byte_end":176651,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The benefit of free functions is that they accept any [`IntoIterator`] as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":176652,"byte_end":176729,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ argument, so the resulting code may be easier to read.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":176730,"byte_end":176788,"line_start":4,"line_end":4,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":983},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177874,"byte_end":177885,"line_start":47,"line_end":47,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::free::intersperse","value":"pub fn intersperse<I>(I, I::Item) -> Intersperse<I::IntoIter> where\nI: IntoIterator, <I as IntoIterator>::Item: Clone","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a particular value inserted between each element.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a particular value inserted between each element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177588,"byte_end":177665,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177666,"byte_end":177669,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::intersperse`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177670,"byte_end":177736,"line_start":40,"line_end":40,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177737,"byte_end":177740,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177741,"byte_end":177748,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ use itertools::intersperse;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177749,"byte_end":177780,"line_start":43,"line_end":43,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177781,"byte_end":177784,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(intersperse((0..3), 8), vec![0, 8, 1, 8, 2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177785,"byte_end":177858,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":177859,"byte_end":177866,"line_start":46,"line_end":46,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":985},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178465,"byte_end":178481,"line_start":66,"line_end":66,"column_start":8,"column_end":24},"name":"intersperse_with","qualname":"::free::intersperse_with","value":"pub fn intersperse_with<I, F>(I, F) -> IntersperseWith<I::IntoIter, F> where\nI: IntoIterator, F: FnMut() -> I::Item","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a particular value created by a function inserted\n between each element.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a particular value created by a function inserted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178081,"byte_end":178158,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/ between each element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178159,"byte_end":178184,"line_start":55,"line_end":55,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178185,"byte_end":178188,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::intersperse_with`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178189,"byte_end":178260,"line_start":57,"line_end":57,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178261,"byte_end":178264,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178265,"byte_end":178272,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use itertools::intersperse_with;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178273,"byte_end":178309,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178310,"byte_end":178313,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ let mut i = 10;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178314,"byte_end":178333,"line_start":62,"line_end":62,"column_start":1,"column_end":20}},{"value":"/ itertools::assert_equal(intersperse_with((0..3), || { i -= 1; i }), vec![0, 9, 1, 8, 2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178334,"byte_end":178427,"line_start":63,"line_end":63,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(i, 8);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178428,"byte_end":178449,"line_start":64,"line_end":64,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178450,"byte_end":178457,"line_start":65,"line_end":65,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":988},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178924,"byte_end":178933,"line_start":84,"line_end":84,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"pub fn enumerate<I>(I) -> iter::Enumerate<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a running index.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178675,"byte_end":178719,"line_start":73,"line_end":73,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178720,"byte_end":178723,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::enumerate`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178724,"byte_end":178788,"line_start":75,"line_end":75,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178789,"byte_end":178792,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178793,"byte_end":178800,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use itertools::enumerate;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178801,"byte_end":178830,"line_start":78,"line_end":78,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178831,"byte_end":178834,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ for (i, elt) in enumerate(&[1, 2, 3]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178835,"byte_end":178878,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"/     /* loop body */","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178879,"byte_end":178902,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178903,"byte_end":178908,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":178909,"byte_end":178916,"line_start":83,"line_end":83,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":990},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179266,"byte_end":179269,"line_start":101,"line_end":101,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"pub fn rev<I>(I) -> iter::Rev<I::IntoIter> where I: IntoIterator,\nI::IntoIter: DoubleEndedIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[{"value":"/ Iterate `iterable` in reverse.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179050,"byte_end":179084,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179085,"byte_end":179088,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::rev`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179089,"byte_end":179147,"line_start":92,"line_end":92,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179148,"byte_end":179151,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179152,"byte_end":179159,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/ use itertools::rev;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179160,"byte_end":179183,"line_start":95,"line_end":95,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179184,"byte_end":179187,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ for elt in rev(&[1, 2, 3]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179188,"byte_end":179220,"line_start":97,"line_end":97,"column_start":1,"column_end":33}},{"value":"/     /* loop body */","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179221,"byte_end":179244,"line_start":98,"line_end":98,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179245,"byte_end":179250,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179251,"byte_end":179258,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":992},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179679,"byte_end":179682,"line_start":120,"line_end":120,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"pub fn zip<I, J>(I, J) -> Zip<I::IntoIter, J::IntoIter> where I: IntoIterator,\nJ: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179418,"byte_end":179455,"line_start":108,"line_end":108,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179456,"byte_end":179459,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::zip`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179460,"byte_end":179518,"line_start":110,"line_end":110,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179519,"byte_end":179522,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179523,"byte_end":179530,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179531,"byte_end":179554,"line_start":113,"line_end":113,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179555,"byte_end":179558,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179559,"byte_end":179590,"line_start":115,"line_end":115,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip(&data, &data[1..]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179591,"byte_end":179633,"line_start":116,"line_end":116,"column_start":1,"column_end":43}},{"value":"/     /* loop body */","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179634,"byte_end":179657,"line_start":117,"line_end":117,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179658,"byte_end":179663,"line_start":118,"line_end":118,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179664,"byte_end":179671,"line_start":119,"line_end":119,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":995},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180071,"byte_end":180076,"line_start":138,"line_end":138,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"pub fn chain<I, J>(I, J)\n-> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that first iterates `i` and then `j`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179817,"byte_end":179877,"line_start":127,"line_end":127,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179878,"byte_end":179881,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::chain`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179882,"byte_end":179942,"line_start":129,"line_end":129,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179943,"byte_end":179946,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179947,"byte_end":179954,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/ use itertools::chain;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179955,"byte_end":179980,"line_start":132,"line_end":132,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179981,"byte_end":179984,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ for elt in chain(&[1, 2, 3], &[4]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":179985,"byte_end":180025,"line_start":134,"line_end":134,"column_start":1,"column_end":41}},{"value":"/     /* loop body */","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180026,"byte_end":180049,"line_start":135,"line_end":135,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180050,"byte_end":180055,"line_start":136,"line_end":136,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180056,"byte_end":180063,"line_start":137,"line_end":137,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":998},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180509,"byte_end":180515,"line_start":154,"line_end":154,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"pub fn cloned<'a, I, T: 'a>(I) -> iter::Cloned<I::IntoIter> where\nI: IntoIterator<Item = &'a T>, T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[{"value":"/ Create an iterator that clones each element from &T to T","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180273,"byte_end":180333,"line_start":145,"line_end":145,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180334,"byte_end":180337,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::cloned`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180338,"byte_end":180399,"line_start":147,"line_end":147,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180400,"byte_end":180403,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180404,"byte_end":180411,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use itertools::cloned;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180412,"byte_end":180438,"line_start":150,"line_end":150,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180439,"byte_end":180442,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(cloned(b\"abc\").next(), Some(b'a'));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180443,"byte_end":180493,"line_start":152,"line_end":152,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180494,"byte_end":180501,"line_start":153,"line_end":153,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1002},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180907,"byte_end":180911,"line_start":170,"line_end":170,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"pub fn fold<I, B, F>(I, B, F) -> B where I: IntoIterator, F: FnMut(B, I::Item)\n-> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[{"value":"/ Perform a fold operation over the iterable.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180670,"byte_end":180717,"line_start":161,"line_end":161,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180718,"byte_end":180721,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::fold`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180722,"byte_end":180781,"line_start":163,"line_end":163,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180782,"byte_end":180785,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180786,"byte_end":180793,"line_start":165,"line_end":165,"column_start":1,"column_end":8}},{"value":"/ use itertools::fold;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180794,"byte_end":180818,"line_start":166,"line_end":166,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180819,"byte_end":180822,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fold(&[1., 2., 3.], 0., |a, &b| f32::max(a, b)), 3.);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180823,"byte_end":180891,"line_start":168,"line_end":168,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":180892,"byte_end":180899,"line_start":169,"line_end":169,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1006},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181296,"byte_end":181299,"line_start":186,"line_end":186,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"pub fn all<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for all elements in the iterable.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181061,"byte_end":181131,"line_start":177,"line_end":177,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181132,"byte_end":181135,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::all`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181136,"byte_end":181194,"line_start":179,"line_end":179,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181195,"byte_end":181198,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181199,"byte_end":181206,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ use itertools::all;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181207,"byte_end":181230,"line_start":182,"line_end":182,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181231,"byte_end":181234,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ assert!(all(&[1, 2, 3], |elt| *elt > 0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181235,"byte_end":181280,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181281,"byte_end":181288,"line_start":185,"line_end":185,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1009},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181669,"byte_end":181672,"line_start":202,"line_end":202,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"pub fn any<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for any elements in the iterable.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181433,"byte_end":181503,"line_start":193,"line_end":193,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181504,"byte_end":181507,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::any`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181508,"byte_end":181566,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181567,"byte_end":181570,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181571,"byte_end":181578,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ use itertools::any;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181579,"byte_end":181602,"line_start":198,"line_end":198,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181603,"byte_end":181606,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ assert!(any(&[0, -1, 2], |elt| *elt > 0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181607,"byte_end":181653,"line_start":200,"line_end":200,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181654,"byte_end":181661,"line_start":201,"line_end":201,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1012},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182007,"byte_end":182010,"line_start":218,"line_end":218,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"pub fn max<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the maximum value of the iterable.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181806,"byte_end":181851,"line_start":209,"line_end":209,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181852,"byte_end":181855,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::max`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181856,"byte_end":181914,"line_start":211,"line_end":211,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181915,"byte_end":181918,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181919,"byte_end":181926,"line_start":213,"line_end":213,"column_start":1,"column_end":8}},{"value":"/ use itertools::max;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181927,"byte_end":181950,"line_start":214,"line_end":214,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181951,"byte_end":181954,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(max(0..10), Some(9));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181955,"byte_end":181991,"line_start":216,"line_end":216,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":181992,"byte_end":181999,"line_start":217,"line_end":217,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1014},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182333,"byte_end":182336,"line_start":234,"line_end":234,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"pub fn min<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the minimum value of the iterable.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182132,"byte_end":182177,"line_start":225,"line_end":225,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182178,"byte_end":182181,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::min`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182182,"byte_end":182240,"line_start":227,"line_end":227,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182241,"byte_end":182244,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182245,"byte_end":182252,"line_start":229,"line_end":229,"column_start":1,"column_end":8}},{"value":"/ use itertools::min;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182253,"byte_end":182276,"line_start":230,"line_end":230,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182277,"byte_end":182280,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(min(0..10), Some(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182281,"byte_end":182317,"line_start":232,"line_end":232,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182318,"byte_end":182325,"line_start":233,"line_end":233,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1016},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182732,"byte_end":182736,"line_start":252,"line_end":252,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"pub fn join<I>(I, &str) -> String where I: IntoIterator, I::Item: Display","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, seperated by `sep`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182459,"byte_end":182529,"line_start":242,"line_end":242,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182530,"byte_end":182533,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::join`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182534,"byte_end":182594,"line_start":244,"line_end":244,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182595,"byte_end":182598,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182599,"byte_end":182606,"line_start":246,"line_end":246,"column_start":1,"column_end":8}},{"value":"/ use itertools::join;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182607,"byte_end":182631,"line_start":247,"line_end":247,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182632,"byte_end":182635,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(join(&[1, 2, 3], \", \"), \"1, 2, 3\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182636,"byte_end":182686,"line_start":249,"line_end":249,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182687,"byte_end":182694,"line_start":250,"line_end":250,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182695,"byte_end":182724,"line_start":251,"line_end":251,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1018},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183185,"byte_end":183191,"line_start":270,"line_end":270,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"pub fn sorted<I>(I) -> VecIntoIter<I::Item> where I: IntoIterator,\nI::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182868,"byte_end":182938,"line_start":259,"line_end":259,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182939,"byte_end":182942,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::sorted`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":182943,"byte_end":183005,"line_start":261,"line_end":261,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183006,"byte_end":183009,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183010,"byte_end":183017,"line_start":263,"line_end":263,"column_start":1,"column_end":8}},{"value":"/ use itertools::sorted;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183018,"byte_end":183044,"line_start":264,"line_end":264,"column_start":1,"column_end":27}},{"value":"/ use itertools::assert_equal;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183045,"byte_end":183077,"line_start":265,"line_end":265,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183078,"byte_end":183081,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ assert_equal(sorted(\"rust\".chars()), \"rstu\".chars());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183082,"byte_end":183139,"line_start":267,"line_end":267,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183140,"byte_end":183147,"line_start":268,"line_end":268,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/free.rs","byte_start":183148,"byte_end":183177,"line_start":269,"line_end":269,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1025},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183846,"byte_end":183852,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"pub fn concat<I>(I) -> I::Item where I: IntoIterator,\nI::Item: Extend<<<I as IntoIterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using [`Extend`].","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using [`Extend`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183345,"byte_end":183421,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183422,"byte_end":183425,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`]-enabled version of [`Itertools::concat`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183426,"byte_end":183488,"line_start":5,"line_end":5,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183489,"byte_end":183492,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183493,"byte_end":183568,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183569,"byte_end":183642,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183643,"byte_end":183669,"line_start":9,"line_end":9,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183670,"byte_end":183673,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183674,"byte_end":183685,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ use itertools::concat;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183686,"byte_end":183712,"line_start":12,"line_end":12,"column_start":1,"column_end":27}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183713,"byte_end":183717,"line_start":13,"line_end":13,"column_start":1,"column_end":5}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183718,"byte_end":183775,"line_start":14,"line_end":14,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(concat(input), vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183776,"byte_end":183830,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/concat_impl.rs","byte_start":183831,"byte_end":183838,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3692},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185635,"byte_end":185645,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":3695}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"/ An iterator that maps an iterator of tuples like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185390,"byte_end":185442,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ `((A, B), C)` to an iterator of `(A, B, C)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185443,"byte_end":185491,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185492,"byte_end":185495,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Used by the `iproduct!()` macro.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185496,"byte_end":185532,"line_start":43,"line_end":43,"column_start":1,"column_end":37}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185533,"byte_end":185606,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1033},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185907,"byte_end":185918,"line_start":60,"line_end":60,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"pub fn cons_tuples<I, J>(I) -> ConsTuples<I::IntoIter, J> where\nI: IntoIterator<Item = J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that maps for example iterators of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185808,"byte_end":185865,"line_start":58,"line_end":58,"column_start":1,"column_end":58}},{"value":"/ `((A, B), C)` to `(A, B, C)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185866,"byte_end":185899,"line_start":59,"line_end":59,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1049},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186410,"byte_end":186422,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053}],"decl_id":null,"docs":" An iterator to iterate through all the `k`-length combinations in an iterator.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `k`-length combinations in an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186156,"byte_end":186238,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186239,"byte_end":186242,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations()`](crate::Itertools::combinations) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186243,"byte_end":186324,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186325,"byte_end":186398,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187252,"byte_end":187253,"line_start":48,"line_end":48,"column_start":12,"column_end":13},"name":"k","qualname":"<Combinations<I>>::k","value":"pub fn k(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of a combination produced by this iterator.\n","sig":null,"attributes":[{"value":"/ Returns the length of a combination produced by this iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187160,"byte_end":187226,"line_start":46,"line_end":46,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187231,"byte_end":187240,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187497,"byte_end":187498,"line_start":53,"line_end":53,"column_start":12,"column_end":13},"name":"n","qualname":"<Combinations<I>>::n","value":"pub fn n(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the (current) length of the pool from which combination elements are\n selected. This value can change between invocations of [`next`](Combinations::next).\n","sig":null,"attributes":[{"value":"/ Returns the (current) length of the pool from which combination elements are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187298,"byte_end":187378,"line_start":50,"line_end":50,"column_start":5,"column_end":85}},{"value":"/ selected. This value can change between invocations of [`next`](Combinations::next).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187383,"byte_end":187471,"line_start":51,"line_end":51,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187476,"byte_end":187485,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3703},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":190185,"byte_end":190212,"line_start":12,"line_end":12,"column_start":12,"column_end":39},"name":"CombinationsWithReplacement","qualname":"::combinations_with_replacement::CombinationsWithReplacement","value":"CombinationsWithReplacement {  }","parent":null,"children":[{"krate":0,"index":3705},{"krate":0,"index":3706},{"krate":0,"index":3707}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":189932,"byte_end":190032,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":190033,"byte_end":190036,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations_with_replacement()`](crate::Itertools::combinations_with_replacement)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":190037,"byte_end":190130,"line_start":9,"line_end":9,"column_start":1,"column_end":94}},{"value":"/ for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":190131,"byte_end":190156,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":3712},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193579,"byte_end":193594,"line_start":20,"line_end":20,"column_start":12,"column_end":27},"name":"ExactlyOneError","qualname":"::exactly_one_err::ExactlyOneError","value":"ExactlyOneError {  }","parent":null,"children":[{"krate":0,"index":3714},{"krate":0,"index":3716}],"decl_id":null,"docs":" Iterator returned for the error case of `IterTools::exactly_one()`\n This iterator yields exactly the same elements as the input iterator.","sig":null,"attributes":[{"value":"/ Iterator returned for the error case of `IterTools::exactly_one()`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193117,"byte_end":193187,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ This iterator yields exactly the same elements as the input iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193188,"byte_end":193261,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193262,"byte_end":193265,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ During the execution of exactly_one the iterator must be mutated.  This wrapper","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193266,"byte_end":193349,"line_start":14,"line_end":14,"column_start":1,"column_end":84}},{"value":"/ effectively \"restores\" the state of the input iterator when it's handed back.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193350,"byte_end":193431,"line_start":15,"line_end":15,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193432,"byte_end":193435,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is very similar to PutBackN except this iterator only supports 0-2 elements and does not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193436,"byte_end":193533,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"/ use a `Vec`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193534,"byte_end":193550,"line_start":18,"line_end":18,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1156},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196767,"byte_end":196780,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":1153},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[{"value":"/ The index of the first non-matching element along with both iterator's remaining elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196626,"byte_end":196719,"line_start":19,"line_end":19,"column_start":5,"column_end":98}},{"value":"/ starting with the first mis-match.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196724,"byte_end":196762,"line_start":20,"line_end":20,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1161},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196913,"byte_end":196920,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":1153},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `J` along with the remaining elements of `I`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196817,"byte_end":196908,"line_start":22,"line_end":22,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1165},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197041,"byte_end":197047,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":1153},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `I` along with the remaining elements of `J`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196945,"byte_end":197036,"line_start":24,"line_end":24,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":1153},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196564,"byte_end":196568,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"pub enum Diff<I, J> where I: Iterator, J: Iterator {\n    FirstMismatch(usize, PutBack<I>, PutBack<J>),\n    Shorter(usize, PutBack<I>),\n    Longer(usize, PutBack<J>),\n}","parent":null,"children":[{"krate":0,"index":1156},{"krate":0,"index":1161},{"krate":0,"index":1165}],"decl_id":null,"docs":" A type returned by the [`diff_with`] function.","sig":null,"attributes":[{"value":"/ A type returned by the [`diff_with`] function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196387,"byte_end":196437,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196438,"byte_end":196441,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `Diff` represents the way in which the elements yielded by the iterator `I` differ to some","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196442,"byte_end":196536,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ iterator `J`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":196537,"byte_end":196554,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1169},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197798,"byte_end":197807,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"pub fn diff_with<I, J, F>(I, J, F) -> Option<Diff<I::IntoIter, J::IntoIter>>\nwhere I: IntoIterator, J: IntoIterator, F: Fn(&I::Item, &J::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a [`Diff`] which describes how `j` differs from `i`.","sig":null,"attributes":[{"value":"/ Compares every element yielded by both `i` and `j` with the given function in lock-step and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197071,"byte_end":197166,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ returns a [`Diff`] which describes how `j` differs from `i`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197167,"byte_end":197231,"line_start":29,"line_end":29,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197232,"byte_end":197235,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If the number of elements yielded by `j` is less than the number of elements yielded by `i`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197236,"byte_end":197332,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ the number of `j` elements yielded will be returned along with `i`'s remaining elements as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197333,"byte_end":197427,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ `Diff::Shorter`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197428,"byte_end":197448,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197449,"byte_end":197452,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the two elements of a step differ, the index of those elements along with the remaining","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197453,"byte_end":197547,"line_start":35,"line_end":35,"column_start":1,"column_end":95}},{"value":"/ elements of both `i` and `j` are returned as `Diff::FirstMismatch`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197548,"byte_end":197619,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197620,"byte_end":197623,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ If `i` becomes exhausted before `j` becomes exhausted, the number of elements in `i` along with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197624,"byte_end":197723,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ the remaining `j` elements will be returned as `Diff::Longer`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/diff.rs","byte_start":197724,"byte_end":197790,"line_start":39,"line_end":39,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1193},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":199215,"byte_end":199224,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"FlattenOk","qualname":"::flatten_ok::FlattenOk","value":"FlattenOk {  }","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199}],"decl_id":null,"docs":" An iterator adaptor that flattens `Result::Ok` values and\n allows `Result::Err` values through unchanged.","sig":null,"attributes":[{"value":"/ An iterator adaptor that flattens `Result::Ok` values and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":198935,"byte_end":198996,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/ allows `Result::Err` values through unchanged.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":198997,"byte_end":199047,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":199048,"byte_end":199051,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`.flatten_ok()`](crate::Itertools::flatten_ok) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":199052,"byte_end":199129,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":199130,"byte_end":199203,"line_start":23,"line_end":23,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3721},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204258,"byte_end":204268,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":3725},{"krate":0,"index":3726}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":203990,"byte_end":204050,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204051,"byte_end":204054,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204055,"byte_end":204130,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204131,"byte_end":204145,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204146,"byte_end":204149,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.format_with()`](crate::Itertools::format_with) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204150,"byte_end":204229,"line_start":9,"line_end":9,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":3732},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204678,"byte_end":204684,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":3735},{"krate":0,"index":3736}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204416,"byte_end":204476,"line_start":17,"line_end":17,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204477,"byte_end":204480,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204481,"byte_end":204556,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204557,"byte_end":204571,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204572,"byte_end":204575,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`.format()`](crate::Itertools::format)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204576,"byte_end":204623,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/ for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":204624,"byte_end":204649,"line_start":23,"line_end":23,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":3777},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":207566,"byte_end":207580,"line_start":12,"line_end":12,"column_start":12,"column_end":26},"name":"MapForGrouping","qualname":"::grouping_map::MapForGrouping","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper to allow for an easy [`into_grouping_map_by`](crate::Itertools::into_grouping_map_by)\n","sig":null,"attributes":[{"value":"/ A wrapper to allow for an easy [`into_grouping_map_by`](crate::Itertools::into_grouping_map_by)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":207431,"byte_end":207530,"line_start":10,"line_end":10,"column_start":1,"column_end":100}}]},{"kind":"Type","id":{"krate":0,"index":1292},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208399,"byte_end":208412,"line_start":43,"line_end":43,"column_start":10,"column_end":23},"name":"GroupingMapBy","qualname":"::grouping_map::GroupingMapBy","value":"GroupingMap<MapForGrouping<I, F>>","parent":null,"children":[],"decl_id":null,"docs":" `GroupingMapBy` is an intermediate struct for efficient group-and-fold operations.\n \n See [`GroupingMap`] for more informations.\n","sig":null,"attributes":[{"value":"/ `GroupingMapBy` is an intermediate struct for efficient group-and-fold operations.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208182,"byte_end":208268,"line_start":39,"line_end":39,"column_start":1,"column_end":87}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208269,"byte_end":208273,"line_start":40,"line_end":40,"column_start":1,"column_end":5}},{"value":"/ See [`GroupingMap`] for more informations.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208274,"byte_end":208320,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"must_use = \"GroupingMapBy is lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208321,"byte_end":208389,"line_start":42,"line_end":42,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":3791},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208821,"byte_end":208832,"line_start":52,"line_end":52,"column_start":12,"column_end":23},"name":"GroupingMap","qualname":"::grouping_map::GroupingMap","value":"GroupingMap {  }","parent":null,"children":[{"krate":0,"index":3793}],"decl_id":null,"docs":" `GroupingMap` is an intermediate struct for efficient group-and-fold operations.\n It groups elements by their key and at the same time fold each group\n using some aggregating operation.\n \n No method on this struct performs temporary allocations.\n","sig":null,"attributes":[{"value":"/ `GroupingMap` is an intermediate struct for efficient group-and-fold operations.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208457,"byte_end":208541,"line_start":45,"line_end":45,"column_start":1,"column_end":85}},{"value":"/ It groups elements by their key and at the same time fold each group","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208542,"byte_end":208614,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ using some aggregating operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208615,"byte_end":208652,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208653,"byte_end":208657,"line_start":48,"line_end":48,"column_start":1,"column_end":5}},{"value":"/ No method on this struct performs temporary allocations.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208658,"byte_end":208718,"line_start":49,"line_end":49,"column_start":1,"column_end":61}},{"value":"must_use = \"GroupingMap is lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208743,"byte_end":208809,"line_start":51,"line_end":51,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211005,"byte_end":211014,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"aggregate","qualname":"<GroupingMap<I>>::aggregate","value":"pub fn aggregate<FO, R>(Self, FO) -> HashMap<K, R> where\nFO: FnMut(Option<R>, &K, V) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" This is the generic way to perform any operation on a `GroupingMap`.\n It's suggested to use this method only to implement custom operations\n when the already provided ones are not enough.\n \n Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in an `HashMap`.","sig":null,"attributes":[{"value":"/ This is the generic way to perform any operation on a `GroupingMap`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208951,"byte_end":209023,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ It's suggested to use this method only to implement custom operations","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209028,"byte_end":209101,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ when the already provided ones are not enough.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209106,"byte_end":209156,"line_start":62,"line_end":62,"column_start":5,"column_end":55}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209161,"byte_end":209165,"line_start":63,"line_end":63,"column_start":5,"column_end":9}},{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209170,"byte_end":209266,"line_start":64,"line_end":64,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209271,"byte_end":209367,"line_start":65,"line_end":65,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in an `HashMap`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209372,"byte_end":209453,"line_start":66,"line_end":66,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209458,"byte_end":209461,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ The `operation` function is invoked on each element with the following parameters:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209466,"byte_end":209552,"line_start":68,"line_end":68,"column_start":5,"column_end":91}},{"value":"/  - the current value of the accumulator of the group if there is currently one;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209557,"byte_end":209640,"line_start":69,"line_end":69,"column_start":5,"column_end":88}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209645,"byte_end":209712,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being aggregated;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209717,"byte_end":209769,"line_start":71,"line_end":71,"column_start":5,"column_end":57}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209774,"byte_end":209778,"line_start":72,"line_end":72,"column_start":5,"column_end":9}},{"value":"/ If `operation` returns `Some(element)` then the accumulator is updated with `element`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209783,"byte_end":209873,"line_start":73,"line_end":73,"column_start":5,"column_end":95}},{"value":"/ otherwise the previous accumulation is discarded.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209878,"byte_end":209931,"line_start":74,"line_end":74,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209936,"byte_end":209939,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of aggregation of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":209944,"byte_end":210034,"line_start":76,"line_end":76,"column_start":5,"column_end":95}},{"value":"/ that group's elements. If the aggregation of the last element of a group discards the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210039,"byte_end":210128,"line_start":77,"line_end":77,"column_start":5,"column_end":94}},{"value":"/ accumulator then there won't be an entry associated to that group's key.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210133,"byte_end":210209,"line_start":78,"line_end":78,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210214,"byte_end":210218,"line_start":79,"line_end":79,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210223,"byte_end":210230,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210235,"byte_end":210264,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210269,"byte_end":210273,"line_start":82,"line_end":82,"column_start":5,"column_end":9}},{"value":"/ let data = vec![2, 8, 5, 7, 9, 0, 4, 10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210278,"byte_end":210323,"line_start":83,"line_end":83,"column_start":5,"column_end":50}},{"value":"/ let lookup = data.into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210328,"byte_end":210361,"line_start":84,"line_end":84,"column_start":5,"column_end":38}},{"value":"/     .into_grouping_map_by(|&n| n % 4)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210366,"byte_end":210407,"line_start":85,"line_end":85,"column_start":5,"column_end":46}},{"value":"/     .aggregate(|acc, _key, val| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210412,"byte_end":210449,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/         if val == 0 || val == 10 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210454,"byte_end":210492,"line_start":87,"line_end":87,"column_start":5,"column_end":43}},{"value":"/             None","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210497,"byte_end":210517,"line_start":88,"line_end":88,"column_start":5,"column_end":25}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210522,"byte_end":210542,"line_start":89,"line_end":89,"column_start":5,"column_end":25}},{"value":"/             Some(acc.unwrap_or(0) + val)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210547,"byte_end":210591,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210596,"byte_end":210609,"line_start":91,"line_end":91,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210614,"byte_end":210625,"line_start":92,"line_end":92,"column_start":5,"column_end":16}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210630,"byte_end":210634,"line_start":93,"line_end":93,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 4);        // 0 resets the accumulator so only 4 is summed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210639,"byte_end":210724,"line_start":94,"line_end":94,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(lookup[&1], 5 + 9);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210729,"byte_end":210763,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.get(&2), None); // 10 resets the accumulator and nothing is summed afterward","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210768,"byte_end":210866,"line_start":96,"line_end":96,"column_start":5,"column_end":103}},{"value":"/ assert_eq!(lookup[&3], 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210871,"byte_end":210901,"line_start":97,"line_end":97,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);      // The final keys are only 0, 1 and 2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210906,"byte_end":210981,"line_start":98,"line_end":98,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":210986,"byte_end":210993,"line_start":99,"line_end":99,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212625,"byte_end":212629,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"fold","qualname":"<GroupingMap<I>>::fold","value":"pub fn fold<FO, R>(Self, R, FO) -> HashMap<K, R> where R: Clone,\nFO: FnMut(R, &K, V) -> R","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in a new map.","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211448,"byte_end":211544,"line_start":115,"line_end":115,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211549,"byte_end":211645,"line_start":116,"line_end":116,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in a new map.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211650,"byte_end":211728,"line_start":117,"line_end":117,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211733,"byte_end":211736,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ `init` is the value from which will be cloned the initial value of each accumulator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211741,"byte_end":211829,"line_start":119,"line_end":119,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211834,"byte_end":211837,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ `operation` is a function that is invoked on each element with the following parameters:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211842,"byte_end":211934,"line_start":121,"line_end":121,"column_start":5,"column_end":97}},{"value":"/  - the current value of the accumulator of the group;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":211939,"byte_end":211996,"line_start":122,"line_end":122,"column_start":5,"column_end":62}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212001,"byte_end":212068,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being accumulated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212073,"byte_end":212126,"line_start":124,"line_end":124,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212131,"byte_end":212134,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of folding that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212139,"byte_end":212245,"line_start":126,"line_end":126,"column_start":5,"column_end":111}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212250,"byte_end":212254,"line_start":127,"line_end":127,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212259,"byte_end":212266,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212271,"byte_end":212300,"line_start":129,"line_end":129,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212305,"byte_end":212309,"line_start":130,"line_end":130,"column_start":5,"column_end":9}},{"value":"/ let lookup = (1..=7)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212314,"byte_end":212338,"line_start":131,"line_end":131,"column_start":5,"column_end":29}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212343,"byte_end":212384,"line_start":132,"line_end":132,"column_start":5,"column_end":46}},{"value":"/     .fold(0, |acc, _key, val| acc + val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212389,"byte_end":212434,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212439,"byte_end":212443,"line_start":134,"line_end":134,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 6);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212448,"byte_end":212482,"line_start":135,"line_end":135,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212487,"byte_end":212525,"line_start":136,"line_end":136,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 2 + 5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212530,"byte_end":212564,"line_start":137,"line_end":137,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212569,"byte_end":212601,"line_start":138,"line_end":138,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212606,"byte_end":212613,"line_start":139,"line_end":139,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214167,"byte_end":214177,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"fold_first","qualname":"<GroupingMap<I>>::fold_first","value":"pub fn fold_first<FO>(Self, FO) -> HashMap<K, V> where FO: FnMut(V, &K, V) ->\nV","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in a new map.","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":212923,"byte_end":213019,"line_start":150,"line_end":150,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213024,"byte_end":213120,"line_start":151,"line_end":151,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in a new map.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213125,"byte_end":213203,"line_start":152,"line_end":152,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213208,"byte_end":213211,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ This is similar to [`fold`] but the initial value of the accumulator is the first element of the group.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213216,"byte_end":213323,"line_start":154,"line_end":154,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213328,"byte_end":213331,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ `operation` is a function that is invoked on each element with the following parameters:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213336,"byte_end":213428,"line_start":156,"line_end":156,"column_start":5,"column_end":97}},{"value":"/  - the current value of the accumulator of the group;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213433,"byte_end":213490,"line_start":157,"line_end":157,"column_start":5,"column_end":62}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213495,"byte_end":213562,"line_start":158,"line_end":158,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being accumulated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213567,"byte_end":213620,"line_start":159,"line_end":159,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213625,"byte_end":213628,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of folding that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213633,"byte_end":213739,"line_start":161,"line_end":161,"column_start":5,"column_end":111}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213744,"byte_end":213748,"line_start":162,"line_end":162,"column_start":5,"column_end":9}},{"value":"/ [`fold`]: GroupingMap::fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213753,"byte_end":213784,"line_start":163,"line_end":163,"column_start":5,"column_end":36}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213789,"byte_end":213793,"line_start":164,"line_end":164,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213798,"byte_end":213805,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213810,"byte_end":213839,"line_start":166,"line_end":166,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213844,"byte_end":213848,"line_start":167,"line_end":167,"column_start":5,"column_end":9}},{"value":"/ let lookup = (1..=7)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213853,"byte_end":213877,"line_start":168,"line_end":168,"column_start":5,"column_end":29}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213882,"byte_end":213923,"line_start":169,"line_end":169,"column_start":5,"column_end":46}},{"value":"/     .fold_first(|acc, _key, val| acc + val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213928,"byte_end":213976,"line_start":170,"line_end":170,"column_start":5,"column_end":53}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213981,"byte_end":213985,"line_start":171,"line_end":171,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 6);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":213990,"byte_end":214024,"line_start":172,"line_end":172,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214029,"byte_end":214067,"line_start":173,"line_end":173,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 2 + 5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214072,"byte_end":214106,"line_start":174,"line_end":174,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214111,"byte_end":214143,"line_start":175,"line_end":175,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214148,"byte_end":214155,"line_start":176,"line_end":176,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215339,"byte_end":215346,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"collect","qualname":"<GroupingMap<I>>::collect","value":"pub fn collect<C>(Self) -> HashMap<K, C> where C: Default + Extend<V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and collects the elements of each group in\n an instance of `C`. The iteration order is preserved when inserting elements. \n \n Return a `HashMap` associating the key of each group with the collection containing that group's elements.\n \n ```\n use itertools::Itertools;\n use std::collections::HashSet;\n \n let lookup = vec![0, 1, 2, 3, 4, 5, 6, 2, 3, 6].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .collect::<HashSet<_>>();\n \n assert_eq!(lookup[&0], vec![0, 3, 6].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup[&1], vec![1, 4].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup[&2], vec![2, 5].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and collects the elements of each group in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214461,"byte_end":214560,"line_start":188,"line_end":188,"column_start":5,"column_end":104}},{"value":"/ an instance of `C`. The iteration order is preserved when inserting elements. ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214565,"byte_end":214647,"line_start":189,"line_end":189,"column_start":5,"column_end":87}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214652,"byte_end":214656,"line_start":190,"line_end":190,"column_start":5,"column_end":9}},{"value":"/ Return a `HashMap` associating the key of each group with the collection containing that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214661,"byte_end":214771,"line_start":191,"line_end":191,"column_start":5,"column_end":115}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214776,"byte_end":214780,"line_start":192,"line_end":192,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214785,"byte_end":214792,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214797,"byte_end":214826,"line_start":194,"line_end":194,"column_start":5,"column_end":34}},{"value":"/ use std::collections::HashSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214831,"byte_end":214865,"line_start":195,"line_end":195,"column_start":5,"column_end":39}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214870,"byte_end":214874,"line_start":196,"line_end":196,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![0, 1, 2, 3, 4, 5, 6, 2, 3, 6].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214879,"byte_end":214942,"line_start":197,"line_end":197,"column_start":5,"column_end":68}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214947,"byte_end":214988,"line_start":198,"line_end":198,"column_start":5,"column_end":46}},{"value":"/     .collect::<HashSet<_>>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":214993,"byte_end":215026,"line_start":199,"line_end":199,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215031,"byte_end":215035,"line_start":200,"line_end":200,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], vec![0, 3, 6].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215040,"byte_end":215118,"line_start":201,"line_end":201,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(lookup[&1], vec![1, 4].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215123,"byte_end":215198,"line_start":202,"line_end":202,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(lookup[&2], vec![2, 5].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215203,"byte_end":215278,"line_start":203,"line_end":203,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215283,"byte_end":215315,"line_start":204,"line_end":204,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215320,"byte_end":215327,"line_start":205,"line_end":205,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216305,"byte_end":216308,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"max","qualname":"<GroupingMap<I>>::max","value":"pub fn max(Self) -> HashMap<K, V> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the maximum of each group.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max();\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the maximum of each group.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215643,"byte_end":215736,"line_start":218,"line_end":218,"column_start":5,"column_end":98}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215741,"byte_end":215745,"line_start":219,"line_end":219,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215750,"byte_end":215822,"line_start":220,"line_end":220,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215827,"byte_end":215831,"line_start":221,"line_end":221,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215836,"byte_end":215936,"line_start":222,"line_end":222,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215941,"byte_end":215945,"line_start":223,"line_end":223,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215950,"byte_end":215957,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215962,"byte_end":215991,"line_start":225,"line_end":225,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":215996,"byte_end":216000,"line_start":226,"line_end":226,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216005,"byte_end":216063,"line_start":227,"line_end":227,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216068,"byte_end":216109,"line_start":228,"line_end":228,"column_start":5,"column_end":46}},{"value":"/     .max();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216114,"byte_end":216129,"line_start":229,"line_end":229,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216134,"byte_end":216138,"line_start":230,"line_end":230,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216143,"byte_end":216174,"line_start":231,"line_end":231,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216179,"byte_end":216209,"line_start":232,"line_end":232,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216214,"byte_end":216244,"line_start":233,"line_end":233,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216249,"byte_end":216281,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216286,"byte_end":216293,"line_start":235,"line_end":235,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217162,"byte_end":217168,"line_start":261,"line_end":261,"column_start":12,"column_end":18},"name":"max_by","qualname":"<GroupingMap<I>>::max_by","value":"pub fn max_by<F>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the maximum of each group\n with respect to the specified comparison function.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 1);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the maximum of each group","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216419,"byte_end":216511,"line_start":242,"line_end":242,"column_start":5,"column_end":97}},{"value":"/ with respect to the specified comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216516,"byte_end":216570,"line_start":243,"line_end":243,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216575,"byte_end":216579,"line_start":244,"line_end":244,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216584,"byte_end":216656,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216661,"byte_end":216665,"line_start":246,"line_end":246,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216670,"byte_end":216770,"line_start":247,"line_end":247,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216775,"byte_end":216779,"line_start":248,"line_end":248,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216784,"byte_end":216791,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216796,"byte_end":216825,"line_start":250,"line_end":250,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216830,"byte_end":216834,"line_start":251,"line_end":251,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216839,"byte_end":216897,"line_start":252,"line_end":252,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216902,"byte_end":216943,"line_start":253,"line_end":253,"column_start":5,"column_end":46}},{"value":"/     .max_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216948,"byte_end":216987,"line_start":254,"line_end":254,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":216992,"byte_end":216996,"line_start":255,"line_end":255,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217001,"byte_end":217031,"line_start":256,"line_end":256,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217036,"byte_end":217066,"line_start":257,"line_end":257,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217071,"byte_end":217101,"line_start":258,"line_end":258,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217106,"byte_end":217138,"line_start":259,"line_end":259,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217143,"byte_end":217150,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218197,"byte_end":218207,"line_start":289,"line_end":289,"column_start":12,"column_end":22},"name":"max_by_key","qualname":"<GroupingMap<I>>::max_by_key","value":"pub fn max_by_key<F, CK>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V) ->\nCK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the element of each group\n that gives the maximum from the specified function.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the element of each group","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217450,"byte_end":217542,"line_start":270,"line_end":270,"column_start":5,"column_end":97}},{"value":"/ that gives the maximum from the specified function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217547,"byte_end":217602,"line_start":271,"line_end":271,"column_start":5,"column_end":60}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217607,"byte_end":217611,"line_start":272,"line_end":272,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217616,"byte_end":217688,"line_start":273,"line_end":273,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217693,"byte_end":217697,"line_start":274,"line_end":274,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217702,"byte_end":217802,"line_start":275,"line_end":275,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217807,"byte_end":217811,"line_start":276,"line_end":276,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217816,"byte_end":217823,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217828,"byte_end":217857,"line_start":278,"line_end":278,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217862,"byte_end":217866,"line_start":279,"line_end":279,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217871,"byte_end":217929,"line_start":280,"line_end":280,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217934,"byte_end":217975,"line_start":281,"line_end":281,"column_start":5,"column_end":46}},{"value":"/     .max_by_key(|_key, &val| val % 4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":217980,"byte_end":218022,"line_start":282,"line_end":282,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218027,"byte_end":218031,"line_start":283,"line_end":283,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218036,"byte_end":218066,"line_start":284,"line_end":284,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218071,"byte_end":218101,"line_start":285,"line_end":285,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218106,"byte_end":218136,"line_start":286,"line_end":286,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218141,"byte_end":218173,"line_start":287,"line_end":287,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218178,"byte_end":218185,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219053,"byte_end":219056,"line_start":314,"line_end":314,"column_start":12,"column_end":15},"name":"min","qualname":"<GroupingMap<I>>::min","value":"pub fn min(Self) -> HashMap<K, V> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the minimum of each group.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min();\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 1);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the minimum of each group.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218391,"byte_end":218484,"line_start":296,"line_end":296,"column_start":5,"column_end":98}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218489,"byte_end":218493,"line_start":297,"line_end":297,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218498,"byte_end":218571,"line_start":298,"line_end":298,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218576,"byte_end":218580,"line_start":299,"line_end":299,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218585,"byte_end":218685,"line_start":300,"line_end":300,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218690,"byte_end":218694,"line_start":301,"line_end":301,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218699,"byte_end":218706,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218711,"byte_end":218740,"line_start":303,"line_end":303,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218745,"byte_end":218749,"line_start":304,"line_end":304,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218754,"byte_end":218812,"line_start":305,"line_end":305,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218817,"byte_end":218858,"line_start":306,"line_end":306,"column_start":5,"column_end":46}},{"value":"/     .min();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218863,"byte_end":218878,"line_start":307,"line_end":307,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218883,"byte_end":218887,"line_start":308,"line_end":308,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218892,"byte_end":218922,"line_start":309,"line_end":309,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218927,"byte_end":218957,"line_start":310,"line_end":310,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218962,"byte_end":218992,"line_start":311,"line_end":311,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":218997,"byte_end":219029,"line_start":312,"line_end":312,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219034,"byte_end":219041,"line_start":313,"line_end":313,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219912,"byte_end":219918,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"min_by","qualname":"<GroupingMap<I>>::min_by","value":"pub fn min_by<F>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the minimum of each group\n with respect to the specified comparison function.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the minimum of each group","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219167,"byte_end":219259,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ with respect to the specified comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219264,"byte_end":219318,"line_start":321,"line_end":321,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219323,"byte_end":219327,"line_start":322,"line_end":322,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219332,"byte_end":219405,"line_start":323,"line_end":323,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219410,"byte_end":219414,"line_start":324,"line_end":324,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219419,"byte_end":219519,"line_start":325,"line_end":325,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219524,"byte_end":219528,"line_start":326,"line_end":326,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219533,"byte_end":219540,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219545,"byte_end":219574,"line_start":328,"line_end":328,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219579,"byte_end":219583,"line_start":329,"line_end":329,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219588,"byte_end":219646,"line_start":330,"line_end":330,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219651,"byte_end":219692,"line_start":331,"line_end":331,"column_start":5,"column_end":46}},{"value":"/     .min_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219697,"byte_end":219736,"line_start":332,"line_end":332,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219741,"byte_end":219745,"line_start":333,"line_end":333,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219750,"byte_end":219781,"line_start":334,"line_end":334,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219786,"byte_end":219816,"line_start":335,"line_end":335,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219821,"byte_end":219851,"line_start":336,"line_end":336,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219856,"byte_end":219888,"line_start":337,"line_end":337,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":219893,"byte_end":219900,"line_start":338,"line_end":338,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220949,"byte_end":220959,"line_start":367,"line_end":367,"column_start":12,"column_end":22},"name":"min_by_key","qualname":"<GroupingMap<I>>::min_by_key","value":"pub fn min_by_key<F, CK>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V) ->\nCK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the element of each group\n that gives the minimum from the specified function.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 4);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the element of each group","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220200,"byte_end":220292,"line_start":348,"line_end":348,"column_start":5,"column_end":97}},{"value":"/ that gives the minimum from the specified function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220297,"byte_end":220352,"line_start":349,"line_end":349,"column_start":5,"column_end":60}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220357,"byte_end":220361,"line_start":350,"line_end":350,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220366,"byte_end":220439,"line_start":351,"line_end":351,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220444,"byte_end":220448,"line_start":352,"line_end":352,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220453,"byte_end":220553,"line_start":353,"line_end":353,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220558,"byte_end":220562,"line_start":354,"line_end":354,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220567,"byte_end":220574,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220579,"byte_end":220608,"line_start":356,"line_end":356,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220613,"byte_end":220617,"line_start":357,"line_end":357,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220622,"byte_end":220680,"line_start":358,"line_end":358,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220685,"byte_end":220726,"line_start":359,"line_end":359,"column_start":5,"column_end":46}},{"value":"/     .min_by_key(|_key, &val| val % 4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220731,"byte_end":220773,"line_start":360,"line_end":360,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220778,"byte_end":220782,"line_start":361,"line_end":361,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220787,"byte_end":220818,"line_start":362,"line_end":362,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220823,"byte_end":220853,"line_start":363,"line_end":363,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220858,"byte_end":220888,"line_start":364,"line_end":364,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220893,"byte_end":220925,"line_start":365,"line_end":365,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":220930,"byte_end":220937,"line_start":366,"line_end":366,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222251,"byte_end":222257,"line_start":401,"line_end":401,"column_start":12,"column_end":18},"name":"minmax","qualname":"<GroupingMap<I>>::minmax","value":"pub fn minmax(Self) -> HashMap<K, MinMaxResult<V>> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the maximum and minimum of\n each group.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n See [.minmax()](crate::Itertools::minmax) for the non-grouping version.\n \n Differences from the non grouping version:\n - It never produces a `MinMaxResult::NoElements`\n - It doesn't have any speedup\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax();\n \n assert_eq!(lookup[&0], MinMax(3, 12));\n assert_eq!(lookup[&1], MinMax(1, 7));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the maximum and minimum of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221143,"byte_end":221235,"line_start":374,"line_end":374,"column_start":5,"column_end":97}},{"value":"/ each group.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221240,"byte_end":221255,"line_start":375,"line_end":375,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221260,"byte_end":221264,"line_start":376,"line_end":376,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221269,"byte_end":221341,"line_start":377,"line_end":377,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221346,"byte_end":221419,"line_start":378,"line_end":378,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221424,"byte_end":221428,"line_start":379,"line_end":379,"column_start":5,"column_end":9}},{"value":"/ See [.minmax()](crate::Itertools::minmax) for the non-grouping version.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221433,"byte_end":221508,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221513,"byte_end":221517,"line_start":381,"line_end":381,"column_start":5,"column_end":9}},{"value":"/ Differences from the non grouping version:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221522,"byte_end":221568,"line_start":382,"line_end":382,"column_start":5,"column_end":51}},{"value":"/ - It never produces a `MinMaxResult::NoElements`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221573,"byte_end":221625,"line_start":383,"line_end":383,"column_start":5,"column_end":57}},{"value":"/ - It doesn't have any speedup","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221630,"byte_end":221663,"line_start":384,"line_end":384,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221668,"byte_end":221672,"line_start":385,"line_end":385,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221677,"byte_end":221789,"line_start":386,"line_end":386,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221794,"byte_end":221798,"line_start":387,"line_end":387,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221803,"byte_end":221810,"line_start":388,"line_end":388,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221815,"byte_end":221844,"line_start":389,"line_end":389,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221849,"byte_end":221903,"line_start":390,"line_end":390,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221908,"byte_end":221912,"line_start":391,"line_end":391,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221917,"byte_end":221972,"line_start":392,"line_end":392,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":221977,"byte_end":222018,"line_start":393,"line_end":393,"column_start":5,"column_end":46}},{"value":"/     .minmax();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222023,"byte_end":222041,"line_start":394,"line_end":394,"column_start":5,"column_end":23}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222046,"byte_end":222050,"line_start":395,"line_end":395,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(3, 12));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222055,"byte_end":222097,"line_start":396,"line_end":396,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(1, 7));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222102,"byte_end":222143,"line_start":397,"line_end":397,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222148,"byte_end":222190,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222195,"byte_end":222227,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222232,"byte_end":222239,"line_start":400,"line_end":400,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223411,"byte_end":223420,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"minmax_by","qualname":"<GroupingMap<I>>::minmax_by","value":"pub fn minmax_by<F>(Self, F) -> HashMap<K, MinMaxResult<V>> where\nF: FnMut(&K, &V, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the maximum and minimum of\n each group with respect to the specified comparison function.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n It has the same differences from the non-grouping version as `minmax`.\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], MinMax(12, 3));\n assert_eq!(lookup[&1], MinMax(7, 1));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the maximum and minimum of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222385,"byte_end":222477,"line_start":407,"line_end":407,"column_start":5,"column_end":97}},{"value":"/ each group with respect to the specified comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222482,"byte_end":222547,"line_start":408,"line_end":408,"column_start":5,"column_end":70}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222552,"byte_end":222556,"line_start":409,"line_end":409,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222561,"byte_end":222633,"line_start":410,"line_end":410,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222638,"byte_end":222711,"line_start":411,"line_end":411,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222716,"byte_end":222720,"line_start":412,"line_end":412,"column_start":5,"column_end":9}},{"value":"/ It has the same differences from the non-grouping version as `minmax`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222725,"byte_end":222799,"line_start":413,"line_end":413,"column_start":5,"column_end":79}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222804,"byte_end":222808,"line_start":414,"line_end":414,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222813,"byte_end":222925,"line_start":415,"line_end":415,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222930,"byte_end":222934,"line_start":416,"line_end":416,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222939,"byte_end":222946,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222951,"byte_end":222980,"line_start":418,"line_end":418,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":222985,"byte_end":223039,"line_start":419,"line_end":419,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223044,"byte_end":223048,"line_start":420,"line_end":420,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223053,"byte_end":223108,"line_start":421,"line_end":421,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223113,"byte_end":223154,"line_start":422,"line_end":422,"column_start":5,"column_end":46}},{"value":"/     .minmax_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223159,"byte_end":223201,"line_start":423,"line_end":423,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223206,"byte_end":223210,"line_start":424,"line_end":424,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(12, 3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223215,"byte_end":223257,"line_start":425,"line_end":425,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(7, 1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223262,"byte_end":223303,"line_start":426,"line_end":426,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223308,"byte_end":223350,"line_start":427,"line_end":427,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223355,"byte_end":223387,"line_start":428,"line_end":428,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":223392,"byte_end":223399,"line_start":429,"line_end":429,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225521,"byte_end":225534,"line_start":480,"line_end":480,"column_start":12,"column_end":25},"name":"minmax_by_key","qualname":"<GroupingMap<I>>::minmax_by_key","value":"pub fn minmax_by_key<F, CK>(Self, F) -> HashMap<K, MinMaxResult<V>> where\nF: FnMut(&K, &V) -> CK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the elements of each group\n that gives the minimum and maximum from the specified function.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n It has the same differences from the non-grouping version as `minmax`.\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], MinMax(12, 3));\n assert_eq!(lookup[&1], MinMax(4, 7));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the elements of each group","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224490,"byte_end":224582,"line_start":457,"line_end":457,"column_start":5,"column_end":97}},{"value":"/ that gives the minimum and maximum from the specified function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224587,"byte_end":224654,"line_start":458,"line_end":458,"column_start":5,"column_end":72}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224659,"byte_end":224663,"line_start":459,"line_end":459,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224668,"byte_end":224740,"line_start":460,"line_end":460,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224745,"byte_end":224818,"line_start":461,"line_end":461,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224823,"byte_end":224827,"line_start":462,"line_end":462,"column_start":5,"column_end":9}},{"value":"/ It has the same differences from the non-grouping version as `minmax`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224832,"byte_end":224906,"line_start":463,"line_end":463,"column_start":5,"column_end":79}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224911,"byte_end":224915,"line_start":464,"line_end":464,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":224920,"byte_end":225032,"line_start":465,"line_end":465,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225037,"byte_end":225041,"line_start":466,"line_end":466,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225046,"byte_end":225053,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225058,"byte_end":225087,"line_start":468,"line_end":468,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225092,"byte_end":225146,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225151,"byte_end":225155,"line_start":470,"line_end":470,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225160,"byte_end":225215,"line_start":471,"line_end":471,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225220,"byte_end":225261,"line_start":472,"line_end":472,"column_start":5,"column_end":46}},{"value":"/     .minmax_by_key(|_key, &val| val % 4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225266,"byte_end":225311,"line_start":473,"line_end":473,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225316,"byte_end":225320,"line_start":474,"line_end":474,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(12, 3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225325,"byte_end":225367,"line_start":475,"line_end":475,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(4, 7));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225372,"byte_end":225413,"line_start":476,"line_end":476,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225418,"byte_end":225460,"line_start":477,"line_end":477,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225465,"byte_end":225497,"line_start":478,"line_end":478,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225502,"byte_end":225509,"line_start":479,"line_end":479,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226485,"byte_end":226488,"line_start":506,"line_end":506,"column_start":12,"column_end":15},"name":"sum","qualname":"<GroupingMap<I>>::sum","value":"pub fn sum(Self) -> HashMap<K, V> where V: Add<V, Output = V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and sums them.\n \n This is just a shorthand for `self.fold_first(|acc, _, val| acc + val)`.\n It is more limited than `Iterator::sum` since it doesn't use the `Sum` trait.\n \n Returns a `HashMap` associating the key of each group with the sum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .sum();\n \n assert_eq!(lookup[&0], 3 + 9 + 12);\n assert_eq!(lookup[&1], 1 + 4 + 7);\n assert_eq!(lookup[&2], 5 + 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and sums them.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225739,"byte_end":225810,"line_start":487,"line_end":487,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225815,"byte_end":225819,"line_start":488,"line_end":488,"column_start":5,"column_end":9}},{"value":"/ This is just a shorthand for `self.fold_first(|acc, _, val| acc + val)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225824,"byte_end":225900,"line_start":489,"line_end":489,"column_start":5,"column_end":81}},{"value":"/ It is more limited than `Iterator::sum` since it doesn't use the `Sum` trait.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225905,"byte_end":225986,"line_start":490,"line_end":490,"column_start":5,"column_end":86}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":225991,"byte_end":225995,"line_start":491,"line_end":491,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the sum of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226000,"byte_end":226096,"line_start":492,"line_end":492,"column_start":5,"column_end":101}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226101,"byte_end":226105,"line_start":493,"line_end":493,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226110,"byte_end":226117,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226122,"byte_end":226151,"line_start":495,"line_end":495,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226156,"byte_end":226160,"line_start":496,"line_end":496,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226165,"byte_end":226223,"line_start":497,"line_end":497,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226228,"byte_end":226269,"line_start":498,"line_end":498,"column_start":5,"column_end":46}},{"value":"/     .sum();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226274,"byte_end":226289,"line_start":499,"line_end":499,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226294,"byte_end":226298,"line_start":500,"line_end":500,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 9 + 12);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226303,"byte_end":226342,"line_start":501,"line_end":501,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226347,"byte_end":226385,"line_start":502,"line_end":502,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 5 + 8);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226390,"byte_end":226424,"line_start":503,"line_end":503,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226429,"byte_end":226461,"line_start":504,"line_end":504,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226466,"byte_end":226473,"line_start":505,"line_end":505,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227380,"byte_end":227387,"line_start":531,"line_end":531,"column_start":12,"column_end":19},"name":"product","qualname":"<GroupingMap<I>>::product","value":"pub fn product(Self) -> HashMap<K, V> where V: Mul<V, Output = V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and multiply them.\n \n This is just a shorthand for `self.fold_first(|acc, _, val| acc * val)`.\n It is more limited than `Iterator::product` since it doesn't use the `Product` trait.\n \n Returns a `HashMap` associating the key of each group with the product of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .product();\n \n assert_eq!(lookup[&0], 3 * 9 * 12);\n assert_eq!(lookup[&1], 1 * 4 * 7);\n assert_eq!(lookup[&2], 5 * 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and multiply them.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226614,"byte_end":226689,"line_start":512,"line_end":512,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226694,"byte_end":226698,"line_start":513,"line_end":513,"column_start":5,"column_end":9}},{"value":"/ This is just a shorthand for `self.fold_first(|acc, _, val| acc * val)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226703,"byte_end":226779,"line_start":514,"line_end":514,"column_start":5,"column_end":81}},{"value":"/ It is more limited than `Iterator::product` since it doesn't use the `Product` trait.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226784,"byte_end":226873,"line_start":515,"line_end":515,"column_start":5,"column_end":94}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226878,"byte_end":226882,"line_start":516,"line_end":516,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the product of that group's elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226887,"byte_end":226987,"line_start":517,"line_end":517,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":226992,"byte_end":226996,"line_start":518,"line_end":518,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227001,"byte_end":227008,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227013,"byte_end":227042,"line_start":520,"line_end":520,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227047,"byte_end":227051,"line_start":521,"line_end":521,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227056,"byte_end":227114,"line_start":522,"line_end":522,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227119,"byte_end":227160,"line_start":523,"line_end":523,"column_start":5,"column_end":46}},{"value":"/     .product();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227165,"byte_end":227184,"line_start":524,"line_end":524,"column_start":5,"column_end":24}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227189,"byte_end":227193,"line_start":525,"line_end":525,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 * 9 * 12);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227198,"byte_end":227237,"line_start":526,"line_end":526,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(lookup[&1], 1 * 4 * 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227242,"byte_end":227280,"line_start":527,"line_end":527,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 5 * 8);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227285,"byte_end":227319,"line_start":528,"line_end":528,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227324,"byte_end":227356,"line_start":529,"line_end":529,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":227361,"byte_end":227368,"line_start":530,"line_end":530,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1383},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":228450,"byte_end":228453,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":1381},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1433},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237902,"byte_end":237909,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":1437},{"krate":0,"index":1438}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237212,"byte_end":237273,"line_start":275,"line_end":275,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237274,"byte_end":237277,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ If the groups are consumed in their original order, or if each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237278,"byte_end":237344,"line_start":277,"line_end":277,"column_start":1,"column_end":67}},{"value":"/ group is dropped without keeping it around, then `GroupBy` uses","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237345,"byte_end":237412,"line_start":278,"line_end":278,"column_start":1,"column_end":68}},{"value":"/ no allocations. It needs allocations only if several group iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237413,"byte_end":237485,"line_start":279,"line_end":279,"column_start":1,"column_end":73}},{"value":"/ are alive at the same time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237486,"byte_end":237517,"line_start":280,"line_end":280,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237518,"byte_end":237521,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237522,"byte_end":237590,"line_start":282,"line_end":282,"column_start":1,"column_end":69}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237591,"byte_end":237656,"line_start":283,"line_end":283,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237657,"byte_end":237724,"line_start":284,"line_end":284,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237725,"byte_end":237738,"line_start":285,"line_end":285,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237739,"byte_end":237742,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](crate::Itertools::group_by) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237743,"byte_end":237816,"line_start":287,"line_end":287,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":237817,"byte_end":237890,"line_start":288,"line_end":288,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1457},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239763,"byte_end":239769,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":1462}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Group iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239454,"byte_end":239502,"line_start":352,"line_end":352,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239503,"byte_end":239506,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(K, Group)`:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239507,"byte_end":239549,"line_start":354,"line_end":354,"column_start":1,"column_end":43}},{"value":"/ the group's key `K` and the group's iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239550,"byte_end":239599,"line_start":355,"line_end":355,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239600,"byte_end":239603,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](crate::Itertools::group_by) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239604,"byte_end":239677,"line_start":357,"line_end":357,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239678,"byte_end":239751,"line_start":358,"line_end":358,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1471},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":240630,"byte_end":240635,"line_start":393,"line_end":393,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single group.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":240523,"byte_end":240574,"line_start":390,"line_end":390,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":240575,"byte_end":240578,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":240579,"byte_end":240618,"line_start":392,"line_end":392,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1494},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242559,"byte_end":242569,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1497}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"/ `ChunkLazy` is the storage for a lazy chunking operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":241907,"byte_end":241968,"line_start":451,"line_end":451,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":241969,"byte_end":241972,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ `IntoChunks` behaves just like `GroupBy`: it is iterable, and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":241973,"byte_end":242038,"line_start":453,"line_end":453,"column_start":1,"column_end":66}},{"value":"/ it only buffers if several chunk iterators are alive at the same time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242039,"byte_end":242113,"line_start":454,"line_end":454,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242114,"byte_end":242117,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242118,"byte_end":242186,"line_start":456,"line_end":456,"column_start":1,"column_end":69}},{"value":"/ itself), because the chunk iterators need to borrow from this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242187,"byte_end":242252,"line_start":457,"line_end":457,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242253,"byte_end":242320,"line_start":458,"line_end":458,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242321,"byte_end":242334,"line_start":459,"line_end":459,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242335,"byte_end":242338,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242339,"byte_end":242399,"line_start":461,"line_end":461,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242400,"byte_end":242403,"line_start":462,"line_end":462,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](crate::Itertools::chunks) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242404,"byte_end":242473,"line_start":463,"line_end":463,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242474,"byte_end":242547,"line_start":464,"line_end":464,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1508},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243679,"byte_end":243685,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":1511}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Chunk iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243429,"byte_end":243477,"line_start":504,"line_end":504,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243478,"byte_end":243481,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243482,"byte_end":243519,"line_start":506,"line_end":506,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243520,"byte_end":243523,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](crate::Itertools::chunks) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243524,"byte_end":243593,"line_start":508,"line_end":508,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243594,"byte_end":243667,"line_start":509,"line_end":509,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1518},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":244396,"byte_end":244401,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single chunk.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":244289,"byte_end":244340,"line_start":538,"line_end":538,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":244341,"byte_end":244344,"line_start":539,"line_end":539,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":244345,"byte_end":244384,"line_start":540,"line_end":540,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":1544},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245076,"byte_end":245094,"line_start":4,"line_end":4,"column_start":11,"column_end":29},"name":"IntersperseElement","qualname":"::intersperse::IntersperseElement","value":"IntersperseElement<Item>","parent":null,"children":[{"krate":0,"index":1546}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245110,"byte_end":245118,"line_start":5,"line_end":5,"column_start":8,"column_end":16},"name":"generate","qualname":"::intersperse::IntersperseElement::generate","value":"pub fn generate(&mut Self) -> Item","parent":{"krate":0,"index":1544},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3806},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245177,"byte_end":245201,"line_start":9,"line_end":9,"column_start":12,"column_end":36},"name":"IntersperseElementSimple","qualname":"::intersperse::IntersperseElementSimple","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1550},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245638,"byte_end":245649,"line_start":25,"line_end":25,"column_start":10,"column_end":21},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"IntersperseWith<I, IntersperseElementSimple<<I as Iterator>::Item>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245365,"byte_end":245417,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245418,"byte_end":245467,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245468,"byte_end":245471,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245472,"byte_end":245510,"line_start":20,"line_end":20,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245511,"byte_end":245514,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245515,"byte_end":245544,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245545,"byte_end":245548,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse()`](crate::Itertools::intersperse) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245549,"byte_end":245628,"line_start":24,"line_end":24,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":3816},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246440,"byte_end":246455,"line_start":50,"line_end":50,"column_start":12,"column_end":27},"name":"IntersperseWith","qualname":"::intersperse::IntersperseWith","value":"IntersperseWith {  }","parent":null,"children":[{"krate":0,"index":3819},{"krate":0,"index":3820},{"krate":0,"index":3821}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value created by a function\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value created by a function","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246035,"byte_end":246109,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246110,"byte_end":246159,"line_start":41,"line_end":41,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246160,"byte_end":246163,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246164,"byte_end":246202,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246203,"byte_end":246206,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246207,"byte_end":246236,"line_start":45,"line_end":45,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246237,"byte_end":246240,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse_with()`](crate::Itertools::intersperse_with) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246241,"byte_end":246330,"line_start":47,"line_end":47,"column_start":1,"column_end":90}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246331,"byte_end":246404,"line_start":48,"line_end":48,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1618},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252099,"byte_end":252105,"line_start":108,"line_end":108,"column_start":10,"column_end":16},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMergeBy<I, KMergeByLt>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":251733,"byte_end":251825,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":251826,"byte_end":251897,"line_start":102,"line_end":102,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":251898,"byte_end":251901,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":251902,"byte_end":251941,"line_start":104,"line_end":104,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":251942,"byte_end":251945,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge()`](crate::Itertools::kmerge) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":251946,"byte_end":252015,"line_start":106,"line_end":106,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252016,"byte_end":252089,"line_start":107,"line_end":107,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1620},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252147,"byte_end":252162,"line_start":110,"line_end":110,"column_start":11,"column_end":26},"name":"KMergePredicate","qualname":"::kmerge_impl::KMergePredicate","value":"KMergePredicate<T>","parent":null,"children":[{"krate":0,"index":1622}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252175,"byte_end":252186,"line_start":111,"line_end":111,"column_start":8,"column_end":19},"name":"kmerge_pred","qualname":"::kmerge_impl::KMergePredicate::kmerge_pred","value":"pub fn kmerge_pred(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3838},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252259,"byte_end":252269,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"KMergeByLt","qualname":"::kmerge_impl::KMergeByLt","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1630},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252865,"byte_end":252871,"line_start":141,"line_end":141,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"pub fn kmerge<I>(I) -> KMerge<<I::Item as IntoIterator>::IntoIter> where\nI: IntoIterator, I::Item: IntoIterator,\n<<I as IntoIterator>::Item as IntoIterator>::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252546,"byte_end":252622,"line_start":129,"line_end":129,"column_start":1,"column_end":77}},{"value":"/ the ordering function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252623,"byte_end":252649,"line_start":130,"line_end":130,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252650,"byte_end":252653,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `iterable.into_iter().kmerge()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252654,"byte_end":252704,"line_start":132,"line_end":132,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252705,"byte_end":252708,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252709,"byte_end":252716,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/ use itertools::kmerge;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252717,"byte_end":252743,"line_start":135,"line_end":135,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252744,"byte_end":252747,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ for elt in kmerge(vec![vec![0, 2, 4], vec![1, 3, 5], vec![6, 7]]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252748,"byte_end":252819,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"/     /* loop body */","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252820,"byte_end":252843,"line_start":138,"line_end":138,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252844,"byte_end":252849,"line_start":139,"line_end":139,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252850,"byte_end":252857,"line_start":140,"line_end":140,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1632},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253433,"byte_end":253441,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":1635},{"krate":0,"index":1636}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253108,"byte_end":253180,"line_start":149,"line_end":149,"column_start":1,"column_end":73}},{"value":"/ according to an ordering function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253181,"byte_end":253219,"line_start":150,"line_end":150,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253220,"byte_end":253223,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253224,"byte_end":253263,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253264,"byte_end":253267,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge_by()`](crate::Itertools::kmerge_by) for more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253268,"byte_end":253330,"line_start":154,"line_end":154,"column_start":1,"column_end":63}},{"value":"/ information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253331,"byte_end":253347,"line_start":155,"line_end":155,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253348,"byte_end":253421,"line_start":156,"line_end":156,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1640},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253820,"byte_end":253829,"line_start":174,"line_end":174,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"pub fn kmerge_by<I, F>(I, F)\n-> KMergeBy<<I::Item as IntoIterator>::IntoIter, F> where I: IntoIterator,\nI::Item: IntoIterator,\nF: KMergePredicate<<<I as IntoIterator>::Item as IntoIterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253674,"byte_end":253745,"line_start":171,"line_end":171,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253746,"byte_end":253749,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `iterable.into_iter().kmerge_by(less_than)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253750,"byte_end":253812,"line_start":173,"line_end":173,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":1697},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257105,"byte_end":257118,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"pub fn merge_join_by<I, J, F>(I, J, F)\n-> MergeJoinBy<I::IntoIter, J::IntoIter, F> where I: IntoIterator,\nJ: IntoIterator, F: FnMut(&I::Item, &J::Item) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":256908,"byte_end":257009,"line_start":8,"line_end":8,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257010,"byte_end":257013,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](crate::Itertools::merge_join_by) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257014,"byte_end":257097,"line_start":10,"line_end":10,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":1701},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257724,"byte_end":257735,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257456,"byte_end":257550,"line_start":24,"line_end":24,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257551,"byte_end":257554,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](crate::Itertools::merge_join_by) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257555,"byte_end":257638,"line_start":26,"line_end":26,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257639,"byte_end":257712,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3861},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262787,"byte_end":262797,"line_start":8,"line_end":8,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[{"value":"/ Empty iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262764,"byte_end":262782,"line_start":7,"line_end":7,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3863},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262879,"byte_end":262889,"line_start":11,"line_end":11,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[{"value":"/ Iterator with one element, so the minimum and maximum are the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262804,"byte_end":262874,"line_start":10,"line_end":10,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3866},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263002,"byte_end":263008,"line_start":15,"line_end":15,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[{"value":"/ More than one element in the iterator, the first element is not larger","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262899,"byte_end":262973,"line_start":13,"line_end":13,"column_start":5,"column_end":79}},{"value":"/ than the second","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262978,"byte_end":262997,"line_start":14,"line_end":14,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":3859},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262742,"byte_end":262754,"line_start":6,"line_end":6,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"pub enum MinMaxResult<T> { NoElements, OneElement(T), MinMax(T, T), }","parent":null,"children":[{"krate":0,"index":3861},{"krate":0,"index":3863},{"krate":0,"index":3866}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`.","sig":null,"attributes":[{"value":"/ `MinMaxResult` is an enum returned by `minmax`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262571,"byte_end":262622,"line_start":2,"line_end":2,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262623,"byte_end":262626,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See [`.minmax()`](crate::Itertools::minmax) for more detail.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":262627,"byte_end":262691,"line_start":4,"line_end":4,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263826,"byte_end":263837,"line_start":39,"line_end":39,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"pub fn into_option(Self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[{"value":"/ `into_option` creates an `Option` of type `(T, T)`. The returned `Option`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263055,"byte_end":263132,"line_start":19,"line_end":19,"column_start":5,"column_end":82}},{"value":"/ has variant `None` if and only if the `MinMaxResult` has variant","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263137,"byte_end":263205,"line_start":20,"line_end":20,"column_start":5,"column_end":73}},{"value":"/ `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263210,"byte_end":263280,"line_start":21,"line_end":21,"column_start":5,"column_end":75}},{"value":"/ If the `MinMaxResult` has variant `OneElement(x)`, performing this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263285,"byte_end":263355,"line_start":22,"line_end":22,"column_start":5,"column_end":75}},{"value":"/ operation will make one clone of `x`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263360,"byte_end":263401,"line_start":23,"line_end":23,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263406,"byte_end":263409,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263414,"byte_end":263428,"line_start":25,"line_end":25,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263433,"byte_end":263436,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263441,"byte_end":263448,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"/ use itertools::MinMaxResult::{self, NoElements, OneElement, MinMax};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263453,"byte_end":263525,"line_start":28,"line_end":28,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263530,"byte_end":263533,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ let r: MinMaxResult<i32> = NoElements;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263538,"byte_end":263580,"line_start":30,"line_end":30,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(r.into_option(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263585,"byte_end":263623,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263628,"byte_end":263631,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ let r = OneElement(1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263636,"byte_end":263662,"line_start":33,"line_end":33,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(r.into_option(), Some((1, 1)));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263667,"byte_end":263713,"line_start":34,"line_end":34,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263718,"byte_end":263721,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ let r = MinMax(1, 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263726,"byte_end":263751,"line_start":36,"line_end":36,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(r.into_option(), Some((1, 2)));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263756,"byte_end":263802,"line_start":37,"line_end":37,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263807,"byte_end":263814,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3884},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":266629,"byte_end":266638,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":3886},{"krate":0,"index":3887},{"krate":0,"index":3888}],"decl_id":null,"docs":" See [`multipeek()`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`multipeek()`] for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":266548,"byte_end":266593,"line_start":6,"line_end":6,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1748},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":266864,"byte_end":266873,"line_start":18,"line_end":18,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"pub fn multipeek<I>(I) -> MultiPeek<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows the user to peek at multiple `.next()`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":266734,"byte_end":266808,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ values without advancing the base iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":266809,"byte_end":266856,"line_start":17,"line_end":17,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267155,"byte_end":267165,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"pub fn reset_peek(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the peeking “cursor”\n","sig":null,"attributes":[{"value":"/ Reset the peeking “cursor”","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267109,"byte_end":267143,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267495,"byte_end":267499,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"pub fn peek(&mut Self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n When `.next()` is called, reset the peeking “cursor”.\n","sig":null,"attributes":[{"value":"/ Works exactly like `.next()` with the only difference that it doesn't","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267249,"byte_end":267322,"line_start":38,"line_end":38,"column_start":5,"column_end":78}},{"value":"/ advance itself. `.peek()` can be called multiple times, to peek","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267327,"byte_end":267394,"line_start":39,"line_end":39,"column_start":5,"column_end":72}},{"value":"/ further ahead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267399,"byte_end":267417,"line_start":40,"line_end":40,"column_start":5,"column_end":23}},{"value":"/ When `.next()` is called, reset the peeking “cursor”.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267422,"byte_end":267483,"line_start":41,"line_end":41,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3895},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269248,"byte_end":269256,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":3898},{"krate":0,"index":3899},{"krate":0,"index":3900},{"krate":0,"index":3901}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"/ An iterator adaptor that pads a sequence to a minimum length by filling","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":268908,"byte_end":268983,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ missing elements using a closure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":268984,"byte_end":269021,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269022,"byte_end":269025,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269026,"byte_end":269065,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269066,"byte_end":269069,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.pad_using()`](crate::Itertools::pad_using) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269070,"byte_end":269145,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269163,"byte_end":269236,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3907},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271385,"byte_end":271392,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"PeekNth","qualname":"::peek_nth::PeekNth","value":"PeekNth {  }","parent":null,"children":[{"krate":0,"index":3909},{"krate":0,"index":3910}],"decl_id":null,"docs":" See [`peek_nth()`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`peek_nth()`] for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271305,"byte_end":271349,"line_start":6,"line_end":6,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":1814},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271861,"byte_end":271869,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"peek_nth","qualname":"::peek_nth::peek_nth","value":"pub fn peek_nth<I>(I) -> PeekNth<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" A drop-in replacement for [`std::iter::Peekable`] which adds a `peek_nth`\n method allowing the user to `peek` at a value several iterations forward\n without advancing the base iterator.","sig":null,"attributes":[{"value":"/ A drop-in replacement for [`std::iter::Peekable`] which adds a `peek_nth`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271471,"byte_end":271548,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ method allowing the user to `peek` at a value several iterations forward","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271549,"byte_end":271625,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ without advancing the base iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271626,"byte_end":271666,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271667,"byte_end":271670,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This differs from `multipeek` in that subsequent calls to `peek` or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271671,"byte_end":271742,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ `peek_nth` will always return the same value until `next` is called","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271743,"byte_end":271814,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ (making `reset_peek` unnecessary).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":271815,"byte_end":271853,"line_start":22,"line_end":22,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272160,"byte_end":272164,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"peek","qualname":"<PeekNth<I>>::peek","value":"pub fn peek(&mut Self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like the `peek` method in `std::iter::Peekable`\n","sig":null,"attributes":[{"value":"/ Works exactly like the `peek` method in `std::iter::Peekable`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272083,"byte_end":272148,"line_start":37,"line_end":37,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272989,"byte_end":272997,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"peek_nth","qualname":"<PeekNth<I>>::peek_nth","value":"pub fn peek_nth(&mut Self, usize) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the `nth` value without advancing the iterator.","sig":null,"attributes":[{"value":"/ Returns a reference to the `nth` value without advancing the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272234,"byte_end":272308,"line_start":42,"line_end":42,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272313,"byte_end":272316,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272321,"byte_end":272335,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272340,"byte_end":272343,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272348,"byte_end":272364,"line_start":46,"line_end":46,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272369,"byte_end":272372,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272377,"byte_end":272388,"line_start":48,"line_end":48,"column_start":5,"column_end":16}},{"value":"/ use itertools::peek_nth;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272393,"byte_end":272421,"line_start":49,"line_end":49,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272426,"byte_end":272429,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ let xs = vec![1,2,3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272434,"byte_end":272459,"line_start":51,"line_end":51,"column_start":5,"column_end":30}},{"value":"/ let mut iter = peek_nth(xs.iter());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272464,"byte_end":272503,"line_start":52,"line_end":52,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272508,"byte_end":272511,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.peek_nth(0), Some(&&1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272516,"byte_end":272560,"line_start":54,"line_end":54,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(&1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272565,"byte_end":272603,"line_start":55,"line_end":55,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272608,"byte_end":272611,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ // The iterator does not advance even if we call `peek_nth` multiple times","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272616,"byte_end":272694,"line_start":57,"line_end":57,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(iter.peek_nth(0), Some(&&2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272699,"byte_end":272743,"line_start":58,"line_end":58,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.peek_nth(1), Some(&&3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272748,"byte_end":272792,"line_start":59,"line_end":59,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(&2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272797,"byte_end":272835,"line_start":60,"line_end":60,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272840,"byte_end":272843,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ // Calling `peek_nth` past the end of the iterator will return `None`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272848,"byte_end":272921,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(iter.peek_nth(1), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272926,"byte_end":272965,"line_start":63,"line_end":63,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272970,"byte_end":272977,"line_start":64,"line_end":64,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1843},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274367,"byte_end":274378,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":1844}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[{"value":"/ An iterator that allows peeking at an element before deciding to accept it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":273971,"byte_end":274050,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274051,"byte_end":274054,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](crate::Itertools::peeking_take_while)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274055,"byte_end":274126,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/ for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274127,"byte_end":274152,"line_start":9,"line_end":9,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274153,"byte_end":274156,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This is implemented by peeking adaptors like peekable and put back,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274157,"byte_end":274228,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ but also by a few iterators that can be peeked natively, like the slice’s","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274229,"byte_end":274308,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ by reference iterator (`std::slice::Iter`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274309,"byte_end":274356,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274562,"byte_end":274574,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"pub fn peeking_next<F>(&mut Self, F) -> Option<Self::Item> where\nF: FnOnce(&Self::Item) -> bool","parent":{"krate":0,"index":1843},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[{"value":"/ Pass a reference to the next iterator element to the closure `accept`;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274396,"byte_end":274470,"line_start":15,"line_end":15,"column_start":5,"column_end":79}},{"value":"/ if `accept` returns true, return it as the next element,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274475,"byte_end":274535,"line_start":16,"line_end":16,"column_start":5,"column_end":65}},{"value":"/ else None.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274540,"byte_end":274554,"line_start":17,"line_end":17,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1858},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":276082,"byte_end":276098,"line_start":79,"line_end":79,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":1862},{"krate":0,"index":1863}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that takes items while a closure returns `true`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275822,"byte_end":275894,"line_start":74,"line_end":74,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275895,"byte_end":275898,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](crate::Itertools::peeking_take_while)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275899,"byte_end":275970,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/ for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275971,"byte_end":275996,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275997,"byte_end":276070,"line_start":78,"line_end":78,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1892},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278783,"byte_end":278795,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"Permutations","qualname":"::permutations::Permutations","value":"Permutations {  }","parent":null,"children":[{"krate":0,"index":1894},{"krate":0,"index":1895}],"decl_id":null,"docs":" An iterator adaptor that iterates through all the `k`-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates through all the `k`-permutations of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278499,"byte_end":278576,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278577,"byte_end":278607,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278608,"byte_end":278611,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.permutations()`](crate::Itertools::permutations) for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278612,"byte_end":278675,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278676,"byte_end":278697,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278698,"byte_end":278771,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1956},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":286923,"byte_end":286931,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"Powerset","qualname":"::powerset::Powerset","value":"Powerset {  }","parent":null,"children":[{"krate":0,"index":1958},{"krate":0,"index":1959}],"decl_id":null,"docs":" An iterator to iterate through the powerset of the elements from an iterator.","sig":null,"attributes":[{"value":"/ An iterator to iterate through the powerset of the elements from an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":286674,"byte_end":286755,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":286756,"byte_end":286759,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See [`.powerset()`](crate::Itertools::powerset) for more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":286760,"byte_end":286820,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/ information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":286821,"byte_end":286837,"line_start":12,"line_end":12,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":286838,"byte_end":286911,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3993},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":289210,"byte_end":289224,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":3997},{"krate":0,"index":3998}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"/ An iterator that produces only the `T` values as long as the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":288906,"byte_end":288970,"line_start":2,"line_end":2,"column_start":1,"column_end":65}},{"value":"/ inner iterator produces `Ok(T)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":288971,"byte_end":289007,"line_start":3,"line_end":3,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":289008,"byte_end":289011,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Used by [`process_results`](crate::process_results), see its docs","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":289012,"byte_end":289081,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"/ for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":289082,"byte_end":289107,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":289108,"byte_end":289181,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1988},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291542,"byte_end":291557,"line_start":87,"line_end":87,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"pub fn process_results<I, F, T, E, R>(I, F) -> Result<R, E> where\nI: IntoIterator<Item = Result<T, E>>,\nF: FnOnce(ProcessResults<, I::IntoIter, E>) -> R","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[{"value":"/ “Lift” a function of the values of an iterator so that it can process","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290209,"byte_end":290286,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ an iterator of `Result` values instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290287,"byte_end":290330,"line_start":53,"line_end":53,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290331,"byte_end":290334,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ `iterable` is an iterator or iterable with `Result<T, E>` elements, where","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290335,"byte_end":290412,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ `T` is the value type and `E` the error type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290413,"byte_end":290462,"line_start":56,"line_end":56,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290463,"byte_end":290466,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ `processor` is a closure that receives an adapted version of the iterable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290467,"byte_end":290544,"line_start":58,"line_end":58,"column_start":1,"column_end":78}},{"value":"/ as the only argument — the adapted iterator produces elements of type `T`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290545,"byte_end":290625,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ as long as the original iterator produces `Ok` values.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290626,"byte_end":290684,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290685,"byte_end":290688,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ If the original iterable produces an error at any point, the adapted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290689,"byte_end":290761,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/ iterator ends and the `process_results` function will return the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290762,"byte_end":290830,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/ error iself.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290831,"byte_end":290847,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290848,"byte_end":290851,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Otherwise, the return value from the closure is returned wrapped","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290852,"byte_end":290920,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"/ inside `Ok`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290921,"byte_end":290937,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290938,"byte_end":290941,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290942,"byte_end":290955,"line_start":69,"line_end":69,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290956,"byte_end":290959,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290960,"byte_end":290967,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ use itertools::process_results;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":290968,"byte_end":291003,"line_start":72,"line_end":72,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291004,"byte_end":291007,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ type R = Result<i32, &'static str>;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291008,"byte_end":291047,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291048,"byte_end":291051,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ let first_values: Vec<R> = vec![Ok(1), Ok(0), Ok(3)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291052,"byte_end":291109,"line_start":76,"line_end":76,"column_start":1,"column_end":58}},{"value":"/ let second_values: Vec<R> = vec![Ok(2), Ok(1), Err(\"overflow\")];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291110,"byte_end":291178,"line_start":77,"line_end":77,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291179,"byte_end":291182,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // “Lift” the iterator .max() method to work on the values in Results using process_results","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291183,"byte_end":291282,"line_start":79,"line_end":79,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291283,"byte_end":291286,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let first_max = process_results(first_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291287,"byte_end":291369,"line_start":81,"line_end":81,"column_start":1,"column_end":83}},{"value":"/ let second_max = process_results(second_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291370,"byte_end":291454,"line_start":82,"line_end":82,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291455,"byte_end":291458,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(first_max, Ok(3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291459,"byte_end":291492,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/ assert!(second_max.is_err());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291493,"byte_end":291526,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":291527,"byte_end":291534,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4004},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292104,"byte_end":292112,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":4006},{"krate":0,"index":4007}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting multiple","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":291936,"byte_end":291988,"line_start":5,"line_end":5,"column_start":1,"column_end":53}},{"value":"/ items in front of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":291989,"byte_end":292024,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292025,"byte_end":292028,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292029,"byte_end":292068,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":2002},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292315,"byte_end":292325,"line_start":19,"line_end":19,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"pub fn put_back_n<I>(I) -> PutBackN<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back multiple values to the front","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292167,"byte_end":292241,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ of the iteration.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292242,"byte_end":292263,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292264,"byte_end":292267,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292268,"byte_end":292307,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292908,"byte_end":292916,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order of the most recently put back\n values first.","sig":null,"attributes":[{"value":"/ Puts x in front of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292516,"byte_end":292552,"line_start":29,"line_end":29,"column_start":5,"column_end":41}},{"value":"/ The values are yielded in order of the most recently put back","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292557,"byte_end":292622,"line_start":30,"line_end":30,"column_start":5,"column_end":70}},{"value":"/ values first.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292627,"byte_end":292644,"line_start":31,"line_end":31,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292649,"byte_end":292652,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292657,"byte_end":292668,"line_start":33,"line_end":33,"column_start":5,"column_end":16}},{"value":"/ use itertools::put_back_n;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292673,"byte_end":292703,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292708,"byte_end":292711,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ let mut it = put_back_n(1..5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292716,"byte_end":292750,"line_start":36,"line_end":36,"column_start":5,"column_end":39}},{"value":"/ it.next();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292755,"byte_end":292769,"line_start":37,"line_end":37,"column_start":5,"column_end":19}},{"value":"/ it.put_back(1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292774,"byte_end":292793,"line_start":38,"line_end":38,"column_start":5,"column_end":24}},{"value":"/ it.put_back(0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292798,"byte_end":292817,"line_start":39,"line_end":39,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292822,"byte_end":292825,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ assert!(itertools::equal(it, 0..5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292830,"byte_end":292870,"line_start":41,"line_end":41,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292875,"byte_end":292882,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292887,"byte_end":292896,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4014},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293505,"byte_end":293511,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":4016}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[{"value":"/ A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293403,"byte_end":293476,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":4016},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293553,"byte_end":293559,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[{"value":"/ The boxed iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293521,"byte_end":293544,"line_start":9,"line_end":9,"column_start":5,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":2027},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294828,"byte_end":294834,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"pub fn rciter<I>(I) -> RcIter<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[{"value":"/ Return an iterator inside a `Rc<RefCell<_>>` wrapper.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293580,"byte_end":293637,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293638,"byte_end":293641,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The returned `RcIter` can be cloned, and each clone will refer back to the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293642,"byte_end":293720,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ same original iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293721,"byte_end":293748,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293749,"byte_end":293752,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `RcIter` allows doing interesting things like using `.zip()` on an iterator with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293753,"byte_end":293837,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ itself, at the cost of runtime borrow checking which may have a performance","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293838,"byte_end":293917,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ penalty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293918,"byte_end":293930,"line_start":20,"line_end":20,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293931,"byte_end":293934,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293935,"byte_end":293977,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293978,"byte_end":293981,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293982,"byte_end":293989,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use itertools::rciter;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":293990,"byte_end":294016,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ use itertools::zip;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294017,"byte_end":294040,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294041,"byte_end":294044,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // In this example a range iterator is created and we iterate it using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294045,"byte_end":294119,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ // three separate handles (two of them given to zip).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294120,"byte_end":294177,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ // We also use the IntoIterator implementation for `&RcIter`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294178,"byte_end":294243,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294244,"byte_end":294247,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut iter = rciter(0..9);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294248,"byte_end":294280,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ let mut z = zip(&iter, &iter);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294281,"byte_end":294315,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294316,"byte_end":294319,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(z.next(), Some((0, 1)));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294320,"byte_end":294359,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((2, 3)));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294360,"byte_end":294399,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((4, 5)));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294400,"byte_end":294439,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(iter.next(), Some(6));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294440,"byte_end":294477,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(z.next(), Some((7, 8)));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294478,"byte_end":294517,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294518,"byte_end":294549,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294550,"byte_end":294557,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294558,"byte_end":294561,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ **Panics** in iterator methods if a borrow error is encountered in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294562,"byte_end":294636,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ iterator methods. It can only happen if the `RcIter` is reentered in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294637,"byte_end":294709,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ `.next()`, i.e. if it somehow participates in an “iterator knot”","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294710,"byte_end":294782,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ where it is an adaptor of itself.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294783,"byte_end":294820,"line_start":46,"line_end":46,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4021},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296382,"byte_end":296389,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":4023},{"krate":0,"index":4024}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"/ An iterator that produces *n* repetitions of an element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296154,"byte_end":296214,"line_start":3,"line_end":3,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296215,"byte_end":296218,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`repeat_n()`](crate::repeat_n) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296219,"byte_end":296280,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296281,"byte_end":296346,"line_start":6,"line_end":6,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2053},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296506,"byte_end":296514,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"pub fn repeat_n<A>(A, usize) -> RepeatN<A> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that produces `n` repetitions of `element`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296432,"byte_end":296498,"line_start":13,"line_end":13,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4031},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300652,"byte_end":300662,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":4033}],"decl_id":null,"docs":" See [`repeat_call`](crate::repeat_call) for more information.\n","sig":null,"attributes":[{"value":"/ See [`repeat_call`](crate::repeat_call) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300491,"byte_end":300556,"line_start":8,"line_end":8,"column_start":1,"column_end":66}},{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8.0\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300574,"byte_end":300640,"line_start":10,"line_end":10,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":2099},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301421,"byte_end":301432,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"pub fn repeat_call<F, A>(F) -> RepeatCall<F> where F: FnMut() -> A","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[{"value":"/ An iterator source that produces elements indefinitely by calling","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300760,"byte_end":300829,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ a given closure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300830,"byte_end":300850,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300851,"byte_end":300854,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is the return type of the closure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300855,"byte_end":300915,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300916,"byte_end":300919,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300920,"byte_end":300927,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use itertools::repeat_call;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300928,"byte_end":300959,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300960,"byte_end":300989,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300990,"byte_end":301027,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301028,"byte_end":301031,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let mut heap = BinaryHeap::from(vec![2, 5, 3, 7, 8]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301032,"byte_end":301089,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301090,"byte_end":301093,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // extract each element in sorted order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301094,"byte_end":301137,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/ for element in repeat_call(|| heap.pop()).while_some() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301138,"byte_end":301198,"line_start":33,"line_end":33,"column_start":1,"column_end":61}},{"value":"/     print!(\"{}\", element);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301199,"byte_end":301229,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301230,"byte_end":301235,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301236,"byte_end":301239,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301240,"byte_end":301268,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/     repeat_call(|| 1).take(5),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301269,"byte_end":301303,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/     vec![1, 1, 1, 1, 1]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301304,"byte_end":301331,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/ );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301332,"byte_end":301338,"line_start":40,"line_end":40,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301339,"byte_end":301346,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8.0\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301347,"byte_end":301413,"line_start":42,"line_end":42,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":2108},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303036,"byte_end":303042,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"pub fn unfold<A, St, F>(St, F) -> Unfold<St, F> where F: FnMut(&mut St) ->\nOption<A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[{"value":"/ Creates a new unfold source with the specified closure as the \"iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301806,"byte_end":301881,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ function\" and an initial state to eventually pass to the closure","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301882,"byte_end":301950,"line_start":65,"line_end":65,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301951,"byte_end":301954,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ `unfold` is a general iterator builder: it has a mutable state value,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301955,"byte_end":302028,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ and a closure with access to the state that produces the next value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302029,"byte_end":302101,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302102,"byte_end":302105,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ This more or less equivalent to a regular struct with an [`Iterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302106,"byte_end":302179,"line_start":70,"line_end":70,"column_start":1,"column_end":74}},{"value":"/ implementation, and is useful for one-off iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302180,"byte_end":302236,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302237,"byte_end":302240,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302241,"byte_end":302248,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ // an iterator that yields sequential Fibonacci numbers,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302249,"byte_end":302309,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"/ // and stops at the maximum representable value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302310,"byte_end":302362,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302363,"byte_end":302366,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ use itertools::unfold;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302367,"byte_end":302393,"line_start":77,"line_end":77,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302394,"byte_end":302397,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ let mut fibonacci = unfold((1u32, 1u32), |(x1, x2)| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302398,"byte_end":302455,"line_start":79,"line_end":79,"column_start":1,"column_end":58}},{"value":"/     // Attempt to get the next Fibonacci number","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302456,"byte_end":302507,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/     let next = x1.saturating_add(*x2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302508,"byte_end":302550,"line_start":81,"line_end":81,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302551,"byte_end":302554,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/     // Shift left: ret <- x1 <- x2 <- next","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302555,"byte_end":302601,"line_start":83,"line_end":83,"column_start":1,"column_end":47}},{"value":"/     let ret = *x1;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302602,"byte_end":302624,"line_start":84,"line_end":84,"column_start":1,"column_end":23}},{"value":"/     *x1 = *x2;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302625,"byte_end":302643,"line_start":85,"line_end":85,"column_start":1,"column_end":19}},{"value":"/     *x2 = next;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302644,"byte_end":302663,"line_start":86,"line_end":86,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302664,"byte_end":302667,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/     // If addition has saturated at the maximum, we are finished","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302668,"byte_end":302736,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/     if ret == *x1 && ret > 1 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302737,"byte_end":302771,"line_start":89,"line_end":89,"column_start":1,"column_end":35}},{"value":"/         None","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302772,"byte_end":302788,"line_start":90,"line_end":90,"column_start":1,"column_end":17}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302789,"byte_end":302805,"line_start":91,"line_end":91,"column_start":1,"column_end":17}},{"value":"/         Some(ret)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302806,"byte_end":302827,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302828,"byte_end":302837,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302838,"byte_end":302845,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302846,"byte_end":302849,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(fibonacci.by_ref().take(8),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302850,"byte_end":302905,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/                         vec![1, 1, 2, 3, 5, 8, 13, 21]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302906,"byte_end":302966,"line_start":97,"line_end":97,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(fibonacci.last(), Some(2_971_215_073))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":302967,"byte_end":303020,"line_start":98,"line_end":98,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303021,"byte_end":303028,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4039},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303461,"byte_end":303467,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":4042},{"krate":0,"index":4043}],"decl_id":null,"docs":" See [`unfold`](crate::unfold) for more information.\n","sig":null,"attributes":[{"value":"/ See [`unfold`](crate::unfold) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303311,"byte_end":303366,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303384,"byte_end":303449,"line_start":117,"line_end":117,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":4043},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303575,"byte_end":303580,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":4039},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[{"value":"/ Internal state that will be passed to the closure on the next iteration","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303491,"byte_end":303566,"line_start":120,"line_end":120,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":4048},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304086,"byte_end":304093,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":4051},{"krate":0,"index":4052}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ An iterator that infinitely applies function to value and yields results.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303798,"byte_end":303875,"line_start":135,"line_end":135,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303876,"byte_end":303879,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iterate()`](crate::iterate) function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303880,"byte_end":303955,"line_start":137,"line_end":137,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303956,"byte_end":303991,"line_start":138,"line_end":138,"column_start":1,"column_end":36}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304009,"byte_end":304074,"line_start":140,"line_end":140,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2130},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304850,"byte_end":304857,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"pub fn iterate<St, F>(St, F) -> Iterate<St, F> where F: FnMut(&St) -> St","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ Creates a new iterator that infinitely applies function to value and yields results.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304618,"byte_end":304706,"line_start":169,"line_end":169,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304707,"byte_end":304710,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304711,"byte_end":304718,"line_start":171,"line_end":171,"column_start":1,"column_end":8}},{"value":"/ use itertools::iterate;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304719,"byte_end":304746,"line_start":172,"line_end":172,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304747,"byte_end":304750,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(iterate(1, |&i| i * 3).take(5), vec![1, 3, 9, 27, 81]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304751,"byte_end":304834,"line_start":174,"line_end":174,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304835,"byte_end":304842,"line_start":175,"line_end":175,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4068},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":305566,"byte_end":305569,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":4070},{"krate":0,"index":4071}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"/ One half of an iterator pair where both return the same elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":305326,"byte_end":305395,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":305396,"byte_end":305399,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See [`.tee()`](crate::Itertools::tee) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":305400,"byte_end":305463,"line_start":18,"line_end":18,"column_start":1,"column_end":64}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":305464,"byte_end":305537,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2171},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307637,"byte_end":307653,"line_start":15,"line_end":15,"column_start":11,"column_end":27},"name":"HomogeneousTuple","qualname":"::tuple_impl::HomogeneousTuple","value":"HomogeneousTuple: TupleCollect","parent":null,"children":[],"decl_id":null,"docs":" Implemented for homogeneous tuples of size up to 12.\n","sig":null,"attributes":[{"value":"/ Implemented for homogeneous tuples of size up to 12.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307570,"byte_end":307626,"line_start":14,"line_end":14,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":4075},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307889,"byte_end":307900,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":4077},{"krate":0,"index":4078}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[{"value":"/ An iterator over a incomplete tuple.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307726,"byte_end":307766,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307767,"byte_end":307770,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](crate::Itertools::tuples) and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307771,"byte_end":307822,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ [`Tuples::into_buffer()`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307823,"byte_end":307853,"line_start":24,"line_end":24,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4085},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309156,"byte_end":309162,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":4088},{"krate":0,"index":4089}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator that groups the items in tuples of a specific size.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":308905,"byte_end":308972,"line_start":77,"line_end":77,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":308973,"byte_end":308976,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](crate::Itertools::tuples) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":308977,"byte_end":309046,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309071,"byte_end":309144,"line_start":81,"line_end":81,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310226,"byte_end":310237,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"pub fn into_buffer(Self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[{"value":"/ Return a buffer with the produced items that was not enough to be grouped in a tuple.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309857,"byte_end":309946,"line_start":116,"line_end":116,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309951,"byte_end":309954,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309959,"byte_end":309966,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309971,"byte_end":310000,"line_start":119,"line_end":119,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310005,"byte_end":310008,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..5).tuples();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310013,"byte_end":310048,"line_start":121,"line_end":121,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some((0, 1, 2)), iter.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310053,"byte_end":310098,"line_start":122,"line_end":122,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310103,"byte_end":310137,"line_start":123,"line_end":123,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(vec![3, 4], iter.into_buffer());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310142,"byte_end":310202,"line_start":124,"line_end":124,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310207,"byte_end":310214,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4098},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310595,"byte_end":310607,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":4101},{"krate":0,"index":4102}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all contiguous windows that produces tuples of a specific size.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310309,"byte_end":310393,"line_start":132,"line_end":132,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310394,"byte_end":310397,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_windows()`](crate::Itertools::tuple_windows) for more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310398,"byte_end":310468,"line_start":134,"line_end":134,"column_start":1,"column_end":71}},{"value":"/ information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310469,"byte_end":310485,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":310486,"byte_end":310559,"line_start":136,"line_end":136,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4111},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":312456,"byte_end":312476,"line_start":205,"line_end":205,"column_start":12,"column_end":32},"name":"CircularTupleWindows","qualname":"::tuple_impl::CircularTupleWindows","value":"CircularTupleWindows {  }","parent":null,"children":[{"krate":0,"index":4114},{"krate":0,"index":4115}],"decl_id":null,"docs":" An iterator over all windows,wrapping back to the first elements when the\n window would otherwise exceed the length of the iterator, producing tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all windows,wrapping back to the first elements when the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":312063,"byte_end":312140,"line_start":197,"line_end":197,"column_start":1,"column_end":78}},{"value":"/ window would otherwise exceed the length of the iterator, producing tuples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":312141,"byte_end":312219,"line_start":198,"line_end":198,"column_start":1,"column_end":79}},{"value":"/ of a specific size.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":312220,"byte_end":312243,"line_start":199,"line_end":199,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":312244,"byte_end":312247,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ See [`.circular_tuple_windows()`](crate::Itertools::circular_tuple_windows) for more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":312248,"byte_end":312336,"line_start":201,"line_end":201,"column_start":1,"column_end":89}},{"value":"/ information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":312337,"byte_end":312353,"line_start":202,"line_end":202,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":312354,"byte_end":312427,"line_start":203,"line_end":203,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2220},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313294,"byte_end":313306,"line_start":239,"line_end":239,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2225},{"krate":0,"index":2227},{"krate":0,"index":2228}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2221},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313325,"byte_end":313329,"line_start":240,"line_end":240,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2222},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313340,"byte_end":313346,"line_start":241,"line_end":241,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2223},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313425,"byte_end":313442,"line_start":243,"line_end":243,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"pub fn collect_from_iter<I>(I, &mut Self::Buffer) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2225},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313553,"byte_end":313577,"line_start":246,"line_end":246,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"pub fn collect_from_iter_no_buf<I>(I) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2227},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313664,"byte_end":313673,"line_start":249,"line_end":249,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"pub fn num_items() -> usize","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2228},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313694,"byte_end":313709,"line_start":251,"line_end":251,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"pub fn left_shift_push(&mut Self, Self::Item)","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4300},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":316288,"byte_end":316300,"line_start":10,"line_end":10,"column_start":16,"column_end":28},"name":"DuplicatesBy","qualname":"::duplicates_impl::private::DuplicatesBy","value":"DuplicatesBy {  }","parent":null,"children":[{"krate":0,"index":4304},{"krate":0,"index":4305}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":316199,"byte_end":316272,"line_start":9,"line_end":9,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":2275},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319626,"byte_end":319635,"line_start":118,"line_end":118,"column_start":15,"column_end":24},"name":"KeyMethod","qualname":"::duplicates_impl::private::KeyMethod","value":"KeyMethod<K, V>","parent":null,"children":[{"krate":0,"index":2278},{"krate":0,"index":2279}],"decl_id":null,"docs":" A keying method for use with `DuplicatesBy`\n","sig":null,"attributes":[{"value":"/ A keying method for use with `DuplicatesBy`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319564,"byte_end":319611,"line_start":117,"line_end":117,"column_start":5,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":2278},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319657,"byte_end":319666,"line_start":119,"line_end":119,"column_start":14,"column_end":23},"name":"Container","qualname":"::duplicates_impl::private::KeyMethod::Container","value":"type Container: KeyXorValue<K, V>;","parent":{"krate":0,"index":2275},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2279},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319699,"byte_end":319703,"line_start":121,"line_end":121,"column_start":12,"column_end":16},"name":"make","qualname":"::duplicates_impl::private::KeyMethod::make","value":"pub fn make(&mut Self, V) -> Self::Container","parent":{"krate":0,"index":2275},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4322},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319871,"byte_end":319875,"line_start":126,"line_end":126,"column_start":16,"column_end":20},"name":"ById","qualname":"::duplicates_impl::private::ById","value":"","parent":null,"children":[],"decl_id":null,"docs":" Apply the identity function to elements before checking them for equality.\n","sig":null,"attributes":[{"value":"/ Apply the identity function to elements before checking them for equality.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319756,"byte_end":319834,"line_start":124,"line_end":124,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2284},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320153,"byte_end":320157,"line_start":136,"line_end":136,"column_start":16,"column_end":20},"name":"ByFn","qualname":"::duplicates_impl::private::ByFn","value":"","parent":null,"children":[],"decl_id":null,"docs":" Apply a user-supplied function to elements before checking them for equality.\n","sig":null,"attributes":[{"value":"/ Apply a user-supplied function to elements before checking them for equality.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320056,"byte_end":320137,"line_start":135,"line_end":135,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":4327},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320845,"byte_end":320853,"line_start":160,"line_end":160,"column_start":16,"column_end":24},"name":"KeyValue","qualname":"::duplicates_impl::private::KeyValue","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4337},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321144,"byte_end":321153,"line_start":174,"line_end":174,"column_start":16,"column_end":25},"name":"JustValue","qualname":"::duplicates_impl::private::JustValue","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2313},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321628,"byte_end":321640,"line_start":192,"line_end":192,"column_start":10,"column_end":22},"name":"DuplicatesBy","qualname":"::duplicates_impl::DuplicatesBy","value":"private::DuplicatesBy<I, V, private::ByFn<F>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to filter for duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter for duplicate elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321399,"byte_end":321456,"line_start":188,"line_end":188,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321457,"byte_end":321460,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ See [`.duplicates_by()`](crate::Itertools::duplicates_by) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321461,"byte_end":321544,"line_start":190,"line_end":190,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321545,"byte_end":321618,"line_start":191,"line_end":191,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":2321},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":322090,"byte_end":322100,"line_start":207,"line_end":207,"column_start":10,"column_end":20},"name":"Duplicates","qualname":"::duplicates_impl::Duplicates","value":"private::DuplicatesBy<I, <I as Iterator>::Item, private::ById>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321941,"byte_end":321998,"line_start":204,"line_end":204,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321999,"byte_end":322002,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ See [`.duplicates()`](crate::Itertools::duplicates) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":322003,"byte_end":322080,"line_start":206,"line_end":206,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":4344},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":322728,"byte_end":322736,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":4348},{"krate":0,"index":4349},{"krate":0,"index":4350}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":322491,"byte_end":322548,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":322549,"byte_end":322552,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.unique_by()`](crate::Itertools::unique) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":322553,"byte_end":322625,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":322643,"byte_end":322716,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4357},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326461,"byte_end":326467,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":4359}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326227,"byte_end":326284,"line_start":151,"line_end":151,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326285,"byte_end":326288,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ See [`.unique()`](crate::Itertools::unique) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326289,"byte_end":326358,"line_start":153,"line_end":153,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326376,"byte_end":326449,"line_start":155,"line_end":155,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2388},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327479,"byte_end":327489,"line_start":21,"line_end":21,"column_start":8,"column_end":18},"name":"multiunzip","qualname":"::unziptuple::multiunzip","value":"pub fn multiunzip<FromI, I>(I) -> FromI where I: IntoIterator,\nI::IntoIter: MultiUnzip<FromI>","parent":null,"children":[],"decl_id":null,"docs":" Converts an iterator of tuples into a tuple of containers.","sig":null,"attributes":[{"value":"/ Converts an iterator of tuples into a tuple of containers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":326898,"byte_end":326960,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":326961,"byte_end":326964,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ `unzip()` consumes an entire iterator of n-ary tuples, producing `n` collections, one for each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":326965,"byte_end":327063,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ column.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327064,"byte_end":327075,"line_start":4,"line_end":4,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327076,"byte_end":327079,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This function is, in some sense, the opposite of [`multizip`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327080,"byte_end":327146,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327147,"byte_end":327150,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327151,"byte_end":327158,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"/ use itertools::multiunzip;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327159,"byte_end":327189,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327190,"byte_end":327193,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ let inputs = vec![(1, 2, 3), (4, 5, 6), (7, 8, 9)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327194,"byte_end":327249,"line_start":11,"line_end":11,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327250,"byte_end":327253,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ let (a, b, c): (Vec<_>, Vec<_>, Vec<_>) = multiunzip(inputs);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327254,"byte_end":327319,"line_start":13,"line_end":13,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327320,"byte_end":327323,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(a, vec![1, 4, 7]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327324,"byte_end":327357,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, vec![2, 5, 8]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327358,"byte_end":327391,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(c, vec![3, 6, 9]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327392,"byte_end":327425,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327426,"byte_end":327433,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327434,"byte_end":327437,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [`multizip`]: crate::multizip","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327438,"byte_end":327471,"line_start":20,"line_end":20,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":2391},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327770,"byte_end":327780,"line_start":32,"line_end":32,"column_start":11,"column_end":21},"name":"MultiUnzip","qualname":"::unziptuple::MultiUnzip","value":"MultiUnzip<FromI>: Iterator","parent":null,"children":[{"krate":0,"index":2393}],"decl_id":null,"docs":" An iterator that can be unzipped into multiple collections.","sig":null,"attributes":[{"value":"/ An iterator that can be unzipped into multiple collections.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327614,"byte_end":327677,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327678,"byte_end":327681,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ See [`.multiunzip()`](crate::Itertools::multiunzip) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327682,"byte_end":327759,"line_start":31,"line_end":31,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327862,"byte_end":327872,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"multiunzip","qualname":"::unziptuple::MultiUnzip::multiunzip","value":"pub fn multiunzip(Self) -> FromI","parent":{"krate":0,"index":2391},"children":[],"decl_id":null,"docs":" Unzip this iterator into multiple collections.\n","sig":null,"attributes":[{"value":"/ Unzip this iterator into multiple collections.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327804,"byte_end":327854,"line_start":33,"line_end":33,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2406},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330655,"byte_end":330667,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2409}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`].","sig":null,"attributes":[{"value":"/ An iterator adaptor that wraps each element in an [`Position`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330360,"byte_end":330427,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330428,"byte_end":330431,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Position<I::Item>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330432,"byte_end":330481,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330482,"byte_end":330485,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](crate::Itertools::with_position) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330486,"byte_end":330569,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330570,"byte_end":330643,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4575},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331414,"byte_end":331419,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":4573},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[{"value":"/ This is the first element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331379,"byte_end":331409,"line_start":39,"line_end":39,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4578},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331484,"byte_end":331490,"line_start":42,"line_end":42,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":4573},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[{"value":"/ This is neither the first nor the last element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331428,"byte_end":331479,"line_start":41,"line_end":41,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4581},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331533,"byte_end":331537,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":4573},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[{"value":"/ This is the last element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331499,"byte_end":331528,"line_start":43,"line_end":43,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4584},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331580,"byte_end":331584,"line_start":46,"line_end":46,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":4573},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[{"value":"/ This is the only element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331546,"byte_end":331575,"line_start":45,"line_end":45,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":4573},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331361,"byte_end":331369,"line_start":38,"line_end":38,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"pub enum Position<T> { First(T), Middle(T), Last(T), Only(T), }","parent":null,"children":[{"krate":0,"index":4575},{"krate":0,"index":4578},{"krate":0,"index":4581},{"krate":0,"index":4584}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"/ A value yielded by `WithPosition`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331116,"byte_end":331154,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/ Indicates the position of this element in the iterator results.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331155,"byte_end":331222,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331223,"byte_end":331226,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](crate::Itertools::with_position) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331227,"byte_end":331310,"line_start":36,"line_end":36,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2416},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331657,"byte_end":331667,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[{"value":"/ Return the inner value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331618,"byte_end":331645,"line_start":50,"line_end":50,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4601},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333517,"byte_end":333522,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":4604},{"krate":0,"index":4605}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333268,"byte_end":333333,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333334,"byte_end":333337,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_eq()`](crate::Itertools::zip_eq) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333338,"byte_end":333407,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333432,"byte_end":333505,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2430},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333933,"byte_end":333939,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"pub fn zip_eq<I, J>(I, J) -> ZipEq<I::IntoIter, J::IntoIter> where\nI: IntoIterator, J: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333554,"byte_end":333591,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333592,"byte_end":333595,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the iterators are not of the same length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333596,"byte_end":333655,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333656,"byte_end":333659,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::zip_eq`](crate::Itertools::zip_eq).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333660,"byte_end":333748,"line_start":17,"line_end":17,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333749,"byte_end":333752,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333753,"byte_end":333760,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip_eq;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333761,"byte_end":333787,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333788,"byte_end":333791,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333792,"byte_end":333823,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip_eq(&data[..data.len() - 1], &data[1..]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333824,"byte_end":333887,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     /* loop body */","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333888,"byte_end":333911,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333912,"byte_end":333917,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":333918,"byte_end":333925,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4614},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335375,"byte_end":335385,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":4617},{"krate":0,"index":4618}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335082,"byte_end":335147,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335148,"byte_end":335151,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335152,"byte_end":335181,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335182,"byte_end":335185,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_longest()`](crate::Itertools::zip_longest) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335186,"byte_end":335265,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335290,"byte_end":335363,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4627},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337482,"byte_end":337485,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":4629}],"decl_id":null,"docs":" See [`multizip`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`multizip`] for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337330,"byte_end":337372,"line_start":3,"line_end":3,"column_start":1,"column_end":43}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337397,"byte_end":337470,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2489},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338614,"byte_end":338622,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"pub fn multizip<T, U>(U) -> Zip<T> where Zip<T>: From<U>, Zip<T>: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[{"value":"/ An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337504,"byte_end":337596,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337597,"byte_end":337600,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The iterator `Zip<(I, J, ..., M)>` is formed from a tuple of iterators (or values that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337601,"byte_end":337691,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ implement [`IntoIterator`]) and yields elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337692,"byte_end":337743,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ until any of the subiterators yields `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337744,"byte_end":337792,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337793,"byte_end":337796,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The iterator element type is a tuple like like `(A, B, ..., E)` where `A` to `E` are the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337797,"byte_end":337889,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ element types of the subiterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337890,"byte_end":337927,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337928,"byte_end":337931,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ **Note:** The result of this macro is a value of a named type (`Zip<(I, J,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":337932,"byte_end":338010,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ ..)>` of each component iterator `I, J, ...`) if each component iterator is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338011,"byte_end":338090,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ nameable.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338091,"byte_end":338104,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338105,"byte_end":338108,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Prefer [`izip!()`] over `multizip` for the performance benefits of using the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338109,"byte_end":338189,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ standard library `.zip()`. Prefer `multizip` if a nameable type is needed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338190,"byte_end":338268,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338269,"byte_end":338272,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338273,"byte_end":338280,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use itertools::multizip;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338281,"byte_end":338309,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338310,"byte_end":338313,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // iterate over three sequences side-by-side","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338314,"byte_end":338362,"line_start":29,"line_end":29,"column_start":1,"column_end":49}},{"value":"/ let mut results = [0, 0, 0, 0];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338363,"byte_end":338398,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/ let inputs = [3, 7, 9, 6];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338399,"byte_end":338429,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338430,"byte_end":338433,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ for (r, index, input) in multizip((&mut results, 0..10, &inputs)) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338434,"byte_end":338505,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/     *r = index * 10 + input;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338506,"byte_end":338538,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338539,"byte_end":338544,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338545,"byte_end":338548,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(results, [0 + 3, 10 + 7, 29, 36]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338549,"byte_end":338598,"line_start":37,"line_end":37,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/ziptuple.rs","byte_start":338599,"byte_end":338606,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":2496},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12709,"byte_end":12718,"line_start":429,"line_end":429,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":2497},{"krate":0,"index":2499},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2511},{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2525},{"krate":0,"index":2530},{"krate":0,"index":2535},{"krate":0,"index":2539},{"krate":0,"index":2544},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2552},{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2558},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2577},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2583},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2596},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2605},{"krate":0,"index":2608},{"krate":0,"index":2611},{"krate":0,"index":2613},{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2621},{"krate":0,"index":2625},{"krate":0,"index":2629},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":2639},{"krate":0,"index":2644},{"krate":0,"index":2648},{"krate":0,"index":2651},{"krate":0,"index":2663},{"krate":0,"index":2674},{"krate":0,"index":2677},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":2686},{"krate":0,"index":2687},{"krate":0,"index":2689},{"krate":0,"index":2692},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2703},{"krate":0,"index":2709},{"krate":0,"index":2712},{"krate":0,"index":2716},{"krate":0,"index":2719},{"krate":0,"index":2723},{"krate":0,"index":2726},{"krate":0,"index":2730},{"krate":0,"index":2734},{"krate":0,"index":2737},{"krate":0,"index":2742},{"krate":0,"index":2746},{"krate":0,"index":2749},{"krate":0,"index":2754},{"krate":0,"index":2758},{"krate":0,"index":2771},{"krate":0,"index":2785},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2803},{"krate":0,"index":2806}],"decl_id":null,"docs":" An [`Iterator`] blanket implementation that provides extra adaptors and\n methods.","sig":null,"attributes":[{"value":"/ An [`Iterator`] blanket implementation that provides extra adaptors and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12089,"byte_end":12164,"line_start":416,"line_end":416,"column_start":1,"column_end":76}},{"value":"/ methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12165,"byte_end":12177,"line_start":417,"line_end":417,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12178,"byte_end":12181,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ This trait defines a number of methods. They are divided into two groups:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12182,"byte_end":12259,"line_start":419,"line_end":419,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12260,"byte_end":12263,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ * *Adaptors* take an iterator and parameter as input, and return","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12264,"byte_end":12332,"line_start":421,"line_end":421,"column_start":1,"column_end":69}},{"value":"/ a new iterator value. These are listed first in the trait. An example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12333,"byte_end":12406,"line_start":422,"line_end":422,"column_start":1,"column_end":74}},{"value":"/ of an adaptor is [`.interleave()`](Itertools::interleave)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12407,"byte_end":12468,"line_start":423,"line_end":423,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12469,"byte_end":12472,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ * *Regular methods* are those that don't return iterators and instead","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12473,"byte_end":12546,"line_start":425,"line_end":425,"column_start":1,"column_end":74}},{"value":"/ return a regular value of some other kind.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12547,"byte_end":12593,"line_start":426,"line_end":426,"column_start":1,"column_end":47}},{"value":"/ [`.next_tuple()`](Itertools::next_tuple) is an example and the first regular","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12594,"byte_end":12674,"line_start":427,"line_end":427,"column_start":1,"column_end":81}},{"value":"/ method in the list.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12675,"byte_end":12698,"line_start":428,"line_end":428,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13117,"byte_end":13127,"line_start":444,"line_end":444,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"pub fn interleave<J>(Self, J) -> Interleave<Self, J::IntoIter> where\nJ: IntoIterator<Item = Self::Item>, Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until both have run out.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12753,"byte_end":12819,"line_start":432,"line_end":432,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12824,"byte_end":12827,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12832,"byte_end":12874,"line_start":434,"line_end":434,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12879,"byte_end":12882,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12887,"byte_end":12916,"line_start":436,"line_end":436,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12921,"byte_end":12924,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12929,"byte_end":12936,"line_start":438,"line_end":438,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12941,"byte_end":12970,"line_start":439,"line_end":439,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12975,"byte_end":12978,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave(vec![-1, -2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12983,"byte_end":13028,"line_start":441,"line_end":441,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3, 4, 5, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13033,"byte_end":13097,"line_start":442,"line_end":442,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13102,"byte_end":13109,"line_start":443,"line_end":443,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2499},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13650,"byte_end":13669,"line_start":462,"line_end":462,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"pub fn interleave_shortest<J>(Self, J)\n-> InterleaveShortest<Self, J::IntoIter> where J: IntoIterator<Item =\nSelf::Item>, Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until at least one of them has run","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13305,"byte_end":13381,"line_start":451,"line_end":451,"column_start":5,"column_end":81}},{"value":"/ out.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13386,"byte_end":13394,"line_start":452,"line_end":452,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13399,"byte_end":13402,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13407,"byte_end":13449,"line_start":454,"line_end":454,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13454,"byte_end":13457,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13462,"byte_end":13469,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13474,"byte_end":13503,"line_start":457,"line_end":457,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13508,"byte_end":13511,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave_shortest(vec![-1, -2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13516,"byte_end":13570,"line_start":459,"line_end":459,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13575,"byte_end":13630,"line_start":460,"line_end":460,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13635,"byte_end":13642,"line_start":461,"line_end":461,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14248,"byte_end":14259,"line_start":481,"line_end":481,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13886,"byte_end":13938,"line_start":469,"line_end":469,"column_start":5,"column_end":57}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13943,"byte_end":13992,"line_start":470,"line_end":470,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":13997,"byte_end":14000,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14005,"byte_end":14047,"line_start":472,"line_end":472,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14052,"byte_end":14055,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14060,"byte_end":14089,"line_start":474,"line_end":474,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14094,"byte_end":14097,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14102,"byte_end":14109,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14114,"byte_end":14143,"line_start":477,"line_end":477,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14148,"byte_end":14151,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal((0..3).intersperse(8), vec![0, 8, 1, 8, 2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14156,"byte_end":14228,"line_start":479,"line_end":479,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14233,"byte_end":14240,"line_start":480,"line_end":480,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14886,"byte_end":14902,"line_start":502,"line_end":502,"column_start":8,"column_end":24},"name":"intersperse_with","qualname":"::Itertools::intersperse_with","value":"pub fn intersperse_with<F>(Self, F) -> IntersperseWith<Self, F> where\nSelf: Sized, F: FnMut() -> Self::Item","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value created by a function\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value created by a function","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14432,"byte_end":14506,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14511,"byte_end":14560,"line_start":489,"line_end":489,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14565,"byte_end":14568,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14573,"byte_end":14615,"line_start":491,"line_end":491,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14620,"byte_end":14623,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14628,"byte_end":14657,"line_start":493,"line_end":493,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14662,"byte_end":14665,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14670,"byte_end":14677,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14682,"byte_end":14711,"line_start":496,"line_end":496,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14716,"byte_end":14719,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ let mut i = 10;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14724,"byte_end":14743,"line_start":498,"line_end":498,"column_start":5,"column_end":24}},{"value":"/ itertools::assert_equal((0..3).intersperse_with(|| { i -= 1; i }), vec![0, 9, 1, 8, 2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14748,"byte_end":14840,"line_start":499,"line_end":499,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(i, 8);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14845,"byte_end":14866,"line_start":500,"line_end":500,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":14871,"byte_end":14878,"line_start":501,"line_end":501,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16142,"byte_end":16153,"line_start":536,"line_end":536,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"pub fn zip_longest<J>(Self, J) -> ZipLongest<Self, J::IntoIter> where\nJ: IntoIterator, Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15082,"byte_end":15152,"line_start":509,"line_end":509,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of two optional elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15157,"byte_end":15226,"line_start":510,"line_end":510,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15231,"byte_end":15234,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15239,"byte_end":15268,"line_start":512,"line_end":512,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15273,"byte_end":15276,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ As long as neither input iterator is exhausted yet, it yields two values","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15281,"byte_end":15357,"line_start":514,"line_end":514,"column_start":5,"column_end":81}},{"value":"/ via `EitherOrBoth::Both`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15362,"byte_end":15391,"line_start":515,"line_end":515,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15396,"byte_end":15399,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ When the parameter iterator is exhausted, it only yields a value from the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15404,"byte_end":15481,"line_start":517,"line_end":517,"column_start":5,"column_end":82}},{"value":"/ `self` iterator via `EitherOrBoth::Left`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15486,"byte_end":15531,"line_start":518,"line_end":518,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15536,"byte_end":15539,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ When the `self` iterator is exhausted, it only yields a value from the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15544,"byte_end":15618,"line_start":520,"line_end":520,"column_start":5,"column_end":79}},{"value":"/ parameter iterator via `EitherOrBoth::Right`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15623,"byte_end":15672,"line_start":521,"line_end":521,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15677,"byte_end":15680,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ When both iterators return `None`, all further invocations of `.next()`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15685,"byte_end":15760,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/ will return `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15765,"byte_end":15788,"line_start":524,"line_end":524,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15793,"byte_end":15796,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15801,"byte_end":15829,"line_start":526,"line_end":526,"column_start":5,"column_end":33}},{"value":"/ [`EitherOrBoth<Self::Item, J::Item>`](EitherOrBoth).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15834,"byte_end":15890,"line_start":527,"line_end":527,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15895,"byte_end":15898,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15903,"byte_end":15914,"line_start":529,"line_end":529,"column_start":5,"column_end":16}},{"value":"/ use itertools::EitherOrBoth::{Both, Right};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15919,"byte_end":15966,"line_start":530,"line_end":530,"column_start":5,"column_end":52}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":15971,"byte_end":16000,"line_start":531,"line_end":531,"column_start":5,"column_end":34}},{"value":"/ let it = (0..1).zip_longest(1..3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16005,"byte_end":16043,"line_start":532,"line_end":532,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(it, vec![Both(0, 1), Right(2)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16048,"byte_end":16108,"line_start":533,"line_end":533,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16113,"byte_end":16120,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16125,"byte_end":16134,"line_start":535,"line_end":535,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2506},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16591,"byte_end":16597,"line_start":549,"line_end":549,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"pub fn zip_eq<J>(Self, J) -> ZipEq<Self, J::IntoIter> where J: IntoIterator,\nSelf: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16338,"byte_end":16408,"line_start":543,"line_end":543,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16413,"byte_end":16469,"line_start":544,"line_end":544,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16474,"byte_end":16477,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the iterators reach an end and they are not of equal","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16482,"byte_end":16552,"line_start":546,"line_end":546,"column_start":5,"column_end":75}},{"value":"/ lengths.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16557,"byte_end":16569,"line_start":547,"line_end":547,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16574,"byte_end":16583,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17513,"byte_end":17521,"line_start":579,"line_end":579,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"pub fn batching<B, F>(Self, F) -> Batching<Self, F> where F: FnMut(&mut Self)\n-> Option<B>, Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16747,"byte_end":16821,"line_start":556,"line_end":556,"column_start":5,"column_end":75}},{"value":"/ iterator and may pick off as many elements as it likes, to produce the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16826,"byte_end":16900,"line_start":557,"line_end":557,"column_start":5,"column_end":79}},{"value":"/ next iterator element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16905,"byte_end":16931,"line_start":558,"line_end":558,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16936,"byte_end":16939,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `B`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16944,"byte_end":16977,"line_start":560,"line_end":560,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16982,"byte_end":16985,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":16990,"byte_end":16997,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17002,"byte_end":17031,"line_start":563,"line_end":563,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17036,"byte_end":17039,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ // An adaptor that gathers elements in pairs","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17044,"byte_end":17092,"line_start":565,"line_end":565,"column_start":5,"column_end":53}},{"value":"/ let pit = (0..4).batching(|it| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17097,"byte_end":17133,"line_start":566,"line_end":566,"column_start":5,"column_end":41}},{"value":"/            match it.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17138,"byte_end":17170,"line_start":567,"line_end":567,"column_start":5,"column_end":37}},{"value":"/                None => None,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17175,"byte_end":17207,"line_start":568,"line_end":568,"column_start":5,"column_end":37}},{"value":"/                Some(x) => match it.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17212,"byte_end":17259,"line_start":569,"line_end":569,"column_start":5,"column_end":52}},{"value":"/                    None => None,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17264,"byte_end":17300,"line_start":570,"line_end":570,"column_start":5,"column_end":41}},{"value":"/                    Some(y) => Some((x, y)),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17305,"byte_end":17352,"line_start":571,"line_end":571,"column_start":5,"column_end":52}},{"value":"/                }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17357,"byte_end":17377,"line_start":572,"line_end":572,"column_start":5,"column_end":25}},{"value":"/            }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17382,"byte_end":17398,"line_start":573,"line_end":573,"column_start":5,"column_end":21}},{"value":"/        });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17403,"byte_end":17417,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17422,"byte_end":17425,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(pit, vec![(0, 1), (2, 3)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17430,"byte_end":17485,"line_start":576,"line_end":576,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17490,"byte_end":17497,"line_start":577,"line_end":577,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17502,"byte_end":17505,"line_start":578,"line_end":578,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2511},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19252,"byte_end":19260,"line_start":621,"line_end":621,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"pub fn group_by<K, F>(Self, F) -> GroupBy<K, Self, F> where Self: Sized,\nF: FnMut(&Self::Item) -> K, K: PartialEq","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an *iterable* that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can group iterator elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17688,"byte_end":17746,"line_start":586,"line_end":586,"column_start":5,"column_end":63}},{"value":"/ Consecutive elements that map to the same key (“runs”), are assigned","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17751,"byte_end":17827,"line_start":587,"line_end":587,"column_start":5,"column_end":77}},{"value":"/ to the same group.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17832,"byte_end":17854,"line_start":588,"line_end":588,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17859,"byte_end":17862,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17867,"byte_end":17928,"line_start":590,"line_end":590,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17933,"byte_end":17936,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ If the groups are consumed in order, or if each group's iterator is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":17941,"byte_end":18012,"line_start":592,"line_end":592,"column_start":5,"column_end":76}},{"value":"/ dropped without keeping it around, then `GroupBy` uses no","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18017,"byte_end":18078,"line_start":593,"line_end":593,"column_start":5,"column_end":66}},{"value":"/ allocations.  It needs allocations only if several group iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18083,"byte_end":18153,"line_start":594,"line_end":594,"column_start":5,"column_end":75}},{"value":"/ are alive at the same time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18158,"byte_end":18189,"line_start":595,"line_end":595,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18194,"byte_end":18197,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18202,"byte_end":18270,"line_start":597,"line_end":597,"column_start":5,"column_end":73}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18275,"byte_end":18340,"line_start":598,"line_end":598,"column_start":5,"column_end":70}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18345,"byte_end":18412,"line_start":599,"line_end":599,"column_start":5,"column_end":72}},{"value":"/ iterated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18417,"byte_end":18430,"line_start":600,"line_end":600,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18435,"byte_end":18438,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(K, Group)`: the group's key and the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18443,"byte_end":18509,"line_start":602,"line_end":602,"column_start":5,"column_end":71}},{"value":"/ group iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18514,"byte_end":18533,"line_start":603,"line_end":603,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18538,"byte_end":18541,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18546,"byte_end":18553,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18558,"byte_end":18587,"line_start":606,"line_end":606,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18592,"byte_end":18595,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ // group data into runs of larger than zero or not.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18600,"byte_end":18655,"line_start":608,"line_end":608,"column_start":5,"column_end":60}},{"value":"/ let data = vec![1, 3, -2, -2, 1, 0, 1, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18660,"byte_end":18706,"line_start":609,"line_end":609,"column_start":5,"column_end":51}},{"value":"/ // groups:     |---->|------>|--------->|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18711,"byte_end":18756,"line_start":610,"line_end":610,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18761,"byte_end":18764,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `GroupBy` is iterable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18769,"byte_end":18832,"line_start":612,"line_end":612,"column_start":5,"column_end":68}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18837,"byte_end":18907,"line_start":613,"line_end":613,"column_start":5,"column_end":75}},{"value":"/ let mut data_grouped = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18912,"byte_end":18950,"line_start":614,"line_end":614,"column_start":5,"column_end":43}},{"value":"/ for (key, group) in &data.into_iter().group_by(|elt| *elt >= 0) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":18955,"byte_end":19024,"line_start":615,"line_end":615,"column_start":5,"column_end":74}},{"value":"/     data_grouped.push((key, group.collect()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19029,"byte_end":19079,"line_start":616,"line_end":616,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19084,"byte_end":19089,"line_start":617,"line_end":617,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(data_grouped, vec![(true, vec![1, 3]), (false, vec![-2, -2]), (true, vec![1, 0, 1, 2])]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19094,"byte_end":19198,"line_start":618,"line_end":618,"column_start":5,"column_end":109}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19203,"byte_end":19210,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19215,"byte_end":19244,"line_start":620,"line_end":620,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20541,"byte_end":20547,"line_start":657,"line_end":657,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"pub fn chunks(Self, usize) -> IntoChunks<Self> where Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an *iterable* that can chunk the iterator.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can chunk the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19454,"byte_end":19507,"line_start":629,"line_end":629,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19512,"byte_end":19515,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ Yield subiterators (chunks) that each yield a fixed number elements,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19520,"byte_end":19592,"line_start":631,"line_end":631,"column_start":5,"column_end":77}},{"value":"/ determined by `size`. The last chunk will be shorter if there aren't","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19597,"byte_end":19669,"line_start":632,"line_end":632,"column_start":5,"column_end":77}},{"value":"/ enough elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19674,"byte_end":19694,"line_start":633,"line_end":633,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19699,"byte_end":19702,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ `IntoChunks` is based on `GroupBy`: it is iterable (implements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19707,"byte_end":19773,"line_start":635,"line_end":635,"column_start":5,"column_end":71}},{"value":"/ `IntoIterator`, **not** `Iterator`), and it only buffers if several","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19778,"byte_end":19849,"line_start":636,"line_end":636,"column_start":5,"column_end":76}},{"value":"/ chunk iterators are alive at the same time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19854,"byte_end":19901,"line_start":637,"line_end":637,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19906,"byte_end":19909,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19914,"byte_end":19974,"line_start":639,"line_end":639,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19979,"byte_end":19982,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `size` is 0.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":19987,"byte_end":20017,"line_start":641,"line_end":641,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20022,"byte_end":20025,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20030,"byte_end":20037,"line_start":643,"line_end":643,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20042,"byte_end":20071,"line_start":644,"line_end":644,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20076,"byte_end":20079,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 2, -2, 6, 0, 3, 1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20084,"byte_end":20129,"line_start":646,"line_end":646,"column_start":5,"column_end":50}},{"value":"/ //chunk size=3 |------->|-------->|--->|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20134,"byte_end":20178,"line_start":647,"line_end":647,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20183,"byte_end":20186,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `IntoChunks` is iterable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20191,"byte_end":20257,"line_start":649,"line_end":649,"column_start":5,"column_end":71}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20262,"byte_end":20332,"line_start":650,"line_end":650,"column_start":5,"column_end":75}},{"value":"/ for chunk in &data.into_iter().chunks(3) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20337,"byte_end":20383,"line_start":651,"line_end":651,"column_start":5,"column_end":51}},{"value":"/     // Check that the sum of each chunk is 4.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20388,"byte_end":20437,"line_start":652,"line_end":652,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(4, chunk.sum());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20442,"byte_end":20477,"line_start":653,"line_end":653,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20482,"byte_end":20487,"line_start":654,"line_end":654,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20492,"byte_end":20499,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20504,"byte_end":20533,"line_start":656,"line_end":656,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21942,"byte_end":21955,"line_start":697,"line_end":697,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"pub fn tuple_windows<T>(Self) -> TupleWindows<Self, T> where Self: Sized +\nIterator<Item = T::Item>, T: traits::HomogeneousTuple, T::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 12).","sig":null,"attributes":[{"value":"/ Return an iterator over all contiguous windows producing tuples of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20703,"byte_end":20773,"line_start":664,"line_end":664,"column_start":5,"column_end":75}},{"value":"/ a specific size (up to 12).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20778,"byte_end":20809,"line_start":665,"line_end":665,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20814,"byte_end":20817,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ `tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20822,"byte_end":20890,"line_start":667,"line_end":667,"column_start":5,"column_end":73}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20895,"byte_end":20966,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":20971,"byte_end":21029,"line_start":669,"line_end":669,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21034,"byte_end":21037,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21042,"byte_end":21049,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21054,"byte_end":21083,"line_start":672,"line_end":672,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21088,"byte_end":21115,"line_start":673,"line_end":673,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21120,"byte_end":21123,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ // pairwise iteration","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21128,"byte_end":21153,"line_start":675,"line_end":675,"column_start":5,"column_end":30}},{"value":"/ for (a, b) in (1..5).tuple_windows() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21158,"byte_end":21200,"line_start":676,"line_end":676,"column_start":5,"column_end":47}},{"value":"/     v.push((a, b));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21205,"byte_end":21228,"line_start":677,"line_end":677,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21233,"byte_end":21238,"line_start":678,"line_end":678,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21243,"byte_end":21291,"line_start":679,"line_end":679,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21296,"byte_end":21299,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_windows();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21304,"byte_end":21344,"line_start":681,"line_end":681,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21349,"byte_end":21392,"line_start":682,"line_end":682,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21397,"byte_end":21440,"line_start":683,"line_end":683,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21445,"byte_end":21477,"line_start":684,"line_end":684,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21482,"byte_end":21485,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21490,"byte_end":21522,"line_start":686,"line_end":686,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_windows::<(_, _, _)>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21527,"byte_end":21576,"line_start":687,"line_end":687,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21581,"byte_end":21641,"line_start":688,"line_end":688,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21646,"byte_end":21649,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21654,"byte_end":21699,"line_start":690,"line_end":690,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleWindows;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21704,"byte_end":21736,"line_start":691,"line_end":691,"column_start":5,"column_end":37}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21741,"byte_end":21765,"line_start":692,"line_end":692,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21770,"byte_end":21773,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ let it: TupleWindows<Range<u32>, (u32, u32, u32)> = (1..5).tuple_windows();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21778,"byte_end":21857,"line_start":694,"line_end":694,"column_start":5,"column_end":84}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21862,"byte_end":21922,"line_start":695,"line_end":695,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":21927,"byte_end":21934,"line_start":696,"line_end":696,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23356,"byte_end":23378,"line_start":732,"line_end":732,"column_start":8,"column_end":30},"name":"circular_tuple_windows","qualname":"::Itertools::circular_tuple_windows","value":"pub fn circular_tuple_windows<T>(Self) -> CircularTupleWindows<Self, T> where\nSelf: Sized + Clone + Iterator<Item = T::Item> + ExactSizeIterator,\nT: tuple_impl::TupleCollect + Clone, T::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator over all windows, wrapping back to the first\n elements when the window would otherwise exceed the length of the\n iterator, producing tuples of a specific size (up to 12).","sig":null,"attributes":[{"value":"/ Return an iterator over all windows, wrapping back to the first","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22173,"byte_end":22240,"line_start":705,"line_end":705,"column_start":5,"column_end":72}},{"value":"/ elements when the window would otherwise exceed the length of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22245,"byte_end":22314,"line_start":706,"line_end":706,"column_start":5,"column_end":74}},{"value":"/ iterator, producing tuples of a specific size (up to 12).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22319,"byte_end":22380,"line_start":707,"line_end":707,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22385,"byte_end":22388,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ `circular_tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22393,"byte_end":22470,"line_start":709,"line_end":709,"column_start":5,"column_end":82}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22475,"byte_end":22546,"line_start":710,"line_end":710,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22551,"byte_end":22609,"line_start":711,"line_end":711,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22614,"byte_end":22617,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22622,"byte_end":22629,"line_start":713,"line_end":713,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22634,"byte_end":22663,"line_start":714,"line_end":714,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22668,"byte_end":22695,"line_start":715,"line_end":715,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).circular_tuple_windows() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22700,"byte_end":22751,"line_start":716,"line_end":716,"column_start":5,"column_end":56}},{"value":"/     v.push((a, b));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22756,"byte_end":22779,"line_start":717,"line_end":717,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22784,"byte_end":22789,"line_start":718,"line_end":718,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4), (4, 1)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22794,"byte_end":22850,"line_start":719,"line_end":719,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22855,"byte_end":22858,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).circular_tuple_windows();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22863,"byte_end":22912,"line_start":721,"line_end":721,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22917,"byte_end":22960,"line_start":722,"line_end":722,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":22965,"byte_end":23008,"line_start":723,"line_end":723,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((3, 4, 1)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23013,"byte_end":23056,"line_start":724,"line_end":724,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 1, 2)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23061,"byte_end":23104,"line_start":725,"line_end":725,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23109,"byte_end":23141,"line_start":726,"line_end":726,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23146,"byte_end":23149,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23154,"byte_end":23186,"line_start":728,"line_end":728,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).circular_tuple_windows::<(_, _, _)>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23191,"byte_end":23249,"line_start":729,"line_end":729,"column_start":5,"column_end":63}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4), (3, 4, 1), (4, 1, 2)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23254,"byte_end":23336,"line_start":730,"line_end":730,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23341,"byte_end":23348,"line_start":731,"line_end":731,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24696,"byte_end":24702,"line_start":770,"line_end":770,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"pub fn tuples<T>(Self) -> Tuples<Self, T> where Self: Sized + Iterator<Item =\nT::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 12).","sig":null,"attributes":[{"value":"/ Return an iterator that groups the items in tuples of a specific size","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23648,"byte_end":23721,"line_start":739,"line_end":739,"column_start":5,"column_end":78}},{"value":"/ (up to 12).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23726,"byte_end":23741,"line_start":740,"line_end":740,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23746,"byte_end":23749,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ See also the method [`.next_tuple()`](Itertools::next_tuple).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23754,"byte_end":23819,"line_start":742,"line_end":742,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23824,"byte_end":23827,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23832,"byte_end":23839,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23844,"byte_end":23873,"line_start":745,"line_end":745,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23878,"byte_end":23905,"line_start":746,"line_end":746,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuples() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23910,"byte_end":23945,"line_start":747,"line_end":747,"column_start":5,"column_end":40}},{"value":"/     v.push((a, b));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23950,"byte_end":23973,"line_start":748,"line_end":748,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23978,"byte_end":23983,"line_start":749,"line_end":749,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (3, 4)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":23988,"byte_end":24028,"line_start":750,"line_end":750,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24033,"byte_end":24036,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..7).tuples();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24041,"byte_end":24074,"line_start":752,"line_end":752,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24079,"byte_end":24122,"line_start":753,"line_end":753,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 5, 6)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24127,"byte_end":24170,"line_start":754,"line_end":754,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24175,"byte_end":24207,"line_start":755,"line_end":755,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24212,"byte_end":24215,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24220,"byte_end":24252,"line_start":757,"line_end":757,"column_start":5,"column_end":37}},{"value":"/ let it = (1..7).tuples::<(_, _, _)>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24257,"byte_end":24299,"line_start":758,"line_end":758,"column_start":5,"column_end":47}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24304,"byte_end":24364,"line_start":759,"line_end":759,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24369,"byte_end":24372,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24377,"byte_end":24422,"line_start":761,"line_end":761,"column_start":5,"column_end":50}},{"value":"/ use itertools::Tuples;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24427,"byte_end":24453,"line_start":762,"line_end":762,"column_start":5,"column_end":31}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24458,"byte_end":24482,"line_start":763,"line_end":763,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24487,"byte_end":24490,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ let it: Tuples<Range<u32>, (u32, u32, u32)> = (1..7).tuples();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24495,"byte_end":24561,"line_start":765,"line_end":765,"column_start":5,"column_end":71}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24566,"byte_end":24626,"line_start":766,"line_end":766,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24631,"byte_end":24638,"line_start":767,"line_end":767,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24643,"byte_end":24646,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ See also [`Tuples::into_buffer`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24651,"byte_end":24688,"line_start":769,"line_end":769,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25513,"byte_end":25516,"line_start":795,"line_end":795,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"pub fn tee(Self) -> (Tee<Self>, Tee<Self>) where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[{"value":"/ Split into an iterator pair that both yield all elements from","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24877,"byte_end":24942,"line_start":777,"line_end":777,"column_start":5,"column_end":70}},{"value":"/ the original iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24947,"byte_end":24973,"line_start":778,"line_end":778,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24978,"byte_end":24981,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ **Note:** If the iterator is clonable, prefer using that instead","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":24986,"byte_end":25054,"line_start":780,"line_end":780,"column_start":5,"column_end":73}},{"value":"/ of using this method. It is likely to be more efficient.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25059,"byte_end":25119,"line_start":781,"line_end":781,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25124,"byte_end":25127,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25132,"byte_end":25174,"line_start":783,"line_end":783,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25179,"byte_end":25182,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25187,"byte_end":25194,"line_start":785,"line_end":785,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25199,"byte_end":25228,"line_start":786,"line_end":786,"column_start":5,"column_end":34}},{"value":"/ let xs = vec![0, 1, 2, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25233,"byte_end":25263,"line_start":787,"line_end":787,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25268,"byte_end":25271,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ let (mut t1, t2) = xs.into_iter().tee();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25276,"byte_end":25320,"line_start":789,"line_end":789,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(t1.next(), Some(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25325,"byte_end":25373,"line_start":790,"line_end":790,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(t2, 0..4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25378,"byte_end":25416,"line_start":791,"line_end":791,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(t1, 1..4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25421,"byte_end":25459,"line_start":792,"line_end":792,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25464,"byte_end":25471,"line_start":793,"line_end":793,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25476,"byte_end":25505,"line_start":794,"line_end":794,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26247,"byte_end":26251,"line_start":820,"line_end":820,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"pub fn step(Self, usize) -> Step<Self> where Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that steps `n` elements in the base iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25648,"byte_end":25723,"line_start":802,"line_end":802,"column_start":5,"column_end":80}},{"value":"/ for each iteration.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25728,"byte_end":25751,"line_start":803,"line_end":803,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25756,"byte_end":25759,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25764,"byte_end":25839,"line_start":805,"line_end":805,"column_start":5,"column_end":80}},{"value":"/ then skipping forward `n - 1` elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25844,"byte_end":25887,"line_start":806,"line_end":806,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25892,"byte_end":25895,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25900,"byte_end":25942,"line_start":808,"line_end":808,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25947,"byte_end":25950,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the step is 0.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25955,"byte_end":25987,"line_start":810,"line_end":810,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":25992,"byte_end":25995,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26000,"byte_end":26007,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26012,"byte_end":26041,"line_start":813,"line_end":813,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26046,"byte_end":26049,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ let it = (0..8).step(3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26054,"byte_end":26082,"line_start":815,"line_end":815,"column_start":5,"column_end":33}},{"value":"/ itertools::assert_equal(it, vec![0, 3, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26087,"byte_end":26134,"line_start":816,"line_end":816,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26139,"byte_end":26146,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8.0\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26151,"byte_end":26214,"line_start":818,"line_end":818,"column_start":5,"column_end":68}},{"value":"allow(deprecated)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26219,"byte_end":26239,"line_start":819,"line_end":819,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26561,"byte_end":26569,"line_start":833,"line_end":833,"column_start":8,"column_end":16},"name":"map_into","qualname":"::Itertools::map_into","value":"pub fn map_into<R>(Self) -> MapInto<Self, R> where Self: Sized,\nSelf::Item: Into<R>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Convert each item of the iterator using the [`Into`] trait.","sig":null,"attributes":[{"value":"/ Convert each item of the iterator using the [`Into`] trait.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26357,"byte_end":26420,"line_start":826,"line_end":826,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26425,"byte_end":26428,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26433,"byte_end":26444,"line_start":828,"line_end":828,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26449,"byte_end":26478,"line_start":829,"line_end":829,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26483,"byte_end":26486,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ (1i32..42i32).map_into::<f64>().collect_vec();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26491,"byte_end":26541,"line_start":831,"line_end":831,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26546,"byte_end":26553,"line_start":832,"line_end":832,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26824,"byte_end":26835,"line_start":842,"line_end":842,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"pub fn map_results<F, T, U, E>(Self, F) -> MapOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" See [`.map_ok()`](Itertools::map_ok).\n","sig":null,"attributes":[{"value":"/ See [`.map_ok()`](Itertools::map_ok).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26711,"byte_end":26752,"line_start":840,"line_end":840,"column_start":5,"column_end":46}},{"value":"deprecated(note = \"Use .map_ok() instead\", since = \"0.10.0\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":26757,"byte_end":26816,"line_start":841,"line_end":841,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27415,"byte_end":27421,"line_start":860,"line_end":860,"column_start":8,"column_end":14},"name":"map_ok","qualname":"::Itertools::map_ok","value":"pub fn map_ok<F, T, U, E>(Self, F) -> MapOk<Self, F> where Self: Iterator<Item\n= Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies the provided closure","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27009,"byte_end":27073,"line_start":849,"line_end":849,"column_start":5,"column_end":69}},{"value":"/ to every `Result::Ok` value. `Result::Err` values are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27078,"byte_end":27135,"line_start":850,"line_end":850,"column_start":5,"column_end":62}},{"value":"/ unchanged.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27140,"byte_end":27154,"line_start":851,"line_end":851,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27159,"byte_end":27162,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27167,"byte_end":27174,"line_start":853,"line_end":853,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27179,"byte_end":27208,"line_start":854,"line_end":854,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27213,"byte_end":27216,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(41), Err(false), Ok(11)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27221,"byte_end":27270,"line_start":856,"line_end":856,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().map_ok(|i| i + 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27275,"byte_end":27324,"line_start":857,"line_end":857,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![Ok(42), Err(false), Ok(12)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27329,"byte_end":27395,"line_start":858,"line_end":858,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27400,"byte_end":27407,"line_start":859,"line_end":859,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2535},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28011,"byte_end":28020,"line_start":878,"line_end":878,"column_start":8,"column_end":17},"name":"filter_ok","qualname":"::Itertools::filter_ok","value":"pub fn filter_ok<F, T, E>(Self, F) -> FilterOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(&T) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters every `Result::Ok`\n value with the provided closure. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters every `Result::Ok`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27606,"byte_end":27668,"line_start":867,"line_end":867,"column_start":5,"column_end":67}},{"value":"/ value with the provided closure. `Result::Err` values are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27673,"byte_end":27734,"line_start":868,"line_end":868,"column_start":5,"column_end":66}},{"value":"/ unchanged.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27739,"byte_end":27753,"line_start":869,"line_end":869,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27758,"byte_end":27761,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27766,"byte_end":27773,"line_start":871,"line_end":871,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27778,"byte_end":27807,"line_start":872,"line_end":872,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27812,"byte_end":27815,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(22), Err(false), Ok(11)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27820,"byte_end":27869,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().filter_ok(|&i| i > 20);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27874,"byte_end":27928,"line_start":875,"line_end":875,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![Ok(22), Err(false)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27933,"byte_end":27991,"line_start":876,"line_end":876,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":27996,"byte_end":28003,"line_start":877,"line_end":877,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28668,"byte_end":28681,"line_start":896,"line_end":896,"column_start":8,"column_end":21},"name":"filter_map_ok","qualname":"::Itertools::filter_map_ok","value":"pub fn filter_map_ok<F, T, U, E>(Self, F) -> FilterMapOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> Option<U>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters and transforms every\n `Result::Ok` value with the provided closure. `Result::Err`\n values are unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters and transforms every","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28212,"byte_end":28276,"line_start":885,"line_end":885,"column_start":5,"column_end":69}},{"value":"/ `Result::Ok` value with the provided closure. `Result::Err`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28281,"byte_end":28344,"line_start":886,"line_end":886,"column_start":5,"column_end":68}},{"value":"/ values are unchanged.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28349,"byte_end":28374,"line_start":887,"line_end":887,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28379,"byte_end":28382,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28387,"byte_end":28394,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28399,"byte_end":28428,"line_start":890,"line_end":890,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28433,"byte_end":28436,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(22), Err(false), Ok(11)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28441,"byte_end":28490,"line_start":892,"line_end":892,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().filter_map_ok(|i| if i > 20 { Some(i * 2) } else { None });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28495,"byte_end":28585,"line_start":893,"line_end":893,"column_start":5,"column_end":95}},{"value":"/ itertools::assert_equal(it, vec![Ok(44), Err(false)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28590,"byte_end":28648,"line_start":894,"line_end":894,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28653,"byte_end":28660,"line_start":895,"line_end":895,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2544},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29689,"byte_end":29699,"line_start":920,"line_end":920,"column_start":8,"column_end":18},"name":"flatten_ok","qualname":"::Itertools::flatten_ok","value":"pub fn flatten_ok<T, E>(Self) -> FlattenOk<Self, T, E> where\nSelf: Iterator<Item = Result<T, E>> + Sized, T: IntoIterator","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens every `Result::Ok` value into\n a series of `Result::Ok` values. `Result::Err` values are unchanged.\n \n This is useful when you have some common error type for your crate and\n need to propogate it upwards, but the `Result::Ok` case needs to be flattened.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens every `Result::Ok` value into","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28887,"byte_end":28961,"line_start":903,"line_end":903,"column_start":5,"column_end":79}},{"value":"/ a series of `Result::Ok` values. `Result::Err` values are unchanged.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":28966,"byte_end":29038,"line_start":904,"line_end":904,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29043,"byte_end":29047,"line_start":905,"line_end":905,"column_start":5,"column_end":9}},{"value":"/ This is useful when you have some common error type for your crate and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29052,"byte_end":29126,"line_start":906,"line_end":906,"column_start":5,"column_end":79}},{"value":"/ need to propogate it upwards, but the `Result::Ok` case needs to be flattened.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29131,"byte_end":29213,"line_start":907,"line_end":907,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29218,"byte_end":29221,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29226,"byte_end":29233,"line_start":909,"line_end":909,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29238,"byte_end":29267,"line_start":910,"line_end":910,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29272,"byte_end":29275,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(0..2), Err(false), Ok(2..4)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29280,"byte_end":29333,"line_start":912,"line_end":912,"column_start":5,"column_end":58}},{"value":"/ let it = input.iter().cloned().flatten_ok();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29338,"byte_end":29386,"line_start":913,"line_end":913,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(it.clone(), vec![Ok(0), Ok(1), Err(false), Ok(2), Ok(3)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29391,"byte_end":29477,"line_start":914,"line_end":914,"column_start":5,"column_end":91}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29482,"byte_end":29486,"line_start":915,"line_end":915,"column_start":5,"column_end":9}},{"value":"/ // This can also be used to propogate errors when collecting.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29491,"byte_end":29556,"line_start":916,"line_end":916,"column_start":5,"column_end":70}},{"value":"/ let output_result: Result<Vec<i32>, bool> = it.collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29561,"byte_end":29622,"line_start":917,"line_end":917,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(output_result, Err(false));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29627,"byte_end":29669,"line_start":918,"line_end":918,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29674,"byte_end":29681,"line_start":919,"line_end":919,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2547},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30348,"byte_end":30353,"line_start":941,"line_end":941,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"pub fn merge<J>(Self, J) -> Merge<Self, J::IntoIter> where Self: Sized,\nSelf::Item: PartialOrd, J: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29880,"byte_end":29948,"line_start":927,"line_end":927,"column_start":5,"column_end":73}},{"value":"/ ascending order.  If both base iterators are sorted (ascending), the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":29953,"byte_end":30025,"line_start":928,"line_end":928,"column_start":5,"column_end":77}},{"value":"/ result is sorted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30030,"byte_end":30051,"line_start":929,"line_end":929,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30056,"byte_end":30059,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30064,"byte_end":30106,"line_start":931,"line_end":931,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30111,"byte_end":30114,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30119,"byte_end":30126,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30131,"byte_end":30160,"line_start":934,"line_end":934,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30165,"byte_end":30168,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ let a = (0..11).step(3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30173,"byte_end":30201,"line_start":936,"line_end":936,"column_start":5,"column_end":33}},{"value":"/ let b = (0..11).step(5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30206,"byte_end":30234,"line_start":937,"line_end":937,"column_start":5,"column_end":33}},{"value":"/ let it = a.merge(b);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30239,"byte_end":30263,"line_start":938,"line_end":938,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(it, vec![0, 0, 3, 5, 6, 9, 10]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30268,"byte_end":30328,"line_start":939,"line_end":939,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30333,"byte_end":30340,"line_start":940,"line_end":940,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31150,"byte_end":31158,"line_start":965,"line_end":965,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"pub fn merge_by<J, F>(Self, J, F) -> MergeBy<Self, J::IntoIter, F> where\nSelf: Sized, J: IntoIterator<Item = Self::Item>,\nF: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like [`.merge()`](Itertools::merge) but allows for a custom ordering.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30559,"byte_end":30634,"line_start":949,"line_end":949,"column_start":5,"column_end":80}},{"value":"/ This is much like [`.merge()`](Itertools::merge) but allows for a custom ordering.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30639,"byte_end":30725,"line_start":950,"line_end":950,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30730,"byte_end":30733,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ This can be especially useful for sequences of tuples.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30738,"byte_end":30796,"line_start":952,"line_end":952,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30801,"byte_end":30804,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30809,"byte_end":30851,"line_start":954,"line_end":954,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30856,"byte_end":30859,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30864,"byte_end":30871,"line_start":956,"line_end":956,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30876,"byte_end":30905,"line_start":957,"line_end":957,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30910,"byte_end":30913,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ let a = (0..).zip(\"bc\".chars());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30918,"byte_end":30954,"line_start":959,"line_end":959,"column_start":5,"column_end":41}},{"value":"/ let b = (0..).zip(\"ad\".chars());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":30959,"byte_end":30995,"line_start":960,"line_end":960,"column_start":5,"column_end":41}},{"value":"/ let it = a.merge_by(b, |x, y| x.1 <= y.1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31000,"byte_end":31046,"line_start":961,"line_end":961,"column_start":5,"column_end":51}},{"value":"/ itertools::assert_equal(it, vec![(0, 'a'), (0, 'b'), (1, 'c'), (1, 'd')]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31051,"byte_end":31129,"line_start":962,"line_end":962,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31134,"byte_end":31141,"line_start":963,"line_end":963,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32671,"byte_end":32684,"line_start":1001,"line_end":1001,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"pub fn merge_join_by<J, F>(Self, J, F) -> MergeJoinBy<Self, J::IntoIter, F>\nwhere J: IntoIterator, F: FnMut(&Self::Item, &J::Item) -> std::cmp::Ordering,\nSelf: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"/ Create an iterator that merges items from both this and the specified","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31444,"byte_end":31517,"line_start":973,"line_end":973,"column_start":5,"column_end":78}},{"value":"/ iterator in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31522,"byte_end":31554,"line_start":974,"line_end":974,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31559,"byte_end":31562,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ It chooses whether to pair elements based on the `Ordering` returned by the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31567,"byte_end":31646,"line_start":976,"line_end":976,"column_start":5,"column_end":84}},{"value":"/ specified compare function. At any point, inspecting the tip of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31651,"byte_end":31722,"line_start":977,"line_end":977,"column_start":5,"column_end":76}},{"value":"/ iterators `I` and `J` as items `i` of type `I::Item` and `j` of type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31727,"byte_end":31799,"line_start":978,"line_end":978,"column_start":5,"column_end":77}},{"value":"/ `J::Item` respectively, the resulting iterator will:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31804,"byte_end":31860,"line_start":979,"line_end":979,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31865,"byte_end":31868,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ - Emit `EitherOrBoth::Left(i)` when `i < j`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31873,"byte_end":31921,"line_start":981,"line_end":981,"column_start":5,"column_end":53}},{"value":"/   and remove `i` from its source iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31926,"byte_end":31971,"line_start":982,"line_end":982,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Right(j)` when `i > j`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":31976,"byte_end":32025,"line_start":983,"line_end":983,"column_start":5,"column_end":54}},{"value":"/   and remove `j` from its source iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32030,"byte_end":32075,"line_start":984,"line_end":984,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Both(i, j)` when  `i == j`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32080,"byte_end":32133,"line_start":985,"line_end":985,"column_start":5,"column_end":58}},{"value":"/   and remove both `i` and `j` from their respective source iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32138,"byte_end":32210,"line_start":986,"line_end":986,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32215,"byte_end":32218,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32223,"byte_end":32230,"line_start":988,"line_end":988,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32235,"byte_end":32264,"line_start":989,"line_end":989,"column_start":5,"column_end":34}},{"value":"/ use itertools::EitherOrBoth::{Left, Right, Both};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32269,"byte_end":32322,"line_start":990,"line_end":990,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32327,"byte_end":32330,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ let multiples_of_2 = (0..10).step(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32335,"byte_end":32376,"line_start":992,"line_end":992,"column_start":5,"column_end":46}},{"value":"/ let multiples_of_3 = (0..10).step(3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32381,"byte_end":32422,"line_start":993,"line_end":993,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32427,"byte_end":32430,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32435,"byte_end":32463,"line_start":995,"line_end":995,"column_start":5,"column_end":33}},{"value":"/     multiples_of_2.merge_join_by(multiples_of_3, |i, j| i.cmp(j)),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32468,"byte_end":32538,"line_start":996,"line_end":996,"column_start":5,"column_end":75}},{"value":"/     vec![Both(0, 0), Left(2), Right(3), Left(4), Both(6, 6), Left(8), Right(9)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32543,"byte_end":32626,"line_start":997,"line_end":997,"column_start":5,"column_end":88}},{"value":"/ );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32631,"byte_end":32637,"line_start":998,"line_end":998,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32642,"byte_end":32649,"line_start":999,"line_end":999,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32654,"byte_end":32663,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33519,"byte_end":33525,"line_start":1026,"line_end":1026,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"pub fn kmerge(Self) -> KMerge<<Self::Item as IntoIterator>::IntoIter> where\nSelf: Sized, Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::Item: PartialOrd","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":32941,"byte_end":33013,"line_start":1009,"line_end":1009,"column_start":5,"column_end":77}},{"value":"/ merging them in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33018,"byte_end":33054,"line_start":1010,"line_end":1010,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33059,"byte_end":33062,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33067,"byte_end":33138,"line_start":1012,"line_end":1012,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33143,"byte_end":33146,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33151,"byte_end":33193,"line_start":1014,"line_end":1014,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33198,"byte_end":33201,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33206,"byte_end":33213,"line_start":1016,"line_end":1016,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33218,"byte_end":33247,"line_start":1017,"line_end":1017,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33252,"byte_end":33255,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ let a = (0..6).step(3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33260,"byte_end":33287,"line_start":1019,"line_end":1019,"column_start":5,"column_end":32}},{"value":"/ let b = (1..6).step(3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33292,"byte_end":33319,"line_start":1020,"line_end":1020,"column_start":5,"column_end":32}},{"value":"/ let c = (2..6).step(3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33324,"byte_end":33351,"line_start":1021,"line_end":1021,"column_start":5,"column_end":32}},{"value":"/ let it = vec![a, b, c].into_iter().kmerge();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33356,"byte_end":33404,"line_start":1022,"line_end":1022,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33409,"byte_end":33465,"line_start":1023,"line_end":1023,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33470,"byte_end":33477,"line_start":1024,"line_end":1024,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33482,"byte_end":33511,"line_start":1025,"line_end":1025,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2556},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34532,"byte_end":34541,"line_start":1055,"line_end":1055,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"pub fn kmerge_by<F>(Self, F)\n-> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F> where Self: Sized,\nSelf::Item: IntoIterator,\nF: FnMut(&<Self::Item as IntoIterator>::Item,\n&<Self::Item as IntoIterator>::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them according to the given closure.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33749,"byte_end":33821,"line_start":1034,"line_end":1034,"column_start":5,"column_end":77}},{"value":"/ merging them according to the given closure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33826,"byte_end":33874,"line_start":1035,"line_end":1035,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33879,"byte_end":33882,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ The closure `first` is called with two elements *a*, *b* and should","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33887,"byte_end":33958,"line_start":1037,"line_end":1037,"column_start":5,"column_end":76}},{"value":"/ return `true` if *a* is ordered before *b*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":33963,"byte_end":34010,"line_start":1038,"line_end":1038,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34015,"byte_end":34018,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted according to `first`, the result is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34023,"byte_end":34095,"line_start":1040,"line_end":1040,"column_start":5,"column_end":77}},{"value":"/ sorted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34100,"byte_end":34111,"line_start":1041,"line_end":1041,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34116,"byte_end":34119,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34124,"byte_end":34166,"line_start":1043,"line_end":1043,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34171,"byte_end":34174,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34179,"byte_end":34186,"line_start":1045,"line_end":1045,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34191,"byte_end":34220,"line_start":1046,"line_end":1046,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34225,"byte_end":34228,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ let a = vec![-1f64, 2., 3., -5., 6., -7.];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34233,"byte_end":34279,"line_start":1048,"line_end":1048,"column_start":5,"column_end":51}},{"value":"/ let b = vec![0., 2., -4.];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34284,"byte_end":34314,"line_start":1049,"line_end":1049,"column_start":5,"column_end":35}},{"value":"/ let mut it = vec![a, b].into_iter().kmerge_by(|a, b| a.abs() < b.abs());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34319,"byte_end":34395,"line_start":1050,"line_end":1050,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(it.next(), Some(0.));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34400,"byte_end":34436,"line_start":1051,"line_end":1051,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(it.last(), Some(-7.));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34441,"byte_end":34478,"line_start":1052,"line_end":1052,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34483,"byte_end":34490,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34495,"byte_end":34524,"line_start":1054,"line_end":1054,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35293,"byte_end":35310,"line_start":1076,"line_end":1076,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"pub fn cartesian_product<J>(Self, J) -> Product<Self, J::IntoIter> where\nSelf: Sized, Self::Item: Clone, J: IntoIterator, J::IntoIter: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34867,"byte_end":34941,"line_start":1065,"line_end":1065,"column_start":5,"column_end":79}},{"value":"/ the element sets of two iterators `self` and `J`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":34946,"byte_end":34999,"line_start":1066,"line_end":1066,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35004,"byte_end":35007,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(Self::Item, J::Item)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35012,"byte_end":35065,"line_start":1068,"line_end":1068,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35070,"byte_end":35073,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35078,"byte_end":35085,"line_start":1070,"line_end":1070,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35090,"byte_end":35119,"line_start":1071,"line_end":1071,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35124,"byte_end":35127,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ let it = (0..2).cartesian_product(\"αβ\".chars());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35132,"byte_end":35186,"line_start":1073,"line_end":1073,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![(0, 'α'), (0, 'β'), (1, 'α'), (1, 'β')]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35191,"byte_end":35273,"line_start":1074,"line_end":1074,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35278,"byte_end":35285,"line_start":1075,"line_end":1075,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2560},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36746,"byte_end":36769,"line_start":1111,"line_end":1111,"column_start":8,"column_end":31},"name":"multi_cartesian_product","qualname":"::Itertools::multi_cartesian_product","value":"pub fn multi_cartesian_product(Self)\n-> MultiProduct<<Self::Item as IntoIterator>::IntoIter> where Self: Iterator +\nSized, Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::IntoIter: Clone,\n<Self::Item as IntoIterator>::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n all subiterators returned by meta-iterator `self`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35562,"byte_end":35636,"line_start":1085,"line_end":1085,"column_start":5,"column_end":79}},{"value":"/ all subiterators returned by meta-iterator `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35641,"byte_end":35695,"line_start":1086,"line_end":1086,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35700,"byte_end":35703,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ All provided iterators must yield the same `Item` type. To generate","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35708,"byte_end":35779,"line_start":1088,"line_end":1088,"column_start":5,"column_end":76}},{"value":"/ the product of iterators yielding multiple types, use the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35784,"byte_end":35845,"line_start":1089,"line_end":1089,"column_start":5,"column_end":66}},{"value":"/ [`iproduct`] macro instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35850,"byte_end":35881,"line_start":1090,"line_end":1090,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35886,"byte_end":35889,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35894,"byte_end":35897,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ The iterator element type is `Vec<T>`, where `T` is the iterator element","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35902,"byte_end":35978,"line_start":1093,"line_end":1093,"column_start":5,"column_end":81}},{"value":"/ of the subiterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":35983,"byte_end":36007,"line_start":1094,"line_end":1094,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36012,"byte_end":36015,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36020,"byte_end":36027,"line_start":1096,"line_end":1096,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36032,"byte_end":36061,"line_start":1097,"line_end":1097,"column_start":5,"column_end":34}},{"value":"/ let mut multi_prod = (0..3).map(|i| (i * 2)..(i * 2 + 2))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36066,"byte_end":36127,"line_start":1098,"line_end":1098,"column_start":5,"column_end":66}},{"value":"/     .multi_cartesian_product();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36132,"byte_end":36167,"line_start":1099,"line_end":1099,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 2, 4]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36172,"byte_end":36227,"line_start":1100,"line_end":1100,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 2, 5]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36232,"byte_end":36287,"line_start":1101,"line_end":1101,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 3, 4]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36292,"byte_end":36347,"line_start":1102,"line_end":1102,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 3, 5]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36352,"byte_end":36407,"line_start":1103,"line_end":1103,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 2, 4]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36412,"byte_end":36467,"line_start":1104,"line_end":1104,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 2, 5]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36472,"byte_end":36527,"line_start":1105,"line_end":1105,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 3, 4]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36532,"byte_end":36587,"line_start":1106,"line_end":1106,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 3, 5]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36592,"byte_end":36647,"line_start":1107,"line_end":1107,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36652,"byte_end":36692,"line_start":1108,"line_end":1108,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36697,"byte_end":36704,"line_start":1109,"line_end":1109,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":36709,"byte_end":36738,"line_start":1110,"line_end":1110,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38262,"byte_end":38270,"line_start":1148,"line_end":1148,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"pub fn coalesce<F>(Self, F) -> Coalesce<Self, F> where Self: Sized,\nF: FnMut(Self::Item, Self::Item) ->\nResult<Self::Item, (Self::Item, Self::Item)>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that uses the passed-in closure to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37092,"byte_end":37157,"line_start":1120,"line_end":1120,"column_start":5,"column_end":70}},{"value":"/ optionally merge together consecutive elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37162,"byte_end":37213,"line_start":1121,"line_end":1121,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37218,"byte_end":37221,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is passed two elements, `previous` and `current` and may","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37226,"byte_end":37302,"line_start":1123,"line_end":1123,"column_start":5,"column_end":81}},{"value":"/ return either (1) `Ok(combined)` to merge the two values or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37307,"byte_end":37370,"line_start":1124,"line_end":1124,"column_start":5,"column_end":68}},{"value":"/ (2) `Err((previous', current'))` to indicate they can't be merged.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37375,"byte_end":37445,"line_start":1125,"line_end":1125,"column_start":5,"column_end":75}},{"value":"/ In (2), the value `previous'` is emitted by the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37450,"byte_end":37511,"line_start":1126,"line_end":1126,"column_start":5,"column_end":66}},{"value":"/ Either (1) `combined` or (2) `current'` becomes the previous value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37516,"byte_end":37586,"line_start":1127,"line_end":1127,"column_start":5,"column_end":75}},{"value":"/ when coalesce continues with the next pair of elements to merge. The","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37591,"byte_end":37663,"line_start":1128,"line_end":1128,"column_start":5,"column_end":77}},{"value":"/ value that remains at the end is also emitted by the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37668,"byte_end":37734,"line_start":1129,"line_end":1129,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37739,"byte_end":37742,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37747,"byte_end":37789,"line_start":1131,"line_end":1131,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37794,"byte_end":37797,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37802,"byte_end":37831,"line_start":1133,"line_end":1133,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37836,"byte_end":37839,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37844,"byte_end":37851,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37856,"byte_end":37885,"line_start":1136,"line_end":1136,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37890,"byte_end":37893,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ // sum same-sign runs together","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37898,"byte_end":37932,"line_start":1138,"line_end":1138,"column_start":5,"column_end":39}},{"value":"/ let data = vec![-1., -2., -3., 3., 1., 0., -1.];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37937,"byte_end":37989,"line_start":1139,"line_end":1139,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(data.into_iter().coalesce(|x, y|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":37994,"byte_end":38054,"line_start":1140,"line_end":1140,"column_start":5,"column_end":65}},{"value":"/         if (x >= 0.) == (y >= 0.) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38059,"byte_end":38098,"line_start":1141,"line_end":1141,"column_start":5,"column_end":44}},{"value":"/             Ok(x + y)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38103,"byte_end":38128,"line_start":1142,"line_end":1142,"column_start":5,"column_end":30}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38133,"byte_end":38153,"line_start":1143,"line_end":1143,"column_start":5,"column_end":25}},{"value":"/             Err((x, y))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38158,"byte_end":38185,"line_start":1144,"line_end":1144,"column_start":5,"column_end":32}},{"value":"/         }),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38190,"byte_end":38205,"line_start":1145,"line_end":1145,"column_start":5,"column_end":20}},{"value":"/         vec![-6., 4., -1.]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38210,"byte_end":38242,"line_start":1146,"line_end":1146,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38247,"byte_end":38254,"line_start":1147,"line_end":1147,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2563},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38984,"byte_end":38989,"line_start":1170,"line_end":1170,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"pub fn dedup(Self) -> Dedup<Self> where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38505,"byte_end":38575,"line_start":1156,"line_end":1156,"column_start":5,"column_end":75}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38580,"byte_end":38639,"line_start":1157,"line_end":1157,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38644,"byte_end":38647,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38652,"byte_end":38694,"line_start":1159,"line_end":1159,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38699,"byte_end":38702,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38707,"byte_end":38736,"line_start":1161,"line_end":1161,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38741,"byte_end":38744,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38749,"byte_end":38756,"line_start":1163,"line_end":1163,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38761,"byte_end":38790,"line_start":1164,"line_end":1164,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38795,"byte_end":38798,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1., 1., 2., 3., 3., 2., 2.];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38803,"byte_end":38851,"line_start":1166,"line_end":1166,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().dedup(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38856,"byte_end":38909,"line_start":1167,"line_end":1167,"column_start":5,"column_end":58}},{"value":"/                         vec![1., 2., 3., 2.]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38914,"byte_end":38964,"line_start":1168,"line_end":1168,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":38969,"byte_end":38976,"line_start":1169,"line_end":1169,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2564},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39734,"byte_end":39742,"line_start":1192,"line_end":1192,"column_start":8,"column_end":16},"name":"dedup_by","qualname":"::Itertools::dedup_by","value":"pub fn dedup_by<Cmp>(Self, Cmp) -> DedupBy<Self, Cmp> where Self: Sized,\nCmp: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements,\n determining equality using a comparison function.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39122,"byte_end":39192,"line_start":1177,"line_end":1177,"column_start":5,"column_end":75}},{"value":"/ determining equality using a comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39197,"byte_end":39250,"line_start":1178,"line_end":1178,"column_start":5,"column_end":58}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39255,"byte_end":39314,"line_start":1179,"line_end":1179,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39319,"byte_end":39322,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39327,"byte_end":39369,"line_start":1181,"line_end":1181,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39374,"byte_end":39377,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39382,"byte_end":39411,"line_start":1183,"line_end":1183,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39416,"byte_end":39419,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39424,"byte_end":39431,"line_start":1185,"line_end":1185,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39436,"byte_end":39465,"line_start":1186,"line_end":1186,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39470,"byte_end":39473,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 1.), (1, 1.), (0, 2.), (0, 3.), (1, 3.), (1, 2.), (2, 2.)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39478,"byte_end":39561,"line_start":1188,"line_end":1188,"column_start":5,"column_end":88}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_by(|x, y| x.1 == y.1),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39566,"byte_end":39639,"line_start":1189,"line_end":1189,"column_start":5,"column_end":78}},{"value":"/                         vec![(0, 1.), (0, 2.), (0, 3.), (1, 2.)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39644,"byte_end":39714,"line_start":1190,"line_end":1190,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39719,"byte_end":39726,"line_start":1191,"line_end":1191,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2566},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40530,"byte_end":40546,"line_start":1214,"line_end":1214,"column_start":8,"column_end":24},"name":"dedup_with_count","qualname":"::Itertools::dedup_with_count","value":"pub fn dedup_with_count(Self) -> DedupWithCount<Self> where Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements, while keeping a count of\n how many repeated elements were present.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements, while keeping a count of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":39926,"byte_end":40021,"line_start":1199,"line_end":1199,"column_start":5,"column_end":100}},{"value":"/ how many repeated elements were present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40026,"byte_end":40070,"line_start":1200,"line_end":1200,"column_start":5,"column_end":49}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40075,"byte_end":40134,"line_start":1201,"line_end":1201,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40139,"byte_end":40142,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(usize, Self::Item)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40147,"byte_end":40198,"line_start":1203,"line_end":1203,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40203,"byte_end":40206,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40211,"byte_end":40240,"line_start":1205,"line_end":1205,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40245,"byte_end":40248,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40253,"byte_end":40260,"line_start":1207,"line_end":1207,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40265,"byte_end":40294,"line_start":1208,"line_end":1208,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40299,"byte_end":40302,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ let data = vec!['a', 'a', 'b', 'c', 'c', 'b', 'b'];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40307,"byte_end":40362,"line_start":1210,"line_end":1210,"column_start":5,"column_end":60}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_with_count(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40367,"byte_end":40431,"line_start":1211,"line_end":1211,"column_start":5,"column_end":69}},{"value":"/                         vec![(2, 'a'), (1, 'b'), (2, 'c'), (2, 'b')]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40436,"byte_end":40510,"line_start":1212,"line_end":1212,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40515,"byte_end":40522,"line_start":1213,"line_end":1213,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41411,"byte_end":41430,"line_start":1237,"line_end":1237,"column_start":8,"column_end":27},"name":"dedup_by_with_count","qualname":"::Itertools::dedup_by_with_count","value":"pub fn dedup_by_with_count<Cmp>(Self, Cmp) -> DedupByWithCount<Self, Cmp>\nwhere Self: Sized, Cmp: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements, while keeping a count of\n how many repeated elements were present.\n This will determine equality using a comparison function.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements, while keeping a count of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40666,"byte_end":40761,"line_start":1221,"line_end":1221,"column_start":5,"column_end":100}},{"value":"/ how many repeated elements were present.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40766,"byte_end":40810,"line_start":1222,"line_end":1222,"column_start":5,"column_end":49}},{"value":"/ This will determine equality using a comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40815,"byte_end":40876,"line_start":1223,"line_end":1223,"column_start":5,"column_end":66}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40881,"byte_end":40940,"line_start":1224,"line_end":1224,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40945,"byte_end":40948,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(usize, Self::Item)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":40953,"byte_end":41004,"line_start":1226,"line_end":1226,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41009,"byte_end":41012,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41017,"byte_end":41046,"line_start":1228,"line_end":1228,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41051,"byte_end":41054,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41059,"byte_end":41066,"line_start":1230,"line_end":1230,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41071,"byte_end":41100,"line_start":1231,"line_end":1231,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41105,"byte_end":41108,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 'a'), (1, 'a'), (0, 'b'), (0, 'c'), (1, 'c'), (1, 'b'), (2, 'b')];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41113,"byte_end":41203,"line_start":1233,"line_end":1233,"column_start":5,"column_end":95}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_by_with_count(|x, y| x.1 == y.1),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41208,"byte_end":41292,"line_start":1234,"line_end":1234,"column_start":5,"column_end":89}},{"value":"/                         vec![(2, (0, 'a')), (1, (0, 'b')), (2, (0, 'c')), (2, (1, 'b'))]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41297,"byte_end":41391,"line_start":1235,"line_end":1235,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41396,"byte_end":41403,"line_start":1236,"line_end":1236,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2569},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42361,"byte_end":42371,"line_start":1260,"line_end":1260,"column_start":8,"column_end":18},"name":"duplicates","qualname":"::Itertools::duplicates","value":"pub fn duplicates(Self) -> Duplicates<Self> where Self: Sized,\nSelf::Item: Eq + Hash","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that produces elements that appear more than once during the\n iteration. Duplicates are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that produces elements that appear more than once during the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41634,"byte_end":41725,"line_start":1245,"line_end":1245,"column_start":5,"column_end":96}},{"value":"/ iteration. Duplicates are detected using hash and equality.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41730,"byte_end":41793,"line_start":1246,"line_end":1246,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41798,"byte_end":41801,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the duplicate items in the order in which they occur in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41806,"byte_end":41899,"line_start":1248,"line_end":1248,"column_start":5,"column_end":98}},{"value":"/ the adapted iterator. Each duplicate item is returned exactly once. If an item appears more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":41904,"byte_end":41999,"line_start":1249,"line_end":1249,"column_start":5,"column_end":100}},{"value":"/ than twice, the second item is the item retained and the rest are discarded.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42004,"byte_end":42084,"line_start":1250,"line_end":1250,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42089,"byte_end":42092,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42097,"byte_end":42104,"line_start":1252,"line_end":1252,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42109,"byte_end":42138,"line_start":1253,"line_end":1253,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42143,"byte_end":42146,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ let data = vec![10, 20, 30, 20, 40, 10, 50];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42151,"byte_end":42199,"line_start":1255,"line_end":1255,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().duplicates(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42204,"byte_end":42262,"line_start":1256,"line_end":1256,"column_start":5,"column_end":63}},{"value":"/                         vec![20, 10]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42267,"byte_end":42309,"line_start":1257,"line_end":1257,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42314,"byte_end":42321,"line_start":1258,"line_end":1258,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42326,"byte_end":42353,"line_start":1259,"line_end":1259,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2570},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43448,"byte_end":43461,"line_start":1285,"line_end":1285,"column_start":8,"column_end":21},"name":"duplicates_by","qualname":"::Itertools::duplicates_by","value":"pub fn duplicates_by<V, F>(Self, F) -> DuplicatesBy<Self, V, F> where\nSelf: Sized, V: Eq + Hash, F: FnMut(&Self::Item) -> V","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that produces elements that appear more than once during the\n iteration. Duplicates are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that produces elements that appear more than once during the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42520,"byte_end":42611,"line_start":1267,"line_end":1267,"column_start":5,"column_end":96}},{"value":"/ iteration. Duplicates are detected using hash and equality.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42616,"byte_end":42679,"line_start":1268,"line_end":1268,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42684,"byte_end":42687,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ Duplicates are detected by comparing the key they map to with the keying function `f` by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42692,"byte_end":42784,"line_start":1270,"line_end":1270,"column_start":5,"column_end":97}},{"value":"/ hash and equality. The keys are stored in a hash map in the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42789,"byte_end":42862,"line_start":1271,"line_end":1271,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42867,"byte_end":42870,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the duplicate items in the order in which they occur in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42875,"byte_end":42968,"line_start":1273,"line_end":1273,"column_start":5,"column_end":98}},{"value":"/ the adapted iterator. Each duplicate item is returned exactly once. If an item appears more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":42973,"byte_end":43068,"line_start":1274,"line_end":1274,"column_start":5,"column_end":100}},{"value":"/ than twice, the second item is the item retained and the rest are discarded.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43073,"byte_end":43153,"line_start":1275,"line_end":1275,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43158,"byte_end":43161,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43166,"byte_end":43173,"line_start":1277,"line_end":1277,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43178,"byte_end":43207,"line_start":1278,"line_end":1278,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43212,"byte_end":43215,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ let data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43220,"byte_end":43269,"line_start":1280,"line_end":1280,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(data.into_iter().duplicates_by(|s| s.len()),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43274,"byte_end":43346,"line_start":1281,"line_end":1281,"column_start":5,"column_end":77}},{"value":"/                         vec![\"aa\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43351,"byte_end":43396,"line_start":1282,"line_end":1282,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43401,"byte_end":43408,"line_start":1283,"line_end":1283,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43413,"byte_end":43440,"line_start":1284,"line_end":1284,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2573},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44453,"byte_end":44459,"line_start":1312,"line_end":1312,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"pub fn unique(Self) -> Unique<Self> where Self: Sized, Self::Item: Clone +\nEq + Hash","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43669,"byte_end":43735,"line_start":1293,"line_end":1293,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration. Duplicates","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43740,"byte_end":43803,"line_start":1294,"line_end":1294,"column_start":5,"column_end":68}},{"value":"/ are detected using hash and equality.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43808,"byte_end":43849,"line_start":1295,"line_end":1295,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43854,"byte_end":43857,"line_start":1296,"line_end":1296,"column_start":5,"column_end":8}},{"value":"/ Clones of visited elements are stored in a hash set in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43862,"byte_end":43924,"line_start":1297,"line_end":1297,"column_start":5,"column_end":67}},{"value":"/ iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43929,"byte_end":43942,"line_start":1298,"line_end":1298,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43947,"byte_end":43950,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the non-duplicate items in the order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":43955,"byte_end":44029,"line_start":1300,"line_end":1300,"column_start":5,"column_end":79}},{"value":"/ in which they occur in the adapted iterator. In a set of duplicate","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44034,"byte_end":44104,"line_start":1301,"line_end":1301,"column_start":5,"column_end":75}},{"value":"/ items, the first item encountered is the item retained.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44109,"byte_end":44168,"line_start":1302,"line_end":1302,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44173,"byte_end":44176,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44181,"byte_end":44188,"line_start":1304,"line_end":1304,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44193,"byte_end":44222,"line_start":1305,"line_end":1305,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44227,"byte_end":44230,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ let data = vec![10, 20, 30, 20, 40, 10, 50];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44235,"byte_end":44283,"line_start":1307,"line_end":1307,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().unique(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44288,"byte_end":44342,"line_start":1308,"line_end":1308,"column_start":5,"column_end":59}},{"value":"/                         vec![10, 20, 30, 40, 50]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44347,"byte_end":44401,"line_start":1309,"line_end":1309,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44406,"byte_end":44413,"line_start":1310,"line_end":1310,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44418,"byte_end":44445,"line_start":1311,"line_end":1311,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2574},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45442,"byte_end":45451,"line_start":1338,"line_end":1338,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"pub fn unique_by<V, F>(Self, F) -> UniqueBy<Self, V, F> where Self: Sized,\nV: Eq + Hash, F: FnMut(&Self::Item) -> V","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44604,"byte_end":44670,"line_start":1319,"line_end":1319,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44675,"byte_end":44727,"line_start":1320,"line_end":1320,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44732,"byte_end":44735,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ Duplicates are detected by comparing the key they map to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44740,"byte_end":44800,"line_start":1322,"line_end":1322,"column_start":5,"column_end":65}},{"value":"/ with the keying function `f` by hash and equality.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44805,"byte_end":44859,"line_start":1323,"line_end":1323,"column_start":5,"column_end":59}},{"value":"/ The keys are stored in a hash set in the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44864,"byte_end":44918,"line_start":1324,"line_end":1324,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44923,"byte_end":44926,"line_start":1325,"line_end":1325,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the non-duplicate items in the order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":44931,"byte_end":45005,"line_start":1326,"line_end":1326,"column_start":5,"column_end":79}},{"value":"/ in which they occur in the adapted iterator. In a set of duplicate","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45010,"byte_end":45080,"line_start":1327,"line_end":1327,"column_start":5,"column_end":75}},{"value":"/ items, the first item encountered is the item retained.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45085,"byte_end":45144,"line_start":1328,"line_end":1328,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45149,"byte_end":45152,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45157,"byte_end":45164,"line_start":1330,"line_end":1330,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45169,"byte_end":45198,"line_start":1331,"line_end":1331,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45203,"byte_end":45206,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ let data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45211,"byte_end":45260,"line_start":1333,"line_end":1333,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(data.into_iter().unique_by(|s| s.len()),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45265,"byte_end":45333,"line_start":1334,"line_end":1334,"column_start":5,"column_end":73}},{"value":"/                         vec![\"a\", \"bb\", \"ccc\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45338,"byte_end":45390,"line_start":1335,"line_end":1335,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45395,"byte_end":45402,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45407,"byte_end":45434,"line_start":1337,"line_end":1337,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2577},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46191,"byte_end":46209,"line_start":1358,"line_end":1358,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"pub fn peeking_take_while<F>(&mut Self, F) -> PeekingTakeWhile<, Self, F>\nwhere Self: Sized + PeekingNext, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from this iterator and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45647,"byte_end":45713,"line_start":1346,"line_end":1346,"column_start":5,"column_end":71}},{"value":"/ takes items while the closure `accept` returns `true`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45718,"byte_end":45776,"line_start":1347,"line_end":1347,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45781,"byte_end":45784,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ This adaptor can only be used on iterators that implement `PeekingNext`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45789,"byte_end":45864,"line_start":1349,"line_end":1349,"column_start":5,"column_end":80}},{"value":"/ like `.peekable()`, `put_back` and a few other collection iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45869,"byte_end":45941,"line_start":1350,"line_end":1350,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45946,"byte_end":45949,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ The last and rejected element (first `false`) is still available when","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":45954,"byte_end":46027,"line_start":1352,"line_end":1352,"column_start":5,"column_end":78}},{"value":"/ `peeking_take_while` is done.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46032,"byte_end":46065,"line_start":1353,"line_end":1353,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46070,"byte_end":46073,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46078,"byte_end":46081,"line_start":1355,"line_end":1355,"column_start":5,"column_end":8}},{"value":"/ See also [`.take_while_ref()`](Itertools::take_while_ref)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46086,"byte_end":46147,"line_start":1356,"line_end":1356,"column_start":5,"column_end":66}},{"value":"/ which is a similar adaptor.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46152,"byte_end":46183,"line_start":1357,"line_end":1357,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47155,"byte_end":47169,"line_start":1383,"line_end":1383,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"pub fn take_while_ref<F>(&mut Self, F) -> TakeWhileRef<, Self, F> where\nSelf: Clone, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46428,"byte_end":46500,"line_start":1365,"line_end":1365,"column_start":5,"column_end":77}},{"value":"/ to only pick off elements while the predicate `accept` returns `true`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46505,"byte_end":46579,"line_start":1366,"line_end":1366,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46584,"byte_end":46587,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ It uses the `Clone` trait to restore the original iterator so that the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46592,"byte_end":46666,"line_start":1368,"line_end":1368,"column_start":5,"column_end":79}},{"value":"/ last and rejected element (first `false`) is still available when","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46671,"byte_end":46740,"line_start":1369,"line_end":1369,"column_start":5,"column_end":74}},{"value":"/ `take_while_ref` is done.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46745,"byte_end":46774,"line_start":1370,"line_end":1370,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46779,"byte_end":46782,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46787,"byte_end":46794,"line_start":1372,"line_end":1372,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46799,"byte_end":46828,"line_start":1373,"line_end":1373,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46833,"byte_end":46836,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ let mut hexadecimals = \"0123456789abcdef\".chars();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46841,"byte_end":46895,"line_start":1375,"line_end":1375,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46900,"byte_end":46903,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ let decimals = hexadecimals.take_while_ref(|c| c.is_numeric())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46908,"byte_end":46974,"line_start":1377,"line_end":1377,"column_start":5,"column_end":71}},{"value":"/                            .collect::<String>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":46979,"byte_end":47031,"line_start":1378,"line_end":1378,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(decimals, \"0123456789\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47036,"byte_end":47075,"line_start":1379,"line_end":1379,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(hexadecimals.next(), Some('a'));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47080,"byte_end":47127,"line_start":1380,"line_end":1380,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47132,"byte_end":47135,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47140,"byte_end":47147,"line_start":1382,"line_end":1382,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2581},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47835,"byte_end":47845,"line_start":1404,"line_end":1404,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"pub fn while_some<A>(Self) -> WhileSome<Self> where Self: Sized +\nIterator<Item = Option<A>>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47355,"byte_end":47428,"line_start":1390,"line_end":1390,"column_start":5,"column_end":78}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47433,"byte_end":47493,"line_start":1391,"line_end":1391,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47498,"byte_end":47501,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `A`, the unwrapped element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47506,"byte_end":47562,"line_start":1393,"line_end":1393,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47567,"byte_end":47570,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47575,"byte_end":47582,"line_start":1395,"line_end":1395,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47587,"byte_end":47616,"line_start":1396,"line_end":1396,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47621,"byte_end":47624,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ // List all hexadecimal digits","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47629,"byte_end":47663,"line_start":1398,"line_end":1398,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47668,"byte_end":47696,"line_start":1399,"line_end":1399,"column_start":5,"column_end":33}},{"value":"/     (0..).map(|i| std::char::from_digit(i, 16)).while_some(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47701,"byte_end":47766,"line_start":1400,"line_end":1400,"column_start":5,"column_end":70}},{"value":"/     \"0123456789abcdef\".chars());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47771,"byte_end":47807,"line_start":1401,"line_end":1401,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47812,"byte_end":47815,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47820,"byte_end":47827,"line_start":1403,"line_end":1403,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2583},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49277,"byte_end":49295,"line_start":1443,"line_end":1443,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"pub fn tuple_combinations<T>(Self) -> TupleCombinations<Self, T> where\nSelf: Sized + Clone, Self::Item: Clone, T: adaptors::HasCombination<Self>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the combinations of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":47981,"byte_end":48054,"line_start":1410,"line_end":1410,"column_start":5,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48059,"byte_end":48089,"line_start":1411,"line_end":1411,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48094,"byte_end":48097,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ Iterator element can be any homogeneous tuple of type `Self::Item` with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48102,"byte_end":48177,"line_start":1413,"line_end":1413,"column_start":5,"column_end":80}},{"value":"/ size up to 12.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48182,"byte_end":48200,"line_start":1414,"line_end":1414,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48205,"byte_end":48208,"line_start":1415,"line_end":1415,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48213,"byte_end":48220,"line_start":1416,"line_end":1416,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48225,"byte_end":48254,"line_start":1417,"line_end":1417,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48259,"byte_end":48262,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48267,"byte_end":48294,"line_start":1419,"line_end":1419,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_combinations() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48299,"byte_end":48346,"line_start":1420,"line_end":1420,"column_start":5,"column_end":52}},{"value":"/     v.push((a, b));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48351,"byte_end":48374,"line_start":1421,"line_end":1421,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48379,"byte_end":48384,"line_start":1422,"line_end":1422,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48389,"byte_end":48461,"line_start":1423,"line_end":1423,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48466,"byte_end":48469,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_combinations();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48474,"byte_end":48519,"line_start":1425,"line_end":1425,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48524,"byte_end":48567,"line_start":1426,"line_end":1426,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 2, 4)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48572,"byte_end":48615,"line_start":1427,"line_end":1427,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 3, 4)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48620,"byte_end":48663,"line_start":1428,"line_end":1428,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48668,"byte_end":48711,"line_start":1429,"line_end":1429,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48716,"byte_end":48748,"line_start":1430,"line_end":1430,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48753,"byte_end":48756,"line_start":1431,"line_end":1431,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48761,"byte_end":48793,"line_start":1432,"line_end":1432,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_combinations::<(_, _, _)>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48798,"byte_end":48852,"line_start":1433,"line_end":1433,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48857,"byte_end":48939,"line_start":1434,"line_end":1434,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48944,"byte_end":48947,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":48952,"byte_end":48997,"line_start":1436,"line_end":1436,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleCombinations;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49002,"byte_end":49039,"line_start":1437,"line_end":1437,"column_start":5,"column_end":42}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49044,"byte_end":49068,"line_start":1438,"line_end":1438,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49073,"byte_end":49076,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ let it: TupleCombinations<Range<u32>, (u32, u32, u32)> = (1..5).tuple_combinations();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49081,"byte_end":49170,"line_start":1440,"line_end":1440,"column_start":5,"column_end":94}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49175,"byte_end":49257,"line_start":1441,"line_end":1441,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49262,"byte_end":49269,"line_start":1442,"line_end":1442,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2585},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50506,"byte_end":50518,"line_start":1481,"line_end":1481,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"pub fn combinations(Self, usize) -> Combinations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `k`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the `k`-length combinations of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49512,"byte_end":49592,"line_start":1451,"line_end":1451,"column_start":5,"column_end":85}},{"value":"/ the elements from an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49597,"byte_end":49631,"line_start":1452,"line_end":1452,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49636,"byte_end":49639,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49644,"byte_end":49738,"line_start":1454,"line_end":1454,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49743,"byte_end":49780,"line_start":1455,"line_end":1455,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49785,"byte_end":49788,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49793,"byte_end":49800,"line_start":1457,"line_end":1457,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49805,"byte_end":49834,"line_start":1458,"line_end":1458,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49839,"byte_end":49842,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ let it = (1..5).combinations(3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49847,"byte_end":49883,"line_start":1460,"line_end":1460,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49888,"byte_end":49925,"line_start":1461,"line_end":1461,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2, 3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49930,"byte_end":49952,"line_start":1462,"line_end":1462,"column_start":5,"column_end":27}},{"value":"/     vec![1, 2, 4],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49957,"byte_end":49979,"line_start":1463,"line_end":1463,"column_start":5,"column_end":27}},{"value":"/     vec![1, 3, 4],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":49984,"byte_end":50006,"line_start":1464,"line_end":1464,"column_start":5,"column_end":27}},{"value":"/     vec![2, 3, 4],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50011,"byte_end":50033,"line_start":1465,"line_end":1465,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50038,"byte_end":50045,"line_start":1466,"line_end":1466,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50050,"byte_end":50057,"line_start":1467,"line_end":1467,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50062,"byte_end":50065,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ Note: Combinations does not take into account the equality of the iterated values.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50070,"byte_end":50156,"line_start":1469,"line_end":1469,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50161,"byte_end":50168,"line_start":1470,"line_end":1470,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50173,"byte_end":50202,"line_start":1471,"line_end":1471,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50207,"byte_end":50210,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ let it = vec![1, 2, 2].into_iter().combinations(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50215,"byte_end":50270,"line_start":1473,"line_end":1473,"column_start":5,"column_end":60}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50275,"byte_end":50312,"line_start":1474,"line_end":1474,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2], // Note: these are the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50317,"byte_end":50364,"line_start":1475,"line_end":1475,"column_start":5,"column_end":52}},{"value":"/     vec![1, 2], // Note: these are the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50369,"byte_end":50416,"line_start":1476,"line_end":1476,"column_start":5,"column_end":52}},{"value":"/     vec![2, 2],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50421,"byte_end":50440,"line_start":1477,"line_end":1477,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50445,"byte_end":50452,"line_start":1478,"line_end":1478,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50457,"byte_end":50464,"line_start":1479,"line_end":1479,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50469,"byte_end":50498,"line_start":1480,"line_end":1480,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2586},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51327,"byte_end":51356,"line_start":1508,"line_end":1508,"column_start":8,"column_end":37},"name":"combinations_with_replacement","qualname":"::Itertools::combinations_with_replacement","value":"pub fn combinations_with_replacement(Self, usize)\n-> CombinationsWithReplacement<Self> where Self: Sized, Self::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator that iterates over the `k`-length combinations of\n the elements from an iterator, with replacement.","sig":null,"attributes":[{"value":"/ Return an iterator that iterates over the `k`-length combinations of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50677,"byte_end":50749,"line_start":1488,"line_end":1488,"column_start":5,"column_end":77}},{"value":"/ the elements from an iterator, with replacement.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50754,"byte_end":50806,"line_start":1489,"line_end":1489,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50811,"byte_end":50814,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50819,"byte_end":50913,"line_start":1491,"line_end":1491,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50918,"byte_end":50955,"line_start":1492,"line_end":1492,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50960,"byte_end":50963,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50968,"byte_end":50975,"line_start":1494,"line_end":1494,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":50980,"byte_end":51009,"line_start":1495,"line_end":1495,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51014,"byte_end":51017,"line_start":1496,"line_end":1496,"column_start":5,"column_end":8}},{"value":"/ let it = (1..4).combinations_with_replacement(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51022,"byte_end":51075,"line_start":1497,"line_end":1497,"column_start":5,"column_end":58}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51080,"byte_end":51117,"line_start":1498,"line_end":1498,"column_start":5,"column_end":42}},{"value":"/     vec![1, 1],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51122,"byte_end":51141,"line_start":1499,"line_end":1499,"column_start":5,"column_end":24}},{"value":"/     vec![1, 2],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51146,"byte_end":51165,"line_start":1500,"line_end":1500,"column_start":5,"column_end":24}},{"value":"/     vec![1, 3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51170,"byte_end":51189,"line_start":1501,"line_end":1501,"column_start":5,"column_end":24}},{"value":"/     vec![2, 2],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51194,"byte_end":51213,"line_start":1502,"line_end":1502,"column_start":5,"column_end":24}},{"value":"/     vec![2, 3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51218,"byte_end":51237,"line_start":1503,"line_end":1503,"column_start":5,"column_end":24}},{"value":"/     vec![3, 3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51242,"byte_end":51261,"line_start":1504,"line_end":1504,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51266,"byte_end":51273,"line_start":1505,"line_end":1505,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51278,"byte_end":51285,"line_start":1506,"line_end":1506,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51290,"byte_end":51319,"line_start":1507,"line_end":1507,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52871,"byte_end":52883,"line_start":1554,"line_end":1554,"column_start":8,"column_end":20},"name":"permutations","qualname":"::Itertools::permutations","value":"pub fn permutations(Self, usize) -> Permutations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over all k-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over all k-permutations of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51563,"byte_end":51638,"line_start":1516,"line_end":1516,"column_start":5,"column_end":80}},{"value":"/ elements from an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51643,"byte_end":51673,"line_start":1517,"line_end":1517,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51678,"byte_end":51681,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>` with length `k`. The iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51686,"byte_end":51762,"line_start":1519,"line_end":1519,"column_start":5,"column_end":81}},{"value":"/ produces a new Vec per iteration, and clones the iterator elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51767,"byte_end":51838,"line_start":1520,"line_end":1520,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51843,"byte_end":51846,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ If `k` is greater than the length of the input iterator, the resultant","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51851,"byte_end":51925,"line_start":1522,"line_end":1522,"column_start":5,"column_end":79}},{"value":"/ iterator adaptor will be empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51930,"byte_end":51965,"line_start":1523,"line_end":1523,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51970,"byte_end":51973,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51978,"byte_end":51985,"line_start":1525,"line_end":1525,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":51990,"byte_end":52019,"line_start":1526,"line_end":1526,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52024,"byte_end":52027,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/ let perms = (5..8).permutations(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52032,"byte_end":52071,"line_start":1528,"line_end":1528,"column_start":5,"column_end":44}},{"value":"/ itertools::assert_equal(perms, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52076,"byte_end":52116,"line_start":1529,"line_end":1529,"column_start":5,"column_end":45}},{"value":"/     vec![5, 6],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52121,"byte_end":52140,"line_start":1530,"line_end":1530,"column_start":5,"column_end":24}},{"value":"/     vec![5, 7],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52145,"byte_end":52164,"line_start":1531,"line_end":1531,"column_start":5,"column_end":24}},{"value":"/     vec![6, 5],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52169,"byte_end":52188,"line_start":1532,"line_end":1532,"column_start":5,"column_end":24}},{"value":"/     vec![6, 7],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52193,"byte_end":52212,"line_start":1533,"line_end":1533,"column_start":5,"column_end":24}},{"value":"/     vec![7, 5],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52217,"byte_end":52236,"line_start":1534,"line_end":1534,"column_start":5,"column_end":24}},{"value":"/     vec![7, 6],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52241,"byte_end":52260,"line_start":1535,"line_end":1535,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52265,"byte_end":52272,"line_start":1536,"line_end":1536,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52277,"byte_end":52284,"line_start":1537,"line_end":1537,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52289,"byte_end":52292,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ Note: Permutations does not take into account the equality of the iterated values.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52297,"byte_end":52383,"line_start":1539,"line_end":1539,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52388,"byte_end":52391,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52396,"byte_end":52403,"line_start":1541,"line_end":1541,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52408,"byte_end":52437,"line_start":1542,"line_end":1542,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52442,"byte_end":52445,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ let it = vec![2, 2].into_iter().permutations(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52450,"byte_end":52502,"line_start":1544,"line_end":1544,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52507,"byte_end":52544,"line_start":1545,"line_end":1545,"column_start":5,"column_end":42}},{"value":"/     vec![2, 2], // Note: these are the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52549,"byte_end":52596,"line_start":1546,"line_end":1546,"column_start":5,"column_end":52}},{"value":"/     vec![2, 2], // Note: these are the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52601,"byte_end":52648,"line_start":1547,"line_end":1547,"column_start":5,"column_end":52}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52653,"byte_end":52660,"line_start":1548,"line_end":1548,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52665,"byte_end":52672,"line_start":1549,"line_end":1549,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52677,"byte_end":52680,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ Note: The source iterator is collected lazily, and will not be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52685,"byte_end":52751,"line_start":1551,"line_end":1551,"column_start":5,"column_end":71}},{"value":"/ re-iterated if the permutations adaptor is completed and re-iterated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52756,"byte_end":52829,"line_start":1552,"line_end":1552,"column_start":5,"column_end":78}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":52834,"byte_end":52863,"line_start":1553,"line_end":1553,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2588},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54027,"byte_end":54035,"line_start":1590,"line_end":1590,"column_start":8,"column_end":16},"name":"powerset","qualname":"::Itertools::powerset","value":"pub fn powerset(Self) -> Powerset<Self> where Self: Sized, Self::Item: Clone","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator that iterates through the powerset of the elements from an\n iterator.","sig":null,"attributes":[{"value":"/ Return an iterator that iterates through the powerset of the elements from an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53042,"byte_end":53123,"line_start":1561,"line_end":1561,"column_start":5,"column_end":86}},{"value":"/ iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53128,"byte_end":53141,"line_start":1562,"line_end":1562,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53146,"byte_end":53149,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new `Vec`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53154,"byte_end":53235,"line_start":1564,"line_end":1564,"column_start":5,"column_end":86}},{"value":"/ per iteration, and clones the iterator elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53240,"byte_end":53292,"line_start":1565,"line_end":1565,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53297,"byte_end":53300,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ The powerset of a set contains all subsets including the empty set and the full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53305,"byte_end":53388,"line_start":1567,"line_end":1567,"column_start":5,"column_end":88}},{"value":"/ input set. A powerset has length _2^n_ where _n_ is the length of the input","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53393,"byte_end":53472,"line_start":1568,"line_end":1568,"column_start":5,"column_end":84}},{"value":"/ set.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53477,"byte_end":53485,"line_start":1569,"line_end":1569,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53490,"byte_end":53493,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ Each `Vec` produced by this iterator represents a subset of the elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53498,"byte_end":53574,"line_start":1571,"line_end":1571,"column_start":5,"column_end":81}},{"value":"/ produced by the source iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53579,"byte_end":53615,"line_start":1572,"line_end":1572,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53620,"byte_end":53623,"line_start":1573,"line_end":1573,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53628,"byte_end":53635,"line_start":1574,"line_end":1574,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53640,"byte_end":53669,"line_start":1575,"line_end":1575,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53674,"byte_end":53677,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ let sets = (1..4).powerset().collect::<Vec<_>>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53682,"byte_end":53735,"line_start":1577,"line_end":1577,"column_start":5,"column_end":58}},{"value":"/ itertools::assert_equal(sets, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53740,"byte_end":53779,"line_start":1578,"line_end":1578,"column_start":5,"column_end":44}},{"value":"/     vec![],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53784,"byte_end":53799,"line_start":1579,"line_end":1579,"column_start":5,"column_end":20}},{"value":"/     vec![1],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53804,"byte_end":53820,"line_start":1580,"line_end":1580,"column_start":5,"column_end":21}},{"value":"/     vec![2],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53825,"byte_end":53841,"line_start":1581,"line_end":1581,"column_start":5,"column_end":21}},{"value":"/     vec![3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53846,"byte_end":53862,"line_start":1582,"line_end":1582,"column_start":5,"column_end":21}},{"value":"/     vec![1, 2],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53867,"byte_end":53886,"line_start":1583,"line_end":1583,"column_start":5,"column_end":24}},{"value":"/     vec![1, 3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53891,"byte_end":53910,"line_start":1584,"line_end":1584,"column_start":5,"column_end":24}},{"value":"/     vec![2, 3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53915,"byte_end":53934,"line_start":1585,"line_end":1585,"column_start":5,"column_end":24}},{"value":"/     vec![1, 2, 3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53939,"byte_end":53961,"line_start":1586,"line_end":1586,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53966,"byte_end":53973,"line_start":1587,"line_end":1587,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53978,"byte_end":53985,"line_start":1588,"line_end":1588,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":53990,"byte_end":54019,"line_start":1589,"line_end":1589,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2589},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54841,"byte_end":54850,"line_start":1614,"line_end":1614,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"pub fn pad_using<F>(Self, usize, F) -> PadUsing<Self, F> where Self: Sized,\nF: FnMut(usize) -> Self::Item","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that pads the sequence to a minimum length of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54170,"byte_end":54246,"line_start":1597,"line_end":1597,"column_start":5,"column_end":81}},{"value":"/ `min` by filling missing elements using a closure `f`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54251,"byte_end":54309,"line_start":1598,"line_end":1598,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54314,"byte_end":54317,"line_start":1599,"line_end":1599,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54322,"byte_end":54364,"line_start":1600,"line_end":1600,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54369,"byte_end":54372,"line_start":1601,"line_end":1601,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54377,"byte_end":54384,"line_start":1602,"line_end":1602,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54389,"byte_end":54418,"line_start":1603,"line_end":1603,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54423,"byte_end":54426,"line_start":1604,"line_end":1604,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54431,"byte_end":54474,"line_start":1605,"line_end":1605,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 10, 12, 14, 16, 18]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54479,"byte_end":54552,"line_start":1606,"line_end":1606,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54557,"byte_end":54560,"line_start":1607,"line_end":1607,"column_start":5,"column_end":8}},{"value":"/ let it = (0..10).pad_using(5, |i| 2*i);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54565,"byte_end":54608,"line_start":1608,"line_end":1608,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54613,"byte_end":54681,"line_start":1609,"line_end":1609,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54686,"byte_end":54689,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i).rev();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54694,"byte_end":54743,"line_start":1611,"line_end":1611,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![18, 16, 14, 12, 10, 4, 3, 2, 1, 0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54748,"byte_end":54821,"line_start":1612,"line_end":1612,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":54826,"byte_end":54833,"line_start":1613,"line_end":1613,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2591},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55765,"byte_end":55778,"line_start":1640,"line_end":1640,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"pub fn with_position(Self) -> WithPosition<Self> where Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that wraps each element in a `Position` to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55029,"byte_end":55102,"line_start":1621,"line_end":1621,"column_start":5,"column_end":78}},{"value":"/ ease special-case handling of the first or last elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55107,"byte_end":55168,"line_start":1622,"line_end":1622,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55173,"byte_end":55176,"line_start":1623,"line_end":1623,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55181,"byte_end":55209,"line_start":1624,"line_end":1624,"column_start":5,"column_end":33}},{"value":"/ [`Position<Self::Item>`](Position)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55214,"byte_end":55252,"line_start":1625,"line_end":1625,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55257,"byte_end":55260,"line_start":1626,"line_end":1626,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55265,"byte_end":55272,"line_start":1627,"line_end":1627,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Position};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55277,"byte_end":55318,"line_start":1628,"line_end":1628,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55323,"byte_end":55326,"line_start":1629,"line_end":1629,"column_start":5,"column_end":8}},{"value":"/ let it = (0..4).with_position();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55331,"byte_end":55367,"line_start":1630,"line_end":1630,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55372,"byte_end":55403,"line_start":1631,"line_end":1631,"column_start":5,"column_end":36}},{"value":"/                         vec![Position::First(0),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55408,"byte_end":55460,"line_start":1632,"line_end":1632,"column_start":5,"column_end":57}},{"value":"/                              Position::Middle(1),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55465,"byte_end":55518,"line_start":1633,"line_end":1633,"column_start":5,"column_end":58}},{"value":"/                              Position::Middle(2),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55523,"byte_end":55576,"line_start":1634,"line_end":1634,"column_start":5,"column_end":58}},{"value":"/                              Position::Last(3)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55581,"byte_end":55634,"line_start":1635,"line_end":1635,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55639,"byte_end":55642,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ let it = (0..1).with_position();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55647,"byte_end":55683,"line_start":1637,"line_end":1637,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![Position::Only(0)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55688,"byte_end":55745,"line_start":1638,"line_end":1638,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55750,"byte_end":55757,"line_start":1639,"line_end":1639,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2592},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56457,"byte_end":56466,"line_start":1659,"line_end":1659,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"pub fn positions<P>(Self, P) -> Positions<Self, P> where Self: Sized,\nP: FnMut(Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that yields the indices of all elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55894,"byte_end":55964,"line_start":1646,"line_end":1646,"column_start":5,"column_end":75}},{"value":"/ satisfying a predicate, counted from the start of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":55969,"byte_end":56036,"line_start":1647,"line_end":1647,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56041,"byte_end":56044,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `iter.enumerate().filter(|(_, v)| predicate(v)).map(|(i, _)| i)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56049,"byte_end":56132,"line_start":1649,"line_end":1649,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56137,"byte_end":56140,"line_start":1650,"line_end":1650,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56145,"byte_end":56152,"line_start":1651,"line_end":1651,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56157,"byte_end":56186,"line_start":1652,"line_end":1652,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56191,"byte_end":56194,"line_start":1653,"line_end":1653,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 3, 4, 6, 7, 9];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56199,"byte_end":56243,"line_start":1654,"line_end":1654,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 0), vec![1, 4, 5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56248,"byte_end":56330,"line_start":1655,"line_end":1655,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56335,"byte_end":56338,"line_start":1656,"line_end":1656,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 1).rev(), vec![7, 6, 3, 2, 0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56343,"byte_end":56437,"line_start":1657,"line_end":1657,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56442,"byte_end":56449,"line_start":1658,"line_end":1658,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2594},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57019,"byte_end":57025,"line_start":1676,"line_end":1676,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where Self: Sized,\nF: FnMut(&mut Self::Item) -> ()","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies a mutating function","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56645,"byte_end":56708,"line_start":1666,"line_end":1666,"column_start":5,"column_end":68}},{"value":"/ to each element before yielding it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56713,"byte_end":56752,"line_start":1667,"line_end":1667,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56757,"byte_end":56760,"line_start":1668,"line_end":1668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56765,"byte_end":56772,"line_start":1669,"line_end":1669,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56777,"byte_end":56806,"line_start":1670,"line_end":1670,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56811,"byte_end":56814,"line_start":1671,"line_end":1671,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![3, 2, 1]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56819,"byte_end":56864,"line_start":1672,"line_end":1672,"column_start":5,"column_end":50}},{"value":"/ let it = input.into_iter().update(|mut v| v.push(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56869,"byte_end":56926,"line_start":1673,"line_end":1673,"column_start":5,"column_end":62}},{"value":"/ itertools::assert_equal(it, vec![vec![1, 0], vec![3, 2, 1, 0]]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":56931,"byte_end":56999,"line_start":1674,"line_end":1674,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57004,"byte_end":57011,"line_start":1675,"line_end":1675,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2596},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57651,"byte_end":57661,"line_start":1697,"line_end":1697,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"pub fn next_tuple<T>(&mut Self) -> Option<T> where Self: Sized + Iterator<Item\n= T::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 12).","sig":null,"attributes":[{"value":"/ Advances the iterator and returns the next items grouped in a tuple of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57218,"byte_end":57292,"line_start":1684,"line_end":1684,"column_start":5,"column_end":79}},{"value":"/ a specific size (up to 12).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57297,"byte_end":57328,"line_start":1685,"line_end":1685,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57333,"byte_end":57336,"line_start":1686,"line_end":1686,"column_start":5,"column_end":8}},{"value":"/ If there are enough elements to be grouped in a tuple, then the tuple is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57341,"byte_end":57417,"line_start":1687,"line_end":1687,"column_start":5,"column_end":81}},{"value":"/ returned inside `Some`, otherwise `None` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57422,"byte_end":57479,"line_start":1688,"line_end":1688,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57484,"byte_end":57487,"line_start":1689,"line_end":1689,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57492,"byte_end":57499,"line_start":1690,"line_end":1690,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57504,"byte_end":57533,"line_start":1691,"line_end":1691,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57538,"byte_end":57541,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ let mut iter = 1..5;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57546,"byte_end":57570,"line_start":1693,"line_end":1693,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57575,"byte_end":57578,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some((1, 2)), iter.next_tuple());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57583,"byte_end":57631,"line_start":1695,"line_end":1695,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57636,"byte_end":57643,"line_start":1696,"line_end":1696,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2598},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58404,"byte_end":58417,"line_start":1722,"line_end":1722,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"pub fn collect_tuple<T>(Self) -> Option<T> where Self: Sized + Iterator<Item =\nT::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 12).","sig":null,"attributes":[{"value":"/ Collects all items from the iterator into a tuple of a specific size","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57844,"byte_end":57916,"line_start":1704,"line_end":1704,"column_start":5,"column_end":77}},{"value":"/ (up to 12).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57921,"byte_end":57936,"line_start":1705,"line_end":1705,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57941,"byte_end":57944,"line_start":1706,"line_end":1706,"column_start":5,"column_end":8}},{"value":"/ If the number of elements inside the iterator is **exactly** equal to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":57949,"byte_end":58022,"line_start":1707,"line_end":1707,"column_start":5,"column_end":78}},{"value":"/ the tuple size, then the tuple is returned inside `Some`, otherwise","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58027,"byte_end":58098,"line_start":1708,"line_end":1708,"column_start":5,"column_end":76}},{"value":"/ `None` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58103,"byte_end":58126,"line_start":1709,"line_end":1709,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58131,"byte_end":58134,"line_start":1710,"line_end":1710,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58139,"byte_end":58146,"line_start":1711,"line_end":1711,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58151,"byte_end":58180,"line_start":1712,"line_end":1712,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58185,"byte_end":58188,"line_start":1713,"line_end":1713,"column_start":5,"column_end":8}},{"value":"/ let iter = 1..3;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58193,"byte_end":58213,"line_start":1714,"line_end":1714,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58218,"byte_end":58221,"line_start":1715,"line_end":1715,"column_start":5,"column_end":8}},{"value":"/ if let Some((x, y)) = iter.collect_tuple() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58226,"byte_end":58274,"line_start":1716,"line_end":1716,"column_start":5,"column_end":53}},{"value":"/     assert_eq!((x, y), (1, 2))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58279,"byte_end":58313,"line_start":1717,"line_end":1717,"column_start":5,"column_end":39}},{"value":"/ } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58318,"byte_end":58330,"line_start":1718,"line_end":1718,"column_start":5,"column_end":17}},{"value":"/     panic!(\"Expected two elements\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58335,"byte_end":58374,"line_start":1719,"line_end":1719,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58379,"byte_end":58384,"line_start":1720,"line_end":1720,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58389,"byte_end":58396,"line_start":1721,"line_end":1721,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2600},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59098,"byte_end":59111,"line_start":1746,"line_end":1746,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"pub fn find_position<P>(&mut Self, P) -> Option<(usize, Self::Item)> where\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[{"value":"/ Find the position and value of the first element satisfying a predicate.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58750,"byte_end":58826,"line_start":1736,"line_end":1736,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58831,"byte_end":58834,"line_start":1737,"line_end":1737,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58839,"byte_end":58901,"line_start":1738,"line_end":1738,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58906,"byte_end":58909,"line_start":1739,"line_end":1739,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58914,"byte_end":58921,"line_start":1740,"line_end":1740,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58926,"byte_end":58955,"line_start":1741,"line_end":1741,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58960,"byte_end":58963,"line_start":1742,"line_end":1742,"column_start":5,"column_end":8}},{"value":"/ let text = \"Hα\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58968,"byte_end":58989,"line_start":1743,"line_end":1743,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(text.chars().find_position(|ch| ch.is_lowercase()), Some((1, 'α')));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":58994,"byte_end":59078,"line_start":1744,"line_end":1744,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59083,"byte_end":59090,"line_start":1745,"line_end":1745,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2602},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59933,"byte_end":59945,"line_start":1770,"line_end":1770,"column_start":8,"column_end":20},"name":"find_or_last","qualname":"::Itertools::find_or_last","value":"pub fn find_or_last<P>(Self, P) -> Option<Self::Item> where Self: Sized,\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Find the value of the first element satisfying a predicate or return the last element, if any.","sig":null,"attributes":[{"value":"/ Find the value of the first element satisfying a predicate or return the last element, if any.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59420,"byte_end":59518,"line_start":1758,"line_end":1758,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59523,"byte_end":59526,"line_start":1759,"line_end":1759,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59531,"byte_end":59593,"line_start":1760,"line_end":1760,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59598,"byte_end":59601,"line_start":1761,"line_end":1761,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59606,"byte_end":59613,"line_start":1762,"line_end":1762,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59618,"byte_end":59647,"line_start":1763,"line_end":1763,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59652,"byte_end":59655,"line_start":1764,"line_end":1764,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59660,"byte_end":59691,"line_start":1765,"line_end":1765,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(numbers.iter().find_or_last(|&&x| x > 5), Some(&4));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59696,"byte_end":59763,"line_start":1766,"line_end":1766,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(numbers.iter().find_or_last(|&&x| x > 2), Some(&3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59768,"byte_end":59835,"line_start":1767,"line_end":1767,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(std::iter::empty::<i32>().find_or_last(|&x| x > 5), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59840,"byte_end":59913,"line_start":1768,"line_end":1768,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":59918,"byte_end":59925,"line_start":1769,"line_end":1769,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2605},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60741,"byte_end":60754,"line_start":1790,"line_end":1790,"column_start":8,"column_end":21},"name":"find_or_first","qualname":"::Itertools::find_or_first","value":"pub fn find_or_first<P>(Self, P) -> Option<Self::Item> where Self: Sized,\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Find the value of the first element satisfying a predicate or return the first element, if any.","sig":null,"attributes":[{"value":"/ Find the value of the first element satisfying a predicate or return the first element, if any.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60224,"byte_end":60323,"line_start":1778,"line_end":1778,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60328,"byte_end":60331,"line_start":1779,"line_end":1779,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60336,"byte_end":60398,"line_start":1780,"line_end":1780,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60403,"byte_end":60406,"line_start":1781,"line_end":1781,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60411,"byte_end":60418,"line_start":1782,"line_end":1782,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60423,"byte_end":60452,"line_start":1783,"line_end":1783,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60457,"byte_end":60460,"line_start":1784,"line_end":1784,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60465,"byte_end":60496,"line_start":1785,"line_end":1785,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(numbers.iter().find_or_first(|&&x| x > 5), Some(&1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60501,"byte_end":60569,"line_start":1786,"line_end":1786,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers.iter().find_or_first(|&&x| x > 2), Some(&3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60574,"byte_end":60642,"line_start":1787,"line_end":1787,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(std::iter::empty::<i32>().find_or_first(|&x| x > 5), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60647,"byte_end":60721,"line_start":1788,"line_end":1788,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":60726,"byte_end":60733,"line_start":1789,"line_end":1789,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2608},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62063,"byte_end":62071,"line_start":1826,"line_end":1826,"column_start":8,"column_end":16},"name":"contains","qualname":"::Itertools::contains","value":"pub fn contains<Q>(&mut Self, &Q) -> bool where Self: Sized,\nSelf::Item: Borrow<Q>, Q: PartialEq","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Returns `true` if the given item is present in this iterator.","sig":null,"attributes":[{"value":"/ Returns `true` if the given item is present in this iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61070,"byte_end":61135,"line_start":1801,"line_end":1801,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61140,"byte_end":61143,"line_start":1802,"line_end":1802,"column_start":5,"column_end":8}},{"value":"/ This method is short-circuiting. If the given item is present in this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61148,"byte_end":61221,"line_start":1803,"line_end":1803,"column_start":5,"column_end":78}},{"value":"/ iterator, this method will consume the iterator up-to-and-including","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61226,"byte_end":61297,"line_start":1804,"line_end":1804,"column_start":5,"column_end":76}},{"value":"/ the item. If the given item is not present in this iterator, the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61302,"byte_end":61370,"line_start":1805,"line_end":1805,"column_start":5,"column_end":73}},{"value":"/ iterator will be exhausted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61375,"byte_end":61406,"line_start":1806,"line_end":1806,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61411,"byte_end":61414,"line_start":1807,"line_end":1807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61419,"byte_end":61426,"line_start":1808,"line_end":1808,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61431,"byte_end":61460,"line_start":1809,"line_end":1809,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61465,"byte_end":61468,"line_start":1810,"line_end":1810,"column_start":5,"column_end":8}},{"value":"/ #[derive(PartialEq, Debug)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61473,"byte_end":61504,"line_start":1811,"line_end":1811,"column_start":5,"column_end":36}},{"value":"/ enum Enum { A, B, C, D, E, }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61509,"byte_end":61541,"line_start":1812,"line_end":1812,"column_start":5,"column_end":37}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61546,"byte_end":61550,"line_start":1813,"line_end":1813,"column_start":5,"column_end":9}},{"value":"/ let mut iter = vec![Enum::A, Enum::B, Enum::C, Enum::D].into_iter();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61555,"byte_end":61627,"line_start":1814,"line_end":1814,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61632,"byte_end":61636,"line_start":1815,"line_end":1815,"column_start":5,"column_end":9}},{"value":"/ // search `iter` for `B`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61641,"byte_end":61669,"line_start":1816,"line_end":1816,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(iter.contains(&Enum::B), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61674,"byte_end":61720,"line_start":1817,"line_end":1817,"column_start":5,"column_end":51}},{"value":"/ // `B` was found, so the iterator now rests at the item after `B` (i.e, `C`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61725,"byte_end":61806,"line_start":1818,"line_end":1818,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(iter.next(), Some(Enum::C));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61811,"byte_end":61854,"line_start":1819,"line_end":1819,"column_start":5,"column_end":48}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61859,"byte_end":61863,"line_start":1820,"line_end":1820,"column_start":5,"column_end":9}},{"value":"/ // search `iter` for `E`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61868,"byte_end":61896,"line_start":1821,"line_end":1821,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(iter.contains(&Enum::E), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61901,"byte_end":61948,"line_start":1822,"line_end":1822,"column_start":5,"column_end":52}},{"value":"/ // `E` wasn't found, so `iter` is now exhausted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":61953,"byte_end":62004,"line_start":1823,"line_end":1823,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62009,"byte_end":62043,"line_start":1824,"line_end":1824,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62048,"byte_end":62055,"line_start":1825,"line_end":1825,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2611},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62787,"byte_end":62796,"line_start":1851,"line_end":1851,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"pub fn all_equal(&mut Self) -> bool where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[{"value":"/ Check whether all elements compare equal.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62248,"byte_end":62293,"line_start":1835,"line_end":1835,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62298,"byte_end":62301,"line_start":1836,"line_end":1836,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have equal elements:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62306,"byte_end":62364,"line_start":1837,"line_end":1837,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62369,"byte_end":62372,"line_start":1838,"line_end":1838,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62377,"byte_end":62384,"line_start":1839,"line_end":1839,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62389,"byte_end":62418,"line_start":1840,"line_end":1840,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62423,"byte_end":62426,"line_start":1841,"line_end":1841,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62431,"byte_end":62484,"line_start":1842,"line_end":1842,"column_start":5,"column_end":58}},{"value":"/ assert!(!data.iter().all_equal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62489,"byte_end":62527,"line_start":1843,"line_end":1843,"column_start":5,"column_end":43}},{"value":"/ assert!(data[0..3].iter().all_equal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62532,"byte_end":62575,"line_start":1844,"line_end":1844,"column_start":5,"column_end":48}},{"value":"/ assert!(data[3..5].iter().all_equal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62580,"byte_end":62623,"line_start":1845,"line_end":1845,"column_start":5,"column_end":48}},{"value":"/ assert!(data[5..8].iter().all_equal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62628,"byte_end":62671,"line_start":1846,"line_end":1846,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62676,"byte_end":62679,"line_start":1847,"line_end":1847,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62684,"byte_end":62720,"line_start":1848,"line_end":1848,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_equal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62725,"byte_end":62767,"line_start":1849,"line_end":1849,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":62772,"byte_end":62779,"line_start":1850,"line_end":1850,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2613},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63528,"byte_end":63538,"line_start":1877,"line_end":1877,"column_start":8,"column_end":18},"name":"all_unique","qualname":"::Itertools::all_unique","value":"pub fn all_unique(&mut Self) -> bool where Self: Sized, Self::Item: Eq + Hash","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Check whether all elements are unique (non equal).","sig":null,"attributes":[{"value":"/ Check whether all elements are unique (non equal).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63006,"byte_end":63060,"line_start":1861,"line_end":1861,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63065,"byte_end":63068,"line_start":1862,"line_end":1862,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have unique elements:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63073,"byte_end":63132,"line_start":1863,"line_end":1863,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63137,"byte_end":63140,"line_start":1864,"line_end":1864,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63145,"byte_end":63152,"line_start":1865,"line_end":1865,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63157,"byte_end":63186,"line_start":1866,"line_end":1866,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63191,"byte_end":63194,"line_start":1867,"line_end":1867,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 4, 1, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63199,"byte_end":63237,"line_start":1868,"line_end":1868,"column_start":5,"column_end":43}},{"value":"/ assert!(!data.iter().all_unique());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63242,"byte_end":63281,"line_start":1869,"line_end":1869,"column_start":5,"column_end":44}},{"value":"/ assert!(data[0..4].iter().all_unique());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63286,"byte_end":63330,"line_start":1870,"line_end":1870,"column_start":5,"column_end":49}},{"value":"/ assert!(data[1..6].iter().all_unique());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63335,"byte_end":63379,"line_start":1871,"line_end":1871,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63384,"byte_end":63387,"line_start":1872,"line_end":1872,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63392,"byte_end":63428,"line_start":1873,"line_end":1873,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_unique());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63433,"byte_end":63476,"line_start":1874,"line_end":1874,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63481,"byte_end":63488,"line_start":1875,"line_end":1875,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63493,"byte_end":63520,"line_start":1876,"line_end":1876,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2615},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64291,"byte_end":64299,"line_start":1900,"line_end":1900,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"pub fn dropping(Self, usize) -> Self where Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the first `n` elements from the iterator eagerly,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63723,"byte_end":63784,"line_start":1885,"line_end":1885,"column_start":5,"column_end":66}},{"value":"/ and return the same iterator again.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63789,"byte_end":63828,"line_start":1886,"line_end":1886,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63833,"byte_end":63836,"line_start":1887,"line_end":1887,"column_start":5,"column_end":8}},{"value":"/ It works similarly to *.skip(* `n` *)* except it is eager and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63841,"byte_end":63906,"line_start":1888,"line_end":1888,"column_start":5,"column_end":70}},{"value":"/ preserves the iterator type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63911,"byte_end":63943,"line_start":1889,"line_end":1889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63948,"byte_end":63951,"line_start":1890,"line_end":1890,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63956,"byte_end":63963,"line_start":1891,"line_end":1891,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":63968,"byte_end":63997,"line_start":1892,"line_end":1892,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64002,"byte_end":64005,"line_start":1893,"line_end":1893,"column_start":5,"column_end":8}},{"value":"/ let mut iter = \"αβγ\".chars().dropping(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64010,"byte_end":64058,"line_start":1894,"line_end":1894,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(iter, \"γ\".chars());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64063,"byte_end":64111,"line_start":1895,"line_end":1895,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64116,"byte_end":64123,"line_start":1896,"line_end":1896,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64128,"byte_end":64131,"line_start":1897,"line_end":1897,"column_start":5,"column_end":8}},{"value":"/ *Fusing notes: if the iterator is exhausted by dropping,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64136,"byte_end":64196,"line_start":1898,"line_end":1898,"column_start":5,"column_end":65}},{"value":"/ the result of calling `.next()` again depends on the iterator implementation.*","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64201,"byte_end":64283,"line_start":1899,"line_end":1899,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2616},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64992,"byte_end":65005,"line_start":1924,"line_end":1924,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"pub fn dropping_back(Self, usize) -> Self where Self: Sized,\nSelf: DoubleEndedIterator","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the last `n` elements from the iterator eagerly,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64442,"byte_end":64502,"line_start":1909,"line_end":1909,"column_start":5,"column_end":65}},{"value":"/ and return the same iterator again.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64507,"byte_end":64546,"line_start":1910,"line_end":1910,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64551,"byte_end":64554,"line_start":1911,"line_end":1911,"column_start":5,"column_end":8}},{"value":"/ This is only possible on double ended iterators. `n` may be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64559,"byte_end":64622,"line_start":1912,"line_end":1912,"column_start":5,"column_end":68}},{"value":"/ larger than the number of elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64627,"byte_end":64666,"line_start":1913,"line_end":1913,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64671,"byte_end":64674,"line_start":1914,"line_end":1914,"column_start":5,"column_end":8}},{"value":"/ Note: This method is eager, dropping the back elements immediately and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64679,"byte_end":64753,"line_start":1915,"line_end":1915,"column_start":5,"column_end":79}},{"value":"/ preserves the iterator type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64758,"byte_end":64790,"line_start":1916,"line_end":1916,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64795,"byte_end":64798,"line_start":1917,"line_end":1917,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64803,"byte_end":64810,"line_start":1918,"line_end":1918,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64815,"byte_end":64844,"line_start":1919,"line_end":1919,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64849,"byte_end":64852,"line_start":1920,"line_end":1920,"column_start":5,"column_end":8}},{"value":"/ let init = vec![0, 3, 6, 9].into_iter().dropping_back(1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64857,"byte_end":64918,"line_start":1921,"line_end":1921,"column_start":5,"column_end":66}},{"value":"/ itertools::assert_equal(init, vec![0, 3, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64923,"byte_end":64972,"line_start":1922,"line_end":1922,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":64977,"byte_end":64984,"line_start":1923,"line_end":1923,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2617},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65793,"byte_end":65800,"line_start":1952,"line_end":1952,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"pub fn foreach<F>(Self, F) where F: FnMut(Self::Item) -> (), Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[{"value":"/ Run the closure `f` eagerly on each element of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65202,"byte_end":65266,"line_start":1934,"line_end":1934,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65271,"byte_end":65274,"line_start":1935,"line_end":1935,"column_start":5,"column_end":8}},{"value":"/ Consumes the iterator until its end.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65279,"byte_end":65319,"line_start":1936,"line_end":1936,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65324,"byte_end":65327,"line_start":1937,"line_end":1937,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65332,"byte_end":65339,"line_start":1938,"line_end":1938,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65344,"byte_end":65377,"line_start":1939,"line_end":1939,"column_start":5,"column_end":38}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65382,"byte_end":65411,"line_start":1940,"line_end":1940,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65416,"byte_end":65419,"line_start":1941,"line_end":1941,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65424,"byte_end":65453,"line_start":1942,"line_end":1942,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65458,"byte_end":65461,"line_start":1943,"line_end":1943,"column_start":5,"column_end":8}},{"value":"/ // use .foreach() to apply a function to each value -- sending it","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65466,"byte_end":65535,"line_start":1944,"line_end":1944,"column_start":5,"column_end":74}},{"value":"/ (0..5).map(|x| x * 2 + 1).foreach(|x| { tx.send(x).unwrap(); } );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65540,"byte_end":65609,"line_start":1945,"line_end":1945,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65614,"byte_end":65617,"line_start":1946,"line_end":1946,"column_start":5,"column_end":8}},{"value":"/ drop(tx);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65622,"byte_end":65635,"line_start":1947,"line_end":1947,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65640,"byte_end":65643,"line_start":1948,"line_end":1948,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(rx.iter(), vec![1, 3, 5, 7, 9]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65648,"byte_end":65708,"line_start":1949,"line_end":1949,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65713,"byte_end":65720,"line_start":1950,"line_end":1950,"column_start":5,"column_end":12}},{"value":"deprecated(note = \"Use .for_each() instead\", since = \"0.8.0\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65725,"byte_end":65785,"line_start":1951,"line_end":1951,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2619},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66433,"byte_end":66439,"line_start":1972,"line_end":1972,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"pub fn concat(Self) -> Self::Item where Self: Sized,\nSelf::Item: Extend<<<Self as Iterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using [`Extend`].","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using [`Extend`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":65921,"byte_end":65997,"line_start":1959,"line_end":1959,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66002,"byte_end":66005,"line_start":1960,"line_end":1960,"column_start":5,"column_end":8}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66010,"byte_end":66085,"line_start":1961,"line_end":1961,"column_start":5,"column_end":80}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66090,"byte_end":66163,"line_start":1962,"line_end":1962,"column_start":5,"column_end":78}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66168,"byte_end":66194,"line_start":1963,"line_end":1963,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66199,"byte_end":66202,"line_start":1964,"line_end":1964,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66207,"byte_end":66218,"line_start":1965,"line_end":1965,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66223,"byte_end":66252,"line_start":1966,"line_end":1966,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66257,"byte_end":66260,"line_start":1967,"line_end":1967,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66265,"byte_end":66322,"line_start":1968,"line_end":1968,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(input.into_iter().concat(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66327,"byte_end":66369,"line_start":1969,"line_end":1969,"column_start":5,"column_end":47}},{"value":"/            vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66374,"byte_end":66413,"line_start":1970,"line_end":1970,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66418,"byte_end":66425,"line_start":1971,"line_end":1971,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2620},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66778,"byte_end":66789,"line_start":1982,"line_end":1982,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"pub fn collect_vec(Self) -> Vec<Self::Item> where Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of [`Iterator::collect`],\n for convenience.\n","sig":null,"attributes":[{"value":"/ `.collect_vec()` is simply a type specialization of [`Iterator::collect`],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66633,"byte_end":66711,"line_start":1979,"line_end":1979,"column_start":5,"column_end":83}},{"value":"/ for convenience.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66716,"byte_end":66736,"line_start":1980,"line_end":1980,"column_start":5,"column_end":25}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66741,"byte_end":66770,"line_start":1981,"line_end":1981,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67433,"byte_end":67444,"line_start":2009,"line_end":2009,"column_start":8,"column_end":19},"name":"try_collect","qualname":"::Itertools::try_collect","value":"pub fn try_collect<T, U, E>(Self) -> Result<U, E> where Self: Sized +\nIterator<Item = Result<T, E>>, Result<U, E>: FromIterator<Result<T, E>>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" `.try_collect()` is more convenient way of writing\n `.collect::<Result<_, _>>()`","sig":null,"attributes":[{"value":"/ `.try_collect()` is more convenient way of writing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66881,"byte_end":66935,"line_start":1988,"line_end":1988,"column_start":5,"column_end":59}},{"value":"/ `.collect::<Result<_, _>>()`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66940,"byte_end":66972,"line_start":1989,"line_end":1989,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66977,"byte_end":66980,"line_start":1990,"line_end":1990,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":66985,"byte_end":66998,"line_start":1991,"line_end":1991,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67003,"byte_end":67006,"line_start":1992,"line_end":1992,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67011,"byte_end":67018,"line_start":1993,"line_end":1993,"column_start":5,"column_end":12}},{"value":"/ use std::{fs, io};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67023,"byte_end":67045,"line_start":1994,"line_end":1994,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67050,"byte_end":67079,"line_start":1995,"line_end":1995,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67084,"byte_end":67087,"line_start":1996,"line_end":1996,"column_start":5,"column_end":8}},{"value":"/ fn process_dir_entries(entries: &[fs::DirEntry]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67092,"byte_end":67146,"line_start":1997,"line_end":1997,"column_start":5,"column_end":59}},{"value":"/     // ...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67151,"byte_end":67165,"line_start":1998,"line_end":1998,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67170,"byte_end":67175,"line_start":1999,"line_end":1999,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67180,"byte_end":67183,"line_start":2000,"line_end":2000,"column_start":5,"column_end":8}},{"value":"/ fn do_stuff() -> std::io::Result<()> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67188,"byte_end":67230,"line_start":2001,"line_end":2001,"column_start":5,"column_end":47}},{"value":"/     let entries: Vec<_> = fs::read_dir(\".\")?.try_collect()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67235,"byte_end":67299,"line_start":2002,"line_end":2002,"column_start":5,"column_end":69}},{"value":"/     process_dir_entries(&entries);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67304,"byte_end":67342,"line_start":2003,"line_end":2003,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67347,"byte_end":67350,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67355,"byte_end":67369,"line_start":2005,"line_end":2005,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67374,"byte_end":67379,"line_start":2006,"line_end":2006,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67384,"byte_end":67391,"line_start":2007,"line_end":2007,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67396,"byte_end":67425,"line_start":2008,"line_end":2008,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2625},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68154,"byte_end":68162,"line_start":2033,"line_end":2033,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"pub fn set_from<'a, A: 'a, J>(&mut Self, J) -> usize where Self: Iterator<Item\n= &'a mut A>, J: IntoIterator<Item = A>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"/ Assign to each reference in `self` from the `from` iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67629,"byte_end":67693,"line_start":2017,"line_end":2017,"column_start":5,"column_end":69}},{"value":"/ stopping at the shortest of the two iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67698,"byte_end":67748,"line_start":2018,"line_end":2018,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67753,"byte_end":67756,"line_start":2019,"line_end":2019,"column_start":5,"column_end":8}},{"value":"/ The `from` iterator is queried for its next element before the `self`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67761,"byte_end":67834,"line_start":2020,"line_end":2020,"column_start":5,"column_end":78}},{"value":"/ iterator, and if either is exhausted the method is done.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67839,"byte_end":67899,"line_start":2021,"line_end":2021,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67904,"byte_end":67907,"line_start":2022,"line_end":2022,"column_start":5,"column_end":8}},{"value":"/ Return the number of elements written.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67912,"byte_end":67954,"line_start":2023,"line_end":2023,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67959,"byte_end":67962,"line_start":2024,"line_end":2024,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67967,"byte_end":67974,"line_start":2025,"line_end":2025,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":67979,"byte_end":68008,"line_start":2026,"line_end":2026,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68013,"byte_end":68016,"line_start":2027,"line_end":2027,"column_start":5,"column_end":8}},{"value":"/ let mut xs = [0; 4];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68021,"byte_end":68045,"line_start":2028,"line_end":2028,"column_start":5,"column_end":29}},{"value":"/ xs.iter_mut().set_from(1..);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68050,"byte_end":68082,"line_start":2029,"line_end":2029,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(xs, [1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68087,"byte_end":68120,"line_start":2030,"line_end":2030,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68125,"byte_end":68132,"line_start":2031,"line_end":2031,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68137,"byte_end":68146,"line_start":2032,"line_end":2032,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2629},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68908,"byte_end":68912,"line_start":2059,"line_end":2059,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"pub fn join(&mut Self, &str) -> String where Self::Item: std::fmt::Display","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, separated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, separated by `sep`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68530,"byte_end":68600,"line_start":2048,"line_end":2048,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68605,"byte_end":68608,"line_start":2049,"line_end":2049,"column_start":5,"column_end":8}},{"value":"/ Use the `Display` implementation of each element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68613,"byte_end":68666,"line_start":2050,"line_end":2050,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68671,"byte_end":68674,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68679,"byte_end":68686,"line_start":2052,"line_end":2052,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68691,"byte_end":68720,"line_start":2053,"line_end":2053,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68725,"byte_end":68728,"line_start":2054,"line_end":2054,"column_start":5,"column_end":8}},{"value":"/ assert_eq!([\"a\", \"b\", \"c\"].iter().join(\", \"), \"a, b, c\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68733,"byte_end":68794,"line_start":2055,"line_end":2055,"column_start":5,"column_end":66}},{"value":"/ assert_eq!([1, 2, 3].iter().join(\", \"), \"1, 2, 3\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68799,"byte_end":68854,"line_start":2056,"line_end":2056,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68859,"byte_end":68866,"line_start":2057,"line_end":2057,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":68871,"byte_end":68900,"line_start":2058,"line_end":2058,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2631},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70046,"byte_end":70052,"line_start":2093,"line_end":2093,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"pub fn format(Self, &str) -> Format<, Self> where Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69558,"byte_end":69611,"line_start":2078,"line_end":2078,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69616,"byte_end":69619,"line_start":2079,"line_end":2079,"column_start":5,"column_end":8}},{"value":"/ All elements are formatted (any formatting trait)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69624,"byte_end":69677,"line_start":2080,"line_end":2080,"column_start":5,"column_end":58}},{"value":"/ with `sep` inserted between each element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69682,"byte_end":69727,"line_start":2081,"line_end":2081,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69732,"byte_end":69735,"line_start":2082,"line_end":2082,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69740,"byte_end":69807,"line_start":2083,"line_end":2083,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69812,"byte_end":69815,"line_start":2084,"line_end":2084,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69820,"byte_end":69827,"line_start":2085,"line_end":2085,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69832,"byte_end":69861,"line_start":2086,"line_end":2086,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69866,"byte_end":69869,"line_start":2087,"line_end":2087,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69874,"byte_end":69909,"line_start":2088,"line_end":2088,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69914,"byte_end":69929,"line_start":2089,"line_end":2089,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:.2}\", data.iter().format(\", \")),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69934,"byte_end":69985,"line_start":2090,"line_end":2090,"column_start":5,"column_end":56}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":69990,"byte_end":70026,"line_start":2091,"line_end":2091,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70031,"byte_end":70038,"line_start":2092,"line_end":2092,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2632},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71551,"byte_end":71562,"line_start":2131,"line_end":2131,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"pub fn format_with<F>(Self, &str, F) -> FormatWith<, Self, F> where\nSelf: Sized,\nF: FnMut(Self::Item, &mut dyn FnMut(&dyn fmt::Display) -> fmt::Result) ->\nfmt::Result","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70176,"byte_end":70229,"line_start":2099,"line_end":2099,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70234,"byte_end":70237,"line_start":2100,"line_end":2100,"column_start":5,"column_end":8}},{"value":"/ This is a customizable version of [`.format()`](Itertools::format).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70242,"byte_end":70313,"line_start":2101,"line_end":2101,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70318,"byte_end":70321,"line_start":2102,"line_end":2102,"column_start":5,"column_end":8}},{"value":"/ The supplied closure `format` is called once per iterator element,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70326,"byte_end":70396,"line_start":2103,"line_end":2103,"column_start":5,"column_end":75}},{"value":"/ with two arguments: the element and a callback that takes a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70401,"byte_end":70464,"line_start":2104,"line_end":2104,"column_start":5,"column_end":68}},{"value":"/ `&Display` value, i.e. any reference to type that implements `Display`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70469,"byte_end":70544,"line_start":2105,"line_end":2105,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70549,"byte_end":70552,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ Using `&format_args!(...)` is the most versatile way to apply custom","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70557,"byte_end":70629,"line_start":2107,"line_end":2107,"column_start":5,"column_end":77}},{"value":"/ element formatting. The callback can be called multiple times if needed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70634,"byte_end":70710,"line_start":2108,"line_end":2108,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70715,"byte_end":70718,"line_start":2109,"line_end":2109,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70723,"byte_end":70790,"line_start":2110,"line_end":2110,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70795,"byte_end":70798,"line_start":2111,"line_end":2111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70803,"byte_end":70810,"line_start":2112,"line_end":2112,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70815,"byte_end":70844,"line_start":2113,"line_end":2113,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70849,"byte_end":70852,"line_start":2114,"line_end":2114,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70857,"byte_end":70892,"line_start":2115,"line_end":2115,"column_start":5,"column_end":40}},{"value":"/ let data_formatter = data.iter().format_with(\", \", |elt, f| f(&format_args!(\"{:.2}\", elt)));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70897,"byte_end":70993,"line_start":2116,"line_end":2116,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(format!(\"{}\", data_formatter),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":70998,"byte_end":71043,"line_start":2117,"line_end":2117,"column_start":5,"column_end":50}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71048,"byte_end":71084,"line_start":2118,"line_end":2118,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71089,"byte_end":71092,"line_start":2119,"line_end":2119,"column_start":5,"column_end":8}},{"value":"/ // .format_with() is recursively composable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71097,"byte_end":71144,"line_start":2120,"line_end":2120,"column_start":5,"column_end":52}},{"value":"/ let matrix = [[1., 2., 3.],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71149,"byte_end":71180,"line_start":2121,"line_end":2121,"column_start":5,"column_end":36}},{"value":"/               [4., 5., 6.]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71185,"byte_end":71217,"line_start":2122,"line_end":2122,"column_start":5,"column_end":37}},{"value":"/ let matrix_formatter = matrix.iter().format_with(\"\\n\", |row, f| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71222,"byte_end":71291,"line_start":2123,"line_end":2123,"column_start":5,"column_end":74}},{"value":"/                                 f(&row.iter().format_with(\", \", |elt, g| g(&elt)))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71296,"byte_end":71382,"line_start":2124,"line_end":2124,"column_start":5,"column_end":91}},{"value":"/                              });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71387,"byte_end":71423,"line_start":2125,"line_end":2125,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(format!(\"{}\", matrix_formatter),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71428,"byte_end":71475,"line_start":2126,"line_end":2126,"column_start":5,"column_end":52}},{"value":"/            \"1, 2, 3\\n4, 5, 6\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71480,"byte_end":71515,"line_start":2127,"line_end":2127,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71520,"byte_end":71523,"line_start":2128,"line_end":2128,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71528,"byte_end":71531,"line_start":2129,"line_end":2129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71536,"byte_end":71543,"line_start":2130,"line_end":2130,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71924,"byte_end":71936,"line_start":2140,"line_end":2140,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"pub fn fold_results<A, E, B, F>(&mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" See [`.fold_ok()`](Itertools::fold_ok).\n","sig":null,"attributes":[{"value":"/ See [`.fold_ok()`](Itertools::fold_ok).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71808,"byte_end":71851,"line_start":2138,"line_end":2138,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"Use .fold_ok() instead\", since = \"0.10.0\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":71856,"byte_end":71916,"line_start":2139,"line_end":2139,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73599,"byte_end":73606,"line_start":2189,"line_end":2189,"column_start":8,"column_end":15},"name":"fold_ok","qualname":"::Itertools::fold_ok","value":"pub fn fold_ok<A, E, B, F>(&mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Result` values from an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72125,"byte_end":72167,"line_start":2147,"line_end":2147,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72172,"byte_end":72175,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ Only `Ok` values are folded. If no error is encountered, the folded","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72180,"byte_end":72251,"line_start":2149,"line_end":2149,"column_start":5,"column_end":76}},{"value":"/ value is returned inside `Ok`. Otherwise, the operation terminates","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72256,"byte_end":72326,"line_start":2150,"line_end":2150,"column_start":5,"column_end":75}},{"value":"/ and returns the first `Err` value it encounters. No iterator elements are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72331,"byte_end":72408,"line_start":2151,"line_end":2151,"column_start":5,"column_end":82}},{"value":"/ consumed after the first error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72413,"byte_end":72448,"line_start":2152,"line_end":2152,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72453,"byte_end":72456,"line_start":2153,"line_end":2153,"column_start":5,"column_end":8}},{"value":"/ The first accumulator value is the `start` parameter.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72461,"byte_end":72518,"line_start":2154,"line_end":2154,"column_start":5,"column_end":62}},{"value":"/ Each iteration passes the accumulator value and the next value inside `Ok`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72523,"byte_end":72601,"line_start":2155,"line_end":2155,"column_start":5,"column_end":83}},{"value":"/ to the fold function `f` and its return value becomes the new accumulator value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72606,"byte_end":72690,"line_start":2156,"line_end":2156,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72695,"byte_end":72698,"line_start":2157,"line_end":2157,"column_start":5,"column_end":8}},{"value":"/ For example the sequence *Ok(1), Ok(2), Ok(3)* will result in a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72703,"byte_end":72770,"line_start":2158,"line_end":2158,"column_start":5,"column_end":72}},{"value":"/ computation like this:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72775,"byte_end":72801,"line_start":2159,"line_end":2159,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72806,"byte_end":72809,"line_start":2160,"line_end":2160,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72814,"byte_end":72827,"line_start":2161,"line_end":2161,"column_start":5,"column_end":18}},{"value":"/ let mut accum = start;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72832,"byte_end":72858,"line_start":2162,"line_end":2162,"column_start":5,"column_end":31}},{"value":"/ accum = f(accum, 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72863,"byte_end":72887,"line_start":2163,"line_end":2163,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72892,"byte_end":72916,"line_start":2164,"line_end":2164,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72921,"byte_end":72945,"line_start":2165,"line_end":2165,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72950,"byte_end":72957,"line_start":2166,"line_end":2166,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72962,"byte_end":72965,"line_start":2167,"line_end":2167,"column_start":5,"column_end":8}},{"value":"/ With a `start` value of 0 and an addition as folding function,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":72970,"byte_end":73036,"line_start":2168,"line_end":2168,"column_start":5,"column_end":71}},{"value":"/ this effectively results in *((0 + 1) + 2) + 3*","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73041,"byte_end":73092,"line_start":2169,"line_end":2169,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73097,"byte_end":73100,"line_start":2170,"line_end":2170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73105,"byte_end":73112,"line_start":2171,"line_end":2171,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73117,"byte_end":73139,"line_start":2172,"line_end":2172,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73144,"byte_end":73173,"line_start":2173,"line_end":2173,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73178,"byte_end":73181,"line_start":2174,"line_end":2174,"column_start":5,"column_end":8}},{"value":"/ let values = [1, 2, -2, -1, 2, 1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73186,"byte_end":73224,"line_start":2175,"line_end":2175,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73229,"byte_end":73244,"line_start":2176,"line_end":2176,"column_start":5,"column_end":20}},{"value":"/     values.iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73249,"byte_end":73270,"line_start":2177,"line_end":2177,"column_start":5,"column_end":26}},{"value":"/           .map(Ok::<_, ()>)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73275,"byte_end":73306,"line_start":2178,"line_end":2178,"column_start":5,"column_end":36}},{"value":"/           .fold_ok(0, Add::add),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73311,"byte_end":73347,"line_start":2179,"line_end":2179,"column_start":5,"column_end":41}},{"value":"/     Ok(3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73352,"byte_end":73365,"line_start":2180,"line_end":2180,"column_start":5,"column_end":18}},{"value":"/ );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73370,"byte_end":73376,"line_start":2181,"line_end":2181,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73381,"byte_end":73393,"line_start":2182,"line_end":2182,"column_start":5,"column_end":17}},{"value":"/     values.iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73398,"byte_end":73419,"line_start":2183,"line_end":2183,"column_start":5,"column_end":26}},{"value":"/           .map(|&x| if x >= 0 { Ok(x) } else { Err(\"Negative number\") })","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73424,"byte_end":73500,"line_start":2184,"line_end":2184,"column_start":5,"column_end":81}},{"value":"/           .fold_ok(0, Add::add)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73505,"byte_end":73540,"line_start":2185,"line_end":2185,"column_start":5,"column_end":40}},{"value":"/           .is_err()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73545,"byte_end":73568,"line_start":2186,"line_end":2186,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73573,"byte_end":73579,"line_start":2187,"line_end":2187,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73584,"byte_end":73591,"line_start":2188,"line_end":2188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2644},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74780,"byte_end":74792,"line_start":2221,"line_end":2221,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"pub fn fold_options<A, B, F>(&mut Self, B, F) -> Option<B> where\nSelf: Iterator<Item = Option<A>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Option` values from an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73951,"byte_end":73993,"line_start":2202,"line_end":2202,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":73998,"byte_end":74001,"line_start":2203,"line_end":2203,"column_start":5,"column_end":8}},{"value":"/ Only `Some` values are folded. If no `None` is encountered, the folded","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74006,"byte_end":74080,"line_start":2204,"line_end":2204,"column_start":5,"column_end":79}},{"value":"/ value is returned inside `Some`. Otherwise, the operation terminates","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74085,"byte_end":74157,"line_start":2205,"line_end":2205,"column_start":5,"column_end":77}},{"value":"/ and returns `None`. No iterator elements are consumed after the `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74162,"byte_end":74237,"line_start":2206,"line_end":2206,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74242,"byte_end":74245,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/ This is the `Option` equivalent to [`fold_ok`](Itertools::fold_ok).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74250,"byte_end":74321,"line_start":2208,"line_end":2208,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74326,"byte_end":74329,"line_start":2209,"line_end":2209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74334,"byte_end":74341,"line_start":2210,"line_end":2210,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74346,"byte_end":74368,"line_start":2211,"line_end":2211,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74373,"byte_end":74402,"line_start":2212,"line_end":2212,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74407,"byte_end":74410,"line_start":2213,"line_end":2213,"column_start":5,"column_end":8}},{"value":"/ let mut values = vec![Some(1), Some(2), Some(-2)].into_iter();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74415,"byte_end":74481,"line_start":2214,"line_end":2214,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(values.fold_options(5, Add::add), Some(5 + 1 + 2 - 2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74486,"byte_end":74556,"line_start":2215,"line_end":2215,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74561,"byte_end":74564,"line_start":2216,"line_end":2216,"column_start":5,"column_end":8}},{"value":"/ let mut more_values = vec![Some(2), None, Some(0)].into_iter();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74569,"byte_end":74636,"line_start":2217,"line_end":2217,"column_start":5,"column_end":72}},{"value":"/ assert!(more_values.fold_options(0, Add::add).is_none());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74641,"byte_end":74702,"line_start":2218,"line_end":2218,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(more_values.next().unwrap(), Some(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74707,"byte_end":74760,"line_start":2219,"line_end":2219,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":74765,"byte_end":74772,"line_start":2220,"line_end":2220,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75669,"byte_end":75674,"line_start":2247,"line_end":2247,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"pub fn fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[{"value":"/ Accumulator of the elements in the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75128,"byte_end":75176,"line_start":2234,"line_end":2234,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75181,"byte_end":75184,"line_start":2235,"line_end":2235,"column_start":5,"column_end":8}},{"value":"/ Like `.fold()`, without a base case. If the iterator is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75189,"byte_end":75248,"line_start":2236,"line_end":2236,"column_start":5,"column_end":64}},{"value":"/ empty, return `None`. With just one element, return it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75253,"byte_end":75312,"line_start":2237,"line_end":2237,"column_start":5,"column_end":64}},{"value":"/ Otherwise elements are accumulated in sequence using the closure `f`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75317,"byte_end":75390,"line_start":2238,"line_end":2238,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75395,"byte_end":75398,"line_start":2239,"line_end":2239,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75403,"byte_end":75410,"line_start":2240,"line_end":2240,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75415,"byte_end":75444,"line_start":2241,"line_end":2241,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75449,"byte_end":75452,"line_start":2242,"line_end":2242,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).fold1(|x, y| x + y).unwrap_or(0), 45);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75457,"byte_end":75518,"line_start":2243,"line_end":2243,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..0).fold1(|x, y| x * y), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75523,"byte_end":75572,"line_start":2244,"line_end":2244,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75577,"byte_end":75584,"line_start":2245,"line_end":2245,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"0.10.2\", note = \"Use `Iterator::reduce` instead\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75589,"byte_end":75661,"line_start":2246,"line_end":2246,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77662,"byte_end":77672,"line_start":2302,"line_end":2302,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"pub fn tree_fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[{"value":"/ Accumulate the elements in the iterator in a tree-like manner.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75872,"byte_end":75938,"line_start":2254,"line_end":2254,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75943,"byte_end":75946,"line_start":2255,"line_end":2255,"column_start":5,"column_end":8}},{"value":"/ You can think of it as, while there's more than one item, repeatedly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":75951,"byte_end":76023,"line_start":2256,"line_end":2256,"column_start":5,"column_end":77}},{"value":"/ combining adjacent items.  It does so in bottom-up-merge-sort order,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76028,"byte_end":76100,"line_start":2257,"line_end":2257,"column_start":5,"column_end":77}},{"value":"/ however, so that it needs only logarithmic stack space.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76105,"byte_end":76164,"line_start":2258,"line_end":2258,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76169,"byte_end":76172,"line_start":2259,"line_end":2259,"column_start":5,"column_end":8}},{"value":"/ This produces a call tree like the following (where the calls under","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76177,"byte_end":76248,"line_start":2260,"line_end":2260,"column_start":5,"column_end":76}},{"value":"/ an item are done after reading that item):","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76253,"byte_end":76299,"line_start":2261,"line_end":2261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76304,"byte_end":76307,"line_start":2262,"line_end":2262,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76312,"byte_end":76323,"line_start":2263,"line_end":2263,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76328,"byte_end":76345,"line_start":2264,"line_end":2264,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76350,"byte_end":76381,"line_start":2265,"line_end":2265,"column_start":5,"column_end":22}},{"value":"/ └─f └─f └─f │","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76386,"byte_end":76417,"line_start":2266,"line_end":2266,"column_start":5,"column_end":22}},{"value":"/   │   │   │ │","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76422,"byte_end":76447,"line_start":2267,"line_end":2267,"column_start":5,"column_end":22}},{"value":"/   └───f   └─f","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76452,"byte_end":76481,"line_start":2268,"line_end":2268,"column_start":5,"column_end":22}},{"value":"/       │     │","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76486,"byte_end":76507,"line_start":2269,"line_end":2269,"column_start":5,"column_end":22}},{"value":"/       └─────f","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76512,"byte_end":76541,"line_start":2270,"line_end":2270,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76546,"byte_end":76553,"line_start":2271,"line_end":2271,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76558,"byte_end":76561,"line_start":2272,"line_end":2272,"column_start":5,"column_end":8}},{"value":"/ Which, for non-associative functions, will typically produce a different","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76566,"byte_end":76642,"line_start":2273,"line_end":2273,"column_start":5,"column_end":81}},{"value":"/ result than the linear call tree used by `fold1`:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76647,"byte_end":76700,"line_start":2274,"line_end":2274,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76705,"byte_end":76708,"line_start":2275,"line_end":2275,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76713,"byte_end":76724,"line_start":2276,"line_end":2276,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76729,"byte_end":76746,"line_start":2277,"line_end":2277,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76751,"byte_end":76782,"line_start":2278,"line_end":2278,"column_start":5,"column_end":22}},{"value":"/ └─f─f─f─f─f─f","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76787,"byte_end":76818,"line_start":2279,"line_end":2279,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76823,"byte_end":76830,"line_start":2280,"line_end":2280,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76835,"byte_end":76838,"line_start":2281,"line_end":2281,"column_start":5,"column_end":8}},{"value":"/ If `f` is associative, prefer the normal `fold1` instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76843,"byte_end":76904,"line_start":2282,"line_end":2282,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76909,"byte_end":76912,"line_start":2283,"line_end":2283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76917,"byte_end":76924,"line_start":2284,"line_end":2284,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76929,"byte_end":76958,"line_start":2285,"line_end":2285,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76963,"byte_end":76966,"line_start":2286,"line_end":2286,"column_start":5,"column_end":8}},{"value":"/ // The same tree as above","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":76971,"byte_end":77000,"line_start":2287,"line_end":2287,"column_start":5,"column_end":34}},{"value":"/ let num_strings = (1..8).map(|x| x.to_string());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77005,"byte_end":77057,"line_start":2288,"line_end":2288,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(num_strings.tree_fold1(|x, y| format!(\"f({}, {})\", x, y)),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77062,"byte_end":77135,"line_start":2289,"line_end":2289,"column_start":5,"column_end":78}},{"value":"/     Some(String::from(\"f(f(f(1, 2), f(3, 4)), f(f(5, 6), 7))\")));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77140,"byte_end":77209,"line_start":2290,"line_end":2290,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77214,"byte_end":77217,"line_start":2291,"line_end":2291,"column_start":5,"column_end":8}},{"value":"/ // Like fold1, an empty iterator produces None","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77222,"byte_end":77272,"line_start":2292,"line_end":2292,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((0..0).tree_fold1(|x, y| x * y), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77277,"byte_end":77331,"line_start":2293,"line_end":2293,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77336,"byte_end":77339,"line_start":2294,"line_end":2294,"column_start":5,"column_end":8}},{"value":"/ // tree_fold1 matches fold1 for associative operations...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77344,"byte_end":77405,"line_start":2295,"line_end":2295,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..10).tree_fold1(|x, y| x + y),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77410,"byte_end":77458,"line_start":2296,"line_end":2296,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x + y));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77463,"byte_end":77500,"line_start":2297,"line_end":2297,"column_start":5,"column_end":42}},{"value":"/ // ...but not for non-associative ones","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77505,"byte_end":77547,"line_start":2298,"line_end":2298,"column_start":5,"column_end":47}},{"value":"/ assert_ne!((0..10).tree_fold1(|x, y| x - y),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77552,"byte_end":77600,"line_start":2299,"line_end":2299,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x - y));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77605,"byte_end":77642,"line_start":2300,"line_end":2300,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":77647,"byte_end":77654,"line_start":2301,"line_end":2301,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2663},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81173,"byte_end":81183,"line_start":2400,"line_end":2400,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"pub fn fold_while<B, F>(&mut Self, B, F) -> FoldWhile<B> where Self: Sized,\nF: FnMut(B, Self::Item) -> FoldWhile<B>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[{"value":"/ An iterator method that applies a function, producing a single, final value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":79847,"byte_end":79927,"line_start":2361,"line_end":2361,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":79932,"byte_end":79935,"line_start":2362,"line_end":2362,"column_start":5,"column_end":8}},{"value":"/ `fold_while()` is basically equivalent to [`Iterator::fold`] but with additional support for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":79940,"byte_end":80036,"line_start":2363,"line_end":2363,"column_start":5,"column_end":101}},{"value":"/ early exit via short-circuiting.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80041,"byte_end":80077,"line_start":2364,"line_end":2364,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80082,"byte_end":80085,"line_start":2365,"line_end":2365,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80090,"byte_end":80097,"line_start":2366,"line_end":2366,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80102,"byte_end":80131,"line_start":2367,"line_end":2367,"column_start":5,"column_end":34}},{"value":"/ use itertools::FoldWhile::{Continue, Done};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80136,"byte_end":80183,"line_start":2368,"line_end":2368,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80188,"byte_end":80191,"line_start":2369,"line_end":2369,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80196,"byte_end":80246,"line_start":2370,"line_end":2370,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80251,"byte_end":80254,"line_start":2371,"line_end":2371,"column_start":5,"column_end":8}},{"value":"/ let mut result = 0;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80259,"byte_end":80282,"line_start":2372,"line_end":2372,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80287,"byte_end":80290,"line_start":2373,"line_end":2373,"column_start":5,"column_end":8}},{"value":"/ // for loop:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80295,"byte_end":80311,"line_start":2374,"line_end":2374,"column_start":5,"column_end":21}},{"value":"/ for i in &numbers {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80316,"byte_end":80339,"line_start":2375,"line_end":2375,"column_start":5,"column_end":28}},{"value":"/     if *i > 5 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80344,"byte_end":80363,"line_start":2376,"line_end":2376,"column_start":5,"column_end":24}},{"value":"/         break;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80368,"byte_end":80386,"line_start":2377,"line_end":2377,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80391,"byte_end":80400,"line_start":2378,"line_end":2378,"column_start":5,"column_end":14}},{"value":"/     result = result + i;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80405,"byte_end":80433,"line_start":2379,"line_end":2379,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80438,"byte_end":80443,"line_start":2380,"line_end":2380,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80448,"byte_end":80451,"line_start":2381,"line_end":2381,"column_start":5,"column_end":8}},{"value":"/ // fold:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80456,"byte_end":80468,"line_start":2382,"line_end":2382,"column_start":5,"column_end":17}},{"value":"/ let result2 = numbers.iter().fold(0, |acc, x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80473,"byte_end":80524,"line_start":2383,"line_end":2383,"column_start":5,"column_end":56}},{"value":"/     if *x > 5 { acc } else { acc + x }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80529,"byte_end":80571,"line_start":2384,"line_end":2384,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80576,"byte_end":80583,"line_start":2385,"line_end":2385,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80588,"byte_end":80591,"line_start":2386,"line_end":2386,"column_start":5,"column_end":8}},{"value":"/ // fold_while:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80596,"byte_end":80614,"line_start":2387,"line_end":2387,"column_start":5,"column_end":23}},{"value":"/ let result3 = numbers.iter().fold_while(0, |acc, x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80619,"byte_end":80676,"line_start":2388,"line_end":2388,"column_start":5,"column_end":62}},{"value":"/     if *x > 5 { Done(acc) } else { Continue(acc + x) }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80681,"byte_end":80739,"line_start":2389,"line_end":2389,"column_start":5,"column_end":63}},{"value":"/ }).into_inner();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80744,"byte_end":80764,"line_start":2390,"line_end":2390,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80769,"byte_end":80772,"line_start":2391,"line_end":2391,"column_start":5,"column_end":8}},{"value":"/ // they're the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80777,"byte_end":80800,"line_start":2392,"line_end":2392,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(result, result2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80805,"byte_end":80837,"line_start":2393,"line_end":2393,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(result2, result3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80842,"byte_end":80875,"line_start":2394,"line_end":2394,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80880,"byte_end":80887,"line_start":2395,"line_end":2395,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80892,"byte_end":80895,"line_start":2396,"line_end":2396,"column_start":5,"column_end":8}},{"value":"/ The big difference between the computations of `result2` and `result3` is that while","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80900,"byte_end":80988,"line_start":2397,"line_end":2397,"column_start":5,"column_end":93}},{"value":"/ `fold()` called the provided closure for every item of the callee iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":80993,"byte_end":81072,"line_start":2398,"line_end":2398,"column_start":5,"column_end":84}},{"value":"/ `fold_while()` actually stopped iterating as soon as it encountered `Fold::Done(_)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81077,"byte_end":81165,"line_start":2399,"line_end":2399,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82431,"byte_end":82435,"line_start":2443,"line_end":2443,"column_start":8,"column_end":12},"name":"sum1","qualname":"::Itertools::sum1","value":"pub fn sum1<S>(Self) -> Option<S> where Self: Sized,\nS: std::iter::Sum<Self::Item>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and add all the elements.","sig":null,"attributes":[{"value":"/ Iterate over the entire iterator and add all the elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81789,"byte_end":81851,"line_start":2422,"line_end":2422,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81856,"byte_end":81859,"line_start":2423,"line_end":2423,"column_start":5,"column_end":8}},{"value":"/ An empty iterator returns `None`, otherwise `Some(sum)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81864,"byte_end":81924,"line_start":2424,"line_end":2424,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81929,"byte_end":81932,"line_start":2425,"line_end":2425,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81937,"byte_end":81949,"line_start":2426,"line_end":2426,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81954,"byte_end":81957,"line_start":2427,"line_end":2427,"column_start":5,"column_end":8}},{"value":"/ When calling `sum1()` and a primitive integer type is being returned, this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":81962,"byte_end":82040,"line_start":2428,"line_end":2428,"column_start":5,"column_end":83}},{"value":"/ method will panic if the computation overflows and debug assertions are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82045,"byte_end":82120,"line_start":2429,"line_end":2429,"column_start":5,"column_end":80}},{"value":"/ enabled.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82125,"byte_end":82137,"line_start":2430,"line_end":2430,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82142,"byte_end":82145,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82150,"byte_end":82164,"line_start":2432,"line_end":2432,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82169,"byte_end":82172,"line_start":2433,"line_end":2433,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82177,"byte_end":82184,"line_start":2434,"line_end":2434,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82189,"byte_end":82218,"line_start":2435,"line_end":2435,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82223,"byte_end":82226,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8}},{"value":"/ let empty_sum = (1..1).sum1::<i32>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82231,"byte_end":82272,"line_start":2437,"line_end":2437,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(empty_sum, None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82277,"byte_end":82309,"line_start":2438,"line_end":2438,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82314,"byte_end":82317,"line_start":2439,"line_end":2439,"column_start":5,"column_end":8}},{"value":"/ let nonempty_sum = (1..11).sum1::<i32>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82322,"byte_end":82367,"line_start":2440,"line_end":2440,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(nonempty_sum, Some(55));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82372,"byte_end":82411,"line_start":2441,"line_end":2441,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82416,"byte_end":82423,"line_start":2442,"line_end":2442,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2677},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83298,"byte_end":83306,"line_start":2471,"line_end":2471,"column_start":8,"column_end":16},"name":"product1","qualname":"::Itertools::product1","value":"pub fn product1<P>(Self) -> Option<P> where Self: Sized,\nP: std::iter::Product<Self::Item>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and multiply all the elements.","sig":null,"attributes":[{"value":"/ Iterate over the entire iterator and multiply all the elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82627,"byte_end":82694,"line_start":2451,"line_end":2451,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82699,"byte_end":82702,"line_start":2452,"line_end":2452,"column_start":5,"column_end":8}},{"value":"/ An empty iterator returns `None`, otherwise `Some(product)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82707,"byte_end":82771,"line_start":2453,"line_end":2453,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82776,"byte_end":82779,"line_start":2454,"line_end":2454,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82784,"byte_end":82796,"line_start":2455,"line_end":2455,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82801,"byte_end":82804,"line_start":2456,"line_end":2456,"column_start":5,"column_end":8}},{"value":"/ When calling `product1()` and a primitive integer type is being returned,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82809,"byte_end":82886,"line_start":2457,"line_end":2457,"column_start":5,"column_end":82}},{"value":"/ method will panic if the computation overflows and debug assertions are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82891,"byte_end":82966,"line_start":2458,"line_end":2458,"column_start":5,"column_end":80}},{"value":"/ enabled.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82971,"byte_end":82983,"line_start":2459,"line_end":2459,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82988,"byte_end":82991,"line_start":2460,"line_end":2460,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":82996,"byte_end":83010,"line_start":2461,"line_end":2461,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83015,"byte_end":83022,"line_start":2462,"line_end":2462,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83027,"byte_end":83056,"line_start":2463,"line_end":2463,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83061,"byte_end":83064,"line_start":2464,"line_end":2464,"column_start":5,"column_end":8}},{"value":"/ let empty_product = (1..1).product1::<i32>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83069,"byte_end":83118,"line_start":2465,"line_end":2465,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(empty_product, None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83123,"byte_end":83159,"line_start":2466,"line_end":2466,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83164,"byte_end":83167,"line_start":2467,"line_end":2467,"column_start":5,"column_end":8}},{"value":"/ let nonempty_product = (1..11).product1::<i32>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83172,"byte_end":83225,"line_start":2468,"line_end":2468,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(nonempty_product, Some(3628800));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83230,"byte_end":83278,"line_start":2469,"line_end":2469,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83283,"byte_end":83290,"line_start":2470,"line_end":2470,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84216,"byte_end":84231,"line_start":2497,"line_end":2497,"column_start":8,"column_end":23},"name":"sorted_unstable","qualname":"::Itertools::sorted_unstable","value":"pub fn sorted_unstable(Self) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83506,"byte_end":83576,"line_start":2479,"line_end":2479,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83581,"byte_end":83584,"line_start":2480,"line_end":2480,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83589,"byte_end":83646,"line_start":2481,"line_end":2481,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable`] method and returns the result as a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83651,"byte_end":83718,"line_start":2482,"line_end":2482,"column_start":5,"column_end":72}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83723,"byte_end":83759,"line_start":2483,"line_end":2483,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83764,"byte_end":83767,"line_start":2484,"line_end":2484,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83772,"byte_end":83843,"line_start":2485,"line_end":2485,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83848,"byte_end":83897,"line_start":2486,"line_end":2486,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83902,"byte_end":83905,"line_start":2487,"line_end":2487,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83910,"byte_end":83917,"line_start":2488,"line_end":2488,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83922,"byte_end":83951,"line_start":2489,"line_end":2489,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83956,"byte_end":83959,"line_start":2490,"line_end":2490,"column_start":5,"column_end":8}},{"value":"/ // sort the letters of the text in ascending order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":83964,"byte_end":84018,"line_start":2491,"line_end":2491,"column_start":5,"column_end":59}},{"value":"/ let text = \"bdacfe\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84023,"byte_end":84047,"line_start":2492,"line_end":2492,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(text.chars().sorted_unstable(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84052,"byte_end":84111,"line_start":2493,"line_end":2493,"column_start":5,"column_end":64}},{"value":"/                         \"abcdef\".chars());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84116,"byte_end":84162,"line_start":2494,"line_end":2494,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84167,"byte_end":84174,"line_start":2495,"line_end":2495,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84179,"byte_end":84208,"line_start":2496,"line_end":2496,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2681},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85491,"byte_end":85509,"line_start":2532,"line_end":2532,"column_start":8,"column_end":26},"name":"sorted_unstable_by","qualname":"::Itertools::sorted_unstable_by","value":"pub fn sorted_unstable_by<F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84538,"byte_end":84608,"line_start":2508,"line_end":2508,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84613,"byte_end":84616,"line_start":2509,"line_end":2509,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84621,"byte_end":84678,"line_start":2510,"line_end":2510,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable_by`] method and returns the result as a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84683,"byte_end":84753,"line_start":2511,"line_end":2511,"column_start":5,"column_end":75}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84758,"byte_end":84794,"line_start":2512,"line_end":2512,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84799,"byte_end":84802,"line_start":2513,"line_end":2513,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84807,"byte_end":84878,"line_start":2514,"line_end":2514,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84883,"byte_end":84932,"line_start":2515,"line_end":2515,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84937,"byte_end":84940,"line_start":2516,"line_end":2516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84945,"byte_end":84952,"line_start":2517,"line_end":2517,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84957,"byte_end":84986,"line_start":2518,"line_end":2518,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84991,"byte_end":84994,"line_start":2519,"line_end":2519,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":84999,"byte_end":85044,"line_start":2520,"line_end":2520,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85049,"byte_end":85127,"line_start":2521,"line_end":2521,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85132,"byte_end":85135,"line_start":2522,"line_end":2522,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85140,"byte_end":85176,"line_start":2523,"line_end":2523,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85181,"byte_end":85201,"line_start":2524,"line_end":2524,"column_start":5,"column_end":25}},{"value":"/     .sorted_unstable_by(|a, b| Ord::cmp(&b.1, &a.1))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85206,"byte_end":85262,"line_start":2525,"line_end":2525,"column_start":5,"column_end":61}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85267,"byte_end":85305,"line_start":2526,"line_end":2526,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85310,"byte_end":85313,"line_start":2527,"line_end":2527,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85318,"byte_end":85366,"line_start":2528,"line_end":2528,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85371,"byte_end":85437,"line_start":2529,"line_end":2529,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85442,"byte_end":85449,"line_start":2530,"line_end":2530,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85454,"byte_end":85483,"line_start":2531,"line_end":2531,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2683},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86699,"byte_end":86721,"line_start":2565,"line_end":2565,"column_start":8,"column_end":30},"name":"sorted_unstable_by_key","qualname":"::Itertools::sorted_unstable_by_key","value":"pub fn sorted_unstable_by_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85757,"byte_end":85827,"line_start":2541,"line_end":2541,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85832,"byte_end":85835,"line_start":2542,"line_end":2542,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85840,"byte_end":85897,"line_start":2543,"line_end":2543,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable_by_key`] method and returns the result as a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85902,"byte_end":85976,"line_start":2544,"line_end":2544,"column_start":5,"column_end":79}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":85981,"byte_end":86017,"line_start":2545,"line_end":2545,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86022,"byte_end":86025,"line_start":2546,"line_end":2546,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86030,"byte_end":86101,"line_start":2547,"line_end":2547,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86106,"byte_end":86155,"line_start":2548,"line_end":2548,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86160,"byte_end":86163,"line_start":2549,"line_end":2549,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86168,"byte_end":86175,"line_start":2550,"line_end":2550,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86180,"byte_end":86209,"line_start":2551,"line_end":2551,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86214,"byte_end":86217,"line_start":2552,"line_end":2552,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86222,"byte_end":86267,"line_start":2553,"line_end":2553,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86272,"byte_end":86350,"line_start":2554,"line_end":2554,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86355,"byte_end":86358,"line_start":2555,"line_end":2555,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86363,"byte_end":86399,"line_start":2556,"line_end":2556,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86404,"byte_end":86424,"line_start":2557,"line_end":2557,"column_start":5,"column_end":25}},{"value":"/     .sorted_unstable_by_key(|x| -x.1)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86429,"byte_end":86470,"line_start":2558,"line_end":2558,"column_start":5,"column_end":46}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86475,"byte_end":86513,"line_start":2559,"line_end":2559,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86518,"byte_end":86521,"line_start":2560,"line_end":2560,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86526,"byte_end":86574,"line_start":2561,"line_end":2561,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86579,"byte_end":86645,"line_start":2562,"line_end":2562,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86650,"byte_end":86657,"line_start":2563,"line_end":2563,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86662,"byte_end":86691,"line_start":2564,"line_end":2564,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2686},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87666,"byte_end":87672,"line_start":2593,"line_end":2593,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"pub fn sorted(Self) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":86974,"byte_end":87044,"line_start":2575,"line_end":2575,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87049,"byte_end":87052,"line_start":2576,"line_end":2576,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87057,"byte_end":87114,"line_start":2577,"line_end":2577,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort`] method and returns the result as a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87119,"byte_end":87177,"line_start":2578,"line_end":2578,"column_start":5,"column_end":63}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87182,"byte_end":87218,"line_start":2579,"line_end":2579,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87223,"byte_end":87226,"line_start":2580,"line_end":2580,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87231,"byte_end":87302,"line_start":2581,"line_end":2581,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87307,"byte_end":87356,"line_start":2582,"line_end":2582,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87361,"byte_end":87364,"line_start":2583,"line_end":2583,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87369,"byte_end":87376,"line_start":2584,"line_end":2584,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87381,"byte_end":87410,"line_start":2585,"line_end":2585,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87415,"byte_end":87418,"line_start":2586,"line_end":2586,"column_start":5,"column_end":8}},{"value":"/ // sort the letters of the text in ascending order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87423,"byte_end":87477,"line_start":2587,"line_end":2587,"column_start":5,"column_end":59}},{"value":"/ let text = \"bdacfe\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87482,"byte_end":87506,"line_start":2588,"line_end":2588,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(text.chars().sorted(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87511,"byte_end":87561,"line_start":2589,"line_end":2589,"column_start":5,"column_end":55}},{"value":"/                         \"abcdef\".chars());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87566,"byte_end":87612,"line_start":2590,"line_end":2590,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87617,"byte_end":87624,"line_start":2591,"line_end":2591,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87629,"byte_end":87658,"line_start":2592,"line_end":2592,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2687},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88896,"byte_end":88905,"line_start":2628,"line_end":2628,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> VecIntoIter<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":87961,"byte_end":88031,"line_start":2604,"line_end":2604,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88036,"byte_end":88039,"line_start":2605,"line_end":2605,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88044,"byte_end":88101,"line_start":2606,"line_end":2606,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_by`] method and returns the result as a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88106,"byte_end":88167,"line_start":2607,"line_end":2607,"column_start":5,"column_end":66}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88172,"byte_end":88208,"line_start":2608,"line_end":2608,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88213,"byte_end":88216,"line_start":2609,"line_end":2609,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88221,"byte_end":88292,"line_start":2610,"line_end":2610,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88297,"byte_end":88346,"line_start":2611,"line_end":2611,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88351,"byte_end":88354,"line_start":2612,"line_end":2612,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88359,"byte_end":88366,"line_start":2613,"line_end":2613,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88371,"byte_end":88400,"line_start":2614,"line_end":2614,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88405,"byte_end":88408,"line_start":2615,"line_end":2615,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88413,"byte_end":88458,"line_start":2616,"line_end":2616,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88463,"byte_end":88541,"line_start":2617,"line_end":2617,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88546,"byte_end":88549,"line_start":2618,"line_end":2618,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88554,"byte_end":88590,"line_start":2619,"line_end":2619,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88595,"byte_end":88615,"line_start":2620,"line_end":2620,"column_start":5,"column_end":25}},{"value":"/     .sorted_by(|a, b| Ord::cmp(&b.1, &a.1))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88620,"byte_end":88667,"line_start":2621,"line_end":2621,"column_start":5,"column_end":52}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88672,"byte_end":88710,"line_start":2622,"line_end":2622,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88715,"byte_end":88718,"line_start":2623,"line_end":2623,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88723,"byte_end":88771,"line_start":2624,"line_end":2624,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88776,"byte_end":88842,"line_start":2625,"line_end":2625,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88847,"byte_end":88854,"line_start":2626,"line_end":2626,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":88859,"byte_end":88888,"line_start":2627,"line_end":2627,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2689},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90068,"byte_end":90081,"line_start":2661,"line_end":2661,"column_start":8,"column_end":21},"name":"sorted_by_key","qualname":"::Itertools::sorted_by_key","value":"pub fn sorted_by_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89144,"byte_end":89214,"line_start":2637,"line_end":2637,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89219,"byte_end":89222,"line_start":2638,"line_end":2638,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89227,"byte_end":89284,"line_start":2639,"line_end":2639,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_by_key`] method and returns the result as a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89289,"byte_end":89354,"line_start":2640,"line_end":2640,"column_start":5,"column_end":70}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89359,"byte_end":89395,"line_start":2641,"line_end":2641,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89400,"byte_end":89403,"line_start":2642,"line_end":2642,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89408,"byte_end":89479,"line_start":2643,"line_end":2643,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89484,"byte_end":89533,"line_start":2644,"line_end":2644,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89538,"byte_end":89541,"line_start":2645,"line_end":2645,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89546,"byte_end":89553,"line_start":2646,"line_end":2646,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89558,"byte_end":89587,"line_start":2647,"line_end":2647,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89592,"byte_end":89595,"line_start":2648,"line_end":2648,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89600,"byte_end":89645,"line_start":2649,"line_end":2649,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89650,"byte_end":89728,"line_start":2650,"line_end":2650,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89733,"byte_end":89736,"line_start":2651,"line_end":2651,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89741,"byte_end":89777,"line_start":2652,"line_end":2652,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89782,"byte_end":89802,"line_start":2653,"line_end":2653,"column_start":5,"column_end":25}},{"value":"/     .sorted_by_key(|x| -x.1)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89807,"byte_end":89839,"line_start":2654,"line_end":2654,"column_start":5,"column_end":37}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89844,"byte_end":89882,"line_start":2655,"line_end":2655,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89887,"byte_end":89890,"line_start":2656,"line_end":2656,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89895,"byte_end":89943,"line_start":2657,"line_end":2657,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":89948,"byte_end":90014,"line_start":2658,"line_end":2658,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90019,"byte_end":90026,"line_start":2659,"line_end":2659,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90031,"byte_end":90060,"line_start":2660,"line_end":2660,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91332,"byte_end":91352,"line_start":2697,"line_end":2697,"column_start":8,"column_end":28},"name":"sorted_by_cached_key","qualname":"::Itertools::sorted_by_cached_key","value":"pub fn sorted_by_cached_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order. The key function is\n called exactly once per key.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order. The key function is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90325,"byte_end":90415,"line_start":2671,"line_end":2671,"column_start":5,"column_end":95}},{"value":"/ called exactly once per key.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90420,"byte_end":90452,"line_start":2672,"line_end":2672,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90457,"byte_end":90460,"line_start":2673,"line_end":2673,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90465,"byte_end":90522,"line_start":2674,"line_end":2674,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_by_cached_key`] method and returns the result as a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90527,"byte_end":90599,"line_start":2675,"line_end":2675,"column_start":5,"column_end":77}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90604,"byte_end":90640,"line_start":2676,"line_end":2676,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90645,"byte_end":90648,"line_start":2677,"line_end":2677,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90653,"byte_end":90724,"line_start":2678,"line_end":2678,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90729,"byte_end":90778,"line_start":2679,"line_end":2679,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90783,"byte_end":90786,"line_start":2680,"line_end":2680,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90791,"byte_end":90798,"line_start":2681,"line_end":2681,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90803,"byte_end":90832,"line_start":2682,"line_end":2682,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90837,"byte_end":90840,"line_start":2683,"line_end":2683,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90845,"byte_end":90890,"line_start":2684,"line_end":2684,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90895,"byte_end":90973,"line_start":2685,"line_end":2685,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90978,"byte_end":90981,"line_start":2686,"line_end":2686,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":90986,"byte_end":91022,"line_start":2687,"line_end":2687,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91027,"byte_end":91047,"line_start":2688,"line_end":2688,"column_start":5,"column_end":25}},{"value":"/     .sorted_by_cached_key(|x| -x.1)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91052,"byte_end":91091,"line_start":2689,"line_end":2689,"column_start":5,"column_end":44}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91096,"byte_end":91134,"line_start":2690,"line_end":2690,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91139,"byte_end":91142,"line_start":2691,"line_end":2691,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91147,"byte_end":91195,"line_start":2692,"line_end":2692,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91200,"byte_end":91266,"line_start":2693,"line_end":2693,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91271,"byte_end":91278,"line_start":2694,"line_end":2694,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91283,"byte_end":91290,"line_start":2695,"line_end":2695,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91295,"byte_end":91324,"line_start":2696,"line_end":2696,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92708,"byte_end":92718,"line_start":2736,"line_end":2736,"column_start":8,"column_end":18},"name":"k_smallest","qualname":"::Itertools::k_smallest","value":"pub fn k_smallest(Self, usize) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Sort the k smallest elements into a new iterator, in ascending order.","sig":null,"attributes":[{"value":"/ Sort the k smallest elements into a new iterator, in ascending order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91595,"byte_end":91668,"line_start":2708,"line_end":2708,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91673,"byte_end":91676,"line_start":2709,"line_end":2709,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, and returns the result","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91681,"byte_end":91752,"line_start":2710,"line_end":2710,"column_start":5,"column_end":76}},{"value":"/ as a new iterator that owns its elements.  If the input contains","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91757,"byte_end":91825,"line_start":2711,"line_end":2711,"column_start":5,"column_end":73}},{"value":"/ less than k elements, the result is equivalent to `self.sorted()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91830,"byte_end":91900,"line_start":2712,"line_end":2712,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91905,"byte_end":91908,"line_start":2713,"line_end":2713,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to use `k * sizeof(Self::Item) + O(1)` memory","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91913,"byte_end":91981,"line_start":2714,"line_end":2714,"column_start":5,"column_end":73}},{"value":"/ and `O(n log k)` time, with `n` the number of elements in the input.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":91986,"byte_end":92058,"line_start":2715,"line_end":2715,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92063,"byte_end":92066,"line_start":2716,"line_end":2716,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92071,"byte_end":92142,"line_start":2717,"line_end":2717,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92147,"byte_end":92196,"line_start":2718,"line_end":2718,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92201,"byte_end":92204,"line_start":2719,"line_end":2719,"column_start":5,"column_end":8}},{"value":"/ **Note:** This is functionally-equivalent to `self.sorted().take(k)`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92209,"byte_end":92281,"line_start":2720,"line_end":2720,"column_start":5,"column_end":77}},{"value":"/ but much more efficient.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92286,"byte_end":92314,"line_start":2721,"line_end":2721,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92319,"byte_end":92322,"line_start":2722,"line_end":2722,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92327,"byte_end":92334,"line_start":2723,"line_end":2723,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92339,"byte_end":92368,"line_start":2724,"line_end":2724,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92373,"byte_end":92376,"line_start":2725,"line_end":2725,"column_start":5,"column_end":8}},{"value":"/ // A random permutation of 0..15","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92381,"byte_end":92417,"line_start":2726,"line_end":2726,"column_start":5,"column_end":41}},{"value":"/ let numbers = vec![6, 9, 1, 14, 0, 4, 8, 7, 11, 2, 10, 3, 13, 12, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92422,"byte_end":92495,"line_start":2727,"line_end":2727,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92500,"byte_end":92503,"line_start":2728,"line_end":2728,"column_start":5,"column_end":8}},{"value":"/ let five_smallest = numbers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92508,"byte_end":92539,"line_start":2729,"line_end":2729,"column_start":5,"column_end":36}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92544,"byte_end":92564,"line_start":2730,"line_end":2730,"column_start":5,"column_end":25}},{"value":"/     .k_smallest(5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92569,"byte_end":92592,"line_start":2731,"line_end":2731,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92597,"byte_end":92600,"line_start":2732,"line_end":2732,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(five_smallest, 0..5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92605,"byte_end":92654,"line_start":2733,"line_end":2733,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92659,"byte_end":92666,"line_start":2734,"line_end":2734,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92671,"byte_end":92700,"line_start":2735,"line_end":2735,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93650,"byte_end":93663,"line_start":2766,"line_end":2766,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"pub fn partition_map<A, B, F, L, R>(Self, F) -> (A, B) where Self: Sized,\nF: FnMut(Self::Item) -> Either<L, R>, A: Default + Extend<L>, B: Default +\nExtend<R>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike [`Iterator::partition`], each partition may\n have a distinct type.","sig":null,"attributes":[{"value":"/ Collect all iterator elements into one of two","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92939,"byte_end":92988,"line_start":2745,"line_end":2745,"column_start":5,"column_end":54}},{"value":"/ partitions. Unlike [`Iterator::partition`], each partition may","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":92993,"byte_end":93059,"line_start":2746,"line_end":2746,"column_start":5,"column_end":71}},{"value":"/ have a distinct type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93064,"byte_end":93089,"line_start":2747,"line_end":2747,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93094,"byte_end":93097,"line_start":2748,"line_end":2748,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93102,"byte_end":93109,"line_start":2749,"line_end":2749,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Either};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93114,"byte_end":93153,"line_start":2750,"line_end":2750,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93158,"byte_end":93161,"line_start":2751,"line_end":2751,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93166,"byte_end":93241,"line_start":2752,"line_end":2752,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93246,"byte_end":93249,"line_start":2753,"line_end":2753,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93254,"byte_end":93326,"line_start":2754,"line_end":2754,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93331,"byte_end":93351,"line_start":2755,"line_end":2755,"column_start":5,"column_end":25}},{"value":"/     .partition_map(|r| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93356,"byte_end":93384,"line_start":2756,"line_end":2756,"column_start":5,"column_end":33}},{"value":"/         match r {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93389,"byte_end":93410,"line_start":2757,"line_end":2757,"column_start":5,"column_end":26}},{"value":"/             Ok(v) => Either::Left(v),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93415,"byte_end":93456,"line_start":2758,"line_end":2758,"column_start":5,"column_end":46}},{"value":"/             Err(v) => Either::Right(v),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93461,"byte_end":93504,"line_start":2759,"line_end":2759,"column_start":5,"column_end":48}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93509,"byte_end":93522,"line_start":2760,"line_end":2760,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93527,"byte_end":93538,"line_start":2761,"line_end":2761,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93543,"byte_end":93546,"line_start":2762,"line_end":2762,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93551,"byte_end":93585,"line_start":2763,"line_end":2763,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93590,"byte_end":93630,"line_start":2764,"line_end":2764,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":93635,"byte_end":93642,"line_start":2765,"line_end":2765,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2703},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94680,"byte_end":94696,"line_start":2798,"line_end":2798,"column_start":8,"column_end":24},"name":"partition_result","qualname":"::Itertools::partition_result","value":"pub fn partition_result<A, B, T, E>(Self) -> (A, B) where Self: Iterator<Item\n= Result<T, E>> + Sized, A: Default + Extend<T>, B: Default + Extend<E>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Partition a sequence of `Result`s into one list of all the `Ok` elements\n and another list of all the `Err` elements.","sig":null,"attributes":[{"value":"/ Partition a sequence of `Result`s into one list of all the `Ok` elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94155,"byte_end":94231,"line_start":2783,"line_end":2783,"column_start":5,"column_end":81}},{"value":"/ and another list of all the `Err` elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94236,"byte_end":94283,"line_start":2784,"line_end":2784,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94288,"byte_end":94291,"line_start":2785,"line_end":2785,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94296,"byte_end":94303,"line_start":2786,"line_end":2786,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94308,"byte_end":94337,"line_start":2787,"line_end":2787,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94342,"byte_end":94345,"line_start":2788,"line_end":2788,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94350,"byte_end":94425,"line_start":2789,"line_end":2789,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94430,"byte_end":94433,"line_start":2790,"line_end":2790,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94438,"byte_end":94510,"line_start":2791,"line_end":2791,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94515,"byte_end":94535,"line_start":2792,"line_end":2792,"column_start":5,"column_end":25}},{"value":"/     .partition_result();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94540,"byte_end":94568,"line_start":2793,"line_end":2793,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94573,"byte_end":94576,"line_start":2794,"line_end":2794,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94581,"byte_end":94615,"line_start":2795,"line_end":2795,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94620,"byte_end":94660,"line_start":2796,"line_end":2796,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":94665,"byte_end":94672,"line_start":2797,"line_end":2797,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2709},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95695,"byte_end":95709,"line_start":2827,"line_end":2827,"column_start":8,"column_end":22},"name":"into_group_map","qualname":"::Itertools::into_group_map","value":"pub fn into_group_map<K, V>(Self) -> HashMap<K, Vec<V>> where\nSelf: Iterator<Item = (K, V)> + Sized, K: Hash + Eq","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values\n are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","sig":null,"attributes":[{"value":"/ Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95015,"byte_end":95089,"line_start":2810,"line_end":2810,"column_start":5,"column_end":79}},{"value":"/ are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95094,"byte_end":95170,"line_start":2811,"line_end":2811,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95175,"byte_end":95178,"line_start":2812,"line_end":2812,"column_start":5,"column_end":8}},{"value":"/ Essentially a shorthand for `.into_grouping_map().collect::<Vec<_>>()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95183,"byte_end":95258,"line_start":2813,"line_end":2813,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95263,"byte_end":95266,"line_start":2814,"line_end":2814,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95271,"byte_end":95278,"line_start":2815,"line_end":2815,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95283,"byte_end":95312,"line_start":2816,"line_end":2816,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95317,"byte_end":95320,"line_start":2817,"line_end":2817,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95325,"byte_end":95399,"line_start":2818,"line_end":2818,"column_start":5,"column_end":79}},{"value":"/ let lookup = data.into_iter().into_group_map();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95404,"byte_end":95455,"line_start":2819,"line_end":2819,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95460,"byte_end":95463,"line_start":2820,"line_end":2820,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lookup[&0], vec![10, 20]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95468,"byte_end":95509,"line_start":2821,"line_end":2821,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup.get(&1), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95514,"byte_end":95551,"line_start":2822,"line_end":2822,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(lookup[&2], vec![12, 42]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95556,"byte_end":95597,"line_start":2823,"line_end":2823,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&3], vec![13, 33]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95602,"byte_end":95643,"line_start":2824,"line_end":2824,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95648,"byte_end":95655,"line_start":2825,"line_end":2825,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95660,"byte_end":95687,"line_start":2826,"line_end":2826,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2712},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96952,"byte_end":96969,"line_start":2862,"line_end":2862,"column_start":8,"column_end":25},"name":"into_group_map_by","qualname":"::Itertools::into_group_map_by","value":"pub fn into_group_map_by<K, V, F>(Self, F) -> HashMap<K, Vec<V>> where\nSelf: Iterator<Item = V> + Sized, K: Hash + Eq, F: Fn(&V) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return an `Iterator` on a `HashMap`. Keys mapped to `Vec`s of values. The key is specified\n in the closure.","sig":null,"attributes":[{"value":"/ Return an `Iterator` on a `HashMap`. Keys mapped to `Vec`s of values. The key is specified","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95880,"byte_end":95974,"line_start":2834,"line_end":2834,"column_start":5,"column_end":99}},{"value":"/ in the closure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":95979,"byte_end":95998,"line_start":2835,"line_end":2835,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96003,"byte_end":96006,"line_start":2836,"line_end":2836,"column_start":5,"column_end":8}},{"value":"/ Essentially a shorthand for `.into_grouping_map_by(f).collect::<Vec<_>>()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96011,"byte_end":96090,"line_start":2837,"line_end":2837,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96095,"byte_end":96098,"line_start":2838,"line_end":2838,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96103,"byte_end":96110,"line_start":2839,"line_end":2839,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96115,"byte_end":96144,"line_start":2840,"line_end":2840,"column_start":5,"column_end":34}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96149,"byte_end":96183,"line_start":2841,"line_end":2841,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96188,"byte_end":96191,"line_start":2842,"line_end":2842,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96196,"byte_end":96270,"line_start":2843,"line_end":2843,"column_start":5,"column_end":79}},{"value":"/ let lookup: HashMap<u32,Vec<(u32, u32)>> =","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96275,"byte_end":96321,"line_start":2844,"line_end":2844,"column_start":5,"column_end":51}},{"value":"/     data.clone().into_iter().into_group_map_by(|a| a.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96326,"byte_end":96386,"line_start":2845,"line_end":2845,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96391,"byte_end":96394,"line_start":2846,"line_end":2846,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lookup[&0], vec![(0,10),(0,20)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96399,"byte_end":96447,"line_start":2847,"line_end":2847,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(lookup.get(&1), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96452,"byte_end":96489,"line_start":2848,"line_end":2848,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(lookup[&2], vec![(2,12), (2,42)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96494,"byte_end":96543,"line_start":2849,"line_end":2849,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(lookup[&3], vec![(3,13), (3,33)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96548,"byte_end":96597,"line_start":2850,"line_end":2850,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96602,"byte_end":96605,"line_start":2851,"line_end":2851,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96610,"byte_end":96625,"line_start":2852,"line_end":2852,"column_start":5,"column_end":20}},{"value":"/     data.into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96630,"byte_end":96654,"line_start":2853,"line_end":2853,"column_start":5,"column_end":29}},{"value":"/         .into_group_map_by(|x| x.0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96659,"byte_end":96698,"line_start":2854,"line_end":2854,"column_start":5,"column_end":44}},{"value":"/         .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96703,"byte_end":96727,"line_start":2855,"line_end":2855,"column_start":5,"column_end":29}},{"value":"/         .map(|(key, values)| (key, values.into_iter().fold(0,|acc, (_,v)| acc + v )))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96732,"byte_end":96821,"line_start":2856,"line_end":2856,"column_start":5,"column_end":94}},{"value":"/         .collect::<HashMap<u32,u32>>()[&0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96826,"byte_end":96873,"line_start":2857,"line_end":2857,"column_start":5,"column_end":52}},{"value":"/     30,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96878,"byte_end":96889,"line_start":2858,"line_end":2858,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96894,"byte_end":96900,"line_start":2859,"line_end":2859,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96905,"byte_end":96912,"line_start":2860,"line_end":2860,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":96917,"byte_end":96944,"line_start":2861,"line_end":2861,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2716},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97684,"byte_end":97701,"line_start":2881,"line_end":2881,"column_start":8,"column_end":25},"name":"into_grouping_map","qualname":"::Itertools::into_grouping_map","value":"pub fn into_grouping_map<K, V>(Self) -> GroupingMap<Self> where\nSelf: Iterator<Item = (K, V)> + Sized, K: Hash + Eq","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Constructs a `GroupingMap` to be used later with one of the efficient \n group-and-fold operations it allows to perform.\n \n The input iterator must yield item in the form of `(K, V)` where the\n value of type `K` will be used as key to identify the groups and the\n value of type `V` as value for the folding operation.\n \n See [`GroupingMap`] for more informations\n on what operations are available.\n","sig":null,"attributes":[{"value":"/ Constructs a `GroupingMap` to be used later with one of the efficient ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97188,"byte_end":97262,"line_start":2871,"line_end":2871,"column_start":5,"column_end":79}},{"value":"/ group-and-fold operations it allows to perform.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97267,"byte_end":97318,"line_start":2872,"line_end":2872,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97323,"byte_end":97327,"line_start":2873,"line_end":2873,"column_start":5,"column_end":9}},{"value":"/ The input iterator must yield item in the form of `(K, V)` where the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97332,"byte_end":97404,"line_start":2874,"line_end":2874,"column_start":5,"column_end":77}},{"value":"/ value of type `K` will be used as key to identify the groups and the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97409,"byte_end":97481,"line_start":2875,"line_end":2875,"column_start":5,"column_end":77}},{"value":"/ value of type `V` as value for the folding operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97486,"byte_end":97543,"line_start":2876,"line_end":2876,"column_start":5,"column_end":62}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97548,"byte_end":97552,"line_start":2877,"line_end":2877,"column_start":5,"column_end":9}},{"value":"/ See [`GroupingMap`] for more informations","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97557,"byte_end":97602,"line_start":2878,"line_end":2878,"column_start":5,"column_end":50}},{"value":"/ on what operations are available.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97607,"byte_end":97644,"line_start":2879,"line_end":2879,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97649,"byte_end":97676,"line_start":2880,"line_end":2880,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2719},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98311,"byte_end":98331,"line_start":2897,"line_end":2897,"column_start":8,"column_end":28},"name":"into_grouping_map_by","qualname":"::Itertools::into_grouping_map_by","value":"pub fn into_grouping_map_by<K, V, F>(Self, F) -> GroupingMapBy<Self, F> where\nSelf: Iterator<Item = V> + Sized, K: Hash + Eq, F: FnMut(&V) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Constructs a `GroupingMap` to be used later with one of the efficient \n group-and-fold operations it allows to perform.\n \n The values from this iterator will be used as values for the folding operation\n while the keys will be obtained from the values by calling `key_mapper`.\n \n See [`GroupingMap`] for more informations\n on what operations are available.\n","sig":null,"attributes":[{"value":"/ Constructs a `GroupingMap` to be used later with one of the efficient ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97863,"byte_end":97937,"line_start":2888,"line_end":2888,"column_start":5,"column_end":79}},{"value":"/ group-and-fold operations it allows to perform.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97942,"byte_end":97993,"line_start":2889,"line_end":2889,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":97998,"byte_end":98002,"line_start":2890,"line_end":2890,"column_start":5,"column_end":9}},{"value":"/ The values from this iterator will be used as values for the folding operation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98007,"byte_end":98089,"line_start":2891,"line_end":2891,"column_start":5,"column_end":87}},{"value":"/ while the keys will be obtained from the values by calling `key_mapper`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98094,"byte_end":98170,"line_start":2892,"line_end":2892,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98175,"byte_end":98179,"line_start":2893,"line_end":2893,"column_start":5,"column_end":9}},{"value":"/ See [`GroupingMap`] for more informations","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98184,"byte_end":98229,"line_start":2894,"line_end":2894,"column_start":5,"column_end":50}},{"value":"/ on what operations are available.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98234,"byte_end":98271,"line_start":2895,"line_end":2895,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98276,"byte_end":98303,"line_start":2896,"line_end":2896,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2723},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99882,"byte_end":99888,"line_start":2940,"line_end":2940,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"pub fn minmax(Self) -> MinMaxResult<Self::Item> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum elements in the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98590,"byte_end":98650,"line_start":2905,"line_end":2905,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98655,"byte_end":98658,"line_start":2906,"line_end":2906,"column_start":5,"column_end":8}},{"value":"/ The return type `MinMaxResult` is an enum of three variants:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98663,"byte_end":98727,"line_start":2907,"line_end":2907,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98732,"byte_end":98735,"line_start":2908,"line_end":2908,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98740,"byte_end":98784,"line_start":2909,"line_end":2909,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(x)` if the iterator has exactly one element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98789,"byte_end":98851,"line_start":2910,"line_end":2910,"column_start":5,"column_end":67}},{"value":"/ - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98856,"byte_end":98919,"line_start":2911,"line_end":2911,"column_start":5,"column_end":68}},{"value":"/    values are equal if and only if there is more than one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98924,"byte_end":98985,"line_start":2912,"line_end":2912,"column_start":5,"column_end":66}},{"value":"/    element in the iterator and all elements are equal.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":98990,"byte_end":99048,"line_start":2913,"line_end":2913,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99053,"byte_end":99056,"line_start":2914,"line_end":2914,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `minmax` does `1.5 * n` comparisons,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99061,"byte_end":99131,"line_start":2915,"line_end":2915,"column_start":5,"column_end":75}},{"value":"/ and so is faster than calling `min` and `max` separately which does","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99136,"byte_end":99207,"line_start":2916,"line_end":2916,"column_start":5,"column_end":76}},{"value":"/ `2 * n` comparisons.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99212,"byte_end":99236,"line_start":2917,"line_end":2917,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99241,"byte_end":99244,"line_start":2918,"line_end":2918,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99249,"byte_end":99263,"line_start":2919,"line_end":2919,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99268,"byte_end":99271,"line_start":2920,"line_end":2920,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99276,"byte_end":99283,"line_start":2921,"line_end":2921,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99288,"byte_end":99317,"line_start":2922,"line_end":2922,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99322,"byte_end":99388,"line_start":2923,"line_end":2923,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99393,"byte_end":99396,"line_start":2924,"line_end":2924,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99401,"byte_end":99426,"line_start":2925,"line_end":2925,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), NoElements);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99431,"byte_end":99477,"line_start":2926,"line_end":2926,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99482,"byte_end":99485,"line_start":2927,"line_end":2927,"column_start":5,"column_end":8}},{"value":"/ let a = [1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99490,"byte_end":99506,"line_start":2928,"line_end":2928,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.iter().minmax(), OneElement(&1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99511,"byte_end":99561,"line_start":2929,"line_end":2929,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99566,"byte_end":99569,"line_start":2930,"line_end":2930,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 4, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99574,"byte_end":99602,"line_start":2931,"line_end":2931,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99607,"byte_end":99657,"line_start":2932,"line_end":2932,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99662,"byte_end":99665,"line_start":2933,"line_end":2933,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, 1, 1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99670,"byte_end":99695,"line_start":2934,"line_end":2934,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99700,"byte_end":99750,"line_start":2935,"line_end":2935,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99755,"byte_end":99762,"line_start":2936,"line_end":2936,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99767,"byte_end":99770,"line_start":2937,"line_end":2937,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99775,"byte_end":99844,"line_start":2938,"line_end":2938,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":99849,"byte_end":99874,"line_start":2939,"line_end":2939,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2726},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100608,"byte_end":100621,"line_start":2957,"line_end":2957,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"pub fn minmax_by_key<K, F>(Self, F) -> MinMaxResult<Self::Item> where\nSelf: Sized, K: PartialOrd, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100052,"byte_end":100127,"line_start":2946,"line_end":2946,"column_start":5,"column_end":80}},{"value":"/ the specified function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100132,"byte_end":100159,"line_start":2947,"line_end":2947,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100164,"byte_end":100167,"line_start":2948,"line_end":2948,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for [`.minmax()`](Itertools::minmax).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100172,"byte_end":100268,"line_start":2949,"line_end":2949,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100273,"byte_end":100276,"line_start":2950,"line_end":2950,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100281,"byte_end":100358,"line_start":2951,"line_end":2951,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100363,"byte_end":100440,"line_start":2952,"line_end":2952,"column_start":5,"column_end":82}},{"value":"/ [`Iterator::min`] and [`Iterator::max`] methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100445,"byte_end":100497,"line_start":2953,"line_end":2953,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100502,"byte_end":100505,"line_start":2954,"line_end":2954,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100510,"byte_end":100575,"line_start":2955,"line_end":2955,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100580,"byte_end":100600,"line_start":2956,"line_end":2956,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101283,"byte_end":101292,"line_start":2971,"line_end":2971,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"pub fn minmax_by<F>(Self, F) -> MinMaxResult<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100819,"byte_end":100894,"line_start":2963,"line_end":2963,"column_start":5,"column_end":80}},{"value":"/ the specified comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100899,"byte_end":100937,"line_start":2964,"line_end":2964,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100942,"byte_end":100945,"line_start":2965,"line_end":2965,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for [`.minmax()`](Itertools::minmax).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":100950,"byte_end":101046,"line_start":2966,"line_end":2966,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101051,"byte_end":101054,"line_start":2967,"line_end":2967,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101059,"byte_end":101136,"line_start":2968,"line_end":2968,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101141,"byte_end":101218,"line_start":2969,"line_end":2969,"column_start":5,"column_end":82}},{"value":"/ [`Iterator::min`] and [`Iterator::max`] methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101223,"byte_end":101275,"line_start":2970,"line_end":2970,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2734},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102127,"byte_end":102139,"line_start":3000,"line_end":3000,"column_start":8,"column_end":20},"name":"position_max","qualname":"::Itertools::position_max","value":"pub fn position_max(Self) -> Option<usize> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101571,"byte_end":101634,"line_start":2981,"line_end":2981,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101639,"byte_end":101642,"line_start":2982,"line_end":2982,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101647,"byte_end":101711,"line_start":2983,"line_end":2983,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101716,"byte_end":101745,"line_start":2984,"line_end":2984,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101750,"byte_end":101753,"line_start":2985,"line_end":2985,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101758,"byte_end":101772,"line_start":2986,"line_end":2986,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101777,"byte_end":101780,"line_start":2987,"line_end":2987,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101785,"byte_end":101792,"line_start":2988,"line_end":2988,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101797,"byte_end":101826,"line_start":2989,"line_end":2989,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101831,"byte_end":101834,"line_start":2990,"line_end":2990,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101839,"byte_end":101864,"line_start":2991,"line_end":2991,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101869,"byte_end":101915,"line_start":2992,"line_end":2992,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101920,"byte_end":101923,"line_start":2993,"line_end":2993,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101928,"byte_end":101959,"line_start":2994,"line_end":2994,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max(), Some(3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":101964,"byte_end":102013,"line_start":2995,"line_end":2995,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102018,"byte_end":102021,"line_start":2996,"line_end":2996,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102026,"byte_end":102053,"line_start":2997,"line_end":2997,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_max(), Some(1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102058,"byte_end":102107,"line_start":2998,"line_end":2998,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102112,"byte_end":102119,"line_start":2999,"line_end":2999,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2737},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102990,"byte_end":103009,"line_start":3028,"line_end":3028,"column_start":8,"column_end":27},"name":"position_max_by_key","qualname":"::Itertools::position_max_by_key","value":"pub fn position_max_by_key<K, F>(Self, F) -> Option<usize> where Self: Sized,\nK: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator, as\n determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator, as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102323,"byte_end":102389,"line_start":3008,"line_end":3008,"column_start":5,"column_end":71}},{"value":"/ determined by the specified function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102394,"byte_end":102435,"line_start":3009,"line_end":3009,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102440,"byte_end":102443,"line_start":3010,"line_end":3010,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102448,"byte_end":102512,"line_start":3011,"line_end":3011,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102517,"byte_end":102546,"line_start":3012,"line_end":3012,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102551,"byte_end":102554,"line_start":3013,"line_end":3013,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102559,"byte_end":102573,"line_start":3014,"line_end":3014,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102578,"byte_end":102581,"line_start":3015,"line_end":3015,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102586,"byte_end":102593,"line_start":3016,"line_end":3016,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102598,"byte_end":102627,"line_start":3017,"line_end":3017,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102632,"byte_end":102635,"line_start":3018,"line_end":3018,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102640,"byte_end":102665,"line_start":3019,"line_end":3019,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102670,"byte_end":102734,"line_start":3020,"line_end":3020,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102739,"byte_end":102742,"line_start":3021,"line_end":3021,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102747,"byte_end":102782,"line_start":3022,"line_end":3022,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), Some(4));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102787,"byte_end":102854,"line_start":3023,"line_end":3023,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102859,"byte_end":102862,"line_start":3024,"line_end":3024,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102867,"byte_end":102898,"line_start":3025,"line_end":3025,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), Some(3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102903,"byte_end":102970,"line_start":3026,"line_end":3026,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":102975,"byte_end":102982,"line_start":3027,"line_end":3027,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103920,"byte_end":103935,"line_start":3056,"line_end":3056,"column_start":8,"column_end":23},"name":"position_max_by","qualname":"::Itertools::position_max_by","value":"pub fn position_max_by<F>(Self, F) -> Option<usize> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator, as\n determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator, as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103242,"byte_end":103308,"line_start":3036,"line_end":3036,"column_start":5,"column_end":71}},{"value":"/ determined by the specified comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103313,"byte_end":103365,"line_start":3037,"line_end":3037,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103370,"byte_end":103373,"line_start":3038,"line_end":3038,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103378,"byte_end":103442,"line_start":3039,"line_end":3039,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103447,"byte_end":103476,"line_start":3040,"line_end":3040,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103481,"byte_end":103484,"line_start":3041,"line_end":3041,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103489,"byte_end":103503,"line_start":3042,"line_end":3042,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103508,"byte_end":103511,"line_start":3043,"line_end":3043,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103516,"byte_end":103523,"line_start":3044,"line_end":3044,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103528,"byte_end":103557,"line_start":3045,"line_end":3045,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103562,"byte_end":103565,"line_start":3046,"line_end":3046,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103570,"byte_end":103595,"line_start":3047,"line_end":3047,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103600,"byte_end":103664,"line_start":3048,"line_end":3048,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103669,"byte_end":103672,"line_start":3049,"line_end":3049,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103677,"byte_end":103712,"line_start":3050,"line_end":3050,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), Some(3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103717,"byte_end":103784,"line_start":3051,"line_end":3051,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103789,"byte_end":103792,"line_start":3052,"line_end":3052,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103797,"byte_end":103828,"line_start":3053,"line_end":3053,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), Some(1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103833,"byte_end":103900,"line_start":3054,"line_end":3054,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":103905,"byte_end":103912,"line_start":3055,"line_end":3055,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104725,"byte_end":104737,"line_start":3083,"line_end":3083,"column_start":8,"column_end":20},"name":"position_min","qualname":"::Itertools::position_min","value":"pub fn position_min(Self) -> Option<usize> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104168,"byte_end":104231,"line_start":3064,"line_end":3064,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104236,"byte_end":104239,"line_start":3065,"line_end":3065,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104244,"byte_end":104308,"line_start":3066,"line_end":3066,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104313,"byte_end":104343,"line_start":3067,"line_end":3067,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104348,"byte_end":104351,"line_start":3068,"line_end":3068,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104356,"byte_end":104370,"line_start":3069,"line_end":3069,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104375,"byte_end":104378,"line_start":3070,"line_end":3070,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104383,"byte_end":104390,"line_start":3071,"line_end":3071,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104395,"byte_end":104424,"line_start":3072,"line_end":3072,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104429,"byte_end":104432,"line_start":3073,"line_end":3073,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104437,"byte_end":104462,"line_start":3074,"line_end":3074,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104467,"byte_end":104513,"line_start":3075,"line_end":3075,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104518,"byte_end":104521,"line_start":3076,"line_end":3076,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104526,"byte_end":104557,"line_start":3077,"line_end":3077,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min(), Some(4));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104562,"byte_end":104611,"line_start":3078,"line_end":3078,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104616,"byte_end":104619,"line_start":3079,"line_end":3079,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104624,"byte_end":104651,"line_start":3080,"line_end":3080,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_min(), Some(2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104656,"byte_end":104705,"line_start":3081,"line_end":3081,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104710,"byte_end":104717,"line_start":3082,"line_end":3082,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2749},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105589,"byte_end":105608,"line_start":3111,"line_end":3111,"column_start":8,"column_end":27},"name":"position_min_by_key","qualname":"::Itertools::position_min_by_key","value":"pub fn position_min_by_key<K, F>(Self, F) -> Option<usize> where Self: Sized,\nK: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator, as\n determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator, as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104921,"byte_end":104987,"line_start":3091,"line_end":3091,"column_start":5,"column_end":71}},{"value":"/ determined by the specified function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":104992,"byte_end":105033,"line_start":3092,"line_end":3092,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105038,"byte_end":105041,"line_start":3093,"line_end":3093,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105046,"byte_end":105110,"line_start":3094,"line_end":3094,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105115,"byte_end":105145,"line_start":3095,"line_end":3095,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105150,"byte_end":105153,"line_start":3096,"line_end":3096,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105158,"byte_end":105172,"line_start":3097,"line_end":3097,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105177,"byte_end":105180,"line_start":3098,"line_end":3098,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105185,"byte_end":105192,"line_start":3099,"line_end":3099,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105197,"byte_end":105226,"line_start":3100,"line_end":3100,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105231,"byte_end":105234,"line_start":3101,"line_end":3101,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105239,"byte_end":105264,"line_start":3102,"line_end":3102,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105269,"byte_end":105333,"line_start":3103,"line_end":3103,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105338,"byte_end":105341,"line_start":3104,"line_end":3104,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105346,"byte_end":105381,"line_start":3105,"line_end":3105,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), Some(1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105386,"byte_end":105453,"line_start":3106,"line_end":3106,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105458,"byte_end":105461,"line_start":3107,"line_end":3107,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105466,"byte_end":105497,"line_start":3108,"line_end":3108,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), Some(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105502,"byte_end":105569,"line_start":3109,"line_end":3109,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105574,"byte_end":105581,"line_start":3110,"line_end":3110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2754},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106520,"byte_end":106535,"line_start":3139,"line_end":3139,"column_start":8,"column_end":23},"name":"position_min_by","qualname":"::Itertools::position_min_by","value":"pub fn position_min_by<F>(Self, F) -> Option<usize> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator, as\n determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator, as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105841,"byte_end":105907,"line_start":3119,"line_end":3119,"column_start":5,"column_end":71}},{"value":"/ determined by the specified comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105912,"byte_end":105964,"line_start":3120,"line_end":3120,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105969,"byte_end":105972,"line_start":3121,"line_end":3121,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":105977,"byte_end":106041,"line_start":3122,"line_end":3122,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106046,"byte_end":106076,"line_start":3123,"line_end":3123,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106081,"byte_end":106084,"line_start":3124,"line_end":3124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106089,"byte_end":106103,"line_start":3125,"line_end":3125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106108,"byte_end":106111,"line_start":3126,"line_end":3126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106116,"byte_end":106123,"line_start":3127,"line_end":3127,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106128,"byte_end":106157,"line_start":3128,"line_end":3128,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106162,"byte_end":106165,"line_start":3129,"line_end":3129,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106170,"byte_end":106195,"line_start":3130,"line_end":3130,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106200,"byte_end":106264,"line_start":3131,"line_end":3131,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106269,"byte_end":106272,"line_start":3132,"line_end":3132,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106277,"byte_end":106312,"line_start":3133,"line_end":3133,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), Some(4));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106317,"byte_end":106384,"line_start":3134,"line_end":3134,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106389,"byte_end":106392,"line_start":3135,"line_end":3135,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106397,"byte_end":106428,"line_start":3136,"line_end":3136,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), Some(2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106433,"byte_end":106500,"line_start":3137,"line_end":3137,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106505,"byte_end":106512,"line_start":3138,"line_end":3138,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108436,"byte_end":108451,"line_start":3189,"line_end":3189,"column_start":8,"column_end":23},"name":"position_minmax","qualname":"::Itertools::position_minmax","value":"pub fn position_minmax(Self) -> MinMaxResult<usize> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the positions of the minimum and maximum elements in\n the iterator.","sig":null,"attributes":[{"value":"/ Return the positions of the minimum and maximum elements in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106768,"byte_end":106831,"line_start":3147,"line_end":3147,"column_start":5,"column_end":68}},{"value":"/ the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106836,"byte_end":106853,"line_start":3148,"line_end":3148,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106858,"byte_end":106861,"line_start":3149,"line_end":3149,"column_start":5,"column_end":8}},{"value":"/ The return type [`MinMaxResult`] is an enum of three variants:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106866,"byte_end":106932,"line_start":3150,"line_end":3150,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106937,"byte_end":106940,"line_start":3151,"line_end":3151,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106945,"byte_end":106989,"line_start":3152,"line_end":3152,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(xpos)` if the iterator has exactly one element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":106994,"byte_end":107059,"line_start":3153,"line_end":3153,"column_start":5,"column_end":70}},{"value":"/ - `MinMax(xpos, ypos)` is returned otherwise, where the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107064,"byte_end":107123,"line_start":3154,"line_end":3154,"column_start":5,"column_end":64}},{"value":"/    element at `xpos` ≤ the element at `ypos`. While the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107128,"byte_end":107189,"line_start":3155,"line_end":3155,"column_start":5,"column_end":64}},{"value":"/    referenced elements themselves may be equal, `xpos` cannot","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107194,"byte_end":107259,"line_start":3156,"line_end":3156,"column_start":5,"column_end":70}},{"value":"/    be equal to `ypos`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107264,"byte_end":107290,"line_start":3157,"line_end":3157,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107295,"byte_end":107298,"line_start":3158,"line_end":3158,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `position_minmax` does `1.5 * n`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107303,"byte_end":107369,"line_start":3159,"line_end":3159,"column_start":5,"column_end":71}},{"value":"/ comparisons, and so is faster than calling `positon_min` and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107374,"byte_end":107438,"line_start":3160,"line_end":3160,"column_start":5,"column_end":69}},{"value":"/ `position_max` separately which does `2 * n` comparisons.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107443,"byte_end":107504,"line_start":3161,"line_end":3161,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107509,"byte_end":107512,"line_start":3162,"line_end":3162,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107517,"byte_end":107582,"line_start":3163,"line_end":3163,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107587,"byte_end":107653,"line_start":3164,"line_end":3164,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107658,"byte_end":107724,"line_start":3165,"line_end":3165,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107729,"byte_end":107753,"line_start":3166,"line_end":3166,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107758,"byte_end":107761,"line_start":3167,"line_end":3167,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107766,"byte_end":107824,"line_start":3168,"line_end":3168,"column_start":5,"column_end":63}},{"value":"/ guaranteed if an element is NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107829,"byte_end":107865,"line_start":3169,"line_end":3169,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107870,"byte_end":107873,"line_start":3170,"line_end":3170,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107878,"byte_end":107892,"line_start":3171,"line_end":3171,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107897,"byte_end":107900,"line_start":3172,"line_end":3172,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107905,"byte_end":107912,"line_start":3173,"line_end":3173,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107917,"byte_end":107946,"line_start":3174,"line_end":3174,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":107951,"byte_end":108017,"line_start":3175,"line_end":3175,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108022,"byte_end":108025,"line_start":3176,"line_end":3176,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108030,"byte_end":108055,"line_start":3177,"line_end":3177,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax(), NoElements);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108060,"byte_end":108115,"line_start":3178,"line_end":3178,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108120,"byte_end":108123,"line_start":3179,"line_end":3179,"column_start":5,"column_end":8}},{"value":"/ let a = [10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108128,"byte_end":108145,"line_start":3180,"line_end":3180,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(a.iter().position_minmax(), OneElement(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108150,"byte_end":108208,"line_start":3181,"line_end":3181,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108213,"byte_end":108216,"line_start":3182,"line_end":3182,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108221,"byte_end":108252,"line_start":3183,"line_end":3183,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax(), MinMax(4, 3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108257,"byte_end":108314,"line_start":3184,"line_end":3184,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108319,"byte_end":108322,"line_start":3185,"line_end":3185,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108327,"byte_end":108354,"line_start":3186,"line_end":3186,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_minmax(), MinMax(2, 1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108359,"byte_end":108416,"line_start":3187,"line_end":3187,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108421,"byte_end":108428,"line_start":3188,"line_end":3188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110135,"byte_end":110157,"line_start":3234,"line_end":3234,"column_start":8,"column_end":30},"name":"position_minmax_by_key","qualname":"::Itertools::position_minmax_by_key","value":"pub fn position_minmax_by_key<K, F>(Self, F) -> MinMaxResult<usize> where\nSelf: Sized, K: PartialOrd, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the postions of the minimum and maximum elements of an\n iterator, as determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the postions of the minimum and maximum elements of an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108841,"byte_end":108906,"line_start":3200,"line_end":3200,"column_start":5,"column_end":70}},{"value":"/ iterator, as determined by the specified function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108911,"byte_end":108965,"line_start":3201,"line_end":3201,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108970,"byte_end":108973,"line_start":3202,"line_end":3202,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":108978,"byte_end":109040,"line_start":3203,"line_end":3203,"column_start":5,"column_end":67}},{"value":"/ [`position_minmax`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109045,"byte_end":109069,"line_start":3204,"line_end":3204,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109074,"byte_end":109077,"line_start":3205,"line_end":3205,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109082,"byte_end":109147,"line_start":3206,"line_end":3206,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109152,"byte_end":109218,"line_start":3207,"line_end":3207,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109223,"byte_end":109289,"line_start":3208,"line_end":3208,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109294,"byte_end":109318,"line_start":3209,"line_end":3209,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109323,"byte_end":109326,"line_start":3210,"line_end":3210,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109331,"byte_end":109396,"line_start":3211,"line_end":3211,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109401,"byte_end":109421,"line_start":3212,"line_end":3212,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109426,"byte_end":109429,"line_start":3213,"line_end":3213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109434,"byte_end":109448,"line_start":3214,"line_end":3214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109453,"byte_end":109456,"line_start":3215,"line_end":3215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109461,"byte_end":109468,"line_start":3216,"line_end":3216,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109473,"byte_end":109502,"line_start":3217,"line_end":3217,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109507,"byte_end":109573,"line_start":3218,"line_end":3218,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109578,"byte_end":109581,"line_start":3219,"line_end":3219,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109586,"byte_end":109611,"line_start":3220,"line_end":3220,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), NoElements);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109616,"byte_end":109689,"line_start":3221,"line_end":3221,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109694,"byte_end":109697,"line_start":3222,"line_end":3222,"column_start":5,"column_end":8}},{"value":"/ let a = [10_i32];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109702,"byte_end":109723,"line_start":3223,"line_end":3223,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), OneElement(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109728,"byte_end":109804,"line_start":3224,"line_end":3224,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109809,"byte_end":109812,"line_start":3225,"line_end":3225,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109817,"byte_end":109852,"line_start":3226,"line_end":3226,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), MinMax(1, 4));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109857,"byte_end":109932,"line_start":3227,"line_end":3227,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109937,"byte_end":109940,"line_start":3228,"line_end":3228,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109945,"byte_end":109976,"line_start":3229,"line_end":3229,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), MinMax(0, 3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":109981,"byte_end":110056,"line_start":3230,"line_end":3230,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110061,"byte_end":110068,"line_start":3231,"line_end":3231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110073,"byte_end":110076,"line_start":3232,"line_end":3232,"column_start":5,"column_end":8}},{"value":"/ [`position_minmax`]: Self::position_minmax","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110081,"byte_end":110127,"line_start":3233,"line_end":3233,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111762,"byte_end":111780,"line_start":3276,"line_end":3276,"column_start":8,"column_end":26},"name":"position_minmax_by","qualname":"::Itertools::position_minmax_by","value":"pub fn position_minmax_by<F>(Self, F) -> MinMaxResult<usize> where\nSelf: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Return the postions of the minimum and maximum elements of an\n iterator, as determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the postions of the minimum and maximum elements of an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110560,"byte_end":110625,"line_start":3245,"line_end":3245,"column_start":5,"column_end":70}},{"value":"/ iterator, as determined by the specified comparison function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110630,"byte_end":110695,"line_start":3246,"line_end":3246,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110700,"byte_end":110703,"line_start":3247,"line_end":3247,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110708,"byte_end":110770,"line_start":3248,"line_end":3248,"column_start":5,"column_end":67}},{"value":"/ [`position_minmax`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110775,"byte_end":110799,"line_start":3249,"line_end":3249,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110804,"byte_end":110807,"line_start":3250,"line_end":3250,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110812,"byte_end":110877,"line_start":3251,"line_end":3251,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110882,"byte_end":110948,"line_start":3252,"line_end":3252,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":110953,"byte_end":111019,"line_start":3253,"line_end":3253,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111024,"byte_end":111048,"line_start":3254,"line_end":3254,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111053,"byte_end":111056,"line_start":3255,"line_end":3255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111061,"byte_end":111075,"line_start":3256,"line_end":3256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111080,"byte_end":111083,"line_start":3257,"line_end":3257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111088,"byte_end":111095,"line_start":3258,"line_end":3258,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111100,"byte_end":111129,"line_start":3259,"line_end":3259,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111134,"byte_end":111200,"line_start":3260,"line_end":3260,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111205,"byte_end":111208,"line_start":3261,"line_end":3261,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111213,"byte_end":111238,"line_start":3262,"line_end":3262,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), NoElements);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111243,"byte_end":111316,"line_start":3263,"line_end":3263,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111321,"byte_end":111324,"line_start":3264,"line_end":3264,"column_start":5,"column_end":8}},{"value":"/ let a = [10_i32];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111329,"byte_end":111350,"line_start":3265,"line_end":3265,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), OneElement(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111355,"byte_end":111431,"line_start":3266,"line_end":3266,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111436,"byte_end":111439,"line_start":3267,"line_end":3267,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111444,"byte_end":111479,"line_start":3268,"line_end":3268,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), MinMax(4, 3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111484,"byte_end":111559,"line_start":3269,"line_end":3269,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111564,"byte_end":111567,"line_start":3270,"line_end":3270,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111572,"byte_end":111603,"line_start":3271,"line_end":3271,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), MinMax(2, 1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111608,"byte_end":111683,"line_start":3272,"line_end":3272,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111688,"byte_end":111695,"line_start":3273,"line_end":3273,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111700,"byte_end":111703,"line_start":3274,"line_end":3274,"column_start":5,"column_end":8}},{"value":"/ [`position_minmax`]: Self::position_minmax","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":111708,"byte_end":111754,"line_start":3275,"line_end":3275,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2798},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":113118,"byte_end":113129,"line_start":3304,"line_end":3304,"column_start":8,"column_end":19},"name":"exactly_one","qualname":"::Itertools::exactly_one","value":"pub fn exactly_one(Self) -> Result<Self::Item, ExactlyOneError<Self>> where\nSelf: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" If the iterator yields exactly one element, that element will be returned, otherwise\n an error will be returned containing an iterator that has the same output as the input\n iterator.","sig":null,"attributes":[{"value":"/ If the iterator yields exactly one element, that element will be returned, otherwise","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112198,"byte_end":112286,"line_start":3287,"line_end":3287,"column_start":5,"column_end":93}},{"value":"/ an error will be returned containing an iterator that has the same output as the input","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112291,"byte_end":112381,"line_start":3288,"line_end":3288,"column_start":5,"column_end":95}},{"value":"/ iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112386,"byte_end":112399,"line_start":3289,"line_end":3289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112404,"byte_end":112407,"line_start":3290,"line_end":3290,"column_start":5,"column_end":8}},{"value":"/ This provides an additional layer of validation over just calling `Iterator::next()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112412,"byte_end":112501,"line_start":3291,"line_end":3291,"column_start":5,"column_end":94}},{"value":"/ If your assumption that there should only be one element yielded is false this provides","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112506,"byte_end":112597,"line_start":3292,"line_end":3292,"column_start":5,"column_end":96}},{"value":"/ the opportunity to detect and handle that, preventing errors at a distance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112602,"byte_end":112681,"line_start":3293,"line_end":3293,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112686,"byte_end":112689,"line_start":3294,"line_end":3294,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112694,"byte_end":112708,"line_start":3295,"line_end":3295,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112713,"byte_end":112720,"line_start":3296,"line_end":3296,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112725,"byte_end":112754,"line_start":3297,"line_end":3297,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112759,"byte_end":112762,"line_start":3298,"line_end":3298,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).filter(|&x| x == 2).exactly_one().unwrap(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112767,"byte_end":112837,"line_start":3299,"line_end":3299,"column_start":5,"column_end":75}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 4).exactly_one().unwrap_err().eq(2..4));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112842,"byte_end":112927,"line_start":3300,"line_end":3300,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 5).exactly_one().unwrap_err().eq(2..5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":112932,"byte_end":113017,"line_start":3301,"line_end":3301,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&_| false).exactly_one().unwrap_err().eq(0..0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":113022,"byte_end":113098,"line_start":3302,"line_end":3302,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":113103,"byte_end":113110,"line_start":3303,"line_end":3303,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2799},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114654,"byte_end":114665,"line_start":3340,"line_end":3340,"column_start":8,"column_end":19},"name":"at_most_one","qualname":"::Itertools::at_most_one","value":"pub fn at_most_one(Self) -> Result<Option<Self::Item>, ExactlyOneError<Self>>\nwhere Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" If the iterator yields no elements, Ok(None) will be returned. If the iterator yields\n exactly one element, that element will be returned, otherwise an error will be returned\n containing an iterator that has the same output as the input iterator.","sig":null,"attributes":[{"value":"/ If the iterator yields no elements, Ok(None) will be returned. If the iterator yields","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":113666,"byte_end":113755,"line_start":3323,"line_end":3323,"column_start":5,"column_end":94}},{"value":"/ exactly one element, that element will be returned, otherwise an error will be returned","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":113760,"byte_end":113851,"line_start":3324,"line_end":3324,"column_start":5,"column_end":96}},{"value":"/ containing an iterator that has the same output as the input iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":113856,"byte_end":113930,"line_start":3325,"line_end":3325,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":113935,"byte_end":113938,"line_start":3326,"line_end":3326,"column_start":5,"column_end":8}},{"value":"/ This provides an additional layer of validation over just calling `Iterator::next()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":113943,"byte_end":114032,"line_start":3327,"line_end":3327,"column_start":5,"column_end":94}},{"value":"/ If your assumption that there should be at most one element yielded is false this provides","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114037,"byte_end":114131,"line_start":3328,"line_end":3328,"column_start":5,"column_end":99}},{"value":"/ the opportunity to detect and handle that, preventing errors at a distance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114136,"byte_end":114215,"line_start":3329,"line_end":3329,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114220,"byte_end":114223,"line_start":3330,"line_end":3330,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114228,"byte_end":114242,"line_start":3331,"line_end":3331,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114247,"byte_end":114254,"line_start":3332,"line_end":3332,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114259,"byte_end":114288,"line_start":3333,"line_end":3333,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114293,"byte_end":114296,"line_start":3334,"line_end":3334,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).filter(|&x| x == 2).at_most_one().unwrap(), Some(2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114301,"byte_end":114377,"line_start":3335,"line_end":3335,"column_start":5,"column_end":81}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 4).at_most_one().unwrap_err().eq(2..4));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114382,"byte_end":114467,"line_start":3336,"line_end":3336,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 5).at_most_one().unwrap_err().eq(2..5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114472,"byte_end":114557,"line_start":3337,"line_end":3337,"column_start":5,"column_end":90}},{"value":"/ assert_eq!((0..10).filter(|&_| false).at_most_one().unwrap(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114562,"byte_end":114634,"line_start":3338,"line_end":3338,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":114639,"byte_end":114646,"line_start":3339,"line_end":3339,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2800},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115706,"byte_end":115715,"line_start":3374,"line_end":3374,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::Itertools::multipeek","value":"pub fn multipeek(Self) -> MultiPeek<Self> where Self: Sized","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows the user to peek at multiple `.next()`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115187,"byte_end":115261,"line_start":3359,"line_end":3359,"column_start":5,"column_end":79}},{"value":"/ values without advancing the base iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115266,"byte_end":115313,"line_start":3360,"line_end":3360,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115318,"byte_end":115321,"line_start":3361,"line_end":3361,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115326,"byte_end":115340,"line_start":3362,"line_end":3362,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115345,"byte_end":115352,"line_start":3363,"line_end":3363,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115357,"byte_end":115386,"line_start":3364,"line_end":3364,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115391,"byte_end":115394,"line_start":3365,"line_end":3365,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..10).multipeek();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115399,"byte_end":115438,"line_start":3366,"line_end":3366,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.peek(), Some(&0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115443,"byte_end":115481,"line_start":3367,"line_end":3367,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.peek(), Some(&1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115486,"byte_end":115524,"line_start":3368,"line_end":3368,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.peek(), Some(&2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115529,"byte_end":115567,"line_start":3369,"line_end":3369,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115572,"byte_end":115609,"line_start":3370,"line_end":3370,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(iter.peek(), Some(&1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115614,"byte_end":115652,"line_start":3371,"line_end":3371,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115657,"byte_end":115664,"line_start":3372,"line_end":3372,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115669,"byte_end":115698,"line_start":3373,"line_end":3373,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2801},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116332,"byte_end":116338,"line_start":3395,"line_end":3395,"column_start":8,"column_end":14},"name":"counts","qualname":"::Itertools::counts","value":"pub fn counts(Self) -> HashMap<Self::Item, usize> where Self: Sized,\nSelf::Item: Eq + Hash","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Collect the items in this iterator and return a `HashMap` which\n contains each item that appears in the iterator and the number\n of times it appears.","sig":null,"attributes":[{"value":"/ Collect the items in this iterator and return a `HashMap` which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115829,"byte_end":115896,"line_start":3381,"line_end":3381,"column_start":5,"column_end":72}},{"value":"/ contains each item that appears in the iterator and the number","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115901,"byte_end":115967,"line_start":3382,"line_end":3382,"column_start":5,"column_end":71}},{"value":"/ of times it appears.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":115972,"byte_end":115996,"line_start":3383,"line_end":3383,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116001,"byte_end":116004,"line_start":3384,"line_end":3384,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116009,"byte_end":116023,"line_start":3385,"line_end":3385,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116028,"byte_end":116035,"line_start":3386,"line_end":3386,"column_start":5,"column_end":12}},{"value":"/ # use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116040,"byte_end":116071,"line_start":3387,"line_end":3387,"column_start":5,"column_end":36}},{"value":"/ let counts = [1, 1, 1, 3, 3, 5].into_iter().counts();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116076,"byte_end":116133,"line_start":3388,"line_end":3388,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(counts[&1], 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116138,"byte_end":116168,"line_start":3389,"line_end":3389,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts[&3], 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116173,"byte_end":116203,"line_start":3390,"line_end":3390,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts[&5], 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116208,"byte_end":116238,"line_start":3391,"line_end":3391,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts.get(&0), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116243,"byte_end":116280,"line_start":3392,"line_end":3392,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116285,"byte_end":116292,"line_start":3393,"line_end":3393,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116297,"byte_end":116324,"line_start":3394,"line_end":3394,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2803},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117941,"byte_end":117950,"line_start":3438,"line_end":3438,"column_start":8,"column_end":17},"name":"counts_by","qualname":"::Itertools::counts_by","value":"pub fn counts_by<K, F>(Self, F) -> HashMap<K, usize> where Self: Sized,\nK: Eq + Hash, F: FnMut(Self::Item) -> K","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Collect the items in this iterator and return a `HashMap` which\n contains each item that appears in the iterator and the number\n of times it appears,\n determining identity using a keying function.","sig":null,"attributes":[{"value":"/ Collect the items in this iterator and return a `HashMap` which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116579,"byte_end":116646,"line_start":3405,"line_end":3405,"column_start":5,"column_end":72}},{"value":"/ contains each item that appears in the iterator and the number","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116651,"byte_end":116717,"line_start":3406,"line_end":3406,"column_start":5,"column_end":71}},{"value":"/ of times it appears,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116722,"byte_end":116746,"line_start":3407,"line_end":3407,"column_start":5,"column_end":29}},{"value":"/ determining identity using a keying function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116751,"byte_end":116800,"line_start":3408,"line_end":3408,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116805,"byte_end":116808,"line_start":3409,"line_end":3409,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116813,"byte_end":116820,"line_start":3410,"line_end":3410,"column_start":5,"column_end":12}},{"value":"/ # use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116825,"byte_end":116856,"line_start":3411,"line_end":3411,"column_start":5,"column_end":36}},{"value":"/ struct Character {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116861,"byte_end":116883,"line_start":3412,"line_end":3412,"column_start":5,"column_end":27}},{"value":"/   first_name: &'static str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116888,"byte_end":116919,"line_start":3413,"line_end":3413,"column_start":5,"column_end":36}},{"value":"/   last_name:  &'static str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116924,"byte_end":116955,"line_start":3414,"line_end":3414,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116960,"byte_end":116965,"line_start":3415,"line_end":3415,"column_start":5,"column_end":10}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116970,"byte_end":116974,"line_start":3416,"line_end":3416,"column_start":5,"column_end":9}},{"value":"/ let characters =","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":116979,"byte_end":116999,"line_start":3417,"line_end":3417,"column_start":5,"column_end":25}},{"value":"/     vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117004,"byte_end":117017,"line_start":3418,"line_end":3418,"column_start":5,"column_end":18}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Pond\"      },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117022,"byte_end":117092,"line_start":3419,"line_end":3419,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Wong\"      },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117097,"byte_end":117167,"line_start":3420,"line_end":3420,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Santiago\"  },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117172,"byte_end":117242,"line_start":3421,"line_end":3421,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Bond\"      },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117247,"byte_end":117317,"line_start":3422,"line_end":3422,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Sullivan\"  },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117322,"byte_end":117392,"line_start":3423,"line_end":3423,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Norington\" },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117397,"byte_end":117467,"line_start":3424,"line_end":3424,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Kirk\"      },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117472,"byte_end":117542,"line_start":3425,"line_end":3425,"column_start":5,"column_end":75}},{"value":"/     ];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117547,"byte_end":117557,"line_start":3426,"line_end":3426,"column_start":5,"column_end":15}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117562,"byte_end":117566,"line_start":3427,"line_end":3427,"column_start":5,"column_end":9}},{"value":"/ let first_name_frequency = ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117571,"byte_end":117602,"line_start":3428,"line_end":3428,"column_start":5,"column_end":36}},{"value":"/     characters","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117607,"byte_end":117625,"line_start":3429,"line_end":3429,"column_start":5,"column_end":23}},{"value":"/         .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117630,"byte_end":117654,"line_start":3430,"line_end":3430,"column_start":5,"column_end":29}},{"value":"/         .counts_by(|c| c.first_name);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117659,"byte_end":117700,"line_start":3431,"line_end":3431,"column_start":5,"column_end":46}},{"value":"/     ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117705,"byte_end":117713,"line_start":3432,"line_end":3432,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(first_name_frequency[\"Amy\"], 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117718,"byte_end":117765,"line_start":3433,"line_end":3433,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(first_name_frequency[\"James\"], 4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117770,"byte_end":117819,"line_start":3434,"line_end":3434,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(first_name_frequency.contains_key(\"Asha\"), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117824,"byte_end":117889,"line_start":3435,"line_end":3435,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117894,"byte_end":117901,"line_start":3436,"line_end":3436,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":117906,"byte_end":117933,"line_start":3437,"line_end":3437,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2806},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118774,"byte_end":118784,"line_start":3467,"line_end":3467,"column_start":8,"column_end":18},"name":"multiunzip","qualname":"::Itertools::multiunzip","value":"pub fn multiunzip<FromI>(Self) -> FromI where Self: Sized + MultiUnzip<FromI>","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Converts an iterator of tuples into a tuple of containers.","sig":null,"attributes":[{"value":"/ Converts an iterator of tuples into a tuple of containers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118124,"byte_end":118186,"line_start":3447,"line_end":3447,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118191,"byte_end":118194,"line_start":3448,"line_end":3448,"column_start":5,"column_end":8}},{"value":"/ `unzip()` consumes an entire iterator of n-ary tuples, producing `n` collections, one for each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118199,"byte_end":118297,"line_start":3449,"line_end":3449,"column_start":5,"column_end":103}},{"value":"/ column.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118302,"byte_end":118313,"line_start":3450,"line_end":3450,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118318,"byte_end":118321,"line_start":3451,"line_end":3451,"column_start":5,"column_end":8}},{"value":"/ This function is, in some sense, the opposite of [`multizip`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118326,"byte_end":118392,"line_start":3452,"line_end":3452,"column_start":5,"column_end":71}},{"value":"/ ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118397,"byte_end":118401,"line_start":3453,"line_end":3453,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118406,"byte_end":118413,"line_start":3454,"line_end":3454,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118418,"byte_end":118447,"line_start":3455,"line_end":3455,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118452,"byte_end":118455,"line_start":3456,"line_end":3456,"column_start":5,"column_end":8}},{"value":"/ let inputs = vec![(1, 2, 3), (4, 5, 6), (7, 8, 9)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118460,"byte_end":118515,"line_start":3457,"line_end":3457,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118520,"byte_end":118523,"line_start":3458,"line_end":3458,"column_start":5,"column_end":8}},{"value":"/ let (a, b, c): (Vec<_>, Vec<_>, Vec<_>) = inputs","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118528,"byte_end":118580,"line_start":3459,"line_end":3459,"column_start":5,"column_end":57}},{"value":"/     .into_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118585,"byte_end":118605,"line_start":3460,"line_end":3460,"column_start":5,"column_end":25}},{"value":"/     .multiunzip();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118610,"byte_end":118632,"line_start":3461,"line_end":3461,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118637,"byte_end":118640,"line_start":3462,"line_end":3462,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, vec![1, 4, 7]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118645,"byte_end":118678,"line_start":3463,"line_end":3463,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(b, vec![2, 5, 8]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118683,"byte_end":118716,"line_start":3464,"line_end":3464,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(c, vec![3, 6, 9]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118721,"byte_end":118754,"line_start":3465,"line_end":3465,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118759,"byte_end":118766,"line_start":3466,"line_end":3466,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2810},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119366,"byte_end":119371,"line_start":3488,"line_end":3488,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"pub fn equal<I, J>(I, J) -> bool where I: IntoIterator, J: IntoIterator,\nI::Item: PartialEq<J::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if both iterables produce equal sequences","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118965,"byte_end":119024,"line_start":3477,"line_end":3477,"column_start":1,"column_end":60}},{"value":"/ (elements pairwise equal and sequences of the same length),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119025,"byte_end":119088,"line_start":3478,"line_end":3478,"column_start":1,"column_end":64}},{"value":"/ `false` otherwise.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119089,"byte_end":119111,"line_start":3479,"line_end":3479,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119112,"byte_end":119115,"line_start":3480,"line_end":3480,"column_start":1,"column_end":4}},{"value":"/ This is an [`IntoIterator`] enabled function that is similar to the standard","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119116,"byte_end":119196,"line_start":3481,"line_end":3481,"column_start":1,"column_end":81}},{"value":"/ library method [`Iterator::eq`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119197,"byte_end":119233,"line_start":3482,"line_end":3482,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119234,"byte_end":119237,"line_start":3483,"line_end":3483,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119238,"byte_end":119245,"line_start":3484,"line_end":3484,"column_start":1,"column_end":8}},{"value":"/ assert!(itertools::equal(vec![1, 2, 3], 1..4));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119246,"byte_end":119297,"line_start":3485,"line_end":3485,"column_start":1,"column_end":52}},{"value":"/ assert!(!itertools::equal(&[0, 0], &[0, 0, 0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119298,"byte_end":119350,"line_start":3486,"line_end":3486,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119351,"byte_end":119358,"line_start":3487,"line_end":3487,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2813},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":120200,"byte_end":120212,"line_start":3516,"line_end":3516,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"pub fn assert_equal<I, J>(I, J) where I: IntoIterator, J: IntoIterator,\nI::Item: fmt::Debug + PartialEq<J::Item>, J::Item: fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as [`equal(a, b)`](equal).","sig":null,"attributes":[{"value":"/ Assert that two iterables produce equal sequences, with the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119809,"byte_end":119877,"line_start":3506,"line_end":3506,"column_start":1,"column_end":69}},{"value":"/ semantics as [`equal(a, b)`](equal).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119878,"byte_end":119918,"line_start":3507,"line_end":3507,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119919,"byte_end":119922,"line_start":3508,"line_end":3508,"column_start":1,"column_end":4}},{"value":"/ **Panics** on assertion failure with a message that shows the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119923,"byte_end":119988,"line_start":3509,"line_end":3509,"column_start":1,"column_end":66}},{"value":"/ two iteration elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":119989,"byte_end":120016,"line_start":3510,"line_end":3510,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":120017,"byte_end":120020,"line_start":3511,"line_end":3511,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":120021,"byte_end":120034,"line_start":3512,"line_end":3512,"column_start":1,"column_end":14}},{"value":"/ assert_equal(\"exceed\".split('c'), \"excess\".split('c'));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":120035,"byte_end":120094,"line_start":3513,"line_end":3513,"column_start":1,"column_end":60}},{"value":"/ // ^PANIC: panicked at 'Failed assertion Some(\"eed\") == Some(\"ess\") for iteration 1',","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":120095,"byte_end":120184,"line_start":3514,"line_end":3514,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":120185,"byte_end":120192,"line_start":3515,"line_end":3515,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2816},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121439,"byte_end":121448,"line_start":3558,"line_end":3558,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"pub fn partition<'a, A: 'a, I, F>(I, F) -> usize where I: IntoIterator<Item =\n&'a mut A>, I::IntoIter: DoubleEndedIterator, F: FnMut(&A) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[{"value":"/ Partition a sequence using predicate `pred` so that elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":120900,"byte_end":120964,"line_start":3541,"line_end":3541,"column_start":1,"column_end":65}},{"value":"/ that map to `true` are placed before elements which map to `false`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":120965,"byte_end":121036,"line_start":3542,"line_end":3542,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121037,"byte_end":121040,"line_start":3543,"line_end":3543,"column_start":1,"column_end":4}},{"value":"/ The order within the partitions is arbitrary.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121041,"byte_end":121090,"line_start":3544,"line_end":3544,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121091,"byte_end":121094,"line_start":3545,"line_end":3545,"column_start":1,"column_end":4}},{"value":"/ Return the index of the split point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121095,"byte_end":121135,"line_start":3546,"line_end":3546,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121136,"byte_end":121139,"line_start":3547,"line_end":3547,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121140,"byte_end":121147,"line_start":3548,"line_end":3548,"column_start":1,"column_end":8}},{"value":"/ use itertools::partition;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121148,"byte_end":121177,"line_start":3549,"line_end":3549,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121178,"byte_end":121181,"line_start":3550,"line_end":3550,"column_start":1,"column_end":4}},{"value":"/ # // use repeated numbers to not promise any ordering","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121182,"byte_end":121239,"line_start":3551,"line_end":3551,"column_start":1,"column_end":58}},{"value":"/ let mut data = [7, 1, 1, 7, 1, 1, 7];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121240,"byte_end":121281,"line_start":3552,"line_end":3552,"column_start":1,"column_end":42}},{"value":"/ let split_index = partition(&mut data, |elt| *elt >= 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121282,"byte_end":121342,"line_start":3553,"line_end":3553,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121343,"byte_end":121346,"line_start":3554,"line_end":3554,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data, [7, 7, 7, 1, 1, 1, 1]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121347,"byte_end":121391,"line_start":3555,"line_end":3555,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(split_index, 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121392,"byte_end":121423,"line_start":3556,"line_end":3556,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":121424,"byte_end":121431,"line_start":3557,"line_end":3557,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5058},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122364,"byte_end":122372,"line_start":3588,"line_end":3588,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":5056},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[{"value":"/ Continue folding with this value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122323,"byte_end":122359,"line_start":3587,"line_end":3587,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5061},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122433,"byte_end":122437,"line_start":3590,"line_end":3590,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":5056},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[{"value":"/ Fold is complete and will return this value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122381,"byte_end":122428,"line_start":3589,"line_end":3589,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":5056},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122304,"byte_end":122313,"line_start":3586,"line_end":3586,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"pub enum FoldWhile<T> { Continue(T), Done(T), }","parent":null,"children":[{"krate":0,"index":5058},{"krate":0,"index":5061}],"decl_id":null,"docs":" An enum used for controlling the execution of `fold_while`.","sig":null,"attributes":[{"value":"/ An enum used for controlling the execution of `fold_while`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122111,"byte_end":122174,"line_start":3582,"line_end":3582,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122175,"byte_end":122178,"line_start":3583,"line_end":3583,"column_start":1,"column_end":4}},{"value":"/ See [`.fold_while()`](Itertools::fold_while) for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122179,"byte_end":122249,"line_start":3584,"line_end":3584,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122529,"byte_end":122539,"line_start":3595,"line_end":3595,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[{"value":"/ Return the value in the continue or done.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122472,"byte_end":122517,"line_start":3594,"line_end":3594,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2824},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122732,"byte_end":122739,"line_start":3602,"line_end":3602,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[{"value":"/ Return true if `self` is `Done`, false if it is `Continue`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122657,"byte_end":122720,"line_start":3601,"line_end":3601,"column_start":5,"column_end":68}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":154745,"byte_end":154755,"line_start":15,"line_end":15,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2825}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":154856,"byte_end":154866,"line_start":22,"line_end":22,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":155118,"byte_end":155128,"line_start":34,"line_end":34,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":156644,"byte_end":156654,"line_start":84,"line_end":84,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157002,"byte_end":157003,"line_start":92,"line_end":92,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157832,"byte_end":157854,"line_start":122,"line_end":122,"column_start":25,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2834}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158099,"byte_end":158121,"line_start":131,"line_end":131,"column_start":41,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158440,"byte_end":158447,"line_start":147,"line_end":147,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158583,"byte_end":158584,"line_start":153,"line_end":153,"column_start":57,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159880,"byte_end":159911,"line_start":196,"line_end":196,"column_start":50,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":161313,"byte_end":161327,"line_start":16,"line_end":16,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162044,"byte_end":162058,"line_start":48,"line_end":48,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162283,"byte_end":162297,"line_start":58,"line_end":58,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162768,"byte_end":162786,"line_start":74,"line_end":74,"column_start":53,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163025,"byte_end":163043,"line_start":87,"line_end":87,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2871}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163596,"byte_end":163616,"line_start":108,"line_end":108,"column_start":45,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164557,"byte_end":164569,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2889}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":165617,"byte_end":165629,"line_start":60,"line_end":60,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":167720,"byte_end":167736,"line_start":127,"line_end":127,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":168384,"byte_end":168396,"line_start":156,"line_end":156,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":125155,"byte_end":125165,"line_start":52,"line_end":52,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":125785,"byte_end":125795,"line_start":78,"line_end":78,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":126677,"byte_end":126695,"line_start":113,"line_end":113,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128232,"byte_end":128250,"line_start":165,"line_end":165,"column_start":30,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128815,"byte_end":128822,"line_start":192,"line_end":192,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129441,"byte_end":129448,"line_start":217,"line_end":217,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131824,"byte_end":131831,"line_start":311,"line_end":311,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":133769,"byte_end":133776,"line_start":374,"line_end":374,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134380,"byte_end":134388,"line_start":393,"line_end":393,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2970}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134607,"byte_end":134615,"line_start":402,"line_end":402,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":135639,"byte_end":135643,"line_start":444,"line_end":444,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136265,"byte_end":136269,"line_start":472,"line_end":472,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136481,"byte_end":136489,"line_start":483,"line_end":483,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":138029,"byte_end":138036,"line_start":534,"line_end":534,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2987}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":138252,"byte_end":138253,"line_start":541,"line_end":541,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":138724,"byte_end":138731,"line_start":561,"line_end":561,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":138951,"byte_end":138958,"line_start":571,"line_end":571,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":139995,"byte_end":140002,"line_start":607,"line_end":607,"column_start":33,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140525,"byte_end":140537,"line_start":623,"line_end":623,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2989}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140865,"byte_end":140877,"line_start":636,"line_end":636,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":141936,"byte_end":141945,"line_start":677,"line_end":677,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143186,"byte_end":143203,"line_start":725,"line_end":725,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143397,"byte_end":143414,"line_start":736,"line_end":736,"column_start":30,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143579,"byte_end":143596,"line_start":746,"line_end":746,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143708,"byte_end":143725,"line_start":752,"line_end":752,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":147192,"byte_end":147200,"line_start":852,"line_end":852,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3338}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":147533,"byte_end":147541,"line_start":870,"line_end":870,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":148646,"byte_end":148654,"line_start":913,"line_end":913,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":149091,"byte_end":149102,"line_start":927,"line_end":927,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3339}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":149662,"byte_end":149673,"line_start":953,"line_end":953,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":150792,"byte_end":150803,"line_start":996,"line_end":996,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":151256,"byte_end":151265,"line_start":1012,"line_end":1012,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3350}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":151598,"byte_end":151607,"line_start":1031,"line_end":1031,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152096,"byte_end":152105,"line_start":1053,"line_end":1053,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152471,"byte_end":152480,"line_start":1067,"line_end":1067,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152888,"byte_end":152894,"line_start":1082,"line_end":1082,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3360}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":153158,"byte_end":153164,"line_start":1098,"line_end":1098,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":154030,"byte_end":154036,"line_start":1134,"line_end":1134,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":154142,"byte_end":154148,"line_start":1140,"line_end":1140,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":154456,"byte_end":154462,"line_start":1155,"line_end":1155,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170767,"byte_end":170779,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175948,"byte_end":175960,"line_start":183,"line_end":183,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":176323,"byte_end":176335,"line_start":197,"line_end":197,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185722,"byte_end":185732,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3700}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186526,"byte_end":186538,"line_start":17,"line_end":17,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3701}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186668,"byte_end":186680,"line_start":24,"line_end":24,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3702}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187138,"byte_end":187150,"line_start":45,"line_end":45,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":188403,"byte_end":188415,"line_start":82,"line_end":82,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":189761,"byte_end":189773,"line_start":125,"line_end":125,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":190354,"byte_end":190381,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3711}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":190526,"byte_end":190553,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1090}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":191222,"byte_end":191249,"line_start":57,"line_end":57,"column_start":22,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":192844,"byte_end":192871,"line_start":105,"line_end":105,"column_start":27,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193702,"byte_end":193717,"line_start":28,"line_end":28,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":194142,"byte_end":194157,"line_start":46,"line_end":46,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":194799,"byte_end":194814,"line_start":73,"line_end":73,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":194869,"byte_end":194884,"line_start":75,"line_end":75,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":195248,"byte_end":195263,"line_start":88,"line_end":88,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":195937,"byte_end":195952,"line_start":108,"line_end":108,"column_start":19,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":199419,"byte_end":199428,"line_start":34,"line_end":34,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":201600,"byte_end":201609,"line_start":94,"line_end":94,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":203134,"byte_end":203143,"line_start":135,"line_end":135,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3720}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":203348,"byte_end":203357,"line_start":145,"line_end":145,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":203857,"byte_end":203866,"line_start":161,"line_end":161,"column_start":33,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":205330,"byte_end":205340,"line_start":50,"line_end":50,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":206101,"byte_end":206107,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":207606,"byte_end":207620,"line_start":14,"line_end":14,"column_start":12,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1279}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":207755,"byte_end":207769,"line_start":20,"line_end":20,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208868,"byte_end":208879,"line_start":56,"line_end":56,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1303},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1314},{"krate":0,"index":1316},{"krate":0,"index":1319},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1328},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1337},{"krate":0,"index":1341},{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":228552,"byte_end":228553,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":228858,"byte_end":228868,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":229058,"byte_end":229068,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":230110,"byte_end":230120,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":236898,"byte_end":236908,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":238709,"byte_end":238716,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1447},{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239910,"byte_end":239916,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1468},{"krate":0,"index":1469}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":240819,"byte_end":240824,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":240995,"byte_end":241000,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242821,"byte_end":242831,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1500},{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243804,"byte_end":243810,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":244562,"byte_end":244567,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":244726,"byte_end":244731,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245263,"byte_end":245287,"line_start":11,"line_end":11,"column_start":48,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245970,"byte_end":245971,"line_start":34,"line_end":34,"column_start":59,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246865,"byte_end":246880,"line_start":70,"line_end":70,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":248076,"byte_end":248091,"line_start":116,"line_end":116,"column_start":34,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":249389,"byte_end":249397,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":250293,"byte_end":250301,"line_start":55,"line_end":55,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3837}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252315,"byte_end":252325,"line_start":117,"line_end":117,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1625}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252460,"byte_end":252461,"line_start":123,"line_end":123,"column_start":56,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253548,"byte_end":253556,"line_start":164,"line_end":164,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3844}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":254395,"byte_end":254403,"line_start":188,"line_end":188,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3845}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":254552,"byte_end":254560,"line_start":196,"line_end":196,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":255319,"byte_end":255327,"line_start":224,"line_end":224,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lazy_buffer.rs","byte_start":255571,"byte_end":255581,"line_start":11,"line_end":11,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lazy_buffer.rs","byte_start":256530,"byte_end":256540,"line_start":56,"line_end":56,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1675},{"krate":0,"index":1676}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257865,"byte_end":257876,"line_start":34,"line_end":34,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3857}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":258096,"byte_end":258107,"line_start":44,"line_end":44,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3858}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":258332,"byte_end":258343,"line_start":53,"line_end":53,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263033,"byte_end":263045,"line_start":18,"line_end":18,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267068,"byte_end":267077,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267230,"byte_end":267239,"line_start":37,"line_end":37,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1755}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267949,"byte_end":267958,"line_start":60,"line_end":60,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":268425,"byte_end":268434,"line_start":79,"line_end":79,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1765}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":268797,"byte_end":268806,"line_start":95,"line_end":95,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269365,"byte_end":269373,"line_start":19,"line_end":19,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3906}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269759,"byte_end":269767,"line_start":39,"line_end":39,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":270533,"byte_end":270541,"line_start":70,"line_end":70,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1794}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":271001,"byte_end":271009,"line_start":87,"line_end":87,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":271119,"byte_end":271127,"line_start":93,"line_end":93,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272043,"byte_end":272050,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1818},{"krate":0,"index":1819}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":273236,"byte_end":273243,"line_start":74,"line_end":74,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":273570,"byte_end":273577,"line_start":89,"line_end":89,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":273636,"byte_end":273643,"line_start":91,"line_end":91,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274695,"byte_end":274703,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275023,"byte_end":275030,"line_start":37,"line_end":37,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275449,"byte_end":275457,"line_start":56,"line_end":56,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1856}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":276211,"byte_end":276227,"line_start":86,"line_end":86,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3917}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":276549,"byte_end":276565,"line_start":103,"line_end":103,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278886,"byte_end":278898,"line_start":18,"line_end":18,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3963}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":279473,"byte_end":279485,"line_start":55,"line_end":55,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3990}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":280351,"byte_end":280363,"line_start":96,"line_end":96,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1914},{"krate":0,"index":1916}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":283036,"byte_end":283048,"line_start":170,"line_end":170,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":284260,"byte_end":284273,"line_start":208,"line_end":208,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1922}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":287077,"byte_end":287085,"line_start":20,"line_end":20,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3991}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":287205,"byte_end":287213,"line_start":27,"line_end":27,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3992}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":287579,"byte_end":287587,"line_start":45,"line_end":45,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1971}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":288834,"byte_end":288842,"line_start":86,"line_end":86,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":289322,"byte_end":289336,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292498,"byte_end":292506,"line_start":28,"line_end":28,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":293008,"byte_end":293016,"line_start":49,"line_end":49,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2012}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294990,"byte_end":294996,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4020}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":295070,"byte_end":295076,"line_start":58,"line_end":58,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":295620,"byte_end":295626,"line_start":76,"line_end":76,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2039}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":296072,"byte_end":296078,"line_start":98,"line_end":98,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296712,"byte_end":296719,"line_start":24,"line_end":24,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":2059}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":297109,"byte_end":297116,"line_start":44,"line_end":44,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2062}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":297266,"byte_end":297273,"line_start":53,"line_end":53,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":297326,"byte_end":297333,"line_start":57,"line_end":57,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300704,"byte_end":300714,"line_start":15,"line_end":15,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4037}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301555,"byte_end":301565,"line_start":49,"line_end":49,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2105},{"krate":0,"index":2106},{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303228,"byte_end":303234,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4038}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303617,"byte_end":303623,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304158,"byte_end":304165,"line_start":146,"line_end":146,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4057}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304268,"byte_end":304275,"line_start":152,"line_end":152,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":305971,"byte_end":305974,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":307074,"byte_end":307077,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307720,"byte_end":307721,"line_start":19,"line_end":19,"column_start":44,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307983,"byte_end":307994,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2176}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":308166,"byte_end":308177,"line_start":44,"line_end":44,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":308855,"byte_end":308866,"line_start":72,"line_end":72,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309538,"byte_end":309544,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2192},{"krate":0,"index":2193}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309769,"byte_end":309775,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2197}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":311376,"byte_end":311388,"line_start":170,"line_end":170,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2207},{"krate":0,"index":2208}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":311932,"byte_end":311944,"line_start":191,"line_end":191,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313047,"byte_end":313067,"line_start":227,"line_end":227,"column_start":25,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2218},{"krate":0,"index":2219}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":316431,"byte_end":316443,"line_start":15,"line_end":15,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4311}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":316644,"byte_end":316656,"line_start":23,"line_end":23,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2254}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":317120,"byte_end":317124,"line_start":43,"line_end":43,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2258}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":318002,"byte_end":318014,"line_start":71,"line_end":71,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2267}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319251,"byte_end":319263,"line_start":105,"line_end":105,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2273}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319909,"byte_end":319913,"line_start":127,"line_end":127,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2282},{"krate":0,"index":2283}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320203,"byte_end":320207,"line_start":137,"line_end":137,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4326}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320291,"byte_end":320295,"line_start":140,"line_end":140,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320904,"byte_end":320912,"line_start":161,"line_end":161,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321195,"byte_end":321204,"line_start":175,"line_end":175,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":322878,"byte_end":322886,"line_start":20,"line_end":20,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4356}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":323675,"byte_end":323683,"line_start":51,"line_end":51,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":324420,"byte_end":324428,"line_start":80,"line_end":80,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":324835,"byte_end":324843,"line_start":96,"line_end":96,"column_start":33,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":324964,"byte_end":324970,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2377}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":325701,"byte_end":325707,"line_start":130,"line_end":130,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2380}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326148,"byte_end":326154,"line_start":146,"line_end":146,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326545,"byte_end":326551,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4363}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330775,"byte_end":330787,"line_start":16,"line_end":16,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4572}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331600,"byte_end":331608,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2416}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331887,"byte_end":331899,"line_start":61,"line_end":61,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":333135,"byte_end":333147,"line_start":95,"line_end":95,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":333224,"byte_end":333236,"line_start":99,"line_end":99,"column_start":37,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":334145,"byte_end":334150,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2436},{"krate":0,"index":2437},{"krate":0,"index":2438}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":334728,"byte_end":334733,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335665,"byte_end":335675,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":336297,"byte_end":336307,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2478}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":337128,"byte_end":337138,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":337241,"byte_end":337251,"line_start":80,"line_end":80,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118940,"byte_end":118941,"line_start":3475,"line_end":3475,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122453,"byte_end":122462,"line_start":3593,"line_end":3593,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2823},{"krate":0,"index":2824}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":5588,"byte_end":5592,"line_start":188,"line_end":188,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":925}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":154745,"byte_end":154755,"line_start":15,"line_end":15,"column_start":46,"column_end":56},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":154856,"byte_end":154866,"line_start":22,"line_end":22,"column_start":30,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":155118,"byte_end":155128,"line_start":34,"line_end":34,"column_start":28,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":156644,"byte_end":156654,"line_start":84,"line_end":84,"column_start":74,"column_end":84},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157002,"byte_end":157003,"line_start":92,"line_end":92,"column_start":49,"column_end":50},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":358}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":157832,"byte_end":157854,"line_start":122,"line_end":122,"column_start":25,"column_end":47},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2827},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158099,"byte_end":158121,"line_start":131,"line_end":131,"column_start":41,"column_end":63},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2827},"to":{"krate":0,"index":358}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158440,"byte_end":158447,"line_start":147,"line_end":147,"column_start":42,"column_end":49},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2835},"to":{"krate":0,"index":395}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":158583,"byte_end":158584,"line_start":153,"line_end":153,"column_start":57,"column_end":58},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":407},"to":{"krate":0,"index":395}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/coalesce.rs","byte_start":159880,"byte_end":159911,"line_start":196,"line_end":196,"column_start":50,"column_end":81},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2841},"to":{"krate":0,"index":358}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":161313,"byte_end":161327,"line_start":16,"line_end":16,"column_start":25,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2851},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162044,"byte_end":162058,"line_start":48,"line_end":48,"column_start":36,"column_end":50},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2851},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162283,"byte_end":162297,"line_start":58,"line_end":58,"column_start":34,"column_end":48},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2851},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":162768,"byte_end":162786,"line_start":74,"line_end":74,"column_start":53,"column_end":71},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2864},"to":{"krate":0,"index":438}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163025,"byte_end":163043,"line_start":87,"line_end":87,"column_start":29,"column_end":47},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2864},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/map.rs","byte_start":163596,"byte_end":163616,"line_start":108,"line_end":108,"column_start":45,"column_end":65},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2872},"to":{"krate":0,"index":438}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":164557,"byte_end":164569,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2882},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":165617,"byte_end":165629,"line_start":60,"line_end":60,"column_start":9,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2882},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":167720,"byte_end":167736,"line_start":127,"line_end":127,"column_start":9,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2890},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/multi_product.rs","byte_start":168384,"byte_end":168396,"line_start":156,"line_end":156,"column_start":22,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2882},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":125155,"byte_end":125165,"line_start":52,"line_end":52,"column_start":25,"column_end":35},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2908},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":125785,"byte_end":125795,"line_start":78,"line_end":78,"column_start":30,"column_end":40},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2908},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":126677,"byte_end":126695,"line_start":113,"line_end":113,"column_start":25,"column_end":43},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2922},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128232,"byte_end":128250,"line_start":165,"line_end":165,"column_start":30,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2922},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":128815,"byte_end":128822,"line_start":192,"line_end":192,"column_start":9,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":129441,"byte_end":129448,"line_start":217,"line_end":217,"column_start":22,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2936},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":131824,"byte_end":131831,"line_start":311,"line_end":311,"column_start":25,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2946},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":133769,"byte_end":133776,"line_start":374,"line_end":374,"column_start":30,"column_end":37},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2946},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134380,"byte_end":134388,"line_start":393,"line_end":393,"column_start":27,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2961},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":134607,"byte_end":134615,"line_start":402,"line_end":402,"column_start":28,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2961},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":135639,"byte_end":135643,"line_start":444,"line_end":444,"column_start":22,"column_end":26},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2971},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136265,"byte_end":136269,"line_start":472,"line_end":472,"column_start":31,"column_end":35},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2971},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":136481,"byte_end":136489,"line_start":483,"line_end":483,"column_start":43,"column_end":51},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2981},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":138029,"byte_end":138036,"line_start":534,"line_end":534,"column_start":30,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":673},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":138252,"byte_end":138253,"line_start":541,"line_end":541,"column_start":55,"column_end":56},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":687},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":138724,"byte_end":138731,"line_start":561,"line_end":561,"column_start":25,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":673},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":138951,"byte_end":138958,"line_start":571,"line_end":571,"column_start":28,"column_end":35},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":673},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":139995,"byte_end":140002,"line_start":607,"line_end":607,"column_start":33,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":673},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140525,"byte_end":140537,"line_start":623,"line_end":623,"column_start":31,"column_end":43},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":708},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":140865,"byte_end":140877,"line_start":636,"line_end":636,"column_start":29,"column_end":41},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":708},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":141936,"byte_end":141945,"line_start":677,"line_end":677,"column_start":25,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2990},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":142773,"byte_end":142778,"line_start":709,"line_end":709,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":736}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143186,"byte_end":143203,"line_start":725,"line_end":725,"column_start":25,"column_end":42},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2999},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143397,"byte_end":143414,"line_start":736,"line_end":736,"column_start":30,"column_end":47},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2999},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143579,"byte_end":143596,"line_start":746,"line_end":746,"column_start":21,"column_end":38},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3012},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":143708,"byte_end":143725,"line_start":752,"line_end":752,"column_start":32,"column_end":49},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3012},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":147192,"byte_end":147200,"line_start":852,"line_end":852,"column_start":27,"column_end":35},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3329},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":147533,"byte_end":147541,"line_start":870,"line_end":870,"column_start":31,"column_end":39},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3329},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":148646,"byte_end":148654,"line_start":913,"line_end":913,"column_start":36,"column_end":44},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3329},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":149091,"byte_end":149102,"line_start":927,"line_end":927,"column_start":27,"column_end":38},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":790},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":149662,"byte_end":149673,"line_start":953,"line_end":953,"column_start":34,"column_end":45},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":790},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":150792,"byte_end":150803,"line_start":996,"line_end":996,"column_start":39,"column_end":50},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":790},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":151256,"byte_end":151265,"line_start":1012,"line_end":1012,"column_start":27,"column_end":36},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3340},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":151598,"byte_end":151607,"line_start":1031,"line_end":1031,"column_start":25,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3340},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152096,"byte_end":152105,"line_start":1053,"line_end":1053,"column_start":36,"column_end":45},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3340},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152471,"byte_end":152480,"line_start":1067,"line_end":1067,"column_start":30,"column_end":39},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3340},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":152888,"byte_end":152894,"line_start":1082,"line_end":1082,"column_start":27,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3351},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":153158,"byte_end":153164,"line_start":1098,"line_end":1098,"column_start":25,"column_end":31},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3351},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":154030,"byte_end":154036,"line_start":1134,"line_end":1134,"column_start":34,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3351},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":154142,"byte_end":154148,"line_start":1140,"line_end":1140,"column_start":36,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3351},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/adaptors/mod.rs","byte_start":154456,"byte_end":154462,"line_start":1155,"line_end":1155,"column_start":30,"column_end":36},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3351},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":170767,"byte_end":170779,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":175948,"byte_end":175960,"line_start":183,"line_end":183,"column_start":9,"column_end":21},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/either_or_both.rs","byte_start":176323,"byte_end":176335,"line_start":197,"line_end":197,"column_start":43,"column_end":55},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3361},"to":{"krate":2,"index":2927}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/cons_tuples_impl.rs","byte_start":185722,"byte_end":185732,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3692},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186526,"byte_end":186538,"line_start":17,"line_end":17,"column_start":19,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":186668,"byte_end":186680,"line_start":24,"line_end":24,"column_start":24,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":187138,"byte_end":187150,"line_start":45,"line_end":45,"column_start":19,"column_end":31},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":188403,"byte_end":188415,"line_start":82,"line_end":82,"column_start":22,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations.rs","byte_start":189761,"byte_end":189773,"line_start":125,"line_end":125,"column_start":27,"column_end":39},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":190354,"byte_end":190381,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3703},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":190526,"byte_end":190553,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":191222,"byte_end":191249,"line_start":57,"line_end":57,"column_start":22,"column_end":49},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3703},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/combinations_with_replacement.rs","byte_start":192844,"byte_end":192871,"line_start":105,"line_end":105,"column_start":27,"column_end":54},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3703},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":193702,"byte_end":193717,"line_start":28,"line_end":28,"column_start":9,"column_end":24},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":194142,"byte_end":194157,"line_start":46,"line_end":46,"column_start":22,"column_end":37},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3712},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":194799,"byte_end":194814,"line_start":73,"line_end":73,"column_start":31,"column_end":46},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3712},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":194869,"byte_end":194884,"line_start":75,"line_end":75,"column_start":21,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3712},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":195248,"byte_end":195263,"line_start":88,"line_end":88,"column_start":19,"column_end":34},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3712},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/exactly_one_err.rs","byte_start":195937,"byte_end":195952,"line_start":108,"line_end":108,"column_start":19,"column_end":34},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3712},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":199419,"byte_end":199428,"line_start":34,"line_end":34,"column_start":28,"column_end":37},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1193},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":201600,"byte_end":201609,"line_start":94,"line_end":94,"column_start":39,"column_end":48},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1193},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":203134,"byte_end":203143,"line_start":135,"line_end":135,"column_start":25,"column_end":34},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1193},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":203348,"byte_end":203357,"line_start":145,"line_end":145,"column_start":30,"column_end":39},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1193},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/flatten_ok.rs","byte_start":203857,"byte_end":203866,"line_start":161,"line_end":161,"column_start":33,"column_end":42},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1193},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":205330,"byte_end":205340,"line_start":50,"line_end":50,"column_start":33,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/format.rs","byte_start":206101,"byte_end":206107,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":207606,"byte_end":207620,"line_start":14,"line_end":14,"column_start":12,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3777},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":207755,"byte_end":207769,"line_start":20,"line_end":20,"column_start":31,"column_end":45},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3777},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/grouping_map.rs","byte_start":208868,"byte_end":208879,"line_start":56,"line_end":56,"column_start":15,"column_end":26},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":228552,"byte_end":228553,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1389},"to":{"krate":0,"index":1381}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":228858,"byte_end":228868,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":229058,"byte_end":229068,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3800},"to":{"krate":0,"index":1381}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":230110,"byte_end":230120,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":236898,"byte_end":236908,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":238709,"byte_end":238716,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":239910,"byte_end":239916,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1457},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":240819,"byte_end":240824,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":240995,"byte_end":241000,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":242821,"byte_end":242831,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":243804,"byte_end":243810,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":244562,"byte_end":244567,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1518},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/groupbylazy.rs","byte_start":244726,"byte_end":244731,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1518},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245263,"byte_end":245287,"line_start":11,"line_end":11,"column_start":48,"column_end":72},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3806},"to":{"krate":0,"index":1544}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":245970,"byte_end":245971,"line_start":34,"line_end":34,"column_start":59,"column_end":60},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1556},"to":{"krate":0,"index":1544}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":246865,"byte_end":246880,"line_start":70,"line_end":70,"column_start":29,"column_end":44},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3816},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/intersperse.rs","byte_start":248076,"byte_end":248091,"line_start":116,"line_end":116,"column_start":34,"column_end":49},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":3816},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":249389,"byte_end":249397,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":250293,"byte_end":250301,"line_start":55,"line_end":55,"column_start":19,"column_end":27},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3830},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252315,"byte_end":252325,"line_start":117,"line_end":117,"column_start":44,"column_end":54},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3838},"to":{"krate":0,"index":1620}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":252460,"byte_end":252461,"line_start":123,"line_end":123,"column_start":56,"column_end":57},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1628},"to":{"krate":0,"index":1620}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":253548,"byte_end":253556,"line_start":164,"line_end":164,"column_start":27,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":254395,"byte_end":254403,"line_start":188,"line_end":188,"column_start":22,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":254552,"byte_end":254560,"line_start":196,"line_end":196,"column_start":25,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/kmerge_impl.rs","byte_start":255319,"byte_end":255327,"line_start":224,"line_end":224,"column_start":30,"column_end":38},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lazy_buffer.rs","byte_start":255571,"byte_end":255581,"line_start":11,"line_end":11,"column_start":9,"column_end":19},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3846},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lazy_buffer.rs","byte_start":256530,"byte_end":256540,"line_start":56,"line_end":56,"column_start":25,"column_end":35},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3846},"to":{"krate":2,"index":3327}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":257865,"byte_end":257876,"line_start":34,"line_end":34,"column_start":25,"column_end":36},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":258096,"byte_end":258107,"line_start":44,"line_end":44,"column_start":30,"column_end":41},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/merge_join.rs","byte_start":258332,"byte_end":258343,"line_start":53,"line_end":53,"column_start":28,"column_end":39},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/minmax.rs","byte_start":263033,"byte_end":263045,"line_start":18,"line_end":18,"column_start":16,"column_end":28},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267068,"byte_end":267077,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":3884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267230,"byte_end":267239,"line_start":37,"line_end":37,"column_start":19,"column_end":28},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":3884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":267949,"byte_end":267958,"line_start":60,"line_end":60,"column_start":25,"column_end":34},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":3884},"to":{"krate":0,"index":1843}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":268425,"byte_end":268434,"line_start":79,"line_end":79,"column_start":22,"column_end":31},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":3884},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/multipeek_impl.rs","byte_start":268797,"byte_end":268806,"line_start":95,"line_end":95,"column_start":31,"column_end":40},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":3884},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269365,"byte_end":269373,"line_start":19,"line_end":19,"column_start":32,"column_end":40},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":3895},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":269759,"byte_end":269767,"line_start":39,"line_end":39,"column_start":25,"column_end":33},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3895},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":270533,"byte_end":270541,"line_start":70,"line_end":70,"column_start":36,"column_end":44},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3895},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":271001,"byte_end":271009,"line_start":87,"line_end":87,"column_start":34,"column_end":42},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3895},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/pad_tail.rs","byte_start":271119,"byte_end":271127,"line_start":93,"line_end":93,"column_start":30,"column_end":38},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3895},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":272043,"byte_end":272050,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":273236,"byte_end":273243,"line_start":74,"line_end":74,"column_start":22,"column_end":29},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3907},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":273570,"byte_end":273577,"line_start":89,"line_end":89,"column_start":31,"column_end":38},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3907},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peek_nth.rs","byte_start":273636,"byte_end":273643,"line_start":91,"line_end":91,"column_start":25,"column_end":32},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3907},"to":{"krate":0,"index":1843}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274381,"byte_end":274389,"line_start":14,"line_end":14,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":7907},"to":{"krate":0,"index":1843}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":274695,"byte_end":274703,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"kind":{"Impl":{"id":134}},"from":{"krate":2,"index":45199},"to":{"krate":0,"index":1843}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275023,"byte_end":275030,"line_start":37,"line_end":37,"column_start":25,"column_end":32},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2936},"to":{"krate":0,"index":1843}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":275449,"byte_end":275457,"line_start":56,"line_end":56,"column_start":25,"column_end":33},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":4004},"to":{"krate":0,"index":1843}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":276211,"byte_end":276227,"line_start":86,"line_end":86,"column_start":40,"column_end":56},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1858},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/peeking_take_while.rs","byte_start":276549,"byte_end":276565,"line_start":103,"line_end":103,"column_start":29,"column_end":45},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1858},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":278886,"byte_end":278898,"line_start":18,"line_end":18,"column_start":19,"column_end":31},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1892},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":279473,"byte_end":279485,"line_start":55,"line_end":55,"column_start":24,"column_end":36},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1892},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":280351,"byte_end":280363,"line_start":96,"line_end":96,"column_start":22,"column_end":34},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1892},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":283036,"byte_end":283048,"line_start":170,"line_end":170,"column_start":9,"column_end":21},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/permutations.rs","byte_start":284260,"byte_end":284273,"line_start":208,"line_end":208,"column_start":6,"column_end":19},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":287077,"byte_end":287085,"line_start":20,"line_end":20,"column_start":19,"column_end":27},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":287205,"byte_end":287213,"line_start":27,"line_end":27,"column_start":24,"column_end":32},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":287579,"byte_end":287587,"line_start":45,"line_end":45,"column_start":22,"column_end":30},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/powerset.rs","byte_start":288834,"byte_end":288842,"line_start":86,"line_end":86,"column_start":27,"column_end":35},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/process_results_impl.rs","byte_start":289322,"byte_end":289336,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3993},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":292498,"byte_end":292506,"line_start":28,"line_end":28,"column_start":19,"column_end":27},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4004},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/put_back_n_impl.rs","byte_start":293008,"byte_end":293016,"line_start":49,"line_end":49,"column_start":32,"column_end":40},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4004},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":294990,"byte_end":294996,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":295070,"byte_end":295076,"line_start":58,"line_end":58,"column_start":25,"column_end":31},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":295620,"byte_end":295626,"line_start":76,"line_end":76,"column_start":33,"column_end":39},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/rciter_impl.rs","byte_start":296072,"byte_end":296078,"line_start":98,"line_end":98,"column_start":30,"column_end":36},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":296712,"byte_end":296719,"line_start":24,"line_end":24,"column_start":22,"column_end":29},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":4021},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":297109,"byte_end":297116,"line_start":44,"line_end":44,"column_start":33,"column_end":40},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":4021},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":297266,"byte_end":297273,"line_start":53,"line_end":53,"column_start":31,"column_end":38},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":4021},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/repeatn.rs","byte_start":297326,"byte_end":297333,"line_start":57,"line_end":57,"column_start":27,"column_end":34},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":4021},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":300704,"byte_end":300714,"line_start":15,"line_end":15,"column_start":24,"column_end":34},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":4031},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":301555,"byte_end":301565,"line_start":49,"line_end":49,"column_start":25,"column_end":35},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":4031},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303228,"byte_end":303234,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":4039},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":303617,"byte_end":303623,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":4039},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304158,"byte_end":304165,"line_start":146,"line_end":146,"column_start":28,"column_end":35},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":4048},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/sources.rs","byte_start":304268,"byte_end":304275,"line_start":152,"line_end":152,"column_start":26,"column_end":33},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":4048},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":305971,"byte_end":305974,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":4068},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tee.rs","byte_start":307074,"byte_end":307077,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4068},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307660,"byte_end":307672,"line_start":16,"line_end":16,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":2220},"to":{"krate":0,"index":2171}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307720,"byte_end":307721,"line_start":19,"line_end":19,"column_start":44,"column_end":45},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2173},"to":{"krate":0,"index":2171}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":307983,"byte_end":307994,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4075},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":308166,"byte_end":308177,"line_start":44,"line_end":44,"column_start":22,"column_end":33},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4075},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":308855,"byte_end":308866,"line_start":72,"line_end":72,"column_start":31,"column_end":42},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4075},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309538,"byte_end":309544,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4085},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":309769,"byte_end":309775,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4085},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":311376,"byte_end":311388,"line_start":170,"line_end":170,"column_start":25,"column_end":37},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4098},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":311932,"byte_end":311944,"line_start":191,"line_end":191,"column_start":30,"column_end":42},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":4098},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313047,"byte_end":313067,"line_start":227,"line_end":227,"column_start":25,"column_end":45},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":4111},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/tuple_impl.rs","byte_start":313308,"byte_end":313313,"line_start":239,"line_end":239,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":2220}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":316431,"byte_end":316443,"line_start":15,"line_end":15,"column_start":34,"column_end":46},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":4300},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":316644,"byte_end":316656,"line_start":23,"line_end":23,"column_start":42,"column_end":54},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":317120,"byte_end":317124,"line_start":43,"line_end":43,"column_start":18,"column_end":22},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":318002,"byte_end":318014,"line_start":71,"line_end":71,"column_start":34,"column_end":46},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4300},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319251,"byte_end":319263,"line_start":105,"line_end":105,"column_start":45,"column_end":57},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4300},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":319909,"byte_end":319913,"line_start":127,"line_end":127,"column_start":33,"column_end":37},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4322},"to":{"krate":0,"index":2275}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320203,"byte_end":320207,"line_start":137,"line_end":137,"column_start":28,"column_end":32},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2284},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320291,"byte_end":320295,"line_start":140,"line_end":140,"column_start":39,"column_end":43},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2284},"to":{"krate":0,"index":2275}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":320904,"byte_end":320912,"line_start":161,"line_end":161,"column_start":38,"column_end":46},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4327},"to":{"krate":0,"index":2296}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/duplicates_impl.rs","byte_start":321195,"byte_end":321204,"line_start":175,"line_end":175,"column_start":35,"column_end":44},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4337},"to":{"krate":0,"index":2296}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":322878,"byte_end":322886,"line_start":20,"line_end":20,"column_start":30,"column_end":38},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":4344},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":323675,"byte_end":323683,"line_start":51,"line_end":51,"column_start":28,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":4344},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":324420,"byte_end":324428,"line_start":80,"line_end":80,"column_start":39,"column_end":47},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":4344},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":324835,"byte_end":324843,"line_start":96,"line_end":96,"column_start":33,"column_end":41},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":4344},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":324964,"byte_end":324970,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":4357},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":325701,"byte_end":325707,"line_start":130,"line_end":130,"column_start":33,"column_end":39},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4357},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326148,"byte_end":326154,"line_start":146,"line_end":146,"column_start":27,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":4357},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unique_impl.rs","byte_start":326545,"byte_end":326551,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4357},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/unziptuple.rs","byte_start":327789,"byte_end":327797,"line_start":32,"line_end":32,"column_start":30,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":7907},"to":{"krate":0,"index":2391}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":330775,"byte_end":330787,"line_start":16,"line_end":16,"column_start":19,"column_end":31},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2406},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331600,"byte_end":331608,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":4573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":331887,"byte_end":331899,"line_start":61,"line_end":61,"column_start":32,"column_end":44},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2406},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":333135,"byte_end":333147,"line_start":95,"line_end":95,"column_start":31,"column_end":43},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2406},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/with_position.rs","byte_start":333224,"byte_end":333236,"line_start":99,"line_end":99,"column_start":37,"column_end":49},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2406},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":334145,"byte_end":334150,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":4601},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_eq_impl.rs","byte_start":334728,"byte_end":334733,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":4601},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":335665,"byte_end":335675,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":4614},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":336297,"byte_end":336307,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":4614},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":337128,"byte_end":337138,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":4614},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/zip_longest.rs","byte_start":337241,"byte_end":337251,"line_start":80,"line_end":80,"column_start":30,"column_end":40},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":4614},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":12721,"byte_end":12729,"line_start":429,"line_end":429,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":7907},"to":{"krate":0,"index":2496}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":118940,"byte_end":118941,"line_start":3475,"line_end":3475,"column_start":31,"column_end":32},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2809},"to":{"krate":0,"index":2496}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3/src/lib.rs","byte_start":122453,"byte_end":122462,"line_start":3593,"line_end":3593,"column_start":9,"column_end":18},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5056},"to":{"krate":4294967295,"index":4294967295}}]}