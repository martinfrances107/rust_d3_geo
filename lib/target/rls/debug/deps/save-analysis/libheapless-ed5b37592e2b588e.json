{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1","program":"/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","heapless","--edition=2018","/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"cas\"","--cfg","feature=\"default\"","-C","metadata=ed5b37592e2b588e","-C","extra-filename=-ed5b37592e2b588e","--out-dir","/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","-L","dependency=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","--extern","as_slice=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libas_slice-3d3df073f2b6f63c.rmeta","--extern","generic_array=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libgeneric_array-959fb4f9fef62769.rmeta","--extern","hash32=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libhash32-33d8e1eba9a0ee14.rmeta","--extern","stable_deref_trait=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libstable_deref_trait-e8e1de1f1705d2dd.rmeta","--cap-lints","allow","--cfg","has_cas","--cfg","has_atomics","--error-format=json","--sysroot","/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libheapless-ed5b37592e2b588e.rmeta"},"prelude":{"crate_id":{"name":"heapless","disambiguator":[10161764277912654536,0]},"crate_root":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src","external_crates":[{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[3507872413113695977,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","num":5,"id":{"name":"typenum","disambiguator":[2930080192617149959,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","num":6,"id":{"name":"hash32","disambiguator":[11898166922023924527,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","num":7,"id":{"name":"byteorder","disambiguator":[10928633988161422107,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","num":8,"id":{"name":"as_slice","disambiguator":[18004214840561597517,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","num":9,"id":{"name":"generic_array","disambiguator":[4483899168197973923,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","num":10,"id":{"name":"generic_array","disambiguator":[8759127326726776456,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","num":11,"id":{"name":"stable_deref_trait","disambiguator":[1528126608907949036,0]}}],"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":0,"byte_end":4270,"line_start":1,"line_end":113,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1118},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3523,"byte_end":3533,"line_start":78,"line_end":78,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1119},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3523,"byte_end":3533,"line_start":78,"line_end":78,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":2827},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3568,"byte_end":3574,"line_start":79,"line_end":79,"column_start":34,"column_end":40},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":752},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3576,"byte_end":3586,"line_start":79,"line_end":79,"column_start":42,"column_end":52},"alias_span":null,"name":"PowerOfTwo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":456},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3612,"byte_end":3623,"line_start":80,"line_end":80,"column_start":24,"column_end":35},"alias_span":null,"name":"ArrayLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2014},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3642,"byte_end":3655,"line_start":81,"line_end":81,"column_start":18,"column_end":31},"alias_span":null,"name":"HistoryBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2036},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3676,"byte_end":3682,"line_start":82,"line_end":82,"column_start":20,"column_end":26},"alias_span":null,"name":"Bucket","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3684,"byte_end":3695,"line_start":82,"line_end":82,"column_start":28,"column_end":39},"alias_span":null,"name":"FnvIndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":191},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3697,"byte_end":3705,"line_start":82,"line_end":82,"column_start":41,"column_end":49},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2046},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3707,"byte_end":3710,"line_start":82,"line_end":82,"column_start":51,"column_end":54},"alias_span":null,"name":"Pos","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":411},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3732,"byte_end":3743,"line_start":83,"line_end":83,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3745,"byte_end":3753,"line_start":83,"line_end":83,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":598},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3776,"byte_end":3785,"line_start":84,"line_end":84,"column_start":21,"column_end":30},"alias_span":null,"name":"LinearMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":599},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3776,"byte_end":3785,"line_start":84,"line_end":84,"column_start":21,"column_end":30},"alias_span":null,"name":"LinearMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":796},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3803,"byte_end":3809,"line_start":85,"line_end":85,"column_start":17,"column_end":23},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":797},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3803,"byte_end":3809,"line_start":85,"line_end":85,"column_start":17,"column_end":23},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":930},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3824,"byte_end":3827,"line_start":86,"line_end":86,"column_start":14,"column_end":17},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":931},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3824,"byte_end":3827,"line_start":86,"line_end":86,"column_start":14,"column_end":17},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1573},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171121,"byte_end":171125,"line_start":241,"line_end":241,"column_start":16,"column_end":20},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":1365}},{"kind":"Use","ref_id":{"krate":0,"index":1765},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196751,"byte_end":196759,"line_start":92,"line_end":92,"column_start":17,"column_end":25},"alias_span":null,"name":"Consumer","value":"","parent":{"krate":0,"index":1696}},{"kind":"Use","ref_id":{"krate":0,"index":1779},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196761,"byte_end":196769,"line_start":92,"line_end":92,"column_start":27,"column_end":35},"alias_span":null,"name":"Producer","value":"","parent":{"krate":0,"index":1696}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":0,"byte_end":4270,"line_start":1,"line_end":113,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":90},{"krate":0,"index":364},{"krate":0,"index":561},{"krate":0,"index":751},{"krate":0,"index":876},{"krate":0,"index":1074},{"krate":0,"index":1218},{"krate":0,"index":1255},{"krate":0,"index":1365},{"krate":0,"index":1696},{"krate":0,"index":1934}],"decl_id":null,"docs":" `static` friendly data structures that don't require dynamic memory allocation","sig":null,"attributes":[{"value":"/ `static` friendly data structures that don't require dynamic memory allocation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":0,"byte_end":82,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":83,"byte_end":86,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The core principle behind `heapless` is that its data structures are backed by a *static* memory","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":87,"byte_end":187,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"/ allocation. For example, you can think of `heapless::Vec` as an alternative version of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":188,"byte_end":278,"line_start":4,"line_end":4,"column_start":1,"column_end":91}},{"value":"/ `std::Vec` with fixed capacity and that can't be re-allocated on the fly (e.g. via `push`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":279,"byte_end":374,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":375,"byte_end":378,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ All `heapless` data structures store their memory allocation *inline* and specify their capacity","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":379,"byte_end":479,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"/ via their type parameter `N`. This means that you can instantiate a `heapless` data structure on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":480,"byte_end":580,"line_start":8,"line_end":8,"column_start":1,"column_end":101}},{"value":"/ the stack, in a `static` variable, or even in the heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":581,"byte_end":640,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":641,"byte_end":644,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":645,"byte_end":652,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use heapless::Vec; // fixed capacity `std::Vec`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":653,"byte_end":704,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"/ use heapless::consts::U8; // type level integer used to specify capacity","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":705,"byte_end":781,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":782,"byte_end":785,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ // on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":786,"byte_end":805,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"/ let mut xs: Vec<u8, U8> = Vec::new(); // can hold up to 8 elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":806,"byte_end":876,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ xs.push(42).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":877,"byte_end":902,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(xs.pop(), Some(42));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":903,"byte_end":938,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":939,"byte_end":942,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // in a `static` variable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":943,"byte_end":972,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/ // (because `const-fn` has not been fully stabilized you need to use the helper structs in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":973,"byte_end":1067,"line_start":21,"line_end":21,"column_start":1,"column_end":95}},{"value":"/ // the `i` module, which must be wrapped in a tuple struct)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1068,"byte_end":1131,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ static mut XS: Vec<u8, U8> = Vec(heapless::i::Vec::new());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1132,"byte_end":1194,"line_start":23,"line_end":23,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1195,"byte_end":1198,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let xs = unsafe { &mut XS };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1199,"byte_end":1231,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1232,"byte_end":1235,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ xs.push(42);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1236,"byte_end":1252,"line_start":27,"line_end":27,"column_start":1,"column_end":17}},{"value":"/ assert_eq!(xs.pop(), Some(42));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1253,"byte_end":1288,"line_start":28,"line_end":28,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1289,"byte_end":1292,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // in the heap (though kind of pointless because no reallocation)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1293,"byte_end":1362,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ let mut ys: Box<Vec<u8, U8>> = Box::new(Vec::new());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1363,"byte_end":1419,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ ys.push(42).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1420,"byte_end":1445,"line_start":32,"line_end":32,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(ys.pop(), Some(42));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1446,"byte_end":1481,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1482,"byte_end":1489,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1490,"byte_end":1493,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Because they have fixed capacity `heapless` data structures don't implicitly reallocate. This","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1494,"byte_end":1591,"line_start":36,"line_end":36,"column_start":1,"column_end":98}},{"value":"/ means that operations like `heapless::Vec.push` are *truly* constant time rather than amortized","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1592,"byte_end":1691,"line_start":37,"line_end":37,"column_start":1,"column_end":100}},{"value":"/ constant time with potentially unbounded (depends on the allocator) worst case execution time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1692,"byte_end":1789,"line_start":38,"line_end":38,"column_start":1,"column_end":98}},{"value":"/ (which is bad / unacceptable for hard real time applications).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1790,"byte_end":1856,"line_start":39,"line_end":39,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1857,"byte_end":1860,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ `heapless` data structures don't use a memory allocator which means no risk of an uncatchable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1861,"byte_end":1958,"line_start":41,"line_end":41,"column_start":1,"column_end":98}},{"value":"/ Out Of Memory (OOM) condition while performing operations on them. It's certainly possible to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":1959,"byte_end":2056,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"/ run out of capacity while growing `heapless` data structures, but the API lets you handle this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2057,"byte_end":2155,"line_start":43,"line_end":43,"column_start":1,"column_end":99}},{"value":"/ possibility by returning a `Result` on operations that may exhaust the capacity of the data","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2156,"byte_end":2251,"line_start":44,"line_end":44,"column_start":1,"column_end":96}},{"value":"/ structure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2252,"byte_end":2266,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2267,"byte_end":2270,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ List of currently implemented data structures:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2271,"byte_end":2321,"line_start":47,"line_end":47,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2322,"byte_end":2325,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ - [`BinaryHeap`](binary_heap/struct.BinaryHeap.html) -- priority queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2326,"byte_end":2400,"line_start":49,"line_end":49,"column_start":1,"column_end":75}},{"value":"/ - [`IndexMap`](struct.IndexMap.html) -- hash table","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2401,"byte_end":2455,"line_start":50,"line_end":50,"column_start":1,"column_end":55}},{"value":"/ - [`IndexSet`](struct.IndexSet.html) -- hash set","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2456,"byte_end":2508,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/ - [`LinearMap`](struct.LinearMap.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2509,"byte_end":2551,"line_start":52,"line_end":52,"column_start":1,"column_end":43}},{"value":"/ - [`Pool`](pool/struct.Pool.html) -- lock-free memory pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2552,"byte_end":2614,"line_start":53,"line_end":53,"column_start":1,"column_end":63}},{"value":"/ - [`String`](struct.String.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2615,"byte_end":2651,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/ - [`Vec`](struct.Vec.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2652,"byte_end":2682,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/ - [`mpmc::Q*`](mpmc/index.html) -- multiple producer multiple consumer lock-free queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2683,"byte_end":2773,"line_start":56,"line_end":56,"column_start":1,"column_end":91}},{"value":"/ - [`spsc::Queue`](spsc/struct.Queue.html) -- single producer single consumer lock-free queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2774,"byte_end":2870,"line_start":57,"line_end":57,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2871,"byte_end":2874,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Optional Features","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2875,"byte_end":2898,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2899,"byte_end":2902,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ The `heapless` crate provides the following optional Cargo features:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2903,"byte_end":2975,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2976,"byte_end":2979,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ - `ufmt-impl`: Implement [`ufmt_write::uWrite`] for `String<N>` and `Vec<u8, N>`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":2980,"byte_end":3064,"line_start":63,"line_end":63,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3065,"byte_end":3068,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`ufmt_write::uWrite`]: https://docs.rs/ufmt-write/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3069,"byte_end":3124,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3125,"byte_end":3128,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Minimum Supported Rust Version (MSRV)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3129,"byte_end":3172,"line_start":67,"line_end":67,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3173,"byte_end":3176,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ This crate is guaranteed to compile on stable Rust 1.36 and up with its default set of features.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3177,"byte_end":3277,"line_start":69,"line_end":69,"column_start":1,"column_end":101}},{"value":"/ It *might* compile on older versions but that may change in any new patch release.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3278,"byte_end":3364,"line_start":70,"line_end":70,"column_start":1,"column_end":87}},{"value":"no_std","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3389,"byte_end":3395,"line_start":72,"line_end":72,"column_start":24,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3398,"byte_end":3420,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"deny(rust_2018_compatibility)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3421,"byte_end":3454,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"deny(rust_2018_idioms)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3455,"byte_end":3481,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"deny(warnings)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":3482,"byte_end":3500,"line_start":76,"line_end":76,"column_start":1,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2014},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5617,"byte_end":5630,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"HistoryBuffer","qualname":"::histbuf::HistoryBuffer","value":"HistoryBuffer {  }","parent":null,"children":[{"krate":0,"index":2017},{"krate":0,"index":2018}],"decl_id":null,"docs":" A \"history buffer\", similar to a write-only ring buffer of fixed length.","sig":null,"attributes":[{"value":"/ A \"history buffer\", similar to a write-only ring buffer of fixed length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4348,"byte_end":4424,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4425,"byte_end":4428,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This buffer keeps a fixed number of elements.  On write, the oldest element","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4429,"byte_end":4508,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"/ is overwritten. Thus, the buffer is useful to keep a history of values with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4509,"byte_end":4588,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ some desired depth, and for example calculate a rolling average.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4589,"byte_end":4657,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4658,"byte_end":4661,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The buffer is always fully initialized; depending on the constructor, the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4662,"byte_end":4739,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ initial value is either the default value for the element type or a supplied","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4740,"byte_end":4820,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ initial value. This simplifies the API and is mostly irrelevant for the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4821,"byte_end":4896,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ intended use case.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4897,"byte_end":4919,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4920,"byte_end":4923,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4924,"byte_end":4938,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4939,"byte_end":4946,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4947,"byte_end":4979,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":4980,"byte_end":5008,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5009,"byte_end":5012,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Initialize a new buffer with 8 elements, all initially zero.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5013,"byte_end":5080,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/ let mut buf = HistoryBuffer::<_, U8>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5081,"byte_end":5129,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5130,"byte_end":5133,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ buf.write(3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5134,"byte_end":5151,"line_start":22,"line_end":22,"column_start":1,"column_end":18}},{"value":"/ buf.write(5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5152,"byte_end":5169,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/ buf.extend(&[4, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5170,"byte_end":5194,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5195,"byte_end":5198,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // The most recent written element is a four.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5199,"byte_end":5248,"line_start":26,"line_end":26,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(buf.recent(), &4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5249,"byte_end":5282,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5283,"byte_end":5286,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // To access all elements in an unspecified order, use `as_slice()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5287,"byte_end":5359,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ for el in buf.as_slice() { println!(\"{:?}\", el); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5360,"byte_end":5414,"line_start":30,"line_end":30,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5415,"byte_end":5418,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Now we can prepare an average of all values, which comes out to 2.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5419,"byte_end":5492,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ let avg = buf.as_slice().iter().sum::<usize>() / buf.len();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5493,"byte_end":5556,"line_start":33,"line_end":33,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(avg, 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5557,"byte_end":5580,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5581,"byte_end":5588,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6346,"byte_end":6349,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<HistoryBuffer<T, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new history buffer, where every element is filled with the\n default value of the type `T`.","sig":null,"attributes":[{"value":"/ Constructs a new history buffer, where every element is filled with the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5804,"byte_end":5879,"line_start":50,"line_end":50,"column_start":5,"column_end":80}},{"value":"/ default value of the type `T`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5884,"byte_end":5918,"line_start":51,"line_end":51,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5923,"byte_end":5926,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ `HistoryBuffer` currently cannot be constructed in `const` context.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5931,"byte_end":6002,"line_start":53,"line_end":53,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6007,"byte_end":6010,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6015,"byte_end":6029,"line_start":55,"line_end":55,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6034,"byte_end":6037,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6042,"byte_end":6049,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6054,"byte_end":6086,"line_start":58,"line_end":58,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6091,"byte_end":6119,"line_start":59,"line_end":59,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6124,"byte_end":6127,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ // Allocate a 16-element buffer on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6132,"byte_end":6180,"line_start":61,"line_end":61,"column_start":5,"column_end":53}},{"value":"/ let mut x: HistoryBuffer<u8, U16> = HistoryBuffer::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6185,"byte_end":6246,"line_start":62,"line_end":62,"column_start":5,"column_end":66}},{"value":"/ // All elements are zero","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6251,"byte_end":6279,"line_start":63,"line_end":63,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(x.as_slice(), [0; 16]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6284,"byte_end":6322,"line_start":64,"line_end":64,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6327,"byte_end":6334,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6563,"byte_end":6568,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"clear","qualname":"<HistoryBuffer<T, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, replacing every element with the default value of\n type `T`.\n","sig":null,"attributes":[{"value":"/ Clears the buffer, replacing every element with the default value of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6461,"byte_end":6533,"line_start":73,"line_end":73,"column_start":5,"column_end":77}},{"value":"/ type `T`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6538,"byte_end":6551,"line_start":74,"line_end":74,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7126,"byte_end":7134,"line_start":98,"line_end":98,"column_start":12,"column_end":20},"name":"new_with","qualname":"<HistoryBuffer<T, N>>::new_with","value":"pub fn new_with(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new history buffer, where every element is the given value.","sig":null,"attributes":[{"value":"/ Constructs a new history buffer, where every element is the given value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6700,"byte_end":6776,"line_start":85,"line_end":85,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6781,"byte_end":6784,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6789,"byte_end":6803,"line_start":87,"line_end":87,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6808,"byte_end":6811,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6816,"byte_end":6823,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6828,"byte_end":6860,"line_start":90,"line_end":90,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6865,"byte_end":6893,"line_start":91,"line_end":91,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6898,"byte_end":6901,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ // Allocate a 16-element buffer on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6906,"byte_end":6954,"line_start":93,"line_end":93,"column_start":5,"column_end":53}},{"value":"/ let mut x: HistoryBuffer<u8, U16> = HistoryBuffer::new_with(4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6959,"byte_end":7026,"line_start":94,"line_end":94,"column_start":5,"column_end":72}},{"value":"/ // All elements are four","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7031,"byte_end":7059,"line_start":95,"line_end":95,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(x.as_slice(), [4; 16]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7064,"byte_end":7102,"line_start":96,"line_end":96,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7107,"byte_end":7114,"line_start":97,"line_end":97,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7349,"byte_end":7359,"line_start":106,"line_end":106,"column_start":12,"column_end":22},"name":"clear_with","qualname":"<HistoryBuffer<T, N>>::clear_with","value":"pub fn clear_with(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, replacing every element with the given value.\n","sig":null,"attributes":[{"value":"/ Clears the buffer, replacing every element with the given value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7269,"byte_end":7337,"line_start":105,"line_end":105,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7601,"byte_end":7604,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"len","qualname":"<HistoryBuffer<T, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the buffer, which is the length of the\n underlying backing array.\n","sig":null,"attributes":[{"value":"/ Returns the capacity of the buffer, which is the length of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7489,"byte_end":7555,"line_start":115,"line_end":115,"column_start":5,"column_end":71}},{"value":"/ underlying backing array.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7560,"byte_end":7589,"line_start":116,"line_end":116,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7736,"byte_end":7741,"line_start":122,"line_end":122,"column_start":12,"column_end":17},"name":"write","qualname":"<HistoryBuffer<T, N>>::write","value":"pub fn write(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Writes an element to the buffer, overwriting the oldest value.\n","sig":null,"attributes":[{"value":"/ Writes an element to the buffer, overwriting the oldest value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7658,"byte_end":7724,"line_start":121,"line_end":121,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8117,"byte_end":8134,"line_start":134,"line_end":134,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<HistoryBuffer<T, N>>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[T]) where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Clones and writes all elements in a slice to the buffer.","sig":null,"attributes":[{"value":"/ Clones and writes all elements in a slice to the buffer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7920,"byte_end":7980,"line_start":130,"line_end":130,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7985,"byte_end":7988,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ If the slice is longer than the buffer, only the last `self.len()`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7993,"byte_end":8063,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/ elements will actually be stored.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8068,"byte_end":8105,"line_start":133,"line_end":133,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8632,"byte_end":8638,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"recent","qualname":"<HistoryBuffer<T, N>>::recent","value":"pub fn recent(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the most recently written value.","sig":null,"attributes":[{"value":"/ Returns a reference to the most recently written value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8280,"byte_end":8339,"line_start":143,"line_end":143,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8344,"byte_end":8347,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8352,"byte_end":8366,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8371,"byte_end":8374,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8379,"byte_end":8386,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8391,"byte_end":8423,"line_start":148,"line_end":148,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8428,"byte_end":8456,"line_start":149,"line_end":149,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8461,"byte_end":8464,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let mut x: HistoryBuffer<u8, U16> = HistoryBuffer::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8469,"byte_end":8530,"line_start":151,"line_end":151,"column_start":5,"column_end":66}},{"value":"/ x.write(4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8535,"byte_end":8550,"line_start":152,"line_end":152,"column_start":5,"column_end":20}},{"value":"/ x.write(10);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8555,"byte_end":8571,"line_start":153,"line_end":153,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(x.recent(), &10);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8576,"byte_end":8608,"line_start":154,"line_end":154,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8613,"byte_end":8620,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8962,"byte_end":8970,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<HistoryBuffer<T, N>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the array slice backing the buffer, without keeping track\n of the write position. Therefore, the element order is unspecified.\n","sig":null,"attributes":[{"value":"/ Returns the array slice backing the buffer, without keeping track","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8805,"byte_end":8874,"line_start":164,"line_end":164,"column_start":5,"column_end":74}},{"value":"/ of the write position. Therefore, the element order is unspecified.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":8879,"byte_end":8950,"line_start":165,"line_end":165,"column_start":5,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":146},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13051,"byte_end":13062,"line_start":57,"line_end":57,"column_start":10,"column_end":21},"name":"FnvIndexMap","qualname":"::indexmap::FnvIndexMap","value":"IndexMap<K, V, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" A [`heaples::IndexMap`](./struct.IndexMap.html) using the default FNV hasher","sig":null,"attributes":[{"value":"/ A [`heaples::IndexMap`](./struct.IndexMap.html) using the default FNV hasher","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11362,"byte_end":11442,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11443,"byte_end":11446,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ A list of all Methods and Traits available for `FnvIndexMap` can be found in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11447,"byte_end":11527,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ the [`heapless::IndexMap`](./struct.IndexMap.html) documentation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11528,"byte_end":11597,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11598,"byte_end":11601,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11602,"byte_end":11616,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11617,"byte_end":11624,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11625,"byte_end":11655,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11656,"byte_end":11684,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11685,"byte_end":11688,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // A hash map with a capacity of 16 key-value pairs allocated on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11689,"byte_end":11767,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ let mut book_reviews = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11768,"byte_end":11827,"line_start":26,"line_end":26,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11828,"byte_end":11831,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // review some books.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11832,"byte_end":11857,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(\"Adventures of Huckleberry Finn\",    \"My favorite book.\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11858,"byte_end":11949,"line_start":29,"line_end":29,"column_start":1,"column_end":92}},{"value":"/ book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":11950,"byte_end":12036,"line_start":30,"line_end":30,"column_start":1,"column_end":87}},{"value":"/ book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12037,"byte_end":12126,"line_start":31,"line_end":31,"column_start":1,"column_end":90}},{"value":"/ book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12127,"byte_end":12219,"line_start":32,"line_end":32,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12220,"byte_end":12223,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ // check for a specific one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12224,"byte_end":12256,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12257,"byte_end":12311,"line_start":35,"line_end":35,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12312,"byte_end":12384,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12385,"byte_end":12422,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12423,"byte_end":12428,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12429,"byte_end":12432,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12433,"byte_end":12506,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12507,"byte_end":12568,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12569,"byte_end":12572,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ // look up the values associated with some keys.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12573,"byte_end":12625,"line_start":43,"line_end":43,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12626,"byte_end":12703,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ for book in &to_find {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12704,"byte_end":12730,"line_start":45,"line_end":45,"column_start":1,"column_end":27}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12731,"byte_end":12769,"line_start":46,"line_end":46,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12770,"byte_end":12831,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12832,"byte_end":12887,"line_start":48,"line_end":48,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12888,"byte_end":12897,"line_start":49,"line_end":49,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12898,"byte_end":12903,"line_start":50,"line_end":50,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12904,"byte_end":12907,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // iterate over everything.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12908,"byte_end":12939,"line_start":52,"line_end":52,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12940,"byte_end":12981,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":12982,"byte_end":13027,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13028,"byte_end":13033,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13034,"byte_end":13041,"line_start":56,"line_end":56,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2036},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13486,"byte_end":13492,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::indexmap::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2046},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13611,"byte_end":13614,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"Pos","qualname":"::indexmap::Pos","value":"Pos {  }","parent":null,"children":[{"krate":0,"index":2047}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":191},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23496,"byte_end":23504,"line_start":376,"line_end":376,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::indexmap::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","sig":null,"attributes":[{"value":"/ Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21537,"byte_end":21630,"line_start":328,"line_end":328,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21631,"byte_end":21634,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ Note that you cannot use `IndexMap` directly, since it is generic around the hashing algorithm","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21635,"byte_end":21733,"line_start":330,"line_end":330,"column_start":1,"column_end":99}},{"value":"/ in use. Pick a concrete instantiation like [`FnvIndexMap`](./type.FnvIndexMap.html) instead","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21734,"byte_end":21829,"line_start":331,"line_end":331,"column_start":1,"column_end":96}},{"value":"/ or create your own.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21830,"byte_end":21853,"line_start":332,"line_end":332,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21854,"byte_end":21857,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ Note that the capacity of the `IndexMap` must be a power of 2.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21858,"byte_end":21924,"line_start":334,"line_end":334,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21925,"byte_end":21928,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21929,"byte_end":21943,"line_start":336,"line_end":336,"column_start":1,"column_end":15}},{"value":"/ Since `IndexMap` cannot be used directly, we're using its `FnvIndexMap` instantiation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21944,"byte_end":22033,"line_start":337,"line_end":337,"column_start":1,"column_end":90}},{"value":"/ for this example.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22034,"byte_end":22055,"line_start":338,"line_end":338,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22056,"byte_end":22059,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22060,"byte_end":22067,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22068,"byte_end":22098,"line_start":341,"line_end":341,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22099,"byte_end":22127,"line_start":342,"line_end":342,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22128,"byte_end":22131,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ // A hash map with a capacity of 16 key-value pairs allocated on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22132,"byte_end":22210,"line_start":344,"line_end":344,"column_start":1,"column_end":79}},{"value":"/ let mut book_reviews = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22211,"byte_end":22270,"line_start":345,"line_end":345,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22271,"byte_end":22274,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ // review some books.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22275,"byte_end":22300,"line_start":347,"line_end":347,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(\"Adventures of Huckleberry Finn\",    \"My favorite book.\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22301,"byte_end":22392,"line_start":348,"line_end":348,"column_start":1,"column_end":92}},{"value":"/ book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22393,"byte_end":22479,"line_start":349,"line_end":349,"column_start":1,"column_end":87}},{"value":"/ book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22480,"byte_end":22569,"line_start":350,"line_end":350,"column_start":1,"column_end":90}},{"value":"/ book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22570,"byte_end":22662,"line_start":351,"line_end":351,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22663,"byte_end":22666,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ // check for a specific one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22667,"byte_end":22699,"line_start":353,"line_end":353,"column_start":1,"column_end":33}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22700,"byte_end":22754,"line_start":354,"line_end":354,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22755,"byte_end":22827,"line_start":355,"line_end":355,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22828,"byte_end":22865,"line_start":356,"line_end":356,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22866,"byte_end":22871,"line_start":357,"line_end":357,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22872,"byte_end":22875,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22876,"byte_end":22949,"line_start":359,"line_end":359,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":22950,"byte_end":23011,"line_start":360,"line_end":360,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23012,"byte_end":23015,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ // look up the values associated with some keys.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23016,"byte_end":23068,"line_start":362,"line_end":362,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23069,"byte_end":23146,"line_start":363,"line_end":363,"column_start":1,"column_end":78}},{"value":"/ for book in &to_find {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23147,"byte_end":23173,"line_start":364,"line_end":364,"column_start":1,"column_end":27}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23174,"byte_end":23212,"line_start":365,"line_end":365,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23213,"byte_end":23274,"line_start":366,"line_end":366,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23275,"byte_end":23330,"line_start":367,"line_end":367,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23331,"byte_end":23340,"line_start":368,"line_end":368,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23341,"byte_end":23346,"line_start":369,"line_end":369,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23347,"byte_end":23350,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ // iterate over everything.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23351,"byte_end":23382,"line_start":371,"line_end":371,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23383,"byte_end":23424,"line_start":372,"line_end":372,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23425,"byte_end":23470,"line_start":373,"line_end":373,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23471,"byte_end":23476,"line_start":374,"line_end":374,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23477,"byte_end":23484,"line_start":375,"line_end":375,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24043,"byte_end":24046,"line_start":395,"line_end":395,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V, N, BuildHasherDefault<S>>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexMap`.","sig":null,"attributes":[{"value":"/ Creates an empty `IndexMap`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23918,"byte_end":23950,"line_start":392,"line_end":392,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23955,"byte_end":23958,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ **NOTE** This constructor will become a `const fn` in the future","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23963,"byte_end":24031,"line_start":394,"line_end":394,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24421,"byte_end":24429,"line_start":411,"line_end":411,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, N, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold\n","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24358,"byte_end":24409,"line_start":410,"line_end":410,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24913,"byte_end":24917,"line_start":430,"line_end":430,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, N, S>>::keys","value":"pub fn keys(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24481,"byte_end":24544,"line_start":415,"line_end":415,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24549,"byte_end":24552,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24557,"byte_end":24564,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24569,"byte_end":24599,"line_start":418,"line_end":418,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24604,"byte_end":24632,"line_start":419,"line_end":419,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24637,"byte_end":24640,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24645,"byte_end":24695,"line_start":421,"line_end":421,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24700,"byte_end":24732,"line_start":422,"line_end":422,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24737,"byte_end":24769,"line_start":423,"line_end":423,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24774,"byte_end":24806,"line_start":424,"line_end":424,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24811,"byte_end":24814,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24819,"byte_end":24846,"line_start":426,"line_end":426,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24851,"byte_end":24879,"line_start":427,"line_end":427,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24884,"byte_end":24889,"line_start":428,"line_end":428,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24894,"byte_end":24901,"line_start":429,"line_end":429,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25461,"byte_end":25467,"line_start":449,"line_end":449,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, N, S>>::values","value":"pub fn values(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25025,"byte_end":25090,"line_start":434,"line_end":434,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25095,"byte_end":25098,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25103,"byte_end":25110,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25115,"byte_end":25145,"line_start":437,"line_end":437,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25150,"byte_end":25178,"line_start":438,"line_end":438,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25183,"byte_end":25186,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25191,"byte_end":25241,"line_start":440,"line_end":440,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25246,"byte_end":25278,"line_start":441,"line_end":441,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25283,"byte_end":25315,"line_start":442,"line_end":442,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25320,"byte_end":25352,"line_start":443,"line_end":443,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25357,"byte_end":25360,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25365,"byte_end":25394,"line_start":445,"line_end":445,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25399,"byte_end":25427,"line_start":446,"line_end":446,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25432,"byte_end":25437,"line_start":447,"line_end":447,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25442,"byte_end":25449,"line_start":448,"line_end":448,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26119,"byte_end":26129,"line_start":472,"line_end":472,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, N, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the the values of the map, in their order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25577,"byte_end":25668,"line_start":453,"line_end":453,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25673,"byte_end":25676,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25681,"byte_end":25688,"line_start":455,"line_end":455,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25693,"byte_end":25723,"line_start":456,"line_end":456,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25728,"byte_end":25756,"line_start":457,"line_end":457,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25761,"byte_end":25764,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25769,"byte_end":25819,"line_start":459,"line_end":459,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25824,"byte_end":25856,"line_start":460,"line_end":460,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25861,"byte_end":25893,"line_start":461,"line_end":461,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25898,"byte_end":25930,"line_start":462,"line_end":462,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25935,"byte_end":25938,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25943,"byte_end":25976,"line_start":464,"line_end":464,"column_start":5,"column_end":38}},{"value":"/     *val += 10;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":25981,"byte_end":26000,"line_start":465,"line_end":465,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26005,"byte_end":26010,"line_start":466,"line_end":466,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26015,"byte_end":26018,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26023,"byte_end":26052,"line_start":468,"line_end":468,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26057,"byte_end":26085,"line_start":469,"line_end":469,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26090,"byte_end":26095,"line_start":470,"line_end":470,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26100,"byte_end":26107,"line_start":471,"line_end":471,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26723,"byte_end":26727,"line_start":491,"line_end":491,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, N, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26255,"byte_end":26329,"line_start":476,"line_end":476,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26334,"byte_end":26337,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26342,"byte_end":26349,"line_start":478,"line_end":478,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26354,"byte_end":26384,"line_start":479,"line_end":479,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26389,"byte_end":26417,"line_start":480,"line_end":480,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26422,"byte_end":26425,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26430,"byte_end":26480,"line_start":482,"line_end":482,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26485,"byte_end":26517,"line_start":483,"line_end":483,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26522,"byte_end":26554,"line_start":484,"line_end":484,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26559,"byte_end":26591,"line_start":485,"line_end":485,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26596,"byte_end":26599,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26604,"byte_end":26638,"line_start":487,"line_end":487,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26643,"byte_end":26689,"line_start":488,"line_end":488,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26694,"byte_end":26699,"line_start":489,"line_end":489,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26704,"byte_end":26711,"line_start":490,"line_end":490,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27378,"byte_end":27386,"line_start":516,"line_end":516,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, N, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26835,"byte_end":26909,"line_start":497,"line_end":497,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26914,"byte_end":26917,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26922,"byte_end":26929,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26934,"byte_end":26964,"line_start":500,"line_end":500,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":26969,"byte_end":26997,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27002,"byte_end":27005,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27010,"byte_end":27060,"line_start":503,"line_end":503,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27065,"byte_end":27097,"line_start":504,"line_end":504,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27102,"byte_end":27134,"line_start":505,"line_end":505,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27139,"byte_end":27171,"line_start":506,"line_end":506,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27176,"byte_end":27179,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27184,"byte_end":27220,"line_start":508,"line_end":508,"column_start":5,"column_end":41}},{"value":"/     *val = 2;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27225,"byte_end":27242,"line_start":509,"line_end":509,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27247,"byte_end":27252,"line_start":510,"line_end":510,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27257,"byte_end":27260,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27265,"byte_end":27293,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27298,"byte_end":27344,"line_start":513,"line_end":513,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27349,"byte_end":27354,"line_start":514,"line_end":514,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27359,"byte_end":27366,"line_start":515,"line_end":515,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27949,"byte_end":27952,"line_start":538,"line_end":538,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, N, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27582,"byte_end":27634,"line_start":525,"line_end":525,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27639,"byte_end":27642,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27647,"byte_end":27677,"line_start":527,"line_end":527,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27682,"byte_end":27685,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27690,"byte_end":27697,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27702,"byte_end":27732,"line_start":530,"line_end":530,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27737,"byte_end":27765,"line_start":531,"line_end":531,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27770,"byte_end":27773,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27778,"byte_end":27826,"line_start":533,"line_end":533,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27831,"byte_end":27858,"line_start":534,"line_end":534,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27863,"byte_end":27893,"line_start":535,"line_end":535,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27898,"byte_end":27925,"line_start":536,"line_end":536,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":27930,"byte_end":27937,"line_start":537,"line_end":537,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28368,"byte_end":28376,"line_start":555,"line_end":555,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, N, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28014,"byte_end":28063,"line_start":542,"line_end":542,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28068,"byte_end":28071,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28076,"byte_end":28106,"line_start":544,"line_end":544,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28111,"byte_end":28114,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28119,"byte_end":28126,"line_start":546,"line_end":546,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28131,"byte_end":28161,"line_start":547,"line_end":547,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28166,"byte_end":28194,"line_start":548,"line_end":548,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28199,"byte_end":28202,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28207,"byte_end":28255,"line_start":550,"line_end":550,"column_start":5,"column_end":53}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28260,"byte_end":28286,"line_start":551,"line_end":551,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28291,"byte_end":28312,"line_start":552,"line_end":552,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28317,"byte_end":28344,"line_start":553,"line_end":553,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28349,"byte_end":28356,"line_start":554,"line_end":554,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28794,"byte_end":28799,"line_start":572,"line_end":572,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, N, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28429,"byte_end":28502,"line_start":559,"line_end":559,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28507,"byte_end":28510,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28515,"byte_end":28545,"line_start":561,"line_end":561,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28550,"byte_end":28553,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28558,"byte_end":28565,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28570,"byte_end":28600,"line_start":564,"line_end":564,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28605,"byte_end":28633,"line_start":565,"line_end":565,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28638,"byte_end":28641,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28646,"byte_end":28694,"line_start":567,"line_end":567,"column_start":5,"column_end":53}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28699,"byte_end":28720,"line_start":568,"line_end":568,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28725,"byte_end":28739,"line_start":569,"line_end":569,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28744,"byte_end":28770,"line_start":570,"line_end":570,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28775,"byte_end":28782,"line_start":571,"line_end":571,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29513,"byte_end":29516,"line_start":595,"line_end":595,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, N, S>>::get","value":"pub fn get<Q>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: ?Sized + Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":28944,"byte_end":29006,"line_start":579,"line_end":579,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29011,"byte_end":29014,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29019,"byte_end":29114,"line_start":581,"line_end":581,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29119,"byte_end":29164,"line_start":582,"line_end":582,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29169,"byte_end":29172,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29177,"byte_end":29217,"line_start":584,"line_end":584,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29222,"byte_end":29225,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29230,"byte_end":29237,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29242,"byte_end":29272,"line_start":587,"line_end":587,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29277,"byte_end":29305,"line_start":588,"line_end":588,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29310,"byte_end":29313,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29318,"byte_end":29368,"line_start":590,"line_end":590,"column_start":5,"column_end":55}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29373,"byte_end":29405,"line_start":591,"line_end":591,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29410,"byte_end":29450,"line_start":592,"line_end":592,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29455,"byte_end":29489,"line_start":593,"line_end":593,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29494,"byte_end":29501,"line_start":594,"line_end":594,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30354,"byte_end":30366,"line_start":622,"line_end":622,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, N, S>>::contains_key","value":"pub fn contains_key<Q>(&Self, &Q) -> bool where K: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29741,"byte_end":29808,"line_start":604,"line_end":604,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29813,"byte_end":29816,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29821,"byte_end":29916,"line_start":606,"line_end":606,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29921,"byte_end":29966,"line_start":607,"line_end":607,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29971,"byte_end":29974,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":29979,"byte_end":30019,"line_start":609,"line_end":609,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30024,"byte_end":30027,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30032,"byte_end":30046,"line_start":611,"line_end":611,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30051,"byte_end":30054,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30059,"byte_end":30066,"line_start":613,"line_end":613,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30071,"byte_end":30101,"line_start":614,"line_end":614,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30106,"byte_end":30134,"line_start":615,"line_end":615,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30139,"byte_end":30142,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30147,"byte_end":30196,"line_start":617,"line_end":617,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30201,"byte_end":30233,"line_start":618,"line_end":618,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30238,"byte_end":30281,"line_start":619,"line_end":619,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30286,"byte_end":30330,"line_start":620,"line_end":620,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30335,"byte_end":30342,"line_start":621,"line_end":621,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31135,"byte_end":31142,"line_start":650,"line_end":650,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, N, S>>::get_mut","value":"pub fn get_mut<'v, Q>(&'v mut Self, &Q) -> Option<&'v mut V> where\nK: Borrow<Q>, Q: ?Sized + Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30507,"byte_end":30577,"line_start":630,"line_end":630,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30582,"byte_end":30585,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30590,"byte_end":30685,"line_start":632,"line_end":632,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30690,"byte_end":30735,"line_start":633,"line_end":633,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30740,"byte_end":30743,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30748,"byte_end":30788,"line_start":635,"line_end":635,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30793,"byte_end":30796,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30801,"byte_end":30815,"line_start":637,"line_end":637,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30820,"byte_end":30823,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30828,"byte_end":30835,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30840,"byte_end":30870,"line_start":640,"line_end":640,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30875,"byte_end":30903,"line_start":641,"line_end":641,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30908,"byte_end":30911,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30916,"byte_end":30965,"line_start":643,"line_end":643,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":30970,"byte_end":31002,"line_start":644,"line_end":644,"column_start":5,"column_end":37}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31007,"byte_end":31045,"line_start":645,"line_end":645,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31050,"byte_end":31067,"line_start":646,"line_end":646,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31072,"byte_end":31077,"line_start":647,"line_end":647,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31082,"byte_end":31111,"line_start":648,"line_end":648,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31116,"byte_end":31123,"line_start":649,"line_end":649,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32487,"byte_end":32493,"line_start":690,"line_end":690,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, N, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31452,"byte_end":31494,"line_start":662,"line_end":662,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31499,"byte_end":31502,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and retains in its place in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31507,"byte_end":31602,"line_start":664,"line_end":664,"column_start":5,"column_end":100}},{"value":"/ the order, its corresponding value is updated with `value` and the older value is returned","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31607,"byte_end":31701,"line_start":665,"line_end":665,"column_start":5,"column_end":99}},{"value":"/ inside `Some(_)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31706,"byte_end":31727,"line_start":666,"line_end":666,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31732,"byte_end":31735,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is inserted, last in order,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31740,"byte_end":31835,"line_start":668,"line_end":668,"column_start":5,"column_end":100}},{"value":"/ and `None` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31840,"byte_end":31867,"line_start":669,"line_end":669,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31872,"byte_end":31875,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31880,"byte_end":31920,"line_start":671,"line_end":671,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31925,"byte_end":31928,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ See also entry if you you want to insert or modify or if you need to get the index of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":31933,"byte_end":32026,"line_start":673,"line_end":673,"column_start":5,"column_end":98}},{"value":"/ corresponding key-value pair.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32031,"byte_end":32064,"line_start":674,"line_end":674,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32069,"byte_end":32072,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32077,"byte_end":32091,"line_start":676,"line_end":676,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32096,"byte_end":32099,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32104,"byte_end":32111,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32116,"byte_end":32146,"line_start":679,"line_end":679,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32151,"byte_end":32179,"line_start":680,"line_end":680,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32184,"byte_end":32187,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32192,"byte_end":32241,"line_start":682,"line_end":682,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(map.insert(37, \"a\"), Ok(None));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32246,"byte_end":32292,"line_start":683,"line_end":683,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32297,"byte_end":32335,"line_start":684,"line_end":684,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32340,"byte_end":32343,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32348,"byte_end":32372,"line_start":686,"line_end":686,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Ok(Some(\"b\")));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32377,"byte_end":32428,"line_start":687,"line_end":687,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32433,"byte_end":32463,"line_start":688,"line_end":688,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":32468,"byte_end":32475,"line_start":689,"line_end":689,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33456,"byte_end":33462,"line_start":720,"line_end":720,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, N, S>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>, Q: ?Sized +\nHash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","sig":null,"attributes":[{"value":"/ Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33008,"byte_end":33076,"line_start":705,"line_end":705,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33081,"byte_end":33084,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33089,"byte_end":33129,"line_start":707,"line_end":707,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33134,"byte_end":33137,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33142,"byte_end":33156,"line_start":709,"line_end":709,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33161,"byte_end":33164,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33169,"byte_end":33176,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33181,"byte_end":33211,"line_start":712,"line_end":712,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33216,"byte_end":33244,"line_start":713,"line_end":713,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33249,"byte_end":33252,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33257,"byte_end":33306,"line_start":715,"line_end":715,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33311,"byte_end":33343,"line_start":716,"line_end":716,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33348,"byte_end":33390,"line_start":717,"line_end":717,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33395,"byte_end":33432,"line_start":718,"line_end":718,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33437,"byte_end":33444,"line_start":719,"line_end":719,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":34003,"byte_end":34014,"line_start":736,"line_end":736,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, N, S>>::swap_remove","value":"pub fn swap_remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: ?Sized + Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return its value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33609,"byte_end":33680,"line_start":728,"line_end":728,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33685,"byte_end":33688,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the last element of the map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33693,"byte_end":33789,"line_start":730,"line_end":730,"column_start":5,"column_end":101}},{"value":"/ and popping it off. **This perturbs the postion of what used to be the last element!**","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33794,"byte_end":33884,"line_start":731,"line_end":731,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33889,"byte_end":33892,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33897,"byte_end":33938,"line_start":733,"line_end":733,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33943,"byte_end":33946,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":33951,"byte_end":33991,"line_start":735,"line_end":735,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":332},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":38809,"byte_end":38813,"line_start":933,"line_end":933,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexmap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":336}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":349},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":39226,"byte_end":39233,"line_start":953,"line_end":953,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::indexmap::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":353}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":411},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42376,"byte_end":42387,"line_start":41,"line_end":41,"column_start":10,"column_end":21},"name":"FnvIndexSet","qualname":"::indexset::FnvIndexSet","value":"IndexSet<T, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" A [`heapless::IndexSet`](./struct.IndexSet.html) using the\n default FNV hasher.\n A list of all Methods and Traits available for `FnvIndexSet` can be found in\n the [`heapless::IndexSet`](./struct.IndexSet.html) documentation.","sig":null,"attributes":[{"value":"/ A [`heapless::IndexSet`](./struct.IndexSet.html) using the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41338,"byte_end":41400,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ default FNV hasher.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41401,"byte_end":41424,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"/ A list of all Methods and Traits available for `FnvIndexSet` can be found in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41425,"byte_end":41505,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ the [`heapless::IndexSet`](./struct.IndexSet.html) documentation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41506,"byte_end":41575,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41576,"byte_end":41579,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41580,"byte_end":41594,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41595,"byte_end":41602,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41603,"byte_end":41633,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41634,"byte_end":41662,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41663,"byte_end":41666,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // A hash set with a capacity of 16 elements allocated on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41667,"byte_end":41738,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/ let mut books = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41739,"byte_end":41788,"line_start":19,"line_end":19,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41789,"byte_end":41792,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41793,"byte_end":41815,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41816,"byte_end":41866,"line_start":22,"line_end":22,"column_start":1,"column_end":51}},{"value":"/ books.insert(\"To Kill a Mockingbird\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41867,"byte_end":41918,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ books.insert(\"The Odyssey\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41919,"byte_end":41960,"line_start":24,"line_end":24,"column_start":1,"column_end":42}},{"value":"/ books.insert(\"The Great Gatsby\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":41961,"byte_end":42007,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42008,"byte_end":42011,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42012,"byte_end":42044,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42045,"byte_end":42092,"line_start":28,"line_end":28,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42093,"byte_end":42165,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42166,"byte_end":42196,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42197,"byte_end":42202,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42203,"byte_end":42206,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42207,"byte_end":42228,"line_start":33,"line_end":33,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42229,"byte_end":42261,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42262,"byte_end":42265,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42266,"byte_end":42297,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42298,"byte_end":42322,"line_start":37,"line_end":37,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42323,"byte_end":42352,"line_start":38,"line_end":38,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42353,"byte_end":42358,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42359,"byte_end":42366,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":414},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43751,"byte_end":43759,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::indexset::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":418}],"decl_id":null,"docs":" Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html).","sig":null,"attributes":[{"value":"/ Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42444,"byte_end":42538,"line_start":43,"line_end":43,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42539,"byte_end":42542,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Note that you cannot use `IndexSet` directly, since it is generic around the hashing algorithm","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42543,"byte_end":42641,"line_start":45,"line_end":45,"column_start":1,"column_end":99}},{"value":"/ in use. Pick a concrete instantiation like [`FnvIndexSet`](./type.FnvIndexSet.html) instead","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42642,"byte_end":42737,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/ or create your own.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42738,"byte_end":42761,"line_start":47,"line_end":47,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42762,"byte_end":42765,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Note that the capacity of the `IndexSet` must be a power of 2.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42766,"byte_end":42832,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42833,"byte_end":42836,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42837,"byte_end":42851,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/ Since `IndexSet` cannot be used directly, we're using its `FnvIndexSet` instantiation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42852,"byte_end":42941,"line_start":52,"line_end":52,"column_start":1,"column_end":90}},{"value":"/ for this example.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42942,"byte_end":42963,"line_start":53,"line_end":53,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42964,"byte_end":42967,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42968,"byte_end":42975,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":42976,"byte_end":43006,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43007,"byte_end":43035,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43036,"byte_end":43039,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // A hash set with a capacity of 16 elements allocated on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43040,"byte_end":43111,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"/ let mut books = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43112,"byte_end":43161,"line_start":60,"line_end":60,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43162,"byte_end":43165,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43166,"byte_end":43188,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43189,"byte_end":43239,"line_start":63,"line_end":63,"column_start":1,"column_end":51}},{"value":"/ books.insert(\"To Kill a Mockingbird\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43240,"byte_end":43291,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/ books.insert(\"The Odyssey\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43292,"byte_end":43333,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ books.insert(\"The Great Gatsby\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43334,"byte_end":43380,"line_start":66,"line_end":66,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43381,"byte_end":43384,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43385,"byte_end":43417,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43418,"byte_end":43465,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43466,"byte_end":43538,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43539,"byte_end":43569,"line_start":71,"line_end":71,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43570,"byte_end":43575,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43576,"byte_end":43579,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43580,"byte_end":43601,"line_start":74,"line_end":74,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43602,"byte_end":43634,"line_start":75,"line_end":75,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43635,"byte_end":43638,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43639,"byte_end":43670,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43671,"byte_end":43695,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43696,"byte_end":43725,"line_start":79,"line_end":79,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43726,"byte_end":43731,"line_start":80,"line_end":80,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43732,"byte_end":43739,"line_start":81,"line_end":81,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44117,"byte_end":44120,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T, N, BuildHasherDefault<S>>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexSet`\n","sig":null,"attributes":[{"value":"/ Creates an empty `IndexSet`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44074,"byte_end":44105,"line_start":96,"line_end":96,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44637,"byte_end":44645,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, N, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44349,"byte_end":44400,"line_start":110,"line_end":110,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44405,"byte_end":44408,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44413,"byte_end":44427,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44432,"byte_end":44435,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44440,"byte_end":44447,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44452,"byte_end":44482,"line_start":115,"line_end":115,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44487,"byte_end":44515,"line_start":116,"line_end":116,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44520,"byte_end":44523,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let set = FnvIndexSet::<i32, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44528,"byte_end":44573,"line_start":118,"line_end":118,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.capacity(), 16);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44578,"byte_end":44613,"line_start":119,"line_end":119,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44618,"byte_end":44625,"line_start":120,"line_end":120,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45159,"byte_end":45163,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, N, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44703,"byte_end":44768,"line_start":125,"line_end":125,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44773,"byte_end":44776,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44781,"byte_end":44795,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44800,"byte_end":44803,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44808,"byte_end":44815,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44820,"byte_end":44850,"line_start":130,"line_end":130,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44855,"byte_end":44883,"line_start":131,"line_end":131,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44888,"byte_end":44891,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44896,"byte_end":44943,"line_start":133,"line_end":133,"column_start":5,"column_end":52}},{"value":"/ set.insert(\"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44948,"byte_end":44977,"line_start":134,"line_end":134,"column_start":5,"column_end":34}},{"value":"/ set.insert(\"b\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44982,"byte_end":45011,"line_start":135,"line_end":135,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45016,"byte_end":45019,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45024,"byte_end":45064,"line_start":137,"line_end":137,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45069,"byte_end":45094,"line_start":138,"line_end":138,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45099,"byte_end":45125,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45130,"byte_end":45135,"line_start":140,"line_end":140,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45140,"byte_end":45147,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46198,"byte_end":46208,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, N, S>>::difference","value":"pub fn difference<'a, N2, S2>(&'a Self, &'a IndexSet<T, N2, S2>) -> Difference\nwhere N2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>,\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference, i.e. the values that are in `self` but not in\n `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference, i.e. the values that are in `self` but not in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45259,"byte_end":45355,"line_start":148,"line_end":148,"column_start":5,"column_end":101}},{"value":"/ `other`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45360,"byte_end":45372,"line_start":149,"line_end":149,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45377,"byte_end":45380,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45385,"byte_end":45399,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45404,"byte_end":45407,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45412,"byte_end":45419,"line_start":153,"line_end":153,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45424,"byte_end":45454,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45459,"byte_end":45487,"line_start":155,"line_end":155,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45492,"byte_end":45495,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45500,"byte_end":45573,"line_start":157,"line_end":157,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45578,"byte_end":45654,"line_start":158,"line_end":158,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45659,"byte_end":45662,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45667,"byte_end":45697,"line_start":160,"line_end":160,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45702,"byte_end":45733,"line_start":161,"line_end":161,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45738,"byte_end":45775,"line_start":162,"line_end":162,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45780,"byte_end":45785,"line_start":163,"line_end":163,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45790,"byte_end":45793,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ let diff: FnvIndexSet<_, U16> = a.difference(&b).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45798,"byte_end":45861,"line_start":165,"line_end":165,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(diff, [1].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45866,"byte_end":45932,"line_start":166,"line_end":166,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45937,"byte_end":45940,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45945,"byte_end":45990,"line_start":168,"line_end":168,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":45995,"byte_end":46035,"line_start":169,"line_end":169,"column_start":5,"column_end":45}},{"value":"/ let diff: FnvIndexSet<_, U16> = b.difference(&a).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46040,"byte_end":46103,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(diff, [4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46108,"byte_end":46174,"line_start":171,"line_end":171,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46179,"byte_end":46186,"line_start":172,"line_end":172,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47376,"byte_end":47396,"line_start":210,"line_end":210,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, N, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, N2, S2>(&'a Self, &'a IndexSet<T, N2, S2>)\n-> /*impl Trait*/ where N2: ArrayLength<Bucket<T, ()>> +\nArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference, i.e. the values that are in `self`\n or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference, i.e. the values that are in `self`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46515,"byte_end":46610,"line_start":187,"line_end":187,"column_start":5,"column_end":100}},{"value":"/ or in `other` but not in both.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46615,"byte_end":46649,"line_start":188,"line_end":188,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46654,"byte_end":46657,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46662,"byte_end":46676,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46681,"byte_end":46684,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46689,"byte_end":46696,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46701,"byte_end":46731,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46736,"byte_end":46764,"line_start":194,"line_end":194,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46769,"byte_end":46772,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46777,"byte_end":46850,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46855,"byte_end":46931,"line_start":197,"line_end":197,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46936,"byte_end":46939,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in that order order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46944,"byte_end":46982,"line_start":199,"line_end":199,"column_start":5,"column_end":43}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":46987,"byte_end":47028,"line_start":200,"line_end":200,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47033,"byte_end":47059,"line_start":201,"line_end":201,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47064,"byte_end":47069,"line_start":202,"line_end":202,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47074,"byte_end":47077,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ let diff1: FnvIndexSet<_, U16> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47082,"byte_end":47156,"line_start":204,"line_end":204,"column_start":5,"column_end":79}},{"value":"/ let diff2: FnvIndexSet<_, U16> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47161,"byte_end":47235,"line_start":205,"line_end":205,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47240,"byte_end":47243,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47248,"byte_end":47277,"line_start":207,"line_end":207,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47282,"byte_end":47352,"line_start":208,"line_end":208,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47357,"byte_end":47364,"line_start":209,"line_end":209,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48396,"byte_end":48408,"line_start":241,"line_end":241,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, N, S>>::intersection","value":"pub fn intersection<'a, N2, S2>(&'a Self, &'a IndexSet<T, N2, S2>)\n-> Intersection where N2: ArrayLength<Bucket<T, ()>> +\nArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection, i.e. the values that are both in `self` and\n `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection, i.e. the values that are both in `self` and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47685,"byte_end":47781,"line_start":221,"line_end":221,"column_start":5,"column_end":101}},{"value":"/ `other`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47786,"byte_end":47798,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47803,"byte_end":47806,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47811,"byte_end":47825,"line_start":224,"line_end":224,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47830,"byte_end":47833,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47838,"byte_end":47845,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47850,"byte_end":47880,"line_start":227,"line_end":227,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47885,"byte_end":47913,"line_start":228,"line_end":228,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47918,"byte_end":47921,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":47926,"byte_end":47999,"line_start":230,"line_end":230,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48004,"byte_end":48080,"line_start":231,"line_end":231,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48085,"byte_end":48088,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in that order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48093,"byte_end":48125,"line_start":233,"line_end":233,"column_start":5,"column_end":37}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48130,"byte_end":48163,"line_start":234,"line_end":234,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48168,"byte_end":48194,"line_start":235,"line_end":235,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48199,"byte_end":48204,"line_start":236,"line_end":236,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48209,"byte_end":48212,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let intersection: FnvIndexSet<_, U16> = a.intersection(&b).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48217,"byte_end":48290,"line_start":238,"line_end":238,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48295,"byte_end":48372,"line_start":239,"line_end":239,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48377,"byte_end":48384,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49416,"byte_end":49421,"line_start":275,"line_end":275,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, N, S>>::union","value":"pub fn union<'a, N2, S2>(&'a Self, &'a IndexSet<T, N2, S2>) -> /*impl Trait*/\nwhere N2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>,\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union, i.e. all the values in `self` or `other`, without\n duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union, i.e. all the values in `self` or `other`, without","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48719,"byte_end":48814,"line_start":255,"line_end":255,"column_start":5,"column_end":100}},{"value":"/ duplicates.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48819,"byte_end":48834,"line_start":256,"line_end":256,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48839,"byte_end":48842,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48847,"byte_end":48861,"line_start":258,"line_end":258,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48866,"byte_end":48869,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48874,"byte_end":48881,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48886,"byte_end":48916,"line_start":261,"line_end":261,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48921,"byte_end":48949,"line_start":262,"line_end":262,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48954,"byte_end":48957,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":48962,"byte_end":49035,"line_start":264,"line_end":264,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49040,"byte_end":49116,"line_start":265,"line_end":265,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49121,"byte_end":49124,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in that order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49129,"byte_end":49167,"line_start":267,"line_end":267,"column_start":5,"column_end":43}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49172,"byte_end":49198,"line_start":268,"line_end":268,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49203,"byte_end":49229,"line_start":269,"line_end":269,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49234,"byte_end":49239,"line_start":270,"line_end":270,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49244,"byte_end":49247,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ let union: FnvIndexSet<_, U16> = a.union(&b).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49252,"byte_end":49311,"line_start":272,"line_end":272,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49316,"byte_end":49392,"line_start":273,"line_end":273,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49397,"byte_end":49404,"line_start":274,"line_end":274,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50047,"byte_end":50050,"line_start":299,"line_end":299,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, N, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49699,"byte_end":49745,"line_start":286,"line_end":286,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49750,"byte_end":49753,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49758,"byte_end":49772,"line_start":288,"line_end":288,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49777,"byte_end":49780,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49785,"byte_end":49792,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49797,"byte_end":49827,"line_start":291,"line_end":291,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49832,"byte_end":49860,"line_start":292,"line_end":292,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49865,"byte_end":49868,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49873,"byte_end":49929,"line_start":294,"line_end":294,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49934,"byte_end":49961,"line_start":295,"line_end":295,"column_start":5,"column_end":32}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49966,"byte_end":49991,"line_start":296,"line_end":296,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":49996,"byte_end":50023,"line_start":297,"line_end":297,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50028,"byte_end":50035,"line_start":298,"line_end":298,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50455,"byte_end":50463,"line_start":316,"line_end":316,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, N, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50103,"byte_end":50154,"line_start":303,"line_end":303,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50159,"byte_end":50162,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50167,"byte_end":50181,"line_start":305,"line_end":305,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50186,"byte_end":50189,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50194,"byte_end":50201,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50206,"byte_end":50236,"line_start":308,"line_end":308,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50241,"byte_end":50269,"line_start":309,"line_end":309,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50274,"byte_end":50277,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50282,"byte_end":50338,"line_start":311,"line_end":311,"column_start":5,"column_end":61}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50343,"byte_end":50369,"line_start":312,"line_end":312,"column_start":5,"column_end":31}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50374,"byte_end":50399,"line_start":313,"line_end":313,"column_start":5,"column_end":30}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50404,"byte_end":50431,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50436,"byte_end":50443,"line_start":315,"line_end":315,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50848,"byte_end":50853,"line_start":333,"line_end":333,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, N, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50520,"byte_end":50560,"line_start":320,"line_end":320,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50565,"byte_end":50568,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50573,"byte_end":50587,"line_start":322,"line_end":322,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50592,"byte_end":50595,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50600,"byte_end":50607,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50612,"byte_end":50642,"line_start":325,"line_end":325,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50647,"byte_end":50675,"line_start":326,"line_end":326,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50680,"byte_end":50683,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50688,"byte_end":50744,"line_start":328,"line_end":328,"column_start":5,"column_end":61}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50749,"byte_end":50774,"line_start":329,"line_end":329,"column_start":5,"column_end":30}},{"value":"/ v.clear();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50779,"byte_end":50793,"line_start":330,"line_end":330,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50798,"byte_end":50824,"line_start":331,"line_end":331,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50829,"byte_end":50836,"line_start":332,"line_end":332,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51424,"byte_end":51432,"line_start":352,"line_end":352,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, N, S>>::contains","value":"pub fn contains<Q>(&Self, &Q) -> bool where T: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50903,"byte_end":50950,"line_start":337,"line_end":337,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50955,"byte_end":50958,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but `Hash` and `Eq` on the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":50963,"byte_end":51053,"line_start":339,"line_end":339,"column_start":5,"column_end":95}},{"value":"/ borrowed form must match those for the value type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51058,"byte_end":51112,"line_start":340,"line_end":340,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51117,"byte_end":51120,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51125,"byte_end":51139,"line_start":342,"line_end":342,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51144,"byte_end":51147,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51152,"byte_end":51159,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51164,"byte_end":51194,"line_start":345,"line_end":345,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51199,"byte_end":51227,"line_start":346,"line_end":346,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51232,"byte_end":51235,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ let set: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51240,"byte_end":51311,"line_start":348,"line_end":348,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51316,"byte_end":51355,"line_start":349,"line_end":349,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51360,"byte_end":51400,"line_start":350,"line_end":350,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51405,"byte_end":51412,"line_start":351,"line_end":351,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52188,"byte_end":52199,"line_start":378,"line_end":378,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, N, S>>::is_disjoint","value":"pub fn is_disjoint<N2, S2>(&Self, &IndexSet<T, N2, S2>) -> bool where\nN2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`. This is equivalent to\n checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`. This is equivalent to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51579,"byte_end":51669,"line_start":360,"line_end":360,"column_start":5,"column_end":95}},{"value":"/ checking for an empty intersection.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51674,"byte_end":51713,"line_start":361,"line_end":361,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51718,"byte_end":51721,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51726,"byte_end":51740,"line_start":363,"line_end":363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51745,"byte_end":51748,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51753,"byte_end":51760,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51765,"byte_end":51795,"line_start":366,"line_end":366,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51800,"byte_end":51828,"line_start":367,"line_end":367,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51833,"byte_end":51836,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ let a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51841,"byte_end":51910,"line_start":369,"line_end":369,"column_start":5,"column_end":74}},{"value":"/ let mut b = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51915,"byte_end":51960,"line_start":370,"line_end":370,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51965,"byte_end":51968,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":51973,"byte_end":52013,"line_start":372,"line_end":372,"column_start":5,"column_end":45}},{"value":"/ b.insert(4).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52018,"byte_end":52043,"line_start":373,"line_end":373,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52048,"byte_end":52088,"line_start":374,"line_end":374,"column_start":5,"column_end":45}},{"value":"/ b.insert(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52093,"byte_end":52118,"line_start":375,"line_end":375,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52123,"byte_end":52164,"line_start":376,"line_end":376,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52169,"byte_end":52176,"line_start":377,"line_end":377,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53026,"byte_end":53035,"line_start":404,"line_end":404,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, N, S>>::is_subset","value":"pub fn is_subset<N2, S2>(&Self, &IndexSet<T, N2, S2>) -> bool where\nN2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another, i.e. `other` contains at least all the\n values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another, i.e. `other` contains at least all the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52419,"byte_end":52511,"line_start":386,"line_end":386,"column_start":5,"column_end":97}},{"value":"/ values in `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52516,"byte_end":52537,"line_start":387,"line_end":387,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52542,"byte_end":52545,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52550,"byte_end":52564,"line_start":389,"line_end":389,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52569,"byte_end":52572,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52577,"byte_end":52584,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52589,"byte_end":52619,"line_start":392,"line_end":392,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52624,"byte_end":52652,"line_start":393,"line_end":393,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52657,"byte_end":52660,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let sup: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52665,"byte_end":52736,"line_start":395,"line_end":395,"column_start":5,"column_end":76}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52741,"byte_end":52788,"line_start":396,"line_end":396,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52793,"byte_end":52796,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52801,"byte_end":52843,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52848,"byte_end":52875,"line_start":399,"line_end":399,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52880,"byte_end":52922,"line_start":400,"line_end":400,"column_start":5,"column_end":47}},{"value":"/ set.insert(4).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52927,"byte_end":52954,"line_start":401,"line_end":401,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":52959,"byte_end":53002,"line_start":402,"line_end":402,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53007,"byte_end":53014,"line_start":403,"line_end":403,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53913,"byte_end":53924,"line_start":433,"line_end":433,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, N, S>>::is_superset","value":"pub fn is_superset<N2, S2>(&Self, &IndexSet<T, N2, S2>) -> bool where\nN2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":"\n # Examples","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53377,"byte_end":53380,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53385,"byte_end":53399,"line_start":415,"line_end":415,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53404,"byte_end":53407,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53412,"byte_end":53419,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53424,"byte_end":53454,"line_start":418,"line_end":418,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53459,"byte_end":53487,"line_start":419,"line_end":419,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53492,"byte_end":53495,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ let sub: FnvIndexSet<_, U16> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53500,"byte_end":53568,"line_start":421,"line_end":421,"column_start":5,"column_end":73}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53573,"byte_end":53620,"line_start":422,"line_end":422,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53625,"byte_end":53628,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53633,"byte_end":53678,"line_start":424,"line_end":424,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53683,"byte_end":53686,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ set.insert(0).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53691,"byte_end":53718,"line_start":426,"line_end":426,"column_start":5,"column_end":32}},{"value":"/ set.insert(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53723,"byte_end":53750,"line_start":427,"line_end":427,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53755,"byte_end":53800,"line_start":428,"line_end":428,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53805,"byte_end":53808,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53813,"byte_end":53840,"line_start":430,"line_end":430,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53845,"byte_end":53889,"line_start":431,"line_end":431,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":53894,"byte_end":53901,"line_start":432,"line_end":432,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54653,"byte_end":54659,"line_start":459,"line_end":459,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, N, S>>::insert","value":"pub fn insert(&mut Self, T) -> Result<bool, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54126,"byte_end":54154,"line_start":441,"line_end":441,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54159,"byte_end":54162,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54167,"byte_end":54234,"line_start":443,"line_end":443,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54239,"byte_end":54242,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54247,"byte_end":54311,"line_start":445,"line_end":445,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54316,"byte_end":54319,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54324,"byte_end":54338,"line_start":447,"line_end":447,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54343,"byte_end":54346,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54351,"byte_end":54358,"line_start":449,"line_end":449,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54363,"byte_end":54393,"line_start":450,"line_end":450,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54398,"byte_end":54426,"line_start":451,"line_end":451,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54431,"byte_end":54434,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54439,"byte_end":54486,"line_start":453,"line_end":453,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54491,"byte_end":54494,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2).unwrap(), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54499,"byte_end":54544,"line_start":455,"line_end":455,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.insert(2).unwrap(), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54549,"byte_end":54595,"line_start":456,"line_end":456,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54600,"byte_end":54629,"line_start":457,"line_end":457,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54634,"byte_end":54641,"line_start":458,"line_end":458,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55403,"byte_end":55409,"line_start":483,"line_end":483,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, N, S>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns `true` if the value was present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns `true` if the value was present in the set.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54832,"byte_end":54917,"line_start":466,"line_end":466,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54922,"byte_end":54925,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but `Hash` and `Eq` on the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":54930,"byte_end":55020,"line_start":468,"line_end":468,"column_start":5,"column_end":95}},{"value":"/ borrowed form must match those for the value type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55025,"byte_end":55079,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55084,"byte_end":55087,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55092,"byte_end":55106,"line_start":471,"line_end":471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55111,"byte_end":55114,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55119,"byte_end":55126,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55131,"byte_end":55161,"line_start":474,"line_end":474,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55166,"byte_end":55194,"line_start":475,"line_end":475,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55199,"byte_end":55202,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55207,"byte_end":55254,"line_start":477,"line_end":477,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55259,"byte_end":55262,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55267,"byte_end":55294,"line_start":479,"line_end":479,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55299,"byte_end":55336,"line_start":480,"line_end":480,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55341,"byte_end":55379,"line_start":481,"line_end":481,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55384,"byte_end":55391,"line_start":482,"line_end":482,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":519},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":58063,"byte_end":58067,"line_start":600,"line_end":600,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexset::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":522}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":533},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":58425,"byte_end":58435,"line_start":620,"line_end":620,"column_start":12,"column_end":22},"name":"Difference","qualname":"::indexset::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":547},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":59028,"byte_end":59040,"line_start":648,"line_end":648,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::indexset::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":598},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":59996,"byte_end":60005,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::linear_map::LinearMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity map / dictionary that performs lookups via linear search","sig":null,"attributes":[{"value":"/ A fixed capacity map / dictionary that performs lookups via linear search","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":59809,"byte_end":59886,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":59887,"byte_end":59890,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Note that as this map doesn't use hashing so most operations are **O(N)** instead of O(1)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":59891,"byte_end":59984,"line_start":15,"line_end":15,"column_start":1,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":603},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60030,"byte_end":60078,"line_start":16,"line_end":16,"column_start":46,"column_end":94},"name":"0","qualname":"::linear_map::LinearMap::0","value":"i::LinearMap<generic_array::GenericArray<(K, V), N>>","parent":{"krate":0,"index":598},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60292,"byte_end":60295,"line_start":24,"line_end":24,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::LinearMap<A>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `LinearMap` `const` constructor; wrap the returned value in\n [`LinearMap`](../struct.LinearMap.html)\n","sig":null,"attributes":[{"value":"/ `LinearMap` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60163,"byte_end":60226,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ [`LinearMap`](../struct.LinearMap.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60231,"byte_end":60274,"line_start":23,"line_end":23,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60906,"byte_end":60909,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearMap<K, V, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `LinearMap`","sig":null,"attributes":[{"value":"/ Creates an empty `LinearMap`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60468,"byte_end":60500,"line_start":36,"line_end":36,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60505,"byte_end":60508,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60513,"byte_end":60527,"line_start":38,"line_end":38,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60532,"byte_end":60535,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60540,"byte_end":60547,"line_start":40,"line_end":40,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60552,"byte_end":60580,"line_start":41,"line_end":41,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60585,"byte_end":60613,"line_start":42,"line_end":42,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60618,"byte_end":60621,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ // allocate the map on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60626,"byte_end":60662,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/ let mut map: LinearMap<&str, isize, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60667,"byte_end":60730,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60735,"byte_end":60738,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ // allocate the map in a static variable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60743,"byte_end":60787,"line_start":47,"line_end":47,"column_start":5,"column_end":49}},{"value":"/ static mut MAP: LinearMap<&str, isize, U8> = LinearMap(heapless::i::LinearMap::new());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60792,"byte_end":60882,"line_start":48,"line_end":48,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60887,"byte_end":60894,"line_start":49,"line_end":49,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61325,"byte_end":61333,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"capacity","qualname":"<LinearMap<K, V, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements that the map can hold","sig":null,"attributes":[{"value":"/ Returns the number of elements that the map can hold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60979,"byte_end":61035,"line_start":54,"line_end":54,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61040,"byte_end":61043,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61048,"byte_end":61077,"line_start":56,"line_end":56,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61082,"byte_end":61085,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61090,"byte_end":61104,"line_start":58,"line_end":58,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61109,"byte_end":61112,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61117,"byte_end":61124,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61129,"byte_end":61157,"line_start":61,"line_end":61,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61162,"byte_end":61190,"line_start":62,"line_end":62,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61195,"byte_end":61198,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ let map: LinearMap<&str, isize, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61203,"byte_end":61262,"line_start":64,"line_end":64,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(map.capacity(), 8);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61267,"byte_end":61301,"line_start":65,"line_end":65,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61306,"byte_end":61313,"line_start":66,"line_end":66,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61772,"byte_end":61777,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinearMap<K, V, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61385,"byte_end":61433,"line_start":71,"line_end":71,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61438,"byte_end":61441,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61446,"byte_end":61475,"line_start":73,"line_end":73,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61480,"byte_end":61483,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61488,"byte_end":61502,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61507,"byte_end":61510,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61515,"byte_end":61522,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61527,"byte_end":61555,"line_start":78,"line_end":78,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61560,"byte_end":61588,"line_start":79,"line_end":79,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61593,"byte_end":61596,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61601,"byte_end":61657,"line_start":81,"line_end":81,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61662,"byte_end":61694,"line_start":82,"line_end":82,"column_start":5,"column_end":37}},{"value":"/ map.clear();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61699,"byte_end":61715,"line_start":83,"line_end":83,"column_start":5,"column_end":21}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61720,"byte_end":61748,"line_start":84,"line_end":84,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61753,"byte_end":61760,"line_start":85,"line_end":85,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62281,"byte_end":62293,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<LinearMap<K, V, N>>::contains_key","value":"pub fn contains_key(&Self, &K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61832,"byte_end":61899,"line_start":90,"line_end":90,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61904,"byte_end":61907,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61912,"byte_end":61941,"line_start":92,"line_end":92,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61946,"byte_end":61949,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61954,"byte_end":61968,"line_start":94,"line_end":94,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61973,"byte_end":61976,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61981,"byte_end":61988,"line_start":96,"line_end":96,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":61993,"byte_end":62021,"line_start":97,"line_end":97,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62026,"byte_end":62054,"line_start":98,"line_end":98,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62059,"byte_end":62062,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62067,"byte_end":62123,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62128,"byte_end":62160,"line_start":101,"line_end":101,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62165,"byte_end":62208,"line_start":102,"line_end":102,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62213,"byte_end":62257,"line_start":103,"line_end":103,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62262,"byte_end":62269,"line_start":104,"line_end":104,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62793,"byte_end":62796,"line_start":124,"line_end":124,"column_start":12,"column_end":15},"name":"get","qualname":"<LinearMap<K, V, N>>::get","value":"pub fn get<Q>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Eq + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62363,"byte_end":62424,"line_start":109,"line_end":109,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62429,"byte_end":62432,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62437,"byte_end":62466,"line_start":111,"line_end":111,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62471,"byte_end":62474,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62479,"byte_end":62493,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62498,"byte_end":62501,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62506,"byte_end":62513,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62518,"byte_end":62546,"line_start":116,"line_end":116,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62551,"byte_end":62579,"line_start":117,"line_end":117,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62584,"byte_end":62587,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62592,"byte_end":62648,"line_start":119,"line_end":119,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62653,"byte_end":62685,"line_start":120,"line_end":120,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62690,"byte_end":62730,"line_start":121,"line_end":121,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62735,"byte_end":62769,"line_start":122,"line_end":122,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62774,"byte_end":62781,"line_start":123,"line_end":123,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63462,"byte_end":63469,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<LinearMap<K, V, N>>::get_mut","value":"pub fn get_mut<Q>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>, Q: Eq +\n?Sized","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":62999,"byte_end":63068,"line_start":134,"line_end":134,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63073,"byte_end":63076,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63081,"byte_end":63110,"line_start":136,"line_end":136,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63115,"byte_end":63118,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63123,"byte_end":63137,"line_start":138,"line_end":138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63142,"byte_end":63145,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63150,"byte_end":63157,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63162,"byte_end":63190,"line_start":141,"line_end":141,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63195,"byte_end":63223,"line_start":142,"line_end":142,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63228,"byte_end":63231,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63236,"byte_end":63292,"line_start":144,"line_end":144,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63297,"byte_end":63329,"line_start":145,"line_end":145,"column_start":5,"column_end":37}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63334,"byte_end":63372,"line_start":146,"line_end":146,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63377,"byte_end":63394,"line_start":147,"line_end":147,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63399,"byte_end":63404,"line_start":148,"line_end":148,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63409,"byte_end":63438,"line_start":149,"line_end":149,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63443,"byte_end":63450,"line_start":150,"line_end":150,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64075,"byte_end":64078,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"len","qualname":"<LinearMap<K, V, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this map","sig":null,"attributes":[{"value":"/ Returns the number of elements in this map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63684,"byte_end":63730,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63735,"byte_end":63738,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63743,"byte_end":63772,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63777,"byte_end":63780,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63785,"byte_end":63799,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63804,"byte_end":63807,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63812,"byte_end":63819,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63824,"byte_end":63852,"line_start":168,"line_end":168,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63857,"byte_end":63885,"line_start":169,"line_end":169,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63890,"byte_end":63893,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let mut a: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63898,"byte_end":63952,"line_start":171,"line_end":171,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63957,"byte_end":63984,"line_start":172,"line_end":172,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":63989,"byte_end":64019,"line_start":173,"line_end":173,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64024,"byte_end":64051,"line_start":174,"line_end":174,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64056,"byte_end":64063,"line_start":175,"line_end":175,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64850,"byte_end":64856,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"insert","qualname":"<LinearMap<K, V, N>>::insert","value":"pub fn insert(&mut Self, K, V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64134,"byte_end":64176,"line_start":180,"line_end":180,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64181,"byte_end":64184,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, `None` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64189,"byte_end":64254,"line_start":182,"line_end":182,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64259,"byte_end":64262,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old value is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64267,"byte_end":64361,"line_start":184,"line_end":184,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64366,"byte_end":64369,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64374,"byte_end":64403,"line_start":186,"line_end":186,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64408,"byte_end":64411,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64416,"byte_end":64430,"line_start":188,"line_end":188,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64435,"byte_end":64438,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64443,"byte_end":64450,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64455,"byte_end":64483,"line_start":191,"line_end":191,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64488,"byte_end":64516,"line_start":192,"line_end":192,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64521,"byte_end":64524,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64529,"byte_end":64585,"line_start":194,"line_end":194,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.insert(37, \"a\").unwrap(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64590,"byte_end":64641,"line_start":195,"line_end":195,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64646,"byte_end":64684,"line_start":196,"line_end":196,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64689,"byte_end":64692,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64697,"byte_end":64730,"line_start":198,"line_end":198,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"c\").unwrap(), Some(\"b\"));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64735,"byte_end":64791,"line_start":199,"line_end":199,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64796,"byte_end":64826,"line_start":200,"line_end":200,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":64831,"byte_end":64838,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65543,"byte_end":65551,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LinearMap<K, V, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65151,"byte_end":65199,"line_start":212,"line_end":212,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65204,"byte_end":65207,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65212,"byte_end":65241,"line_start":214,"line_end":214,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65246,"byte_end":65249,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65254,"byte_end":65268,"line_start":216,"line_end":216,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65273,"byte_end":65276,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65281,"byte_end":65288,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65293,"byte_end":65321,"line_start":219,"line_end":219,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65326,"byte_end":65354,"line_start":220,"line_end":220,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65359,"byte_end":65362,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ let mut a: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65367,"byte_end":65421,"line_start":222,"line_end":222,"column_start":5,"column_end":59}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65426,"byte_end":65452,"line_start":223,"line_end":223,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65457,"byte_end":65487,"line_start":224,"line_end":224,"column_start":5,"column_end":35}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65492,"byte_end":65519,"line_start":225,"line_end":225,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65524,"byte_end":65531,"line_start":226,"line_end":226,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66093,"byte_end":66097,"line_start":248,"line_end":248,"column_start":12,"column_end":16},"name":"iter","qualname":"<LinearMap<K, V, N>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65604,"byte_end":65668,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65673,"byte_end":65676,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65681,"byte_end":65695,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65700,"byte_end":65703,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65708,"byte_end":65715,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65720,"byte_end":65748,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65753,"byte_end":65781,"line_start":237,"line_end":237,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65786,"byte_end":65789,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65794,"byte_end":65850,"line_start":239,"line_end":239,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65855,"byte_end":65887,"line_start":240,"line_end":240,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65892,"byte_end":65924,"line_start":241,"line_end":241,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65929,"byte_end":65961,"line_start":242,"line_end":242,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65966,"byte_end":65969,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":65974,"byte_end":66008,"line_start":244,"line_end":244,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66013,"byte_end":66059,"line_start":245,"line_end":245,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66064,"byte_end":66069,"line_start":246,"line_end":246,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66074,"byte_end":66081,"line_start":247,"line_end":247,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66851,"byte_end":66859,"line_start":277,"line_end":277,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<LinearMap<K, V, N>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order, with mutable references to the\n values","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order, with mutable references to the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66212,"byte_end":66307,"line_start":254,"line_end":254,"column_start":5,"column_end":100}},{"value":"/ values","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66312,"byte_end":66322,"line_start":255,"line_end":255,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66327,"byte_end":66330,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66335,"byte_end":66349,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66354,"byte_end":66357,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66362,"byte_end":66369,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66374,"byte_end":66402,"line_start":260,"line_end":260,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66407,"byte_end":66435,"line_start":261,"line_end":261,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66440,"byte_end":66443,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66448,"byte_end":66504,"line_start":263,"line_end":263,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66509,"byte_end":66541,"line_start":264,"line_end":264,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66546,"byte_end":66578,"line_start":265,"line_end":265,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66583,"byte_end":66615,"line_start":266,"line_end":266,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66620,"byte_end":66623,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66628,"byte_end":66652,"line_start":268,"line_end":268,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66657,"byte_end":66693,"line_start":269,"line_end":269,"column_start":5,"column_end":41}},{"value":"/     *val = 2;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66698,"byte_end":66715,"line_start":270,"line_end":270,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66720,"byte_end":66725,"line_start":271,"line_end":271,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66730,"byte_end":66733,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66738,"byte_end":66766,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66771,"byte_end":66817,"line_start":274,"line_end":274,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66822,"byte_end":66827,"line_start":275,"line_end":275,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66832,"byte_end":66839,"line_start":276,"line_end":276,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67444,"byte_end":67448,"line_start":300,"line_end":300,"column_start":12,"column_end":16},"name":"keys","qualname":"<LinearMap<K, V, N>>::keys","value":"pub fn keys(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":66992,"byte_end":67044,"line_start":283,"line_end":283,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67049,"byte_end":67052,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67057,"byte_end":67071,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67076,"byte_end":67079,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67084,"byte_end":67091,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67096,"byte_end":67124,"line_start":288,"line_end":288,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67129,"byte_end":67157,"line_start":289,"line_end":289,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67162,"byte_end":67165,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67170,"byte_end":67226,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67231,"byte_end":67263,"line_start":292,"line_end":292,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67268,"byte_end":67300,"line_start":293,"line_end":293,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67305,"byte_end":67337,"line_start":294,"line_end":294,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67342,"byte_end":67345,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67350,"byte_end":67377,"line_start":296,"line_end":296,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67382,"byte_end":67410,"line_start":297,"line_end":297,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67415,"byte_end":67420,"line_start":298,"line_end":298,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67425,"byte_end":67432,"line_start":299,"line_end":299,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68014,"byte_end":68020,"line_start":320,"line_end":320,"column_start":12,"column_end":18},"name":"remove","qualname":"<LinearMap<K, V, N>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>, Q: Eq +\n?Sized","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key was previously in the\n map","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key was previously in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67533,"byte_end":67628,"line_start":304,"line_end":304,"column_start":5,"column_end":100}},{"value":"/ map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67633,"byte_end":67640,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67645,"byte_end":67648,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67653,"byte_end":67682,"line_start":307,"line_end":307,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67687,"byte_end":67690,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67695,"byte_end":67709,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67714,"byte_end":67717,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67722,"byte_end":67729,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67734,"byte_end":67762,"line_start":312,"line_end":312,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67767,"byte_end":67795,"line_start":313,"line_end":313,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67800,"byte_end":67803,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67808,"byte_end":67864,"line_start":315,"line_end":315,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67869,"byte_end":67901,"line_start":316,"line_end":316,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67906,"byte_end":67948,"line_start":317,"line_end":317,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67953,"byte_end":67990,"line_start":318,"line_end":318,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":67995,"byte_end":68002,"line_start":319,"line_end":319,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68792,"byte_end":68798,"line_start":351,"line_end":351,"column_start":12,"column_end":18},"name":"values","qualname":"<LinearMap<K, V, N>>::values","value":"pub fn values(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68336,"byte_end":68390,"line_start":334,"line_end":334,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68395,"byte_end":68398,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68403,"byte_end":68417,"line_start":336,"line_end":336,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68422,"byte_end":68425,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68430,"byte_end":68437,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68442,"byte_end":68470,"line_start":339,"line_end":339,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68475,"byte_end":68503,"line_start":340,"line_end":340,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68508,"byte_end":68511,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68516,"byte_end":68572,"line_start":342,"line_end":342,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68577,"byte_end":68609,"line_start":343,"line_end":343,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68614,"byte_end":68646,"line_start":344,"line_end":344,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68651,"byte_end":68683,"line_start":345,"line_end":345,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68688,"byte_end":68691,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68696,"byte_end":68725,"line_start":347,"line_end":347,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68730,"byte_end":68758,"line_start":348,"line_end":348,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68763,"byte_end":68768,"line_start":349,"line_end":349,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68773,"byte_end":68780,"line_start":350,"line_end":350,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69427,"byte_end":69437,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<LinearMap<K, V, N>>::values_mut","value":"pub fn values_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68883,"byte_end":68945,"line_start":355,"line_end":355,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68950,"byte_end":68953,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68958,"byte_end":68972,"line_start":357,"line_end":357,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68977,"byte_end":68980,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68985,"byte_end":68992,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":68997,"byte_end":69025,"line_start":360,"line_end":360,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69030,"byte_end":69058,"line_start":361,"line_end":361,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69063,"byte_end":69066,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69071,"byte_end":69127,"line_start":363,"line_end":363,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69132,"byte_end":69164,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69169,"byte_end":69201,"line_start":365,"line_end":365,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69206,"byte_end":69238,"line_start":366,"line_end":366,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69243,"byte_end":69246,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69251,"byte_end":69284,"line_start":368,"line_end":368,"column_start":5,"column_end":38}},{"value":"/     *val += 10;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69289,"byte_end":69308,"line_start":369,"line_end":369,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69313,"byte_end":69318,"line_start":370,"line_end":370,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69323,"byte_end":69326,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69331,"byte_end":69360,"line_start":372,"line_end":372,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69365,"byte_end":69393,"line_start":373,"line_end":373,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69398,"byte_end":69403,"line_start":374,"line_end":374,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69408,"byte_end":69415,"line_start":375,"line_end":375,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":679},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70996,"byte_end":71004,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::linear_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":683}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":705},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72056,"byte_end":72060,"line_start":505,"line_end":505,"column_start":12,"column_end":16},"name":"Iter","qualname":"::linear_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":709}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":727},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72645,"byte_end":72652,"line_start":535,"line_end":535,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::linear_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":731}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":796},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74642,"byte_end":74648,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"String","qualname":"::string::String","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)\n","sig":null,"attributes":[{"value":"/ A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74542,"byte_end":74630,"line_start":18,"line_end":18,"column_start":1,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":799},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74667,"byte_end":74708,"line_start":19,"line_end":19,"column_start":37,"column_end":78},"name":"0","qualname":"::string::String::0","value":"i::String<generic_array::GenericArray<u8, N>>","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74887,"byte_end":74890,"line_start":25,"line_end":25,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::String<A>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `String` `const` constructor; wrap the returned value in [`String`](../struct.String.html)\n","sig":null,"attributes":[{"value":"/ `String` `const` constructor; wrap the returned value in [`String`](../struct.String.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74775,"byte_end":74869,"line_start":24,"line_end":24,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75502,"byte_end":75505,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<String<N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `String` with a fixed capacity of `N`","sig":null,"attributes":[{"value":"/ Constructs a new, empty `String` with a fixed capacity of `N`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75030,"byte_end":75095,"line_start":36,"line_end":36,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75100,"byte_end":75103,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75108,"byte_end":75122,"line_start":38,"line_end":38,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75127,"byte_end":75130,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75135,"byte_end":75151,"line_start":40,"line_end":40,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75156,"byte_end":75159,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75164,"byte_end":75171,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75176,"byte_end":75201,"line_start":43,"line_end":43,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75206,"byte_end":75234,"line_start":44,"line_end":44,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75239,"byte_end":75242,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ // allocate the string on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75247,"byte_end":75286,"line_start":46,"line_end":46,"column_start":5,"column_end":44}},{"value":"/ let mut s: String<U4> = String::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75291,"byte_end":75333,"line_start":47,"line_end":47,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75338,"byte_end":75341,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ // allocate the string in a static variable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75346,"byte_end":75393,"line_start":49,"line_end":49,"column_start":5,"column_end":52}},{"value":"/ static mut S: String<U4> = String(heapless::i::String::new());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75398,"byte_end":75464,"line_start":50,"line_end":50,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75469,"byte_end":75476,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75481,"byte_end":75490,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76856,"byte_end":76865,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<String<N>>::from_utf8","value":"pub fn from_utf8(Vec<u8, N>) -> Result<String<N>, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes into a `String`.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes into a `String`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75569,"byte_end":75616,"line_start":57,"line_end":57,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75621,"byte_end":75624,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ A string slice ([`&str`]) is made of bytes ([`u8`]), and a vector of bytes","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75629,"byte_end":75707,"line_start":59,"line_end":59,"column_start":5,"column_end":83}},{"value":"/ ([`Vec<u8>`]) is made of bytes, so this function converts between the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75712,"byte_end":75785,"line_start":60,"line_end":60,"column_start":5,"column_end":78}},{"value":"/ two. Not all byte slices are valid `String`s, however: `String`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75790,"byte_end":75857,"line_start":61,"line_end":61,"column_start":5,"column_end":72}},{"value":"/ requires that it is valid UTF-8. `from_utf8()` checks to ensure that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75862,"byte_end":75934,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ the bytes are valid UTF-8, and then does the conversion.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":75939,"byte_end":75999,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76004,"byte_end":76007,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ See std::String for further information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76012,"byte_end":76056,"line_start":65,"line_end":65,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76061,"byte_end":76064,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76069,"byte_end":76083,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76088,"byte_end":76091,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76096,"byte_end":76112,"line_start":69,"line_end":69,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76117,"byte_end":76120,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76125,"byte_end":76132,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ use heapless::{String, Vec};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76137,"byte_end":76169,"line_start":72,"line_end":72,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76174,"byte_end":76202,"line_start":73,"line_end":73,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76207,"byte_end":76210,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, U8> = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76215,"byte_end":76255,"line_start":75,"line_end":75,"column_start":5,"column_end":45}},{"value":"/ v.push('a' as u8).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76260,"byte_end":76291,"line_start":76,"line_end":76,"column_start":5,"column_end":36}},{"value":"/ v.push('b' as u8).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76296,"byte_end":76327,"line_start":77,"line_end":77,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76332,"byte_end":76335,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ let s = String::from_utf8(v).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76340,"byte_end":76382,"line_start":79,"line_end":79,"column_start":5,"column_end":47}},{"value":"/ assert!(s.len() == 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76387,"byte_end":76413,"line_start":80,"line_end":80,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76418,"byte_end":76425,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76430,"byte_end":76433,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Incorrect bytes:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76438,"byte_end":76458,"line_start":83,"line_end":83,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76463,"byte_end":76466,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76471,"byte_end":76478,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use heapless::{String, Vec};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76483,"byte_end":76515,"line_start":86,"line_end":86,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76520,"byte_end":76548,"line_start":87,"line_end":87,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76553,"byte_end":76556,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76561,"byte_end":76599,"line_start":89,"line_end":89,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76604,"byte_end":76607,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, U8> = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76612,"byte_end":76652,"line_start":91,"line_end":91,"column_start":5,"column_end":45}},{"value":"/ v.push(0).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76657,"byte_end":76680,"line_start":92,"line_end":92,"column_start":5,"column_end":28}},{"value":"/ v.push(159).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76685,"byte_end":76710,"line_start":93,"line_end":93,"column_start":5,"column_end":30}},{"value":"/ v.push(146).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76715,"byte_end":76740,"line_start":94,"line_end":94,"column_start":5,"column_end":30}},{"value":"/ v.push(150).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76745,"byte_end":76770,"line_start":95,"line_end":95,"column_start":5,"column_end":30}},{"value":"/ assert!(String::from_utf8(v).is_err());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76775,"byte_end":76818,"line_start":96,"line_end":96,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76823,"byte_end":76830,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":76835,"byte_end":76844,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77252,"byte_end":77271,"line_start":111,"line_end":111,"column_start":19,"column_end":38},"name":"from_utf8_unchecked","qualname":"<String<N>>::from_utf8_unchecked","value":"pub unsafe fn from_utf8_unchecked(Vec<u8, N>) -> String<N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String` without checking that the\n string contains valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `String` without checking that the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77043,"byte_end":77113,"line_start":106,"line_end":106,"column_start":5,"column_end":75}},{"value":"/ string contains valid UTF-8.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77118,"byte_end":77150,"line_start":107,"line_end":107,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77155,"byte_end":77158,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ See the safe version, `from_utf8`, for more details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77163,"byte_end":77219,"line_start":109,"line_end":109,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77224,"byte_end":77233,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78014,"byte_end":78024,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<String<N>>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<u8, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a byte vector.","sig":null,"attributes":[{"value":"/ Converts a `String` into a byte vector.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77530,"byte_end":77573,"line_start":118,"line_end":118,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77578,"byte_end":77581,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This consumes the `String`, so we do not need to copy its contents.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77586,"byte_end":77657,"line_start":120,"line_end":120,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77662,"byte_end":77665,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77670,"byte_end":77684,"line_start":122,"line_end":122,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77689,"byte_end":77692,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77697,"byte_end":77713,"line_start":124,"line_end":124,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77718,"byte_end":77721,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77726,"byte_end":77733,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77738,"byte_end":77763,"line_start":127,"line_end":127,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77768,"byte_end":77796,"line_start":128,"line_end":128,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77801,"byte_end":77804,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77809,"byte_end":77852,"line_start":130,"line_end":130,"column_start":5,"column_end":48}},{"value":"/ let b = s.into_bytes();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77857,"byte_end":77884,"line_start":131,"line_end":131,"column_start":5,"column_end":32}},{"value":"/ assert!(b.len() == 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77889,"byte_end":77915,"line_start":132,"line_end":132,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77920,"byte_end":77923,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&['a' as u8, 'b' as u8], &b[..]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77928,"byte_end":77976,"line_start":134,"line_end":134,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77981,"byte_end":77988,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":77993,"byte_end":78002,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78550,"byte_end":78556,"line_start":158,"line_end":158,"column_start":12,"column_end":18},"name":"as_str","qualname":"<String<N>>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Extracts a string slice containing the entire string.","sig":null,"attributes":[{"value":"/ Extracts a string slice containing the entire string.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78082,"byte_end":78139,"line_start":141,"line_end":141,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78144,"byte_end":78147,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78152,"byte_end":78166,"line_start":143,"line_end":143,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78171,"byte_end":78174,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78179,"byte_end":78195,"line_start":145,"line_end":145,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78200,"byte_end":78203,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78208,"byte_end":78215,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78220,"byte_end":78245,"line_start":148,"line_end":148,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78250,"byte_end":78278,"line_start":149,"line_end":149,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78283,"byte_end":78286,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78291,"byte_end":78338,"line_start":151,"line_end":151,"column_start":5,"column_end":52}},{"value":"/ assert!(s.as_str() == \"ab\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78343,"byte_end":78375,"line_start":152,"line_end":152,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78380,"byte_end":78383,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ let _s = s.as_str();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78388,"byte_end":78412,"line_start":154,"line_end":154,"column_start":5,"column_end":29}},{"value":"/ // s.push('c'); // <- cannot borrow `s` as mutable because it is also borrowed as immutable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78417,"byte_end":78512,"line_start":155,"line_end":155,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78517,"byte_end":78524,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78529,"byte_end":78538,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79007,"byte_end":79017,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"as_mut_str","qualname":"<String<N>>::as_mut_str","value":"pub fn as_mut_str(&mut Self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a mutable string slice.","sig":null,"attributes":[{"value":"/ Converts a `String` into a mutable string slice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78652,"byte_end":78704,"line_start":162,"line_end":162,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78709,"byte_end":78712,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78717,"byte_end":78731,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78736,"byte_end":78739,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78744,"byte_end":78760,"line_start":166,"line_end":166,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78765,"byte_end":78768,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78773,"byte_end":78780,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78785,"byte_end":78810,"line_start":169,"line_end":169,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78815,"byte_end":78843,"line_start":170,"line_end":170,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78848,"byte_end":78851,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78856,"byte_end":78903,"line_start":172,"line_end":172,"column_start":5,"column_end":52}},{"value":"/ let s = s.as_mut_str();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78908,"byte_end":78935,"line_start":173,"line_end":173,"column_start":5,"column_end":32}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78940,"byte_end":78969,"line_start":174,"line_end":174,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78974,"byte_end":78981,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":78986,"byte_end":78995,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79880,"byte_end":79890,"line_start":205,"line_end":205,"column_start":19,"column_end":29},"name":"as_mut_vec","qualname":"<String<N>>::as_mut_vec","value":"pub unsafe fn as_mut_vec(&mut Self) -> &mut Vec<u8, N>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the contents of this `String`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the contents of this `String`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79129,"byte_end":79194,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79199,"byte_end":79202,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79207,"byte_end":79219,"line_start":183,"line_end":183,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79224,"byte_end":79227,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it does not check that the bytes passed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79232,"byte_end":79307,"line_start":185,"line_end":185,"column_start":5,"column_end":80}},{"value":"/ to it are valid UTF-8. If this constraint is violated, it may cause","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79312,"byte_end":79383,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/ memory unsafety issues with future users of the `String`, as the rest of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79388,"byte_end":79464,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ the library assumes that `String`s are valid UTF-8.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79469,"byte_end":79524,"line_start":188,"line_end":188,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79529,"byte_end":79532,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79537,"byte_end":79551,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79556,"byte_end":79559,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79564,"byte_end":79580,"line_start":192,"line_end":192,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79585,"byte_end":79588,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79593,"byte_end":79600,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"hello\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79605,"byte_end":79643,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79648,"byte_end":79651,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79656,"byte_end":79668,"line_start":197,"line_end":197,"column_start":5,"column_end":17}},{"value":"/     let vec = s.as_mut_vec();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79673,"byte_end":79706,"line_start":198,"line_end":198,"column_start":5,"column_end":38}},{"value":"/     assert_eq!(&[104, 101, 108, 108, 111][..], &vec[..]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79711,"byte_end":79772,"line_start":199,"line_end":199,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79777,"byte_end":79780,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/     vec.reverse();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79785,"byte_end":79807,"line_start":201,"line_end":201,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79812,"byte_end":79817,"line_start":202,"line_end":202,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"olleh\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79822,"byte_end":79849,"line_start":203,"line_end":203,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":79854,"byte_end":79861,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80478,"byte_end":80486,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"push_str","qualname":"<String<N>>::push_str","value":"pub fn push_str(&mut Self, &str) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a given string slice onto the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends a given string slice onto the end of this `String`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80028,"byte_end":80091,"line_start":209,"line_end":209,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80096,"byte_end":80099,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80104,"byte_end":80118,"line_start":211,"line_end":211,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80123,"byte_end":80126,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80131,"byte_end":80147,"line_start":213,"line_end":213,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80152,"byte_end":80155,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80160,"byte_end":80167,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80172,"byte_end":80197,"line_start":216,"line_end":216,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80202,"byte_end":80230,"line_start":217,"line_end":217,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80235,"byte_end":80238,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80243,"byte_end":80291,"line_start":219,"line_end":219,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80296,"byte_end":80299,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ assert!(s.push_str(\"bar\").is_ok());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80304,"byte_end":80343,"line_start":221,"line_end":221,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80348,"byte_end":80351,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foobar\", s);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80356,"byte_end":80384,"line_start":223,"line_end":223,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80389,"byte_end":80392,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert!(s.push_str(\"tender\").is_err());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80397,"byte_end":80440,"line_start":225,"line_end":225,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80445,"byte_end":80452,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80457,"byte_end":80466,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80929,"byte_end":80937,"line_start":246,"line_end":246,"column_start":12,"column_end":20},"name":"capacity","qualname":"<String<N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the String can hold","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the String can hold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80599,"byte_end":80661,"line_start":232,"line_end":232,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80666,"byte_end":80669,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80674,"byte_end":80688,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80693,"byte_end":80696,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80701,"byte_end":80717,"line_start":236,"line_end":236,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80722,"byte_end":80725,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80730,"byte_end":80737,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80742,"byte_end":80767,"line_start":239,"line_end":239,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80772,"byte_end":80800,"line_start":240,"line_end":240,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80805,"byte_end":80808,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80813,"byte_end":80855,"line_start":242,"line_end":242,"column_start":5,"column_end":47}},{"value":"/ assert!(s.capacity() == 4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80860,"byte_end":80891,"line_start":243,"line_end":243,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80896,"byte_end":80903,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80908,"byte_end":80917,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81538,"byte_end":81542,"line_start":273,"line_end":273,"column_start":12,"column_end":16},"name":"push","qualname":"<String<N>>::push","value":"pub fn push(&mut Self, char) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends the given [`char`] to the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends the given [`char`] to the end of this `String`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":80997,"byte_end":81056,"line_start":250,"line_end":250,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81061,"byte_end":81064,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81069,"byte_end":81112,"line_start":252,"line_end":252,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81117,"byte_end":81120,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81125,"byte_end":81139,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81144,"byte_end":81147,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81152,"byte_end":81168,"line_start":256,"line_end":256,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81173,"byte_end":81176,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81181,"byte_end":81188,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81193,"byte_end":81218,"line_start":259,"line_end":259,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81223,"byte_end":81251,"line_start":260,"line_end":260,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81256,"byte_end":81259,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"abc\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81264,"byte_end":81312,"line_start":262,"line_end":262,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81317,"byte_end":81320,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ s.push('1').unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81325,"byte_end":81350,"line_start":264,"line_end":264,"column_start":5,"column_end":30}},{"value":"/ s.push('2').unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81355,"byte_end":81380,"line_start":265,"line_end":265,"column_start":5,"column_end":30}},{"value":"/ s.push('3').unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81385,"byte_end":81410,"line_start":266,"line_end":266,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81415,"byte_end":81418,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ assert!(\"abc123\" == s.as_str());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81423,"byte_end":81459,"line_start":268,"line_end":268,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81464,"byte_end":81467,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"abc123\", s);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81472,"byte_end":81500,"line_start":270,"line_end":270,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81505,"byte_end":81512,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81517,"byte_end":81526,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82544,"byte_end":82552,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"truncate","qualname":"<String<N>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `String` to the specified length.","sig":null,"attributes":[{"value":"/ Shortens this `String` to the specified length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81829,"byte_end":81880,"line_start":283,"line_end":283,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81885,"byte_end":81888,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than the string's current length, this has no","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81893,"byte_end":81966,"line_start":285,"line_end":285,"column_start":5,"column_end":78}},{"value":"/ effect.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81971,"byte_end":81982,"line_start":286,"line_end":286,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81987,"byte_end":81990,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":81995,"byte_end":82060,"line_start":288,"line_end":288,"column_start":5,"column_end":70}},{"value":"/ of the string","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82065,"byte_end":82082,"line_start":289,"line_end":289,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82087,"byte_end":82090,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82095,"byte_end":82107,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82112,"byte_end":82115,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Panics if `new_len` does not lie on a [`char`] boundary.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82120,"byte_end":82180,"line_start":293,"line_end":293,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82185,"byte_end":82188,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82193,"byte_end":82236,"line_start":295,"line_end":295,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82241,"byte_end":82244,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82249,"byte_end":82263,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82268,"byte_end":82271,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82276,"byte_end":82292,"line_start":299,"line_end":299,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82297,"byte_end":82300,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82305,"byte_end":82312,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82317,"byte_end":82342,"line_start":302,"line_end":302,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82347,"byte_end":82375,"line_start":303,"line_end":303,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82380,"byte_end":82383,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"hello\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82388,"byte_end":82438,"line_start":305,"line_end":305,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82443,"byte_end":82446,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ s.truncate(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82451,"byte_end":82469,"line_start":307,"line_end":307,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82474,"byte_end":82477,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"he\", s);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82482,"byte_end":82506,"line_start":309,"line_end":309,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82511,"byte_end":82518,"line_start":310,"line_end":310,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82523,"byte_end":82532,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83329,"byte_end":83332,"line_start":341,"line_end":341,"column_start":12,"column_end":15},"name":"pop","qualname":"<String<N>>::pop","value":"pub fn pop(&mut Self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string buffer and returns it.","sig":null,"attributes":[{"value":"/ Removes the last character from the string buffer and returns it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82732,"byte_end":82801,"line_start":319,"line_end":319,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82806,"byte_end":82809,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if this `String` is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82814,"byte_end":82861,"line_start":321,"line_end":321,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82866,"byte_end":82869,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82874,"byte_end":82934,"line_start":323,"line_end":323,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82939,"byte_end":82942,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82947,"byte_end":82961,"line_start":325,"line_end":325,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82966,"byte_end":82969,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82974,"byte_end":82990,"line_start":327,"line_end":327,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":82995,"byte_end":82998,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83003,"byte_end":83010,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83015,"byte_end":83040,"line_start":330,"line_end":330,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83045,"byte_end":83073,"line_start":331,"line_end":331,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83078,"byte_end":83081,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83086,"byte_end":83134,"line_start":333,"line_end":333,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83139,"byte_end":83142,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83147,"byte_end":83182,"line_start":335,"line_end":335,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83187,"byte_end":83222,"line_start":336,"line_end":336,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('f'));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83227,"byte_end":83262,"line_start":337,"line_end":337,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83267,"byte_end":83270,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83275,"byte_end":83305,"line_start":339,"line_end":339,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83310,"byte_end":83317,"line_start":340,"line_end":340,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84145,"byte_end":84150,"line_start":376,"line_end":376,"column_start":12,"column_end":17},"name":"clear","qualname":"<String<N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Truncates this `String`, removing all contents.","sig":null,"attributes":[{"value":"/ Truncates this `String`, removing all contents.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83607,"byte_end":83658,"line_start":354,"line_end":354,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83663,"byte_end":83666,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ While this means the `String` will have a length of zero, it does not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83671,"byte_end":83744,"line_start":356,"line_end":356,"column_start":5,"column_end":78}},{"value":"/ touch its capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83749,"byte_end":83772,"line_start":357,"line_end":357,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83777,"byte_end":83780,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83785,"byte_end":83799,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83804,"byte_end":83807,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83812,"byte_end":83828,"line_start":361,"line_end":361,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83833,"byte_end":83836,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83841,"byte_end":83848,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83853,"byte_end":83878,"line_start":364,"line_end":364,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83883,"byte_end":83911,"line_start":365,"line_end":365,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83916,"byte_end":83919,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83924,"byte_end":83972,"line_start":367,"line_end":367,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83977,"byte_end":83980,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ s.clear();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":83985,"byte_end":83999,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84004,"byte_end":84007,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ assert!(s.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84012,"byte_end":84038,"line_start":371,"line_end":371,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(0, s.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84043,"byte_end":84070,"line_start":372,"line_end":372,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(8, s.capacity());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84075,"byte_end":84107,"line_start":373,"line_end":373,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84112,"byte_end":84119,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84124,"byte_end":84133,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":94174,"byte_end":94177,"line_start":8,"line_end":8,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::Vec<A>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `Vec` `const` constructor; wrap the returned value in [`Vec`](../struct.Vec.html)\n","sig":null,"attributes":[{"value":"/ `Vec` `const` constructor; wrap the returned value in [`Vec`](../struct.Vec.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":94071,"byte_end":94156,"line_start":7,"line_end":7,"column_start":5,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":930},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98392,"byte_end":98395,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"Vec","qualname":"::vec::Vec","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","sig":null,"attributes":[{"value":"/ A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97662,"byte_end":97741,"line_start":134,"line_end":134,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97742,"byte_end":97745,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97746,"byte_end":97760,"line_start":136,"line_end":136,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97761,"byte_end":97764,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97765,"byte_end":97772,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97773,"byte_end":97795,"line_start":139,"line_end":139,"column_start":1,"column_end":23}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97796,"byte_end":97824,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97825,"byte_end":97828,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ // A vector with a fixed capacity of 8 elements allocated on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97829,"byte_end":97903,"line_start":142,"line_end":142,"column_start":1,"column_end":75}},{"value":"/ let mut vec = Vec::<_, U8>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97904,"byte_end":97942,"line_start":143,"line_end":143,"column_start":1,"column_end":39}},{"value":"/ vec.push(1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97943,"byte_end":97959,"line_start":144,"line_end":144,"column_start":1,"column_end":17}},{"value":"/ vec.push(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97960,"byte_end":97976,"line_start":145,"line_end":145,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97977,"byte_end":97980,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.len(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":97981,"byte_end":98010,"line_start":147,"line_end":147,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(vec[0], 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98011,"byte_end":98037,"line_start":148,"line_end":148,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98038,"byte_end":98041,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.pop(), Some(2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98042,"byte_end":98077,"line_start":150,"line_end":150,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(vec.len(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98078,"byte_end":98107,"line_start":151,"line_end":151,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98108,"byte_end":98111,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ vec[0] = 7;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98112,"byte_end":98127,"line_start":153,"line_end":153,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(vec[0], 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98128,"byte_end":98154,"line_start":154,"line_end":154,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98155,"byte_end":98158,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98159,"byte_end":98201,"line_start":156,"line_end":156,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98202,"byte_end":98205,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ for x in &vec {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98206,"byte_end":98225,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98226,"byte_end":98252,"line_start":159,"line_end":159,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98253,"byte_end":98258,"line_start":160,"line_end":160,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec, [7, 1, 2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98259,"byte_end":98293,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98294,"byte_end":98301,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"repr(transparent)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98360,"byte_end":98380,"line_start":164,"line_end":164,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":934},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98417,"byte_end":98454,"line_start":165,"line_end":165,"column_start":37,"column_end":74},"name":"0","qualname":"::vec::Vec::0","value":"i::Vec<generic_array::GenericArray<T, N>>","parent":{"krate":0,"index":930},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99127,"byte_end":99130,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec<T, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty vector with a fixed capacity of `N`","sig":null,"attributes":[{"value":"/ Constructs a new, empty vector with a fixed capacity of `N`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98708,"byte_end":98771,"line_start":184,"line_end":184,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98776,"byte_end":98779,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98784,"byte_end":98798,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98803,"byte_end":98806,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98811,"byte_end":98818,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98823,"byte_end":98845,"line_start":189,"line_end":189,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98850,"byte_end":98878,"line_start":190,"line_end":190,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98883,"byte_end":98886,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ // allocate the vector on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98891,"byte_end":98930,"line_start":192,"line_end":192,"column_start":5,"column_end":44}},{"value":"/ let mut x: Vec<u8, U16> = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98935,"byte_end":98976,"line_start":193,"line_end":193,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98981,"byte_end":98984,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ // allocate the vector in a static variable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98989,"byte_end":99036,"line_start":195,"line_end":195,"column_start":5,"column_end":52}},{"value":"/ static mut X: Vec<u8, U16> = Vec(heapless::i::Vec::new());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99041,"byte_end":99103,"line_start":196,"line_end":196,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99108,"byte_end":99115,"line_start":197,"line_end":197,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99570,"byte_end":99580,"line_start":215,"line_end":215,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Vec<T, N>>::from_slice","value":"pub fn from_slice(&[T]) -> Result<Self, ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new vector with a fixed capacity of `N` and fills it\n with the provided slice.","sig":null,"attributes":[{"value":"/ Constructs a new vector with a fixed capacity of `N` and fills it","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99188,"byte_end":99257,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/ with the provided slice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99262,"byte_end":99290,"line_start":203,"line_end":203,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99295,"byte_end":99298,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to the following code:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99303,"byte_end":99348,"line_start":205,"line_end":205,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99353,"byte_end":99356,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99361,"byte_end":99368,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99373,"byte_end":99395,"line_start":208,"line_end":208,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99400,"byte_end":99428,"line_start":209,"line_end":209,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99433,"byte_end":99436,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, U16> = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99441,"byte_end":99482,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ v.extend_from_slice(&[1, 2, 3]).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99487,"byte_end":99532,"line_start":212,"line_end":212,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99537,"byte_end":99544,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99549,"byte_end":99558,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99837,"byte_end":99845,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Vec<T, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the vector can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the vector can hold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99763,"byte_end":99825,"line_start":225,"line_end":225,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99956,"byte_end":99961,"line_start":231,"line_end":231,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vec<T, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.\n","sig":null,"attributes":[{"value":"/ Clears the vector, removing all values.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":99901,"byte_end":99944,"line_start":230,"line_end":230,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100529,"byte_end":100546,"line_start":251,"line_end":251,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<Vec<T, N>>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[T]) -> Result<(), ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all elements in a slice to the `Vec`.","sig":null,"attributes":[{"value":"/ Clones and appends all elements in a slice to the `Vec`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100009,"byte_end":100069,"line_start":235,"line_end":235,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100074,"byte_end":100077,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Iterates over the slice `other`, clones each element, and then appends","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100082,"byte_end":100156,"line_start":237,"line_end":237,"column_start":5,"column_end":79}},{"value":"/ it to this `Vec`. The `other` vector is traversed in-order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100161,"byte_end":100224,"line_start":238,"line_end":238,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100229,"byte_end":100232,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100237,"byte_end":100251,"line_start":240,"line_end":240,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100256,"byte_end":100259,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100264,"byte_end":100271,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100276,"byte_end":100298,"line_start":243,"line_end":243,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100303,"byte_end":100331,"line_start":244,"line_end":244,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100336,"byte_end":100339,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ let mut vec = Vec::<u8, U8>::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100344,"byte_end":100383,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/ vec.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100388,"byte_end":100413,"line_start":247,"line_end":247,"column_start":5,"column_end":30}},{"value":"/ vec.extend_from_slice(&[2, 3, 4]).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100418,"byte_end":100465,"line_start":248,"line_end":248,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(*vec, [1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100470,"byte_end":100505,"line_start":249,"line_end":249,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100510,"byte_end":100517,"line_start":250,"line_end":250,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100767,"byte_end":100770,"line_start":259,"line_end":259,"column_start":12,"column_end":15},"name":"pop","qualname":"<Vec<T, N>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and return it, or `None` if it's empty\n","sig":null,"attributes":[{"value":"/ Removes the last element from a vector and return it, or `None` if it's empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100674,"byte_end":100755,"line_start":258,"line_end":258,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":101058,"byte_end":101062,"line_start":270,"line_end":270,"column_start":12,"column_end":16},"name":"push","qualname":"<Vec<T, N>>::push","value":"pub fn push(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the collection","sig":null,"attributes":[{"value":"/ Appends an `item` to the back of the collection","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100933,"byte_end":100984,"line_start":267,"line_end":267,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100989,"byte_end":100992,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the vector is full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":100997,"byte_end":101046,"line_start":269,"line_end":269,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":101336,"byte_end":101344,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec<T, N>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping the rest.\n","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":101244,"byte_end":101324,"line_start":278,"line_end":278,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102135,"byte_end":102141,"line_start":299,"line_end":299,"column_start":12,"column_end":18},"name":"resize","qualname":"<Vec<T, N>>::resize","value":"pub fn resize(&mut Self, usize, T) -> Result<(), ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Resizes the Vec in-place so that len is equal to new_len.","sig":null,"attributes":[{"value":"/ Resizes the Vec in-place so that len is equal to new_len.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":101772,"byte_end":101833,"line_start":292,"line_end":292,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":101838,"byte_end":101841,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ If new_len is greater than len, the Vec is extended by the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":101846,"byte_end":101908,"line_start":294,"line_end":294,"column_start":5,"column_end":67}},{"value":"/ difference, with each additional slot filled with value. If","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":101913,"byte_end":101976,"line_start":295,"line_end":295,"column_start":5,"column_end":68}},{"value":"/ new_len is less than len, the Vec is simply truncated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":101981,"byte_end":102039,"line_start":296,"line_end":296,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102044,"byte_end":102047,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ See also [`resize_default`](struct.Vec.html#method.resize_default).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102052,"byte_end":102123,"line_start":298,"line_end":298,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102915,"byte_end":102929,"line_start":325,"line_end":325,"column_start":12,"column_end":26},"name":"resize_default","qualname":"<Vec<T, N>>::resize_default","value":"pub fn resize_default(&mut Self, usize) -> Result<(), ()> where T: Clone +\nDefault","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102535,"byte_end":102602,"line_start":318,"line_end":318,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102607,"byte_end":102610,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102615,"byte_end":102683,"line_start":320,"line_end":320,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with `Default::default()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102688,"byte_end":102763,"line_start":321,"line_end":321,"column_start":5,"column_end":80}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102768,"byte_end":102835,"line_start":322,"line_end":322,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102840,"byte_end":102843,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ See also [`resize`](struct.Vec.html#method.resize).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":102848,"byte_end":102903,"line_start":324,"line_end":324,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106505,"byte_end":106512,"line_start":423,"line_end":423,"column_start":19,"column_end":26},"name":"set_len","qualname":"<Vec<T, N>>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the vector to `new_len`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103073,"byte_end":103122,"line_start":332,"line_end":332,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103127,"byte_end":103130,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103135,"byte_end":103202,"line_start":334,"line_end":334,"column_start":5,"column_end":72}},{"value":"/ invariants of the type. Normally changing the length of a vector","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103207,"byte_end":103275,"line_start":335,"line_end":335,"column_start":5,"column_end":73}},{"value":"/ is done using one of the safe operations instead, such as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103280,"byte_end":103341,"line_start":336,"line_end":336,"column_start":5,"column_end":66}},{"value":"/ [`truncate`], [`resize`], [`extend`], or [`clear`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103346,"byte_end":103401,"line_start":337,"line_end":337,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103406,"byte_end":103409,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ [`truncate`]: #method.truncate","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103414,"byte_end":103448,"line_start":339,"line_end":339,"column_start":5,"column_end":39}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103453,"byte_end":103483,"line_start":340,"line_end":340,"column_start":5,"column_end":35}},{"value":"/ [`extend`]: https://doc.rust-lang.org/stable/core/iter/trait.Extend.html#tymethod.extend","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103488,"byte_end":103580,"line_start":341,"line_end":341,"column_start":5,"column_end":97}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103585,"byte_end":103613,"line_start":342,"line_end":342,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103618,"byte_end":103621,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103626,"byte_end":103638,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103643,"byte_end":103646,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ - `new_len` must be less than or equal to [`capacity()`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103651,"byte_end":103712,"line_start":346,"line_end":346,"column_start":5,"column_end":66}},{"value":"/ - The elements at `old_len..new_len` must be initialized.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103717,"byte_end":103778,"line_start":347,"line_end":347,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103783,"byte_end":103786,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ [`capacity()`]: #method.capacity","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103791,"byte_end":103827,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103832,"byte_end":103835,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103840,"byte_end":103854,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103859,"byte_end":103862,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ This method can be useful for situations in which the vector","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103867,"byte_end":103931,"line_start":353,"line_end":353,"column_start":5,"column_end":69}},{"value":"/ is serving as a buffer for other code, particularly over FFI:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":103936,"byte_end":104001,"line_start":354,"line_end":354,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104006,"byte_end":104009,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104014,"byte_end":104027,"line_start":356,"line_end":356,"column_start":5,"column_end":18}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104032,"byte_end":104058,"line_start":357,"line_end":357,"column_start":5,"column_end":31}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104063,"byte_end":104085,"line_start":358,"line_end":358,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104090,"byte_end":104118,"line_start":359,"line_end":359,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104123,"byte_end":104126,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # // This is just a minimal skeleton for the doc example;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104131,"byte_end":104192,"line_start":361,"line_end":361,"column_start":5,"column_end":66}},{"value":"/ # // don't use this as a starting point for a real library.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104197,"byte_end":104260,"line_start":362,"line_end":362,"column_start":5,"column_end":68}},{"value":"/ # pub struct StreamWrapper { strm: *mut core::ffi::c_void }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104265,"byte_end":104328,"line_start":363,"line_end":363,"column_start":5,"column_end":68}},{"value":"/ # const Z_OK: i32 = 0;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104333,"byte_end":104359,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/ # extern \"C\" {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104364,"byte_end":104382,"line_start":365,"line_end":365,"column_start":5,"column_end":23}},{"value":"/ #     fn deflateGetDictionary(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104387,"byte_end":104421,"line_start":366,"line_end":366,"column_start":5,"column_end":39}},{"value":"/ #         strm: *mut core::ffi::c_void,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104426,"byte_end":104469,"line_start":367,"line_end":367,"column_start":5,"column_end":48}},{"value":"/ #         dictionary: *mut u8,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104474,"byte_end":104508,"line_start":368,"line_end":368,"column_start":5,"column_end":39}},{"value":"/ #         dictLength: *mut usize,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104513,"byte_end":104550,"line_start":369,"line_end":369,"column_start":5,"column_end":42}},{"value":"/ #     ) -> i32;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104555,"byte_end":104574,"line_start":370,"line_end":370,"column_start":5,"column_end":24}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104579,"byte_end":104586,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ # impl StreamWrapper {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104591,"byte_end":104617,"line_start":372,"line_end":372,"column_start":5,"column_end":31}},{"value":"/ pub fn get_dictionary(&self) -> Option<Vec<u8, U32768>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104622,"byte_end":104683,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/     // Per the FFI method's docs, \"32768 bytes is always enough\".","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104688,"byte_end":104757,"line_start":374,"line_end":374,"column_start":5,"column_end":74}},{"value":"/     let mut dict = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104762,"byte_end":104796,"line_start":375,"line_end":375,"column_start":5,"column_end":39}},{"value":"/     let mut dict_length = 0;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104801,"byte_end":104833,"line_start":376,"line_end":376,"column_start":5,"column_end":37}},{"value":"/     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104838,"byte_end":104915,"line_start":377,"line_end":377,"column_start":5,"column_end":82}},{"value":"/     // 1. `dict_length` elements were initialized.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104920,"byte_end":104974,"line_start":378,"line_end":378,"column_start":5,"column_end":59}},{"value":"/     // 2. `dict_length` <= the capacity (32_768)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":104979,"byte_end":105031,"line_start":379,"line_end":379,"column_start":5,"column_end":57}},{"value":"/     // which makes `set_len` safe to call.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105036,"byte_end":105082,"line_start":380,"line_end":380,"column_start":5,"column_end":51}},{"value":"/     unsafe {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105087,"byte_end":105103,"line_start":381,"line_end":381,"column_start":5,"column_end":21}},{"value":"/         // Make the FFI call...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105108,"byte_end":105143,"line_start":382,"line_end":382,"column_start":5,"column_end":40}},{"value":"/         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105148,"byte_end":105237,"line_start":383,"line_end":383,"column_start":5,"column_end":94}},{"value":"/         if r == Z_OK {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105242,"byte_end":105268,"line_start":384,"line_end":384,"column_start":5,"column_end":31}},{"value":"/             // ...and update the length to what was initialized.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105273,"byte_end":105341,"line_start":385,"line_end":385,"column_start":5,"column_end":73}},{"value":"/             dict.set_len(dict_length);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105346,"byte_end":105388,"line_start":386,"line_end":386,"column_start":5,"column_end":47}},{"value":"/             Some(dict)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105393,"byte_end":105419,"line_start":387,"line_end":387,"column_start":5,"column_end":31}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105424,"byte_end":105444,"line_start":388,"line_end":388,"column_start":5,"column_end":25}},{"value":"/             None","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105449,"byte_end":105469,"line_start":389,"line_end":389,"column_start":5,"column_end":25}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105474,"byte_end":105487,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105492,"byte_end":105501,"line_start":391,"line_end":391,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105506,"byte_end":105511,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105516,"byte_end":105523,"line_start":393,"line_end":393,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105528,"byte_end":105535,"line_start":394,"line_end":394,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105540,"byte_end":105543,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ While the following example is sound, there is a memory leak since","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105548,"byte_end":105618,"line_start":396,"line_end":396,"column_start":5,"column_end":75}},{"value":"/ the inner vectors were not freed prior to the `set_len` call:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105623,"byte_end":105688,"line_start":397,"line_end":397,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105693,"byte_end":105696,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105701,"byte_end":105708,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ use core::iter::FromIterator;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105713,"byte_end":105746,"line_start":400,"line_end":400,"column_start":5,"column_end":38}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105751,"byte_end":105773,"line_start":401,"line_end":401,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105778,"byte_end":105806,"line_start":402,"line_end":402,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105811,"byte_end":105814,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let mut vec = Vec::<Vec<u8, U3>, U3>::from_iter(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105819,"byte_end":105871,"line_start":404,"line_end":404,"column_start":5,"column_end":57}},{"value":"/     [","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105876,"byte_end":105885,"line_start":405,"line_end":405,"column_start":5,"column_end":14}},{"value":"/         Vec::from_iter([1, 0, 0].iter().cloned()),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105890,"byte_end":105944,"line_start":406,"line_end":406,"column_start":5,"column_end":59}},{"value":"/         Vec::from_iter([0, 1, 0].iter().cloned()),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":105949,"byte_end":106003,"line_start":407,"line_end":407,"column_start":5,"column_end":59}},{"value":"/         Vec::from_iter([0, 0, 1].iter().cloned()),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106008,"byte_end":106062,"line_start":408,"line_end":408,"column_start":5,"column_end":59}},{"value":"/     ]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106067,"byte_end":106076,"line_start":409,"line_end":409,"column_start":5,"column_end":14}},{"value":"/     .iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106081,"byte_end":106096,"line_start":410,"line_end":410,"column_start":5,"column_end":20}},{"value":"/     .cloned()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106101,"byte_end":106118,"line_start":411,"line_end":411,"column_start":5,"column_end":22}},{"value":"/ );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106123,"byte_end":106129,"line_start":412,"line_end":412,"column_start":5,"column_end":11}},{"value":"/ // SAFETY:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106134,"byte_end":106148,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/ // 1. `old_len..0` is empty so no elements need to be initialized.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106153,"byte_end":106223,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ // 2. `0 <= capacity` always holds whatever `capacity` is.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106228,"byte_end":106290,"line_start":415,"line_end":415,"column_start":5,"column_end":67}},{"value":"/ unsafe {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106295,"byte_end":106307,"line_start":416,"line_end":416,"column_start":5,"column_end":17}},{"value":"/     vec.set_len(0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106312,"byte_end":106335,"line_start":417,"line_end":417,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106340,"byte_end":106345,"line_start":418,"line_end":418,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106350,"byte_end":106357,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106362,"byte_end":106365,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ Normally, here, one would use [`clear`] instead to correctly drop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106370,"byte_end":106439,"line_start":421,"line_end":421,"column_start":5,"column_end":74}},{"value":"/ the contents and thus not leak memory.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106444,"byte_end":106486,"line_start":422,"line_end":422,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107416,"byte_end":107427,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<Vec<T, N>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes an element from the vector and returns it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106634,"byte_end":106688,"line_start":429,"line_end":429,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106693,"byte_end":106696,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The removed element is replaced by the last element of the vector.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106701,"byte_end":106771,"line_start":431,"line_end":431,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106776,"byte_end":106779,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106784,"byte_end":106833,"line_start":433,"line_end":433,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106838,"byte_end":106841,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106846,"byte_end":106858,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106863,"byte_end":106866,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106871,"byte_end":106910,"line_start":437,"line_end":437,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106915,"byte_end":106918,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106923,"byte_end":106937,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106942,"byte_end":106945,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106950,"byte_end":106957,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106962,"byte_end":106984,"line_start":442,"line_end":442,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":106989,"byte_end":107017,"line_start":443,"line_end":443,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107022,"byte_end":107025,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<_, U8> = Vec::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107030,"byte_end":107069,"line_start":445,"line_end":445,"column_start":5,"column_end":44}},{"value":"/ v.push(\"foo\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107074,"byte_end":107101,"line_start":446,"line_end":446,"column_start":5,"column_end":32}},{"value":"/ v.push(\"bar\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107106,"byte_end":107133,"line_start":447,"line_end":447,"column_start":5,"column_end":32}},{"value":"/ v.push(\"baz\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107138,"byte_end":107165,"line_start":448,"line_end":448,"column_start":5,"column_end":32}},{"value":"/ v.push(\"qux\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107170,"byte_end":107197,"line_start":449,"line_end":449,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107202,"byte_end":107205,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(1), \"bar\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107210,"byte_end":107250,"line_start":451,"line_end":451,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*v, [\"foo\", \"qux\", \"baz\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107255,"byte_end":107298,"line_start":452,"line_end":452,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107303,"byte_end":107306,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(0), \"foo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107311,"byte_end":107351,"line_start":454,"line_end":454,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*v, [\"baz\", \"qux\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107356,"byte_end":107392,"line_start":455,"line_end":455,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107397,"byte_end":107404,"line_start":456,"line_end":456,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108191,"byte_end":108202,"line_start":485,"line_end":485,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<Vec<T, N>>::starts_with","value":"pub fn starts_with(&Self, &[T]) -> bool where T: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the Vec.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the Vec.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107710,"byte_end":107764,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107769,"byte_end":107772,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ Always returns `true` if `needle` is an empty slice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107777,"byte_end":107833,"line_start":471,"line_end":471,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107838,"byte_end":107841,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107846,"byte_end":107860,"line_start":473,"line_end":473,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107865,"byte_end":107868,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107873,"byte_end":107880,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107885,"byte_end":107907,"line_start":476,"line_end":476,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107912,"byte_end":107940,"line_start":477,"line_end":477,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107945,"byte_end":107948,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_, U8> = Vec::from_slice(b\"abc\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":107953,"byte_end":108010,"line_start":479,"line_end":479,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(v.starts_with(b\"\"), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108015,"byte_end":108056,"line_start":480,"line_end":480,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(v.starts_with(b\"ab\"), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108061,"byte_end":108104,"line_start":481,"line_end":481,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(v.starts_with(b\"bc\"), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108109,"byte_end":108153,"line_start":482,"line_end":482,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108158,"byte_end":108165,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108170,"byte_end":108179,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108834,"byte_end":108843,"line_start":509,"line_end":509,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<Vec<T, N>>::ends_with","value":"pub fn ends_with(&Self, &[T]) -> bool where T: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the Vec.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the Vec.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108359,"byte_end":108413,"line_start":493,"line_end":493,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108418,"byte_end":108421,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Always returns `true` if `needle` is an empty slice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108426,"byte_end":108482,"line_start":495,"line_end":495,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108487,"byte_end":108490,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108495,"byte_end":108509,"line_start":497,"line_end":497,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108514,"byte_end":108517,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108522,"byte_end":108529,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108534,"byte_end":108556,"line_start":500,"line_end":500,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108561,"byte_end":108589,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108594,"byte_end":108597,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_, U8> = Vec::from_slice(b\"abc\").unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108602,"byte_end":108659,"line_start":503,"line_end":503,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(v.ends_with(b\"\"), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108664,"byte_end":108703,"line_start":504,"line_end":504,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.ends_with(b\"ab\"), false);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108708,"byte_end":108750,"line_start":505,"line_end":505,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(v.ends_with(b\"bc\"), true);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108755,"byte_end":108796,"line_start":506,"line_end":506,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108801,"byte_end":108808,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":108813,"byte_end":108822,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1014},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111551,"byte_end":111559,"line_start":649,"line_end":649,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018}],"decl_id":null,"docs":" An iterator that moves out of an [`Vec`][`Vec`].","sig":null,"attributes":[{"value":"/ An iterator that moves out of an [`Vec`][`Vec`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111330,"byte_end":111382,"line_start":643,"line_end":643,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111383,"byte_end":111386,"line_start":644,"line_end":644,"column_start":1,"column_end":4}},{"value":"/ This struct is created by calling the `into_iter` method on [`Vec`][`Vec`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111387,"byte_end":111466,"line_start":645,"line_end":645,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111467,"byte_end":111470,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ [`Vec`]: (https://doc.rust-lang.org/std/vec/struct.Vec.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111471,"byte_end":111535,"line_start":647,"line_end":647,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111536,"byte_end":111539,"line_start":648,"line_end":648,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1074},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::binary_heap","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1086},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1118},{"krate":0,"index":1124},{"krate":0,"index":1143},{"krate":0,"index":1149},{"krate":0,"index":1157},{"krate":0,"index":1164},{"krate":0,"index":1169},{"krate":0,"index":1175},{"krate":0,"index":1180},{"krate":0,"index":1186},{"krate":0,"index":1190},{"krate":0,"index":1195},{"krate":0,"index":1200},{"krate":0,"index":1205},{"krate":0,"index":1210}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":123323,"byte_end":123375,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":123376,"byte_end":123379,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Insertion and popping the largest element have `O(log n)` time complexity. Checking the largest","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":123380,"byte_end":123479,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ / smallest element is `O(1)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":123480,"byte_end":123513,"line_start":4,"line_end":4,"column_start":1,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":1112},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124001,"byte_end":124004,"line_start":24,"line_end":24,"column_start":10,"column_end":13},"name":"Min","qualname":"::binary_heap::Min","value":"pub enum Min { }","parent":null,"children":[],"decl_id":null,"docs":" Min-heap\n","sig":null,"attributes":[{"value":"/ Min-heap","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":123979,"byte_end":123991,"line_start":23,"line_end":23,"column_start":1,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":1113},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124031,"byte_end":124034,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Max","qualname":"::binary_heap::Max","value":"pub enum Max { }","parent":null,"children":[],"decl_id":null,"docs":" Max-heap\n","sig":null,"attributes":[{"value":"/ Max-heap","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124009,"byte_end":124021,"line_start":26,"line_end":26,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124215,"byte_end":124218,"line_start":32,"line_end":32,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::BinaryHeap<A, K>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `BinaryHeap` `const` constructor; wrap the returned value in\n [`BinaryHeap`](../struct.BinaryHeap.html)\n","sig":null,"attributes":[{"value":"/ `BinaryHeap` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124083,"byte_end":124147,"line_start":30,"line_end":30,"column_start":5,"column_end":69}},{"value":"/ [`BinaryHeap`](../struct.BinaryHeap.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124152,"byte_end":124197,"line_start":31,"line_end":31,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1118},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125898,"byte_end":125908,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::binary_heap::BinaryHeap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124337,"byte_end":124389,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124390,"byte_end":124393,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This can be either a min-heap or a max-heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124394,"byte_end":124442,"line_start":42,"line_end":42,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124443,"byte_end":124446,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the item's ordering relative","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124447,"byte_end":124545,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"/ to any other item, as determined by the `Ord` trait, changes while it is in the heap. This is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124546,"byte_end":124643,"line_start":45,"line_end":45,"column_start":1,"column_end":98}},{"value":"/ normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124644,"byte_end":124732,"line_start":46,"line_end":46,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124733,"byte_end":124736,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124737,"byte_end":124744,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124745,"byte_end":124794,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124795,"byte_end":124823,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124824,"byte_end":124827,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124828,"byte_end":124889,"line_start":52,"line_end":52,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124890,"byte_end":124893,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // We can use peek to look at the next item in the heap. In this case,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124894,"byte_end":124968,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ // there's no items in there yet so we get None.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124969,"byte_end":125021,"line_start":55,"line_end":55,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125022,"byte_end":125056,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125057,"byte_end":125060,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Let's add some scores...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125061,"byte_end":125092,"line_start":58,"line_end":58,"column_start":1,"column_end":32}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125093,"byte_end":125119,"line_start":59,"line_end":59,"column_start":1,"column_end":27}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125120,"byte_end":125146,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125147,"byte_end":125173,"line_start":61,"line_end":61,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125174,"byte_end":125177,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // Now peek shows the most important item in the heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125178,"byte_end":125236,"line_start":63,"line_end":63,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125237,"byte_end":125275,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125276,"byte_end":125279,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // We can check the length of a heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125280,"byte_end":125321,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125322,"byte_end":125352,"line_start":67,"line_end":67,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125353,"byte_end":125356,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // We can iterate over the items in the heap, although they are returned in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125357,"byte_end":125436,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/ // a random order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125437,"byte_end":125459,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"/ for x in &heap {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125460,"byte_end":125480,"line_start":71,"line_end":71,"column_start":1,"column_end":21}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125481,"byte_end":125507,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125508,"byte_end":125513,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125514,"byte_end":125517,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ // If we instead pop these scores, they should come back in order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125518,"byte_end":125588,"line_start":75,"line_end":75,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(heap.pop(), Some(5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125589,"byte_end":125625,"line_start":76,"line_end":76,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125626,"byte_end":125662,"line_start":77,"line_end":77,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125663,"byte_end":125699,"line_start":78,"line_end":78,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125700,"byte_end":125733,"line_start":79,"line_end":79,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125734,"byte_end":125737,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ // We can clear the heap of any remaining items.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125738,"byte_end":125790,"line_start":81,"line_end":81,"column_start":1,"column_end":53}},{"value":"/ heap.clear();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125791,"byte_end":125808,"line_start":82,"line_end":82,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125809,"byte_end":125812,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ // The heap should now be empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125813,"byte_end":125849,"line_start":84,"line_end":84,"column_start":1,"column_end":37}},{"value":"/ assert!(heap.is_empty())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125850,"byte_end":125878,"line_start":85,"line_end":85,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125879,"byte_end":125886,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":1123},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":125941,"byte_end":125991,"line_start":88,"line_end":88,"column_start":20,"column_end":70},"name":"0","qualname":"::binary_heap::BinaryHeap::0","value":"i::BinaryHeap<generic_array::GenericArray<T, N>, KIND>","parent":{"krate":0,"index":1118},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126661,"byte_end":126664,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryHeap<T, N, K>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty BinaryHeap as a $K-heap.","sig":null,"attributes":[{"value":"/ Creates an empty BinaryHeap as a $K-heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126170,"byte_end":126215,"line_start":102,"line_end":102,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126220,"byte_end":126223,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126228,"byte_end":126235,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126240,"byte_end":126289,"line_start":105,"line_end":105,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126294,"byte_end":126322,"line_start":106,"line_end":106,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126327,"byte_end":126330,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ // allocate the binary heap on the stack","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126335,"byte_end":126379,"line_start":108,"line_end":108,"column_start":5,"column_end":49}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126384,"byte_end":126445,"line_start":109,"line_end":109,"column_start":5,"column_end":66}},{"value":"/ heap.push(4).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126450,"byte_end":126476,"line_start":110,"line_end":110,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126481,"byte_end":126484,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ // allocate the binary heap in a static variable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126489,"byte_end":126541,"line_start":112,"line_end":112,"column_start":5,"column_end":57}},{"value":"/ static mut HEAP: BinaryHeap<i32, U8, Max> = BinaryHeap(heapless::i::BinaryHeap::new());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126546,"byte_end":126637,"line_start":113,"line_end":113,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126642,"byte_end":126649,"line_start":114,"line_end":114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126813,"byte_end":126821,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BinaryHeap<T, N, K>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the binary heap.\n","sig":null,"attributes":[{"value":"/ Returns the capacity of the binary heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126757,"byte_end":126801,"line_start":120,"line_end":120,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127305,"byte_end":127310,"line_start":141,"line_end":141,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinaryHeap<T, N, K>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the binary heap.","sig":null,"attributes":[{"value":"/ Drops all items from the binary heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126882,"byte_end":126923,"line_start":125,"line_end":125,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126928,"byte_end":126931,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126936,"byte_end":126943,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126948,"byte_end":126997,"line_start":128,"line_end":128,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127002,"byte_end":127030,"line_start":129,"line_end":129,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127035,"byte_end":127038,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127043,"byte_end":127104,"line_start":131,"line_end":131,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127109,"byte_end":127135,"line_start":132,"line_end":132,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127140,"byte_end":127166,"line_start":133,"line_end":133,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127171,"byte_end":127174,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127179,"byte_end":127209,"line_start":135,"line_end":135,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127214,"byte_end":127217,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ heap.clear();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127222,"byte_end":127239,"line_start":137,"line_end":137,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127244,"byte_end":127247,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127252,"byte_end":127281,"line_start":139,"line_end":139,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127286,"byte_end":127293,"line_start":140,"line_end":140,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127715,"byte_end":127718,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"len","qualname":"<BinaryHeap<T, N, K>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the binary heap.","sig":null,"attributes":[{"value":"/ Returns the length of the binary heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127363,"byte_end":127405,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127410,"byte_end":127413,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127418,"byte_end":127425,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127430,"byte_end":127479,"line_start":148,"line_end":148,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127484,"byte_end":127512,"line_start":149,"line_end":149,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127517,"byte_end":127520,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127525,"byte_end":127586,"line_start":151,"line_end":151,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127591,"byte_end":127617,"line_start":152,"line_end":152,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127622,"byte_end":127648,"line_start":153,"line_end":153,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127653,"byte_end":127656,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127661,"byte_end":127691,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127696,"byte_end":127703,"line_start":156,"line_end":156,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128202,"byte_end":128210,"line_start":177,"line_end":177,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinaryHeap<T, N, K>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the binary heap is empty.","sig":null,"attributes":[{"value":"/ Checks if the binary heap is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127772,"byte_end":127811,"line_start":161,"line_end":161,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127816,"byte_end":127819,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127824,"byte_end":127831,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127836,"byte_end":127885,"line_start":164,"line_end":164,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127890,"byte_end":127918,"line_start":165,"line_end":165,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127923,"byte_end":127926,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127931,"byte_end":127992,"line_start":167,"line_end":167,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":127997,"byte_end":128000,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128005,"byte_end":128034,"line_start":169,"line_end":169,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128039,"byte_end":128042,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128047,"byte_end":128073,"line_start":171,"line_end":171,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128078,"byte_end":128104,"line_start":172,"line_end":172,"column_start":5,"column_end":31}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128109,"byte_end":128135,"line_start":173,"line_end":173,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128140,"byte_end":128143,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128148,"byte_end":128178,"line_start":175,"line_end":175,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128183,"byte_end":128190,"line_start":176,"line_end":176,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128816,"byte_end":128820,"line_start":199,"line_end":199,"column_start":12,"column_end":16},"name":"iter","qualname":"<BinaryHeap<T, N, K>>::iter","value":"pub fn iter(&Self) -> slice::Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[{"value":"/ Returns an iterator visiting all values in the underlying vector, in arbitrary order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128263,"byte_end":128352,"line_start":181,"line_end":181,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128357,"byte_end":128360,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128365,"byte_end":128372,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128377,"byte_end":128426,"line_start":184,"line_end":184,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128431,"byte_end":128459,"line_start":185,"line_end":185,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128464,"byte_end":128467,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128472,"byte_end":128533,"line_start":187,"line_end":187,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128538,"byte_end":128564,"line_start":188,"line_end":188,"column_start":5,"column_end":31}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128569,"byte_end":128595,"line_start":189,"line_end":189,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128600,"byte_end":128626,"line_start":190,"line_end":190,"column_start":5,"column_end":31}},{"value":"/ heap.push(4).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128631,"byte_end":128657,"line_start":191,"line_end":191,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128662,"byte_end":128665,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128670,"byte_end":128712,"line_start":193,"line_end":193,"column_start":5,"column_end":47}},{"value":"/ for x in heap.iter() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128717,"byte_end":128743,"line_start":194,"line_end":194,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128748,"byte_end":128774,"line_start":195,"line_end":195,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128779,"byte_end":128782,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128787,"byte_end":128792,"line_start":197,"line_end":197,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128797,"byte_end":128804,"line_start":198,"line_end":198,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129128,"byte_end":129136,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BinaryHeap<T, N, K>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> slice::IterMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[{"value":"/ Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":128901,"byte_end":128997,"line_start":203,"line_end":203,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129002,"byte_end":129005,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ **WARNING** Mutating the items in the binary heap can leave the heap in an inconsistent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129010,"byte_end":129101,"line_start":205,"line_end":205,"column_start":5,"column_end":96}},{"value":"/ state.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129106,"byte_end":129116,"line_start":206,"line_end":206,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129743,"byte_end":129747,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"peek","qualname":"<BinaryHeap<T, N, K>>::peek","value":"pub fn peek(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or\n None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129232,"byte_end":129326,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ None if it is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129331,"byte_end":129355,"line_start":212,"line_end":212,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129360,"byte_end":129363,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129368,"byte_end":129375,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129380,"byte_end":129429,"line_start":215,"line_end":215,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129434,"byte_end":129462,"line_start":216,"line_end":216,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129467,"byte_end":129470,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129475,"byte_end":129536,"line_start":218,"line_end":218,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129541,"byte_end":129575,"line_start":219,"line_end":219,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129580,"byte_end":129583,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129588,"byte_end":129614,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129619,"byte_end":129645,"line_start":222,"line_end":222,"column_start":5,"column_end":31}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129650,"byte_end":129676,"line_start":223,"line_end":223,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129681,"byte_end":129719,"line_start":224,"line_end":224,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129724,"byte_end":129731,"line_start":225,"line_end":225,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130556,"byte_end":130564,"line_start":257,"line_end":257,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<BinaryHeap<T, N, K>>::peek_mut","value":"pub fn peek_mut(&mut Self) -> Option<PeekMut<, T, N, K>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the greatest item in the binary heap, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the greatest item in the binary heap, or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129820,"byte_end":129895,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/ `None` if it is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129900,"byte_end":129926,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129931,"byte_end":129934,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Note: If the `PeekMut` value is leaked, the heap may be in an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":129939,"byte_end":130004,"line_start":233,"line_end":233,"column_start":5,"column_end":70}},{"value":"/ inconsistent state.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130009,"byte_end":130032,"line_start":234,"line_end":234,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130037,"byte_end":130040,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130045,"byte_end":130059,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130064,"byte_end":130067,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130072,"byte_end":130088,"line_start":238,"line_end":238,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130093,"byte_end":130096,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130101,"byte_end":130108,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130113,"byte_end":130162,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130167,"byte_end":130195,"line_start":242,"line_end":242,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130200,"byte_end":130203,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130208,"byte_end":130269,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"/ assert!(heap.peek_mut().is_none());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130274,"byte_end":130313,"line_start":245,"line_end":245,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130318,"byte_end":130321,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ heap.push(1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130326,"byte_end":130343,"line_start":247,"line_end":247,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130348,"byte_end":130365,"line_start":248,"line_end":248,"column_start":5,"column_end":22}},{"value":"/ heap.push(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130370,"byte_end":130387,"line_start":249,"line_end":249,"column_start":5,"column_end":22}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130392,"byte_end":130397,"line_start":250,"line_end":250,"column_start":5,"column_end":10}},{"value":"/     let mut val = heap.peek_mut().unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130402,"byte_end":130449,"line_start":251,"line_end":251,"column_start":5,"column_end":52}},{"value":"/     *val = 0;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130454,"byte_end":130471,"line_start":252,"line_end":252,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130476,"byte_end":130481,"line_start":253,"line_end":253,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130486,"byte_end":130489,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.peek(), Some(&2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130494,"byte_end":130532,"line_start":255,"line_end":255,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130537,"byte_end":130544,"line_start":256,"line_end":256,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131327,"byte_end":131330,"line_start":283,"line_end":283,"column_start":12,"column_end":15},"name":"pop","qualname":"<BinaryHeap<T, N, K>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, or None if it is empty.","sig":null,"attributes":[{"value":"/ Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130792,"byte_end":130888,"line_start":268,"line_end":268,"column_start":5,"column_end":101}},{"value":"/ returns it, or None if it is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130893,"byte_end":130932,"line_start":269,"line_end":269,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130937,"byte_end":130940,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130945,"byte_end":130952,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":130957,"byte_end":131006,"line_start":272,"line_end":272,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131011,"byte_end":131039,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131044,"byte_end":131047,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131052,"byte_end":131113,"line_start":275,"line_end":275,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131118,"byte_end":131144,"line_start":276,"line_end":276,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131149,"byte_end":131175,"line_start":277,"line_end":277,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131180,"byte_end":131183,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.pop(), Some(3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131188,"byte_end":131224,"line_start":279,"line_end":279,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131229,"byte_end":131265,"line_start":280,"line_end":280,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131270,"byte_end":131303,"line_start":281,"line_end":281,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131308,"byte_end":131315,"line_start":282,"line_end":282,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131672,"byte_end":131685,"line_start":293,"line_end":293,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<BinaryHeap<T, N, K>>::pop_unchecked","value":"pub unsafe fn pop_unchecked(&mut Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, without checking if the binary heap is empty.\n","sig":null,"attributes":[{"value":"/ Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131491,"byte_end":131587,"line_start":291,"line_end":291,"column_start":5,"column_end":101}},{"value":"/ returns it, without checking if the binary heap is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131592,"byte_end":131653,"line_start":292,"line_end":292,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132369,"byte_end":132373,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"push","qualname":"<BinaryHeap<T, N, K>>::push","value":"pub fn push(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap.","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131945,"byte_end":131985,"line_start":303,"line_end":303,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131990,"byte_end":131993,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":131998,"byte_end":132005,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132010,"byte_end":132059,"line_start":306,"line_end":306,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132064,"byte_end":132092,"line_start":307,"line_end":307,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132097,"byte_end":132100,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132105,"byte_end":132166,"line_start":309,"line_end":309,"column_start":5,"column_end":66}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132171,"byte_end":132197,"line_start":310,"line_end":310,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132202,"byte_end":132228,"line_start":311,"line_end":311,"column_start":5,"column_end":31}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132233,"byte_end":132259,"line_start":312,"line_end":312,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132264,"byte_end":132267,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132272,"byte_end":132302,"line_start":314,"line_end":314,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132307,"byte_end":132345,"line_start":315,"line_end":315,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132350,"byte_end":132357,"line_start":316,"line_end":316,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132655,"byte_end":132669,"line_start":327,"line_end":327,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<BinaryHeap<T, N, K>>::push_unchecked","value":"pub unsafe fn push_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap without first checking if it's full.\n","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap without first checking if it's full.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":132560,"byte_end":132636,"line_start":326,"line_end":326,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1157},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136174,"byte_end":136181,"line_start":440,"line_end":440,"column_start":12,"column_end":19},"name":"PeekMut","qualname":"::binary_heap::PeekMut","value":"PeekMut {  }","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163}],"decl_id":null,"docs":" Structure wrapping a mutable reference to the greatest item on a\n `BinaryHeap`.","sig":null,"attributes":[{"value":"/ Structure wrapping a mutable reference to the greatest item on a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":135857,"byte_end":135925,"line_start":432,"line_end":432,"column_start":1,"column_end":69}},{"value":"/ `BinaryHeap`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":135926,"byte_end":135943,"line_start":433,"line_end":433,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":135944,"byte_end":135947,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":135948,"byte_end":136026,"line_start":435,"line_end":435,"column_start":1,"column_end":79}},{"value":"/ its documentation for more.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136027,"byte_end":136058,"line_start":436,"line_end":436,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136059,"byte_end":136062,"line_start":437,"line_end":437,"column_start":1,"column_end":4}},{"value":"/ [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136063,"byte_end":136119,"line_start":438,"line_end":438,"column_start":1,"column_end":57}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136120,"byte_end":136162,"line_start":439,"line_end":439,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137363,"byte_end":137366,"line_start":497,"line_end":497,"column_start":12,"column_end":15},"name":"pop","qualname":"<PeekMut>::pop","value":"pub fn pop(PeekMut) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the peeked value from the heap and returns it.\n","sig":null,"attributes":[{"value":"/ Removes the peeked value from the heap and returns it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137293,"byte_end":137351,"line_start":496,"line_end":496,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":1218},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i","qualname":"::i","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","parent":null,"children":[{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1238},{"krate":0,"index":1241},{"krate":0,"index":1248},{"krate":0,"index":1251}],"decl_id":null,"docs":" Unfortunate implementation detail required to construct `heapless` types in const context\n","sig":null,"attributes":[{"value":"/ Unfortunate implementation detail required to construct `heapless` types in const context","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142063,"byte_end":142156,"line_start":1,"line_end":1,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":1233},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142360,"byte_end":142370,"line_start":9,"line_end":9,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::i::BinaryHeap","value":"BinaryHeap {  }","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237}],"decl_id":null,"docs":" `const-fn` version of [`BinaryHeap`](../binary_heap/struct.BinaryHeap.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`BinaryHeap`](../binary_heap/struct.BinaryHeap.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142269,"byte_end":142348,"line_start":8,"line_end":8,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1238},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142526,"byte_end":142535,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::i::LinearMap","value":"LinearMap {  }","parent":null,"children":[{"krate":0,"index":1240}],"decl_id":null,"docs":" `const-fn` version of [`LinearMap`](../struct.LinearMap.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`LinearMap`](../struct.LinearMap.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142449,"byte_end":142514,"line_start":14,"line_end":14,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1241},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142675,"byte_end":142680,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Queue","qualname":"::i::Queue","value":"Queue {  }","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247}],"decl_id":null,"docs":" `const-fn` version of [`spsc::Queue`](../spsc/struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`spsc::Queue`](../spsc/struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142575,"byte_end":142643,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"cfg(has_atomics)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142644,"byte_end":142663,"line_start":20,"line_end":20,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1248},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142982,"byte_end":142988,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"String","qualname":"::i::String","value":"String {  }","parent":null,"children":[{"krate":0,"index":1250}],"decl_id":null,"docs":" `const-fn` version of [`String`](../struct.String.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`String`](../struct.String.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":142911,"byte_end":142970,"line_start":31,"line_end":31,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1251},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":143090,"byte_end":143093,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"Vec","qualname":"::i::Vec","value":"Vec {  }","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254}],"decl_id":null,"docs":" `const-fn` version of [`Vec`](../struct.Vec.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`Vec`](../struct.Vec.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/i.rs","byte_start":143025,"byte_end":143078,"line_start":36,"line_end":36,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1255},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpmc","qualname":"::mpmc","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1267},{"krate":0,"index":1270},{"krate":0,"index":1276},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1290},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1304},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1318},{"krate":0,"index":1324},{"krate":0,"index":1326},{"krate":0,"index":1332},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1346},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1363}],"decl_id":null,"docs":" A fixed capacity Multiple-Producer Multiple-Consumer (MPMC) lock-free queue","sig":null,"attributes":[{"value":"cfg(all(has_cas, feature = \"cas\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":4079,"byte_end":4116,"line_start":103,"line_end":103,"column_start":1,"column_end":38}},{"value":"/ A fixed capacity Multiple-Producer Multiple-Consumer (MPMC) lock-free queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143168,"byte_end":143247,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143248,"byte_end":143251,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support CAS operations, e.g. ARMv6-M","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143252,"byte_end":143352,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143353,"byte_end":143356,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143357,"byte_end":143370,"line_start":5,"line_end":5,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143371,"byte_end":143374,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This queue can be constructed in \"const context\". Placing it in a `static` variable lets *all*","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143375,"byte_end":143473,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ contexts (interrupts / threads / `main`) safely enqueue and dequeue items from it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143474,"byte_end":143560,"line_start":8,"line_end":8,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143561,"byte_end":143564,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143565,"byte_end":143579,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ #![no_main]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143580,"byte_end":143595,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/ #![no_std]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143596,"byte_end":143610,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143611,"byte_end":143614,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ use panic_semihosting as _;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143615,"byte_end":143646,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143647,"byte_end":143650,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ use cortex_m::{asm, peripheral::syst::SystClkSource};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143651,"byte_end":143708,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"/ use cortex_m_rt::{entry, exception};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143709,"byte_end":143749,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/ use cortex_m_semihosting::hprintln;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143750,"byte_end":143789,"line_start":18,"line_end":18,"column_start":1,"column_end":40}},{"value":"/ use heapless::mpmc::Q2;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143790,"byte_end":143817,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143818,"byte_end":143821,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ static Q: Q2<u8> = Q2::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143822,"byte_end":143855,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143856,"byte_end":143859,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ #[entry]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143860,"byte_end":143872,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143873,"byte_end":143893,"line_start":24,"line_end":24,"column_start":1,"column_end":21}},{"value":"/     if let Some(p) = cortex_m::Peripherals::take() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143894,"byte_end":143950,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/         let mut syst = p.SYST;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143951,"byte_end":143985,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143986,"byte_end":143989,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/         // configures the system timer to trigger a SysTick exception every second","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":143990,"byte_end":144076,"line_start":28,"line_end":28,"column_start":1,"column_end":87}},{"value":"/         syst.set_clock_source(SystClkSource::Core);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144077,"byte_end":144132,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/         syst.set_reload(12_000_000);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144133,"byte_end":144173,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/         syst.enable_counter();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144174,"byte_end":144208,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/         syst.enable_interrupt();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144209,"byte_end":144245,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144246,"byte_end":144255,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144256,"byte_end":144259,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144260,"byte_end":144274,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/         if let Some(x) = Q.dequeue() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144275,"byte_end":144317,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/             hprintln!(\"{}\", x).ok();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144318,"byte_end":144358,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144359,"byte_end":144379,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/             asm::wfi();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144380,"byte_end":144407,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144408,"byte_end":144421,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144422,"byte_end":144431,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144432,"byte_end":144437,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144438,"byte_end":144441,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ #[exception]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144442,"byte_end":144458,"line_start":44,"line_end":44,"column_start":1,"column_end":17}},{"value":"/ fn SysTick() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144459,"byte_end":144477,"line_start":45,"line_end":45,"column_start":1,"column_end":19}},{"value":"/     static mut COUNT: u8 = 0;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144478,"byte_end":144511,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144512,"byte_end":144515,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/     Q.enqueue(*COUNT).ok();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144516,"byte_end":144547,"line_start":48,"line_end":48,"column_start":1,"column_end":32}},{"value":"/     *COUNT += 1;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144548,"byte_end":144568,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144569,"byte_end":144574,"line_start":50,"line_end":50,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144575,"byte_end":144582,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144583,"byte_end":144586,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Benchmark","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144587,"byte_end":144602,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144603,"byte_end":144606,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Measured on a ARM Cortex-M3 core running at 8 MHz and with zero Flash wait cycles","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144607,"byte_end":144692,"line_start":55,"line_end":55,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144693,"byte_end":144696,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ N| `Q8::<u8>::enqueue().ok()` (`z`) | `Q8::<u8>::dequeue()` (`z`) |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144697,"byte_end":144768,"line_start":57,"line_end":57,"column_start":1,"column_end":72}},{"value":"/ -|----------------------------------|-----------------------------|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144769,"byte_end":144840,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/ 0|34                                |35                           |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144841,"byte_end":144912,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"/ 1|52                                |53                           |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144913,"byte_end":144984,"line_start":60,"line_end":60,"column_start":1,"column_end":72}},{"value":"/ 2|69                                |71                           |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":144985,"byte_end":145056,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145057,"byte_end":145060,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ - `N` denotes the number of *interruptions*. On Cortex-M, an interruption consists of an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145061,"byte_end":145153,"line_start":63,"line_end":63,"column_start":1,"column_end":93}},{"value":"/   interrupt handler preempting the would-be atomic section of the `enqueue` / `dequeue`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145154,"byte_end":145245,"line_start":64,"line_end":64,"column_start":1,"column_end":92}},{"value":"/   operation. Note that it does *not* matter if the higher priority handler uses the queue or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145246,"byte_end":145342,"line_start":65,"line_end":65,"column_start":1,"column_end":97}},{"value":"/   not.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145343,"byte_end":145353,"line_start":66,"line_end":66,"column_start":1,"column_end":11}},{"value":"/ - All execution times are in clock cycles. 1 clock cycle = 125 ns.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145354,"byte_end":145424,"line_start":67,"line_end":67,"column_start":1,"column_end":71}},{"value":"/ - Execution time is *dependent* of `mem::size_of::<T>()`. Both operations include one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145425,"byte_end":145514,"line_start":68,"line_end":68,"column_start":1,"column_end":90}},{"value":"/ `memcpy(T)` in their successful path.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145515,"byte_end":145556,"line_start":69,"line_end":69,"column_start":1,"column_end":42}},{"value":"/ - The optimization level is indicated in parentheses.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145557,"byte_end":145614,"line_start":70,"line_end":70,"column_start":1,"column_end":58}},{"value":"/ - The numbers reported correspond to the successful path (i.e. `Some` is returned by `dequeue`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145615,"byte_end":145713,"line_start":71,"line_end":71,"column_start":1,"column_end":99}},{"value":"/ and `Ok` is returned by `enqueue`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145714,"byte_end":145753,"line_start":72,"line_end":72,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145754,"byte_end":145757,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Portability","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145758,"byte_end":145775,"line_start":74,"line_end":74,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145776,"byte_end":145779,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ This module is not exposed to architectures that lack the instructions to implement CAS loops.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145780,"byte_end":145878,"line_start":76,"line_end":76,"column_start":1,"column_end":99}},{"value":"/ Those architectures include ARMv6-M (`thumbv6m-none-eabi`) and MSP430 (`msp430-none-elf`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145879,"byte_end":145973,"line_start":77,"line_end":77,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145974,"byte_end":145977,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # References","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145978,"byte_end":145994,"line_start":79,"line_end":79,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145995,"byte_end":145998,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This is an implementation of Dmitry Vyukov's [\"Bounded MPMC queue\"][0] minus the cache padding.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":145999,"byte_end":146098,"line_start":81,"line_end":81,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146099,"byte_end":146102,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [0]: http://www.1024cores.net/home/lock-free-algorithms/queues/bounded-mpmc-queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146103,"byte_end":146188,"line_start":83,"line_end":83,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":1270},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146347,"byte_end":146349,"line_start":92,"line_end":92,"column_start":12,"column_end":14},"name":"Q2","qualname":"::mpmc::Q2","value":"Q2 {  }","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1275}],"decl_id":null,"docs":" MPMC queue with a capacity for 2 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 2 elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146290,"byte_end":146335,"line_start":91,"line_end":91,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146543,"byte_end":146546,"line_start":102,"line_end":102,"column_start":18,"column_end":21},"name":"new","qualname":"<Q2<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146499,"byte_end":146525,"line_start":101,"line_end":101,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146839,"byte_end":146846,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q2<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146748,"byte_end":146827,"line_start":110,"line_end":110,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147082,"byte_end":147089,"line_start":118,"line_end":118,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q2<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146967,"byte_end":147009,"line_start":115,"line_end":115,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147014,"byte_end":147017,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147022,"byte_end":147070,"line_start":117,"line_end":117,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1284},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147431,"byte_end":147433,"line_start":133,"line_end":133,"column_start":12,"column_end":14},"name":"Q4","qualname":"::mpmc::Q4","value":"Q4 {  }","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1289}],"decl_id":null,"docs":" MPMC queue with a capacity for 4 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 4 elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147374,"byte_end":147419,"line_start":132,"line_end":132,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147627,"byte_end":147630,"line_start":143,"line_end":143,"column_start":18,"column_end":21},"name":"new","qualname":"<Q4<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147583,"byte_end":147609,"line_start":142,"line_end":142,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147951,"byte_end":147958,"line_start":152,"line_end":152,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q4<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147860,"byte_end":147939,"line_start":151,"line_end":151,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148194,"byte_end":148201,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q4<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148079,"byte_end":148121,"line_start":156,"line_end":156,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148126,"byte_end":148129,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148134,"byte_end":148182,"line_start":158,"line_end":158,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1298},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148543,"byte_end":148545,"line_start":174,"line_end":174,"column_start":12,"column_end":14},"name":"Q8","qualname":"::mpmc::Q8","value":"Q8 {  }","parent":null,"children":[{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1303}],"decl_id":null,"docs":" MPMC queue with a capacity for 8 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 8 elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148486,"byte_end":148531,"line_start":173,"line_end":173,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148739,"byte_end":148742,"line_start":184,"line_end":184,"column_start":18,"column_end":21},"name":"new","qualname":"<Q8<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148695,"byte_end":148721,"line_start":183,"line_end":183,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149262,"byte_end":149269,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q8<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149171,"byte_end":149250,"line_start":201,"line_end":201,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149505,"byte_end":149512,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q8<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149390,"byte_end":149432,"line_start":206,"line_end":206,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149437,"byte_end":149440,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149445,"byte_end":149493,"line_start":208,"line_end":208,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1312},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149855,"byte_end":149858,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"Q16","qualname":"::mpmc::Q16","value":"Q16 {  }","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1316},{"krate":0,"index":1317}],"decl_id":null,"docs":" MPMC queue with a capacity for 16 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 16 elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149797,"byte_end":149843,"line_start":223,"line_end":223,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":150055,"byte_end":150058,"line_start":234,"line_end":234,"column_start":18,"column_end":21},"name":"new","qualname":"<Q16<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":150011,"byte_end":150037,"line_start":233,"line_end":233,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":150824,"byte_end":150831,"line_start":260,"line_end":260,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q16<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":150733,"byte_end":150812,"line_start":259,"line_end":259,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151067,"byte_end":151074,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q16<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":150952,"byte_end":150994,"line_start":264,"line_end":264,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":150999,"byte_end":151002,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151007,"byte_end":151055,"line_start":266,"line_end":266,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151418,"byte_end":151421,"line_start":282,"line_end":282,"column_start":12,"column_end":15},"name":"Q32","qualname":"::mpmc::Q32","value":"Q32 {  }","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1331}],"decl_id":null,"docs":" MPMC queue with a capacity for 32 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 32 elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151360,"byte_end":151406,"line_start":281,"line_end":281,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151618,"byte_end":151621,"line_start":292,"line_end":292,"column_start":18,"column_end":21},"name":"new","qualname":"<Q32<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151574,"byte_end":151600,"line_start":291,"line_end":291,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":152883,"byte_end":152890,"line_start":334,"line_end":334,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q32<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":152792,"byte_end":152871,"line_start":333,"line_end":333,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153126,"byte_end":153133,"line_start":341,"line_end":341,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q32<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153011,"byte_end":153053,"line_start":338,"line_end":338,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153058,"byte_end":153061,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153066,"byte_end":153114,"line_start":340,"line_end":340,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1340},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153477,"byte_end":153480,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"Q64","qualname":"::mpmc::Q64","value":"Q64 {  }","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1345}],"decl_id":null,"docs":" MPMC queue with a capacity for 64 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 64 elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153419,"byte_end":153465,"line_start":355,"line_end":355,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153677,"byte_end":153680,"line_start":366,"line_end":366,"column_start":18,"column_end":21},"name":"new","qualname":"<Q64<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153633,"byte_end":153659,"line_start":365,"line_end":365,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":155934,"byte_end":155941,"line_start":440,"line_end":440,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q64<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":155843,"byte_end":155922,"line_start":439,"line_end":439,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":156177,"byte_end":156184,"line_start":447,"line_end":447,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q64<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":156062,"byte_end":156104,"line_start":444,"line_end":444,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":156109,"byte_end":156112,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":156117,"byte_end":156165,"line_start":446,"line_end":446,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1365},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::pool","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1377},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1397},{"krate":0,"index":1400},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1420},{"krate":0,"index":1546},{"krate":0,"index":1628},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1643},{"krate":0,"index":1648},{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1656},{"krate":0,"index":1659},{"krate":0,"index":1661},{"krate":0,"index":1665},{"krate":0,"index":1668},{"krate":0,"index":1672},{"krate":0,"index":1675},{"krate":0,"index":1678},{"krate":0,"index":1681},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1689},{"krate":0,"index":1692}],"decl_id":null,"docs":" A heap-less, interrupt-safe, lock-free memory pool (\\*)","sig":null,"attributes":[{"value":"cfg(all(has_cas, feature = \"cas\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":4131,"byte_end":4168,"line_start":105,"line_end":105,"column_start":1,"column_end":38}},{"value":"/ A heap-less, interrupt-safe, lock-free memory pool (\\*)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159366,"byte_end":159425,"line_start":1,"line_end":1,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159426,"byte_end":159429,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support CAS operations, e.g. ARMv6-M","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159430,"byte_end":159530,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159531,"byte_end":159534,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ (\\*) Currently, the implementation is only lock-free *and* `Sync` on ARMv7-{A,R,M} & ARMv8-M","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159535,"byte_end":159631,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ devices","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159632,"byte_end":159643,"line_start":6,"line_end":6,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159644,"byte_end":159647,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159648,"byte_end":159662,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159663,"byte_end":159666,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The most common way of using this pool is as a global singleton; the singleton mode gives you","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159667,"byte_end":159764,"line_start":10,"line_end":10,"column_start":1,"column_end":98}},{"value":"/ automatic deallocation of memory blocks on `drop`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159765,"byte_end":159819,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159820,"byte_end":159823,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159824,"byte_end":159838,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/ #![no_main]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159839,"byte_end":159854,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/ #![no_std]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159855,"byte_end":159869,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159870,"byte_end":159873,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ use heapless::{pool, pool::singleton::Box};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159874,"byte_end":159921,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159922,"byte_end":159925,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // instantiate a memory pool of `[u8; 128]` blocks as a global singleton","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":159926,"byte_end":160002,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ pool!(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160003,"byte_end":160013,"line_start":20,"line_end":20,"column_start":1,"column_end":11}},{"value":"/     // attributes can be used here","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160014,"byte_end":160052,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/     // #[link_section = \".ccram.A\"]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160053,"byte_end":160092,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/     A: [u8; 128]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160093,"byte_end":160113,"line_start":23,"line_end":23,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160114,"byte_end":160120,"line_start":24,"line_end":24,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160121,"byte_end":160124,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ #[entry]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160125,"byte_end":160137,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160138,"byte_end":160158,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/     static mut MEMORY: [u8; 1024] = [0; 1024];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160159,"byte_end":160209,"line_start":28,"line_end":28,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160210,"byte_end":160213,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/     // increase the capacity of the pool by ~8 blocks","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160214,"byte_end":160271,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/     A::grow(MEMORY);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160272,"byte_end":160296,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160297,"byte_end":160300,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/     // claim a block of memory","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160301,"byte_end":160335,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/     // note that the type is `Box<A>`, and not `Box<[u8; 128]>`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160336,"byte_end":160403,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/     // `A` is the \"name\" of the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160404,"byte_end":160444,"line_start":35,"line_end":35,"column_start":1,"column_end":41}},{"value":"/     let x: Box<A, _> = A::alloc().unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160445,"byte_end":160492,"line_start":36,"line_end":36,"column_start":1,"column_end":48}},{"value":"/     loop {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160493,"byte_end":160507,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/         // .. do stuff with `x` ..","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160508,"byte_end":160546,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160547,"byte_end":160556,"line_start":39,"line_end":39,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160557,"byte_end":160562,"line_start":40,"line_end":40,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160563,"byte_end":160566,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ #[exception]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160567,"byte_end":160583,"line_start":42,"line_end":42,"column_start":1,"column_end":17}},{"value":"/ fn SysTick() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160584,"byte_end":160602,"line_start":43,"line_end":43,"column_start":1,"column_end":19}},{"value":"/     // claim a block of memory","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160603,"byte_end":160637,"line_start":44,"line_end":44,"column_start":1,"column_end":35}},{"value":"/     let y = A::alloc().unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160638,"byte_end":160674,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160675,"byte_end":160678,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/     // .. do stuff with `y` ..","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160679,"byte_end":160713,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160714,"byte_end":160717,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     // return the memory block to the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160718,"byte_end":160764,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/     drop(y);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160765,"byte_end":160781,"line_start":50,"line_end":50,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160782,"byte_end":160787,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160788,"byte_end":160795,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160796,"byte_end":160799,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Portability","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160800,"byte_end":160817,"line_start":54,"line_end":54,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160818,"byte_end":160821,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This pool internally uses a Treiber stack which is known to be susceptible to the ABA problem.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160822,"byte_end":160920,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ The only counter measure against the ABA problem that this implementation currently takes is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":160921,"byte_end":161017,"line_start":57,"line_end":57,"column_start":1,"column_end":97}},{"value":"/ relying on LL/SC (Link-local / Store-conditional) instructions being used to implement CAS loops","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161018,"byte_end":161118,"line_start":58,"line_end":58,"column_start":1,"column_end":101}},{"value":"/ on the target architecture (see section on ['Soundness'](#soundness) for more information). For","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161119,"byte_end":161218,"line_start":59,"line_end":59,"column_start":1,"column_end":100}},{"value":"/ this reason, `Pool` only implements `Sync` when compiling for some ARM cores.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161219,"byte_end":161300,"line_start":60,"line_end":60,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161301,"byte_end":161304,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Also note that ARMv6-M architecture lacks the primitives for CAS loops so this module does *not*","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161305,"byte_end":161405,"line_start":62,"line_end":62,"column_start":1,"column_end":101}},{"value":"/ exist for `thumbv6m-none-eabi`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161406,"byte_end":161441,"line_start":63,"line_end":63,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161442,"byte_end":161445,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Soundness","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161446,"byte_end":161461,"line_start":65,"line_end":65,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161462,"byte_end":161465,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This pool uses a Treiber stack to keep a list of free memory blocks (nodes). Each of these","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161466,"byte_end":161560,"line_start":67,"line_end":67,"column_start":1,"column_end":95}},{"value":"/ nodes has a pointer to the next node. To claim a memory block we simply pop a node from the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161561,"byte_end":161656,"line_start":68,"line_end":68,"column_start":1,"column_end":96}},{"value":"/ top of the stack and use it as a memory block. The pop operation consists of swapping the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161657,"byte_end":161750,"line_start":69,"line_end":69,"column_start":1,"column_end":94}},{"value":"/ current head (top) node with the node below it. The Rust code for the `pop` operation is shown","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161751,"byte_end":161849,"line_start":70,"line_end":70,"column_start":1,"column_end":99}},{"value":"/ below:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161850,"byte_end":161860,"line_start":71,"line_end":71,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161861,"byte_end":161864,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161865,"byte_end":161879,"line_start":73,"line_end":73,"column_start":1,"column_end":15}},{"value":"/ fn pop(&self) -> Option<NonNull<Node<T>>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161880,"byte_end":161927,"line_start":74,"line_end":74,"column_start":1,"column_end":48}},{"value":"/     let fetch_order = ..;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161928,"byte_end":161957,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"/     let set_order = ..;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161958,"byte_end":161985,"line_start":76,"line_end":76,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161986,"byte_end":161989,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/     // `self.head` has type `AtomicPtr<Node<T>>`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":161990,"byte_end":162042,"line_start":78,"line_end":78,"column_start":1,"column_end":53}},{"value":"/     // where `struct Node<T> { next: AtomicPtr<Node<T>>, data: UnsafeCell<T> }`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162043,"byte_end":162126,"line_start":79,"line_end":79,"column_start":1,"column_end":84}},{"value":"/     let mut head = self.head.load(fetch_order);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162127,"byte_end":162178,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/     loop {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162179,"byte_end":162193,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/         if let Some(nn_head) = NonNull::new(head) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162194,"byte_end":162249,"line_start":82,"line_end":82,"column_start":1,"column_end":56}},{"value":"/             let next = unsafe { (*head).next.load(Ordering::Relaxed) };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162250,"byte_end":162325,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162326,"byte_end":162329,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/             // <~ preempted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162330,"byte_end":162361,"line_start":85,"line_end":85,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162362,"byte_end":162365,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/             match self","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162366,"byte_end":162392,"line_start":87,"line_end":87,"column_start":1,"column_end":27}},{"value":"/                 .head","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162393,"byte_end":162418,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"/                 .compare_exchange_weak(head, next, set_order, fetch_order)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162419,"byte_end":162497,"line_start":89,"line_end":89,"column_start":1,"column_end":79}},{"value":"/             {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162498,"byte_end":162515,"line_start":90,"line_end":90,"column_start":1,"column_end":18}},{"value":"/                 Ok(_) => break Some(nn_head),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162516,"byte_end":162565,"line_start":91,"line_end":91,"column_start":1,"column_end":50}},{"value":"/                 // head was changed by some interrupt handler / thread","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162566,"byte_end":162640,"line_start":92,"line_end":92,"column_start":1,"column_end":75}},{"value":"/                 Err(new_head) => head = new_head,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162641,"byte_end":162694,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/             }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162695,"byte_end":162712,"line_start":94,"line_end":94,"column_start":1,"column_end":18}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162713,"byte_end":162733,"line_start":95,"line_end":95,"column_start":1,"column_end":21}},{"value":"/             // stack is observed as empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162734,"byte_end":162779,"line_start":96,"line_end":96,"column_start":1,"column_end":46}},{"value":"/             break None;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162780,"byte_end":162807,"line_start":97,"line_end":97,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162808,"byte_end":162821,"line_start":98,"line_end":98,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162822,"byte_end":162831,"line_start":99,"line_end":99,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162832,"byte_end":162837,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162838,"byte_end":162845,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162846,"byte_end":162849,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ In general, the `pop` operation is susceptible to the ABA problem. If this operation gets","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162850,"byte_end":162943,"line_start":103,"line_end":103,"column_start":1,"column_end":94}},{"value":"/ preempted by some interrupt handler somewhere between the `head.load` and the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":162944,"byte_end":163025,"line_start":104,"line_end":104,"column_start":1,"column_end":82}},{"value":"/ `compare_and_exchange_weak`, and that handler modifies the stack in such a way that the head","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163026,"byte_end":163122,"line_start":105,"line_end":105,"column_start":1,"column_end":97}},{"value":"/ (top) of the stack remains unchanged then resuming the `pop` operation will corrupt the stack.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163123,"byte_end":163221,"line_start":106,"line_end":106,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163222,"byte_end":163225,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ An example: imagine we are doing on `pop` on stack that contains these nodes: `A -> B -> C`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163226,"byte_end":163322,"line_start":108,"line_end":108,"column_start":1,"column_end":97}},{"value":"/ `A` is the head (top), `B` is next to `A` and `C` is next to `B`. The `pop` operation will do a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163323,"byte_end":163422,"line_start":109,"line_end":109,"column_start":1,"column_end":100}},{"value":"/ `CAS(&self.head, A, B)` operation to atomically change the head to `B` iff it currently is `A`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163423,"byte_end":163522,"line_start":110,"line_end":110,"column_start":1,"column_end":100}},{"value":"/ Now, let's say a handler preempts the `pop` operation before the `CAS` operation starts and it","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163523,"byte_end":163621,"line_start":111,"line_end":111,"column_start":1,"column_end":99}},{"value":"/ `pop`s the stack twice and then `push`es back the `A` node; now the state of the stack is `A ->","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163622,"byte_end":163721,"line_start":112,"line_end":112,"column_start":1,"column_end":100}},{"value":"/ C`. When the original `pop` operation is resumed it will succeed in doing the `CAS` operation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163722,"byte_end":163819,"line_start":113,"line_end":113,"column_start":1,"column_end":98}},{"value":"/ setting `B` as the head of the stack. However, `B` was used by the handler as a memory block and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163820,"byte_end":163920,"line_start":114,"line_end":114,"column_start":1,"column_end":101}},{"value":"/ no longer is a valid free node. As a result the stack, and thus the allocator, is in a invalid","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":163921,"byte_end":164019,"line_start":115,"line_end":115,"column_start":1,"column_end":99}},{"value":"/ state.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164020,"byte_end":164030,"line_start":116,"line_end":116,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164031,"byte_end":164034,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ However, not all is lost because ARM devices use LL/SC (Link-local / Store-conditional)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164035,"byte_end":164126,"line_start":118,"line_end":118,"column_start":1,"column_end":92}},{"value":"/ operations to implement CAS loops. Let's look at the actual disassembly of `pop` for the ARM","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164127,"byte_end":164223,"line_start":119,"line_end":119,"column_start":1,"column_end":97}},{"value":"/ Cortex-M.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164224,"byte_end":164237,"line_start":120,"line_end":120,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164238,"byte_end":164241,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ``` text","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164242,"byte_end":164254,"line_start":122,"line_end":122,"column_start":1,"column_end":13}},{"value":"/ 08000130 <<heapless::pool::Pool<T>>::pop>:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164255,"byte_end":164301,"line_start":123,"line_end":123,"column_start":1,"column_end":47}},{"value":"/  8000130:       6802            ldr     r2, [r0, #0]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164302,"byte_end":164358,"line_start":124,"line_end":124,"column_start":1,"column_end":57}},{"value":"/  8000132:       e00c            b.n     800014e <<heapless::pool::Pool<T>>::pop+0x1e>","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164359,"byte_end":164448,"line_start":125,"line_end":125,"column_start":1,"column_end":90}},{"value":"/  8000134:       4611            mov     r1, r2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164449,"byte_end":164499,"line_start":126,"line_end":126,"column_start":1,"column_end":51}},{"value":"/  8000136:       f8d2 c000       ldr.w   ip, [r2]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164500,"byte_end":164552,"line_start":127,"line_end":127,"column_start":1,"column_end":53}},{"value":"/  800013a:       e850 2f00       ldrex   r2, [r0]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164553,"byte_end":164605,"line_start":128,"line_end":128,"column_start":1,"column_end":53}},{"value":"/  800013e:       428a            cmp     r2, r1","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164606,"byte_end":164656,"line_start":129,"line_end":129,"column_start":1,"column_end":51}},{"value":"/  8000140:       d103            bne.n   800014a <<heapless::pool::Pool<T>>::pop+0x1a>","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164657,"byte_end":164746,"line_start":130,"line_end":130,"column_start":1,"column_end":90}},{"value":"/  8000142:       e840 c300       strex   r3, ip, [r0]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164747,"byte_end":164803,"line_start":131,"line_end":131,"column_start":1,"column_end":57}},{"value":"/  8000146:       b913            cbnz    r3, 800014e <<heapless::pool::Pool<T>>::pop+0x1e>","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164804,"byte_end":164897,"line_start":132,"line_end":132,"column_start":1,"column_end":94}},{"value":"/  8000148:       e004            b.n     8000154 <<heapless::pool::Pool<T>>::pop+0x24>","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164898,"byte_end":164987,"line_start":133,"line_end":133,"column_start":1,"column_end":90}},{"value":"/  800014a:       f3bf 8f2f       clrex","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":164988,"byte_end":165029,"line_start":134,"line_end":134,"column_start":1,"column_end":42}},{"value":"/  800014e:       2a00            cmp     r2, #0","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165030,"byte_end":165080,"line_start":135,"line_end":135,"column_start":1,"column_end":51}},{"value":"/  8000150:       d1f0            bne.n   8000134 <<heapless::pool::Pool<T>>::pop+0x4>","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165081,"byte_end":165169,"line_start":136,"line_end":136,"column_start":1,"column_end":89}},{"value":"/  8000152:       2100            movs    r1, #0","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165170,"byte_end":165220,"line_start":137,"line_end":137,"column_start":1,"column_end":51}},{"value":"/  8000154:       4608            mov     r0, r1","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165221,"byte_end":165271,"line_start":138,"line_end":138,"column_start":1,"column_end":51}},{"value":"/  8000156:       4770            bx      lr","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165272,"byte_end":165318,"line_start":139,"line_end":139,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165319,"byte_end":165326,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165327,"byte_end":165330,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ LDREX (\"load exclusive\") is the LL instruction, and STREX (\"store exclusive\") is the SC","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165331,"byte_end":165422,"line_start":142,"line_end":142,"column_start":1,"column_end":92}},{"value":"/ instruction (see [1](#references)). On the Cortex-M, STREX will always fail if the processor","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165423,"byte_end":165519,"line_start":143,"line_end":143,"column_start":1,"column_end":97}},{"value":"/ takes an exception between it and its corresponding LDREX operation (see [2](#references)). If","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165520,"byte_end":165618,"line_start":144,"line_end":144,"column_start":1,"column_end":99}},{"value":"/ STREX fails then the CAS loop is retried (see instruction @ `0x8000146`). On single core","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165619,"byte_end":165711,"line_start":145,"line_end":145,"column_start":1,"column_end":93}},{"value":"/ systems, preemption is required to run into the ABA problem and on Cortex-M devices preemption","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165712,"byte_end":165810,"line_start":146,"line_end":146,"column_start":1,"column_end":99}},{"value":"/ always involves taking an exception. Thus the underlying LL/SC operations prevent the ABA","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165811,"byte_end":165904,"line_start":147,"line_end":147,"column_start":1,"column_end":94}},{"value":"/ problem on Cortex-M.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165905,"byte_end":165929,"line_start":148,"line_end":148,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165930,"byte_end":165933,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ In the case of multi-core systems if any other core successfully does a STREX op on the head","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":165934,"byte_end":166030,"line_start":150,"line_end":150,"column_start":1,"column_end":97}},{"value":"/ while the current core is somewhere between LDREX and STREX then the current core will fail its","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166031,"byte_end":166130,"line_start":151,"line_end":151,"column_start":1,"column_end":100}},{"value":"/ STREX operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166131,"byte_end":166151,"line_start":152,"line_end":152,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166152,"byte_end":166155,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ # x86_64 support / limitations","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166156,"byte_end":166190,"line_start":154,"line_end":154,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166191,"byte_end":166194,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ *NOTE* `Pool` is only `Sync` on `x86_64` if the Cargo feature \"x86-sync-pool\" is enabled","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166195,"byte_end":166287,"line_start":156,"line_end":156,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166288,"byte_end":166291,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ x86_64 support is a gamble. Yes, a gamble. Do you feel lucky enough to use `Pool` on x86_64?","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166292,"byte_end":166388,"line_start":158,"line_end":158,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166389,"byte_end":166392,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ As it's not possible to implement *ideal* LL/SC semantics (\\*) on x86_64 the architecture is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166393,"byte_end":166489,"line_start":160,"line_end":160,"column_start":1,"column_end":97}},{"value":"/ susceptible to the ABA problem described above. To *reduce the chances* of ABA occurring in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166490,"byte_end":166585,"line_start":161,"line_end":161,"column_start":1,"column_end":96}},{"value":"/ practice we use version tags (keyword: IBM ABA-prevention tags). Again, this approach does","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166586,"byte_end":166680,"line_start":162,"line_end":162,"column_start":1,"column_end":95}},{"value":"/ *not* fix / prevent / avoid the ABA problem; it only reduces the chance of it occurring in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166681,"byte_end":166775,"line_start":163,"line_end":163,"column_start":1,"column_end":95}},{"value":"/ practice but the chances of it occurring are not reduced to zero.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166776,"byte_end":166845,"line_start":164,"line_end":164,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166846,"byte_end":166849,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ How we have implemented version tags: instead of using an `AtomicPtr` to link the stack `Node`s","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166850,"byte_end":166949,"line_start":166,"line_end":166,"column_start":1,"column_end":100}},{"value":"/ we use an `AtomicUsize` where the 64-bit `usize` is always comprised of a monotonically","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":166950,"byte_end":167041,"line_start":167,"line_end":167,"column_start":1,"column_end":92}},{"value":"/ increasing 32-bit tag (higher bits) and a 32-bit signed address offset. The address of a node is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167042,"byte_end":167142,"line_start":168,"line_end":168,"column_start":1,"column_end":101}},{"value":"/ computed by adding the 32-bit offset to an \"anchor\" address (the address of a static variable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167143,"byte_end":167240,"line_start":169,"line_end":169,"column_start":1,"column_end":98}},{"value":"/ that lives somewhere in the `.bss` linker section). The tag is increased every time a node is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167241,"byte_end":167338,"line_start":170,"line_end":170,"column_start":1,"column_end":98}},{"value":"/ popped (removed) from the stack.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167339,"byte_end":167375,"line_start":171,"line_end":171,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167376,"byte_end":167379,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ To see how version tags can prevent ABA consider the example from the previous section. Let's","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167380,"byte_end":167477,"line_start":173,"line_end":173,"column_start":1,"column_end":98}},{"value":"/ start with a stack in this state: `(~A, 0) -> (~B, 1) -> (~C, 2)`, where `~A` represents the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167478,"byte_end":167574,"line_start":174,"line_end":174,"column_start":1,"column_end":97}},{"value":"/ address of node A as a 32-bit offset from the \"anchor\" and the second tuple element (e.g. `0`)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167575,"byte_end":167673,"line_start":175,"line_end":175,"column_start":1,"column_end":99}},{"value":"/ indicates the version of the node. For simplicity, assume a single core system: thread T1 is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167674,"byte_end":167770,"line_start":176,"line_end":176,"column_start":1,"column_end":97}},{"value":"/ performing `pop` and before `CAS(&self.head, (~A, 0), (~B, 1))` is executed a context switch","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167771,"byte_end":167867,"line_start":177,"line_end":177,"column_start":1,"column_end":97}},{"value":"/ occurs and the core resumes T2. T2 pops the stack twice and pushes A back into the stack;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167868,"byte_end":167961,"line_start":178,"line_end":178,"column_start":1,"column_end":94}},{"value":"/ because the `pop` operation increases the version the stack ends in the following state: `(~A,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":167962,"byte_end":168060,"line_start":179,"line_end":179,"column_start":1,"column_end":99}},{"value":"/ 1) -> (~C, 2)`. Now if T1 is resumed the CAS operation will fail because `self.head` is `(~A,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168061,"byte_end":168158,"line_start":180,"line_end":180,"column_start":1,"column_end":98}},{"value":"/ 1)` and not `(~A, 0)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168159,"byte_end":168185,"line_start":181,"line_end":181,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168186,"byte_end":168189,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ When can version tags fail to prevent ABA? Using the previous example: if T2 performs a `push`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168190,"byte_end":168288,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"/ followed by a `pop` `(1 << 32) - 1` times before doing its original `pop` - `pop` - `push`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168289,"byte_end":168383,"line_start":184,"line_end":184,"column_start":1,"column_end":95}},{"value":"/ operation then ABA will occur because the version tag of node `A` will wraparound to its","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168384,"byte_end":168476,"line_start":185,"line_end":185,"column_start":1,"column_end":93}},{"value":"/ original value of `0` and the CAS operation in T1 will succeed and corrupt the stack.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168477,"byte_end":168566,"line_start":186,"line_end":186,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168567,"byte_end":168570,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ It does seem unlikely that (1) a thread will perform the above operation and (2) that the above","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168571,"byte_end":168670,"line_start":188,"line_end":188,"column_start":1,"column_end":100}},{"value":"/ operation will complete within one time slice, assuming time sliced threads. If you have thread","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168671,"byte_end":168770,"line_start":189,"line_end":189,"column_start":1,"column_end":100}},{"value":"/ priorities then the above operation could occur during the lifetime of many high priorities","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168771,"byte_end":168866,"line_start":190,"line_end":190,"column_start":1,"column_end":96}},{"value":"/ threads if T1 is running at low priority.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168867,"byte_end":168912,"line_start":191,"line_end":191,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168913,"byte_end":168916,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ Other implementations of version tags use more than 32 bits in their tags (e.g. \"Scalable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":168917,"byte_end":169010,"line_start":193,"line_end":193,"column_start":1,"column_end":94}},{"value":"/ Lock-Free Dynamic Memory Allocation\" uses 42-bit tags in its super blocks). In theory, one could","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169011,"byte_end":169111,"line_start":194,"line_end":194,"column_start":1,"column_end":101}},{"value":"/ use double-word CAS on x86_64 to pack a 64-bit tag and a 64-bit pointer in a double-word but","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169112,"byte_end":169208,"line_start":195,"line_end":195,"column_start":1,"column_end":97}},{"value":"/ this CAS operation is not exposed in the standard library (and I think it's not available on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169209,"byte_end":169305,"line_start":196,"line_end":196,"column_start":1,"column_end":97}},{"value":"/ older x86_64 processors?)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169306,"byte_end":169335,"line_start":197,"line_end":197,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169336,"byte_end":169339,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ (\\*) Apparently one can emulate proper LL/SC semantics on x86_64 using hazard pointers (?) --","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169340,"byte_end":169437,"line_start":199,"line_end":199,"column_start":1,"column_end":98}},{"value":"/ the technique appears to be documented in \"ABA Prevention Using Single-Word Instructions\", which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169438,"byte_end":169538,"line_start":200,"line_end":200,"column_start":1,"column_end":101}},{"value":"/ is not public AFAICT -- but hazard pointers require Thread Local Storage (TLS), which is a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169539,"byte_end":169633,"line_start":201,"line_end":201,"column_start":1,"column_end":95}},{"value":"/ non-starter for a `no_std` library like `heapless`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169634,"byte_end":169689,"line_start":202,"line_end":202,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169690,"byte_end":169693,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ## x86_64 Limitations","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169694,"byte_end":169719,"line_start":204,"line_end":204,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169720,"byte_end":169723,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ Because stack nodes must be located within +- 2 GB of the hidden `ANCHOR` variable, which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169724,"byte_end":169817,"line_start":206,"line_end":206,"column_start":1,"column_end":94}},{"value":"/ lives in the `.bss` section, `Pool` may not be able to manage static references created using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169818,"byte_end":169915,"line_start":207,"line_end":207,"column_start":1,"column_end":98}},{"value":"/ `Box::leak` -- these heap allocated chunks of memory may live in a very different address space.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":169916,"byte_end":170016,"line_start":208,"line_end":208,"column_start":1,"column_end":101}},{"value":"/ When the `Pool` is unable to manage a node because of its address it will simply discard it:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170017,"byte_end":170113,"line_start":209,"line_end":209,"column_start":1,"column_end":97}},{"value":"/ `Pool::grow*` methods return the number of new memory blocks added to the pool; if these methods","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170114,"byte_end":170214,"line_start":210,"line_end":210,"column_start":1,"column_end":101}},{"value":"/ return `0` it means the `Pool` is unable to manage the memory given to them.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170215,"byte_end":170295,"line_start":211,"line_end":211,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170296,"byte_end":170299,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ # References","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170300,"byte_end":170316,"line_start":213,"line_end":213,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170317,"byte_end":170320,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ 1. [Cortex-M3 Devices Generic User Guide (DUI 0552A)][0], Section 2.2.7 \"Synchronization","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170321,"byte_end":170413,"line_start":215,"line_end":215,"column_start":1,"column_end":93}},{"value":"/ primitives\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170414,"byte_end":170429,"line_start":216,"line_end":216,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170430,"byte_end":170433,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ [0]: http://infocenter.arm.com/help/topic/com.arm.doc.dui0552a/DUI0552A_cortex_m3_dgug.pdf","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170434,"byte_end":170528,"line_start":218,"line_end":218,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170529,"byte_end":170532,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ 2. [ARMv7-M Architecture Reference Manual (DDI 0403E.b)][1], Section A3.4 \"Synchronization and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170533,"byte_end":170631,"line_start":220,"line_end":220,"column_start":1,"column_end":99}},{"value":"/ semaphores\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170632,"byte_end":170647,"line_start":221,"line_end":221,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170648,"byte_end":170651,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ [1]: https://static.docs.arm.com/ddi0403/eb/DDI0403E_B_armv7m_arm.pdf","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170652,"byte_end":170725,"line_start":223,"line_end":223,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170726,"byte_end":170729,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ 3. \"Scalable Lock-Free Dynamic Memory Allocation\" Michael, Maged M.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170730,"byte_end":170801,"line_start":225,"line_end":225,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170802,"byte_end":170805,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ 4. \"Hazard pointers: Safe memory reclamation for lock-free objects.\" Michael, Maged M.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":170806,"byte_end":170896,"line_start":227,"line_end":227,"column_start":1,"column_end":91}}]},{"kind":"Mod","id":{"krate":0,"index":1420},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"singleton","qualname":"::pool::singleton","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","parent":null,"children":[{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1425},{"krate":0,"index":1428},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1435},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1445},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1452},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1462},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1469},{"krate":0,"index":1472},{"krate":0,"index":1475},{"krate":0,"index":1483},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1509},{"krate":0,"index":1512},{"krate":0,"index":1516},{"krate":0,"index":1519},{"krate":0,"index":1522},{"krate":0,"index":1527},{"krate":0,"index":1531},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1539},{"krate":0,"index":1542}],"decl_id":null,"docs":" `Pool` as a global singleton\n","sig":null,"attributes":[{"value":"/ `Pool` as a global singleton","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":180502,"byte_end":180534,"line_start":1,"line_end":1,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":1475},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181429,"byte_end":181433,"line_start":44,"line_end":44,"column_start":11,"column_end":15},"name":"Pool","qualname":"::pool::singleton::Pool","value":"Pool","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1481}],"decl_id":null,"docs":" A global singleton memory pool\n","sig":null,"attributes":[{"value":"/ A global singleton memory pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181384,"byte_end":181418,"line_start":43,"line_end":43,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":1476},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181505,"byte_end":181509,"line_start":46,"line_end":46,"column_start":10,"column_end":14},"name":"Data","qualname":"::pool::singleton::Pool::Data","value":"type Data: 'static;","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" The type of data that can be allocated on this pool\n","sig":null,"attributes":[{"value":"/ The type of data that can be allocated on this pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181440,"byte_end":181495,"line_start":45,"line_end":45,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181547,"byte_end":181550,"line_start":49,"line_end":49,"column_start":8,"column_end":11},"name":"ptr","qualname":"::pool::singleton::Pool::ptr","value":"pub fn ptr() -> &'static super::Pool<Self::Data>","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181816,"byte_end":181821,"line_start":56,"line_end":56,"column_start":8,"column_end":13},"name":"alloc","qualname":"::pool::singleton::Pool::alloc","value":"pub fn alloc() -> Option<Box<Self, Uninit>> where Self: Sized","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[{"value":"/ Claims a memory block from the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181595,"byte_end":181634,"line_start":51,"line_end":51,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181639,"byte_end":181642,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the pool is observed as exhausted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181647,"byte_end":181704,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181709,"byte_end":181712,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time; i.e. it contains a CAS loop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":181717,"byte_end":181808,"line_start":55,"line_end":55,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182248,"byte_end":182252,"line_start":71,"line_end":71,"column_start":8,"column_end":12},"name":"grow","qualname":"::pool::singleton::Pool::grow","value":"pub fn grow(&'static mut [u8]) -> usize","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182009,"byte_end":182047,"line_start":66,"line_end":66,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182052,"byte_end":182055,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This method might *not* fully utilize the given memory block due to alignment requirements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182060,"byte_end":182154,"line_start":68,"line_end":68,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182159,"byte_end":182162,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This method returns the number of *new* blocks that can be allocated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182167,"byte_end":182240,"line_start":70,"line_end":70,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182511,"byte_end":182521,"line_start":79,"line_end":79,"column_start":8,"column_end":18},"name":"grow_exact","qualname":"::pool::singleton::Pool::grow_exact","value":"pub fn grow_exact<A>(&'static mut MaybeUninit<A>) -> usize where\nA: AsMutSlice<Element = Node<Self::Data>>","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182335,"byte_end":182373,"line_start":75,"line_end":75,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182378,"byte_end":182381,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Pool.grow`](trait.Pool.html#method.grow_exact) this method fully utilizes the given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182386,"byte_end":182482,"line_start":77,"line_end":77,"column_start":5,"column_end":101}},{"value":"/ memory block","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182487,"byte_end":182503,"line_start":78,"line_end":78,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1483},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182763,"byte_end":182766,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::singleton::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487}],"decl_id":null,"docs":" A memory block that belongs to the global memory pool, `POOL`\n","sig":null,"attributes":[{"value":"/ A memory block that belongs to the global memory pool, `POOL`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182686,"byte_end":182751,"line_start":87,"line_end":87,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182999,"byte_end":183003,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<P, Uninit>>::init","value":"pub fn init(Self, P::Data) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[{"value":"/ Initializes this memory block","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182954,"byte_end":182987,"line_start":101,"line_end":101,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":183604,"byte_end":183610,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Box<P, Uninit>>::freeze","value":"pub fn freeze(Self) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Freezes the contents of this memory block","sig":null,"attributes":[{"value":"/ Freezes the contents of this memory block","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":183445,"byte_end":183490,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":183495,"byte_end":183498,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ See [rust-lang/rust#58363](https://github.com/rust-lang/rust/pull/58363) for details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":183503,"byte_end":183592,"line_start":128,"line_end":128,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184441,"byte_end":184447,"line_start":157,"line_end":157,"column_start":12,"column_end":18},"name":"forget","qualname":"<Box<P, Init>>::forget","value":"pub fn forget(Self) -> Box<P, Uninit>","parent":null,"children":[],"decl_id":null,"docs":" Forgets the contents of this memory block without running its destructor.","sig":null,"attributes":[{"value":"/ Forgets the contents of this memory block without running its destructor.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184197,"byte_end":184274,"line_start":153,"line_end":153,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184279,"byte_end":184282,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Note that this this does not return the memory block to the pool. The","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184287,"byte_end":184360,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ block can be reused, or returned to the pool by dropping it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184365,"byte_end":184429,"line_start":156,"line_end":156,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1573},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":189434,"byte_end":189438,"line_start":18,"line_end":18,"column_start":12,"column_end":16},"name":"Node","qualname":"::pool::stack::Node","value":"Node {  }","parent":null,"children":[{"krate":0,"index":1575},{"krate":0,"index":1576}],"decl_id":null,"docs":" Unfortunate implementation detail required to use the\n [`Pool.grow_exact`](struct.Pool.html#method.grow_exact) method\n","sig":null,"attributes":[{"value":"/ Unfortunate implementation detail required to use the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":189298,"byte_end":189355,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"/ [`Pool.grow_exact`](struct.Pool.html#method.grow_exact) method","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":189356,"byte_end":189422,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1628},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171335,"byte_end":171339,"line_start":250,"line_end":250,"column_start":12,"column_end":16},"name":"Pool","qualname":"::pool::Pool","value":"Pool {  }","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1631}],"decl_id":null,"docs":" A lock-free memory pool\n","sig":null,"attributes":[{"value":"/ A lock-free memory pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171296,"byte_end":171323,"line_start":249,"line_end":249,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1636},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171926,"byte_end":171929,"line_start":273,"line_end":273,"column_start":18,"column_end":21},"name":"new","qualname":"<Pool<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty pool\n","sig":null,"attributes":[{"value":"/ Creates a new empty pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171880,"byte_end":171908,"line_start":272,"line_end":272,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1637},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172283,"byte_end":172288,"line_start":286,"line_end":286,"column_start":12,"column_end":17},"name":"alloc","qualname":"<Pool<T>>::alloc","value":"pub fn alloc(&Self) -> Option<Box<T, Uninit>>","parent":null,"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[{"value":"/ Claims a memory block from the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172056,"byte_end":172095,"line_start":281,"line_end":281,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172100,"byte_end":172103,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the pool is observed as exhausted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172108,"byte_end":172165,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172170,"byte_end":172173,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time because it contains a CAS loop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172178,"byte_end":172271,"line_start":285,"line_end":285,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1638},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172939,"byte_end":172943,"line_start":309,"line_end":309,"column_start":12,"column_end":16},"name":"free","qualname":"<Pool<T>>::free","value":"pub fn free<S>(&Self, Box<T, S>) where S: 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a memory block to the pool","sig":null,"attributes":[{"value":"/ Returns a memory block to the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172698,"byte_end":172736,"line_start":304,"line_end":304,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172741,"byte_end":172744,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ *NOTE*: `T`'s destructor (if any) will run on `value` iff `S = Init`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172749,"byte_end":172821,"line_start":306,"line_end":306,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172826,"byte_end":172829,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time because it contains a CAS loop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":172834,"byte_end":172927,"line_start":308,"line_end":308,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":173561,"byte_end":173565,"line_start":332,"line_end":332,"column_start":12,"column_end":16},"name":"grow","qualname":"<Pool<T>>::grow","value":"pub fn grow(&Self, &'static mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":173317,"byte_end":173355,"line_start":327,"line_end":327,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":173360,"byte_end":173363,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This method might *not* fully utilize the given memory block due to alignment requirements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":173368,"byte_end":173463,"line_start":329,"line_end":329,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":173468,"byte_end":173471,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This method returns the number of *new* blocks that can be allocated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":173476,"byte_end":173549,"line_start":331,"line_end":331,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":174989,"byte_end":174999,"line_start":385,"line_end":385,"column_start":12,"column_end":22},"name":"grow_exact","qualname":"<Pool<T>>::grow_exact","value":"pub fn grow_exact<A>(&Self, &'static mut MaybeUninit<A>) -> usize where\nA: AsMutSlice<Element = Node<T>>","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":174814,"byte_end":174852,"line_start":381,"line_end":381,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":174857,"byte_end":174860,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Pool.grow`](struct.Pool.html#method.grow) this method fully utilizes the given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":174865,"byte_end":174956,"line_start":383,"line_end":383,"column_start":5,"column_end":96}},{"value":"/ memory block","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":174961,"byte_end":174977,"line_start":384,"line_end":384,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1643},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":175753,"byte_end":175756,"line_start":413,"line_end":413,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1646},{"krate":0,"index":1647}],"decl_id":null,"docs":" A memory block\n","sig":null,"attributes":[{"value":"/ A memory block","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":175723,"byte_end":175741,"line_start":412,"line_end":412,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1650},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":175909,"byte_end":175913,"line_start":420,"line_end":420,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<T, Uninit>>::init","value":"pub fn init(Self, T) -> Box<T, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[{"value":"/ Initializes this memory block","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":175864,"byte_end":175897,"line_start":419,"line_end":419,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":1651},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176167,"byte_end":176173,"line_start":433,"line_end":433,"column_start":10,"column_end":16},"name":"Uninit","qualname":"::pool::Uninit","value":"pub enum Uninit { }","parent":null,"children":[],"decl_id":null,"docs":" Uninitialized type state\n","sig":null,"attributes":[{"value":"/ Uninitialized type state","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176129,"byte_end":176157,"line_start":432,"line_end":432,"column_start":1,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":1652},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176214,"byte_end":176218,"line_start":436,"line_end":436,"column_start":10,"column_end":14},"name":"Init","qualname":"::pool::Init","value":"pub enum Init { }","parent":null,"children":[],"decl_id":null,"docs":" Initialized type state\n","sig":null,"attributes":[{"value":"/ Initialized type state","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176178,"byte_end":176204,"line_start":435,"line_end":435,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":1696},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spsc","qualname":"::spsc","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","parent":null,"children":[{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1704},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1713},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1803},{"krate":0,"index":1807},{"krate":0,"index":1815},{"krate":0,"index":1822},{"krate":0,"index":1832},{"krate":0,"index":1838},{"krate":0,"index":1844},{"krate":0,"index":1851},{"krate":0,"index":1858},{"krate":0,"index":1867},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1880},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":2790},{"krate":0,"index":2794},{"krate":0,"index":2797},{"krate":0,"index":2801},{"krate":0,"index":2804},{"krate":0,"index":2813},{"krate":0,"index":2818},{"krate":0,"index":2822},{"krate":0,"index":2825},{"krate":0,"index":2829},{"krate":0,"index":2832},{"krate":0,"index":2841},{"krate":0,"index":2846},{"krate":0,"index":2850},{"krate":0,"index":2853},{"krate":0,"index":2857},{"krate":0,"index":2860},{"krate":0,"index":2869},{"krate":0,"index":1891},{"krate":0,"index":1901},{"krate":0,"index":1906},{"krate":0,"index":1915},{"krate":0,"index":1922},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":2874},{"krate":0,"index":2882},{"krate":0,"index":2889},{"krate":0,"index":2897}],"decl_id":null,"docs":" Fixed capacity Single Producer Single Consumer (SPSC) queue","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":4183,"byte_end":4202,"line_start":107,"line_end":107,"column_start":1,"column_end":20}},{"value":"/ Fixed capacity Single Producer Single Consumer (SPSC) queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194037,"byte_end":194100,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194101,"byte_end":194104,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support atomic loads, e.g. RISC-V","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194105,"byte_end":194202,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ cores w/o the A (Atomic) extension","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194203,"byte_end":194241,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194242,"byte_end":194245,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194246,"byte_end":194260,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194261,"byte_end":194264,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ - `Queue` can be used as a plain queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194265,"byte_end":194307,"line_start":8,"line_end":8,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194308,"byte_end":194311,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194312,"byte_end":194319,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use heapless::spsc::Queue;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194320,"byte_end":194350,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194351,"byte_end":194379,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194380,"byte_end":194383,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let mut rb: Queue<u8, U4> = Queue::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194384,"byte_end":194429,"line_start":14,"line_end":14,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194430,"byte_end":194433,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ assert!(rb.enqueue(0).is_ok());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194434,"byte_end":194469,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(1).is_ok());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194470,"byte_end":194505,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(2).is_ok());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194506,"byte_end":194541,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(3).is_ok());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194542,"byte_end":194577,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(4).is_err()); // full","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194578,"byte_end":194622,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194623,"byte_end":194626,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(rb.dequeue(), Some(0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194627,"byte_end":194665,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194666,"byte_end":194673,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194674,"byte_end":194677,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - `Queue` can be `split` and then be used in Single Producer Single Consumer mode","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194678,"byte_end":194763,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194764,"byte_end":194767,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194768,"byte_end":194775,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use heapless::spsc::Queue;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194776,"byte_end":194806,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194807,"byte_end":194835,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194836,"byte_end":194839,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ static mut Q: Queue<Event, U4> = Queue(heapless::i::Queue::new());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194840,"byte_end":194910,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194911,"byte_end":194914,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ enum Event { A, B }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194915,"byte_end":194938,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194939,"byte_end":194942,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194943,"byte_end":194958,"line_start":35,"line_end":35,"column_start":1,"column_end":16}},{"value":"/     // NOTE(unsafe) beware of aliasing the `consumer` end point","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":194959,"byte_end":195026,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/     let mut consumer = unsafe { Q.split().1 };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195027,"byte_end":195077,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195078,"byte_end":195081,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195082,"byte_end":195096,"line_start":39,"line_end":39,"column_start":1,"column_end":15}},{"value":"/         // `dequeue` is a lockless operation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195097,"byte_end":195145,"line_start":40,"line_end":40,"column_start":1,"column_end":49}},{"value":"/         match consumer.dequeue() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195146,"byte_end":195184,"line_start":41,"line_end":41,"column_start":1,"column_end":39}},{"value":"/             Some(Event::A) => { /* .. */ },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195185,"byte_end":195232,"line_start":42,"line_end":42,"column_start":1,"column_end":48}},{"value":"/             Some(Event::B) => { /* .. */ },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195233,"byte_end":195280,"line_start":43,"line_end":43,"column_start":1,"column_end":48}},{"value":"/             None => { /* sleep */ },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195281,"byte_end":195321,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195322,"byte_end":195335,"line_start":45,"line_end":45,"column_start":1,"column_end":14}},{"value":"/ #       break","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195336,"byte_end":195353,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195354,"byte_end":195363,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195364,"byte_end":195369,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195370,"byte_end":195373,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // this is a different execution context that can preempt `main`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195374,"byte_end":195442,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ fn interrupt_handler() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195443,"byte_end":195471,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/     // NOTE(unsafe) beware of aliasing the `producer` end point","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195472,"byte_end":195539,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/     let mut producer = unsafe { Q.split().0 };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195540,"byte_end":195590,"line_start":53,"line_end":53,"column_start":1,"column_end":51}},{"value":"/ #   let condition = true;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195591,"byte_end":195620,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195621,"byte_end":195624,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195625,"byte_end":195638,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195639,"byte_end":195642,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/     if condition {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195643,"byte_end":195665,"line_start":58,"line_end":58,"column_start":1,"column_end":23}},{"value":"/         producer.enqueue(Event::A).ok().unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195666,"byte_end":195719,"line_start":59,"line_end":59,"column_start":1,"column_end":54}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195720,"byte_end":195736,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/         producer.enqueue(Event::B).ok().unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195737,"byte_end":195790,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195791,"byte_end":195800,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195801,"byte_end":195804,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195805,"byte_end":195818,"line_start":64,"line_end":64,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195819,"byte_end":195824,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195825,"byte_end":195832,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195833,"byte_end":195836,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Benchmarks","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195837,"byte_end":195853,"line_start":68,"line_end":68,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195854,"byte_end":195857,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Measured on a ARM Cortex-M3 core running at 8 MHz and with zero Flash wait cycles","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195858,"byte_end":195943,"line_start":70,"line_end":70,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195944,"byte_end":195947,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ `-C opt-level`         |`3`|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195948,"byte_end":195980,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/ -----------------------|---|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":195981,"byte_end":196013,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/ `Consumer<u8>::dequeue`| 15|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196014,"byte_end":196046,"line_start":74,"line_end":74,"column_start":1,"column_end":33}},{"value":"/ `Queue<u8>::dequeue`   | 12|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196047,"byte_end":196079,"line_start":75,"line_end":75,"column_start":1,"column_end":33}},{"value":"/ `Producer<u8>::enqueue`| 16|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196080,"byte_end":196112,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/ `Queue<u8>::enqueue`   | 14|","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196113,"byte_end":196145,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196146,"byte_end":196149,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ - All execution times are in clock cycles. 1 clock cycle = 125 ns.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196150,"byte_end":196220,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ - Execution time is *dependent* of `mem::size_of::<T>()`. Both operations include one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196221,"byte_end":196310,"line_start":80,"line_end":80,"column_start":1,"column_end":90}},{"value":"/ `memcpy(T)` in their successful path.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196311,"byte_end":196352,"line_start":81,"line_end":81,"column_start":1,"column_end":42}},{"value":"/ - The optimization level is indicated in the first row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196353,"byte_end":196412,"line_start":82,"line_end":82,"column_start":1,"column_end":60}},{"value":"/ - The numbers reported correspond to the successful path (i.e. `Some` is returned by `dequeue`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196413,"byte_end":196511,"line_start":83,"line_end":83,"column_start":1,"column_end":99}},{"value":"/ and `Ok` is returned by `enqueue`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196512,"byte_end":196551,"line_start":84,"line_end":84,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":220054,"byte_end":220059,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"name":"split","qualname":"<Queue<T, N, U, C>>::split","value":"pub fn split<'rb>(&'rb mut Self) -> (Producer, Consumer)","parent":null,"children":[],"decl_id":null,"docs":" Splits a statically allocated queue into producer and consumer end points\n","sig":null,"attributes":[{"value":"/ Splits a statically allocated queue into producer and consumer end points","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":219965,"byte_end":220042,"line_start":16,"line_end":16,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":220585,"byte_end":220593,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"Consumer","qualname":"::spsc::split::Consumer","value":"Consumer {  }","parent":null,"children":[{"krate":0,"index":1771},{"krate":0,"index":1772}],"decl_id":null,"docs":" A queue \"consumer\"; it can dequeue items from the queue\n","sig":null,"attributes":[{"value":"/ A queue \"consumer\"; it can dequeue items from the queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":220443,"byte_end":220502,"line_start":31,"line_end":31,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1779},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":221069,"byte_end":221077,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"Producer","qualname":"::spsc::split::Producer","value":"Producer {  }","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786}],"decl_id":null,"docs":" A queue \"producer\"; it can enqueue items into the queue\n","sig":null,"attributes":[{"value":"/ A queue \"producer\"; it can enqueue items into the queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":220927,"byte_end":220986,"line_start":52,"line_end":52,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1794},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196874,"byte_end":196883,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"MultiCore","qualname":"::spsc::MultiCore","value":"","parent":null,"children":[],"decl_id":null,"docs":" Multi core synchronization - a memory barrier is used for synchronization\n","sig":null,"attributes":[{"value":"/ Multi core synchronization - a memory barrier is used for synchronization","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196785,"byte_end":196862,"line_start":96,"line_end":96,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1796},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196988,"byte_end":196998,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"SingleCore","qualname":"::spsc::SingleCore","value":"","parent":null,"children":[],"decl_id":null,"docs":" Single core synchronization - no memory barrier synchronization, just a compiler fence\n","sig":null,"attributes":[{"value":"/ Single core synchronization - no memory barrier synchronization, just a compiler fence","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":196886,"byte_end":196976,"line_start":99,"line_end":99,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1815},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199104,"byte_end":199109,"line_start":164,"line_end":164,"column_start":12,"column_end":17},"name":"Queue","qualname":"::spsc::Queue","value":"","parent":null,"children":[],"decl_id":null,"docs":" A statically allocated single producer single consumer queue with a capacity of `N` elements","sig":null,"attributes":[{"value":"/ A statically allocated single producer single consumer queue with a capacity of `N` elements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":197892,"byte_end":197988,"line_start":144,"line_end":144,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":197989,"byte_end":197992,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ *IMPORTANT*: To get better performance use a capacity that is a power of 2 (e.g. `U16`, `U32`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":197993,"byte_end":198091,"line_start":146,"line_end":146,"column_start":1,"column_end":99}},{"value":"/ etc.).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198092,"byte_end":198102,"line_start":147,"line_end":147,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198103,"byte_end":198106,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ By default `spsc::Queue` will use `usize` integers to hold the indices to its head and tail. For","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198107,"byte_end":198207,"line_start":149,"line_end":149,"column_start":1,"column_end":101}},{"value":"/ small queues `usize` indices may be overkill. However, `spsc::Queue`'s index type is generic and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198208,"byte_end":198308,"line_start":150,"line_end":150,"column_start":1,"column_end":101}},{"value":"/ can be changed to `u8` or `u16` to reduce its footprint. The easiest to construct a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198309,"byte_end":198396,"line_start":151,"line_end":151,"column_start":1,"column_end":88}},{"value":"/ `spsc::Queue` with a smaller index type is to use the [`u8`] and [`u16`] constructors.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198397,"byte_end":198487,"line_start":152,"line_end":152,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198488,"byte_end":198491,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ [`u8`]: struct.Queue.html#method.u8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198492,"byte_end":198531,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/ [`u16`]: struct.Queue.html#method.u16","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198532,"byte_end":198573,"line_start":155,"line_end":155,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198574,"byte_end":198577,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ *IMPORTANT*: `spsc::Queue<_, _, u8>` has a maximum capacity of 255 elements; `spsc::Queue<_, _,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198578,"byte_end":198677,"line_start":157,"line_end":157,"column_start":1,"column_end":100}},{"value":"/ u16>` has a maximum capacity of 65535 elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198678,"byte_end":198729,"line_start":158,"line_end":158,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198730,"byte_end":198733,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ `spsc::Queue` also comes in a single core variant. This variant can be created using the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198734,"byte_end":198826,"line_start":160,"line_end":160,"column_start":1,"column_end":93}},{"value":"/ following constructors: `u8_sc`, `u16_sc`, `usize_sc` and `new_sc`. This variant is `unsafe` to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198827,"byte_end":198926,"line_start":161,"line_end":161,"column_start":1,"column_end":100}},{"value":"/ create because the programmer must make sure that the queue's consumer and producer endpoints","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":198927,"byte_end":199024,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ (if split) are kept on a single core for their entire lifetime.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199025,"byte_end":199092,"line_start":163,"line_end":163,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199162,"byte_end":199207,"line_start":165,"line_end":165,"column_start":20,"column_end":65},"name":"0","qualname":"::spsc::Queue::0","value":"i::Queue<generic_array::GenericArray<T, N>, U, C>","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199468,"byte_end":199476,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Queue<T, N, U, C>>::capacity","value":"pub fn capacity(&Self) -> U","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the queue can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the queue can hold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199395,"byte_end":199456,"line_start":178,"line_end":178,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199598,"byte_end":199606,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Queue<T, N, U, C>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue has a length of 0\n","sig":null,"attributes":[{"value":"/ Returns `true` if the queue has a length of 0","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199537,"byte_end":199586,"line_start":183,"line_end":183,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199729,"byte_end":199733,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"iter","qualname":"<Queue<T, N, U, C>>::iter","value":"pub fn iter(&Self) -> Iter<, T, N, U, C>","parent":null,"children":[],"decl_id":null,"docs":" Iterates from the front of the queue to the back\n","sig":null,"attributes":[{"value":"/ Iterates from the front of the queue to the back","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199665,"byte_end":199717,"line_start":188,"line_end":188,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199951,"byte_end":199959,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Queue<T, N, U, C>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, T, N, U, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199882,"byte_end":199939,"line_start":197,"line_end":197,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208422,"byte_end":208425,"line_start":475,"line_end":475,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::Queue<A, usize, MultiCore>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208296,"byte_end":208361,"line_start":473,"line_end":473,"column_start":5,"column_end":70}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208366,"byte_end":208404,"line_start":474,"line_end":474,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208636,"byte_end":208639,"line_start":485,"line_end":485,"column_start":12,"column_end":15},"name":"new","qualname":"<Queue<T, N, usize, MultiCore>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`spsc::Queue::usize`](struct.Queue.html#method.usize)\n","sig":null,"attributes":[{"value":"/ Alias for [`spsc::Queue::usize`](struct.Queue.html#method.usize)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208556,"byte_end":208624,"line_start":484,"line_end":484,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208884,"byte_end":208890,"line_start":493,"line_end":493,"column_start":25,"column_end":31},"name":"new_sc","qualname":"<crate::i::Queue<A, usize, SingleCore>>::new_sc","value":"pub const unsafe fn new_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208751,"byte_end":208816,"line_start":491,"line_end":491,"column_start":5,"column_end":70}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208821,"byte_end":208859,"line_start":492,"line_end":492,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209118,"byte_end":209124,"line_start":503,"line_end":503,"column_start":19,"column_end":25},"name":"new_sc","qualname":"<Queue<T, N, usize, SingleCore>>::new_sc","value":"pub unsafe fn new_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`spsc::Queue::usize_sc`](struct.Queue.html#method.usize_sc)\n","sig":null,"attributes":[{"value":"/ Alias for [`spsc::Queue::usize_sc`](struct.Queue.html#method.usize_sc)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209025,"byte_end":209099,"line_start":502,"line_end":502,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2793},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209194,"byte_end":209196,"line_start":508,"line_end":508,"column_start":8,"column_end":10},"name":"u8","qualname":"<Queue<T, N, u8, MultiCore>>::u8","value":"pub fn u8() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202253,"byte_end":202308,"line_start":306,"line_end":306,"column_start":13,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2796},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209194,"byte_end":209196,"line_start":508,"line_end":508,"column_start":8,"column_end":10},"name":"u8","qualname":"<crate::i::Queue<A, u8, MultiCore>>::u8","value":"pub const fn u8() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202483,"byte_end":202548,"line_start":313,"line_end":313,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202561,"byte_end":202599,"line_start":314,"line_end":314,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2800},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209198,"byte_end":209203,"line_start":508,"line_end":508,"column_start":12,"column_end":17},"name":"u8_sc","qualname":"<Queue<T, N, u8, SingleCore>>::u8_sc","value":"pub unsafe fn u8_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N` (single core variant)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202970,"byte_end":203047,"line_start":328,"line_end":328,"column_start":13,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2803},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209198,"byte_end":209203,"line_start":508,"line_end":508,"column_start":12,"column_end":17},"name":"u8_sc","qualname":"<crate::i::Queue<A, u8, SingleCore>>::u8_sc","value":"pub const unsafe fn u8_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":203236,"byte_end":203301,"line_start":335,"line_end":335,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":203314,"byte_end":203352,"line_start":336,"line_end":336,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2821},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209213,"byte_end":209216,"line_start":509,"line_end":509,"column_start":8,"column_end":11},"name":"u16","qualname":"<Queue<T, N, u16, MultiCore>>::u16","value":"pub fn u16() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202253,"byte_end":202308,"line_start":306,"line_end":306,"column_start":13,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2824},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209213,"byte_end":209216,"line_start":509,"line_end":509,"column_start":8,"column_end":11},"name":"u16","qualname":"<crate::i::Queue<A, u16, MultiCore>>::u16","value":"pub const fn u16() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202483,"byte_end":202548,"line_start":313,"line_end":313,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202561,"byte_end":202599,"line_start":314,"line_end":314,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209218,"byte_end":209224,"line_start":509,"line_end":509,"column_start":13,"column_end":19},"name":"u16_sc","qualname":"<Queue<T, N, u16, SingleCore>>::u16_sc","value":"pub unsafe fn u16_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N` (single core variant)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202970,"byte_end":203047,"line_start":328,"line_end":328,"column_start":13,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209218,"byte_end":209224,"line_start":509,"line_end":509,"column_start":13,"column_end":19},"name":"u16_sc","qualname":"<crate::i::Queue<A, u16, SingleCore>>::u16_sc","value":"pub const unsafe fn u16_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":203236,"byte_end":203301,"line_start":335,"line_end":335,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":203314,"byte_end":203352,"line_start":336,"line_end":336,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2849},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209234,"byte_end":209239,"line_start":510,"line_end":510,"column_start":8,"column_end":13},"name":"usize","qualname":"<Queue<T, N, usize, MultiCore>>::usize","value":"pub fn usize() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202253,"byte_end":202308,"line_start":306,"line_end":306,"column_start":13,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2852},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209234,"byte_end":209239,"line_start":510,"line_end":510,"column_start":8,"column_end":13},"name":"usize","qualname":"<crate::i::Queue<A, usize, MultiCore>>::usize","value":"pub const fn usize() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202483,"byte_end":202548,"line_start":313,"line_end":313,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202561,"byte_end":202599,"line_start":314,"line_end":314,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2856},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209241,"byte_end":209249,"line_start":510,"line_end":510,"column_start":15,"column_end":23},"name":"usize_sc","qualname":"<Queue<T, N, usize, SingleCore>>::usize_sc","value":"pub unsafe fn usize_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N` (single core variant)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":202970,"byte_end":203047,"line_start":328,"line_end":328,"column_start":13,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2859},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209241,"byte_end":209249,"line_start":510,"line_end":510,"column_start":15,"column_end":23},"name":"usize_sc","qualname":"<crate::i::Queue<A, usize, SingleCore>>::usize_sc","value":"pub const unsafe fn usize_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":203236,"byte_end":203301,"line_start":335,"line_end":335,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":203314,"byte_end":203352,"line_start":336,"line_end":336,"column_start":13,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1906},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209859,"byte_end":209863,"line_start":538,"line_end":538,"column_start":12,"column_end":16},"name":"Iter","qualname":"::spsc::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914}],"decl_id":null,"docs":" An iterator over the items of a queue\n","sig":null,"attributes":[{"value":"/ An iterator over the items of a queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209806,"byte_end":209847,"line_start":537,"line_end":537,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1922},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":210353,"byte_end":210360,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::spsc::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930}],"decl_id":null,"docs":" A mutable iterator over the items of a queue\n","sig":null,"attributes":[{"value":"/ A mutable iterator over the items of a queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":210293,"byte_end":210341,"line_start":564,"line_end":564,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":1959},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230331,"byte_end":230336,"line_start":9,"line_end":9,"column_start":22,"column_end":27},"name":"XCore","qualname":"::sealed::spsc::XCore","value":"XCore","parent":null,"children":[{"krate":0,"index":1960}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230350,"byte_end":230363,"line_start":10,"line_end":10,"column_start":12,"column_end":25},"name":"is_multi_core","qualname":"::sealed::spsc::XCore::is_multi_core","value":"pub fn is_multi_core() -> bool","parent":{"krate":0,"index":1959},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1965},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230671,"byte_end":230674,"line_start":27,"line_end":27,"column_start":22,"column_end":25},"name":"Uxx","qualname":"::sealed::spsc::Uxx","value":"Uxx: Into<usize> + Send","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1971}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230731,"byte_end":230739,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"saturate","qualname":"::sealed::spsc::Uxx::saturate","value":"pub fn saturate(usize) -> Self","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230794,"byte_end":230802,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"truncate","qualname":"::sealed::spsc::Uxx::truncate","value":"pub fn truncate(usize) -> Self","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230892,"byte_end":230904,"line_start":36,"line_end":36,"column_start":19,"column_end":31},"name":"load_acquire","qualname":"::sealed::spsc::Uxx::load_acquire","value":"pub unsafe fn load_acquire<C>(*const Self) -> Self where C: XCore","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230831,"byte_end":230850,"line_start":34,"line_end":34,"column_start":9,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":231031,"byte_end":231043,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"load_relaxed","qualname":"::sealed::spsc::Uxx::load_relaxed","value":"pub fn load_relaxed(*const Self) -> Self","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230977,"byte_end":230996,"line_start":40,"line_end":40,"column_start":9,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":231139,"byte_end":231152,"line_start":46,"line_end":46,"column_start":19,"column_end":32},"name":"store_release","qualname":"::sealed::spsc::Uxx::store_release","value":"pub unsafe fn store_release<C>(*const Self, Self) where C: XCore","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":231078,"byte_end":231097,"line_start":44,"line_end":44,"column_start":9,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":2008},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":235450,"byte_end":235454,"line_start":194,"line_end":194,"column_start":22,"column_end":26},"name":"Kind","qualname":"::sealed::binary_heap::Kind","value":"Kind","parent":null,"children":[{"krate":0,"index":2009}],"decl_id":null,"docs":" The binary heap kind: min-heap or max-heap\n","sig":null,"attributes":[{"value":"/ The binary heap kind: min-heap or max-heap","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":235382,"byte_end":235428,"line_start":193,"line_end":193,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":235491,"byte_end":235499,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"ordering","qualname":"::sealed::binary_heap::Kind::ordering","value":"pub fn ordering() -> Ordering","parent":{"krate":0,"index":2008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5733,"byte_end":5746,"line_start":45,"line_end":45,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6631,"byte_end":6644,"line_start":80,"line_end":80,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7434,"byte_end":7447,"line_start":111,"line_end":111,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":9041,"byte_end":9054,"line_start":171,"line_end":171,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":9301,"byte_end":9314,"line_start":185,"line_end":185,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13192,"byte_end":13201,"line_start":62,"line_end":62,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13971,"byte_end":13974,"line_start":90,"line_end":90,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":15035,"byte_end":15042,"line_start":138,"line_end":138,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21261,"byte_end":21268,"line_start":314,"line_end":314,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23673,"byte_end":23681,"line_start":385,"line_end":385,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24205,"byte_end":24213,"line_start":403,"line_end":403,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":34810,"byte_end":34818,"line_start":765,"line_end":765,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":35140,"byte_end":35148,"line_start":779,"line_end":779,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":35442,"byte_end":35450,"line_start":791,"line_end":791,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":35772,"byte_end":35780,"line_start":806,"line_end":806,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":36085,"byte_end":36093,"line_start":818,"line_end":818,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":36427,"byte_end":36435,"line_start":832,"line_end":832,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":36903,"byte_end":36911,"line_start":849,"line_end":849,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":37081,"byte_end":37089,"line_start":858,"line_end":858,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":37451,"byte_end":37459,"line_start":874,"line_end":874,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":37832,"byte_end":37840,"line_start":889,"line_end":889,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":38898,"byte_end":38902,"line_start":937,"line_end":937,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":39097,"byte_end":39101,"line_start":945,"line_end":945,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":39321,"byte_end":39328,"line_start":957,"line_end":957,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43906,"byte_end":43914,"line_start":90,"line_end":90,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44219,"byte_end":44227,"line_start":104,"line_end":104,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":439},{"krate":0,"index":443},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":457},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55586,"byte_end":55594,"line_start":492,"line_end":492,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55842,"byte_end":55850,"line_start":505,"line_end":505,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":56131,"byte_end":56139,"line_start":516,"line_end":516,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":56424,"byte_end":56432,"line_start":529,"line_end":529,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":56790,"byte_end":56798,"line_start":542,"line_end":542,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":57116,"byte_end":57124,"line_start":556,"line_end":556,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":57444,"byte_end":57452,"line_start":570,"line_end":570,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":58142,"byte_end":58146,"line_start":604,"line_end":604,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":58299,"byte_end":58303,"line_start":612,"line_end":612,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":58648,"byte_end":58658,"line_start":630,"line_end":630,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":59253,"byte_end":59265,"line_start":658,"line_end":658,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60144,"byte_end":60153,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60398,"byte_end":60407,"line_start":31,"line_end":31,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":619},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":637},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69575,"byte_end":69584,"line_start":381,"line_end":381,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69842,"byte_end":69851,"line_start":394,"line_end":394,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70083,"byte_end":70092,"line_start":405,"line_end":405,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70229,"byte_end":70238,"line_start":415,"line_end":415,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70474,"byte_end":70483,"line_start":428,"line_end":428,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70735,"byte_end":70744,"line_start":439,"line_end":439,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":71146,"byte_end":71154,"line_start":462,"line_end":462,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":71348,"byte_end":71357,"line_start":473,"line_end":473,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72139,"byte_end":72143,"line_start":509,"line_end":509,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72325,"byte_end":72329,"line_start":517,"line_end":517,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72466,"byte_end":72475,"line_start":525,"line_end":525,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72734,"byte_end":72741,"line_start":539,"line_end":539,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72963,"byte_end":72972,"line_start":547,"line_end":547,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":73324,"byte_end":73333,"line_start":562,"line_end":562,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74759,"byte_end":74765,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74984,"byte_end":74990,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84220,"byte_end":84226,"line_start":381,"line_end":381,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84348,"byte_end":84354,"line_start":390,"line_end":390,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84541,"byte_end":84547,"line_start":401,"line_end":401,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84763,"byte_end":84769,"line_start":414,"line_end":414,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84947,"byte_end":84953,"line_start":425,"line_end":425,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":85128,"byte_end":85134,"line_start":434,"line_end":434,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":85309,"byte_end":85315,"line_start":443,"line_end":443,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":85501,"byte_end":85507,"line_start":453,"line_end":453,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":85695,"byte_end":85701,"line_start":463,"line_end":463,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86001,"byte_end":86007,"line_start":476,"line_end":476,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86154,"byte_end":86160,"line_start":487,"line_end":487,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86296,"byte_end":86302,"line_start":496,"line_end":496,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86429,"byte_end":86435,"line_start":506,"line_end":506,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86589,"byte_end":86595,"line_start":516,"line_end":516,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":87726,"byte_end":87732,"line_start":565,"line_end":565,"column_start":16,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":94058,"byte_end":94061,"line_start":6,"line_end":6,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":94308,"byte_end":94311,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98507,"byte_end":98510,"line_start":169,"line_end":169,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98640,"byte_end":98643,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109035,"byte_end":109038,"line_start":518,"line_end":518,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109158,"byte_end":109161,"line_start":527,"line_end":527,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109355,"byte_end":109358,"line_start":537,"line_end":537,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109613,"byte_end":109616,"line_start":549,"line_end":549,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109766,"byte_end":109769,"line_start":558,"line_end":558,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109965,"byte_end":109968,"line_start":570,"line_end":570,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":110198,"byte_end":110201,"line_start":583,"line_end":583,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":110401,"byte_end":110404,"line_start":593,"line_end":593,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111048,"byte_end":111051,"line_start":627,"line_end":627,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111661,"byte_end":111669,"line_start":657,"line_end":657,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":112106,"byte_end":112114,"line_start":677,"line_end":677,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":112610,"byte_end":112618,"line_start":699,"line_end":699,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":112960,"byte_end":112963,"line_start":713,"line_end":713,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":113194,"byte_end":113197,"line_start":725,"line_end":725,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114073,"byte_end":114076,"line_start":768,"line_end":768,"column_start":19,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114154,"byte_end":114157,"line_start":775,"line_end":775,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114313,"byte_end":114316,"line_start":786,"line_end":786,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1057}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114467,"byte_end":114470,"line_start":795,"line_end":795,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1061}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114608,"byte_end":114611,"line_start":805,"line_end":805,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114751,"byte_end":114754,"line_start":815,"line_end":815,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114885,"byte_end":114888,"line_start":825,"line_end":825,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124060,"byte_end":124070,"line_start":29,"line_end":29,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126067,"byte_end":126077,"line_start":95,"line_end":95,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":134433,"byte_end":134437,"line_start":382,"line_end":382,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136332,"byte_end":136339,"line_start":450,"line_end":450,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136546,"byte_end":136553,"line_start":463,"line_end":463,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1173},{"krate":0,"index":1174}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136884,"byte_end":136891,"line_start":477,"line_end":477,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137212,"byte_end":137219,"line_start":490,"line_end":490,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137523,"byte_end":137527,"line_start":504,"line_end":504,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137782,"byte_end":137792,"line_start":515,"line_end":515,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137938,"byte_end":137948,"line_start":526,"line_end":526,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":138209,"byte_end":138219,"line_start":540,"line_end":540,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":138414,"byte_end":138424,"line_start":551,"line_end":551,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146458,"byte_end":146460,"line_start":98,"line_end":98,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147350,"byte_end":147352,"line_start":130,"line_end":130,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147542,"byte_end":147544,"line_start":139,"line_end":139,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148462,"byte_end":148464,"line_start":171,"line_end":171,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148654,"byte_end":148656,"line_start":180,"line_end":180,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149773,"byte_end":149775,"line_start":221,"line_end":221,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149968,"byte_end":149971,"line_start":230,"line_end":230,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151335,"byte_end":151338,"line_start":279,"line_end":279,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151531,"byte_end":151534,"line_start":288,"line_end":288,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153394,"byte_end":153397,"line_start":353,"line_end":353,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153590,"byte_end":153593,"line_start":362,"line_end":362,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":156445,"byte_end":156448,"line_start":459,"line_end":459,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":156548,"byte_end":156552,"line_start":466,"line_end":466,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182914,"byte_end":182917,"line_start":97,"line_end":97,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":183369,"byte_end":183372,"line_start":121,"line_end":121,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184159,"byte_end":184162,"line_start":149,"line_end":149,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184797,"byte_end":184800,"line_start":173,"line_end":173,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1499},{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184944,"byte_end":184947,"line_start":184,"line_end":184,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185115,"byte_end":185118,"line_start":193,"line_end":193,"column_start":58,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185149,"byte_end":185152,"line_start":195,"line_end":195,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1508}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185345,"byte_end":185348,"line_start":205,"line_end":205,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185540,"byte_end":185543,"line_start":215,"line_end":215,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1515}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185925,"byte_end":185928,"line_start":233,"line_end":233,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186005,"byte_end":186008,"line_start":240,"line_end":240,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186081,"byte_end":186084,"line_start":247,"line_end":247,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186267,"byte_end":186270,"line_start":259,"line_end":259,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186449,"byte_end":186452,"line_start":269,"line_end":269,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1533}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186612,"byte_end":186615,"line_start":279,"line_end":279,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186683,"byte_end":186686,"line_start":286,"line_end":286,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186884,"byte_end":186887,"line_start":296,"line_end":296,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":187048,"byte_end":187051,"line_start":306,"line_end":306,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":189518,"byte_end":189522,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1579}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":189657,"byte_end":189662,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":191505,"byte_end":191508,"line_start":102,"line_end":102,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":191584,"byte_end":191587,"line_start":108,"line_end":108,"column_start":18,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":191603,"byte_end":191606,"line_start":110,"line_end":110,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":193048,"byte_end":193054,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1624},{"krate":0,"index":1626}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171846,"byte_end":171850,"line_start":269,"line_end":269,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171866,"byte_end":171870,"line_start":271,"line_end":271,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":175843,"byte_end":175846,"line_start":418,"line_end":418,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176250,"byte_end":176253,"line_start":438,"line_end":438,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176305,"byte_end":176308,"line_start":440,"line_end":440,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176384,"byte_end":176387,"line_start":442,"line_end":442,"column_start":52,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176415,"byte_end":176418,"line_start":444,"line_end":444,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176584,"byte_end":176587,"line_start":455,"line_end":455,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176739,"byte_end":176742,"line_start":464,"line_end":464,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176879,"byte_end":176882,"line_start":472,"line_end":472,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177015,"byte_end":177018,"line_start":478,"line_end":478,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177186,"byte_end":177189,"line_start":487,"line_end":487,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177358,"byte_end":177361,"line_start":496,"line_end":496,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177496,"byte_end":177499,"line_start":505,"line_end":505,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177542,"byte_end":177545,"line_start":507,"line_end":507,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177718,"byte_end":177721,"line_start":516,"line_end":516,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1691}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177857,"byte_end":177860,"line_start":525,"line_end":525,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1694}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":219870,"byte_end":219875,"line_start":10,"line_end":10,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":220813,"byte_end":220821,"line_start":43,"line_end":43,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":221297,"byte_end":221305,"line_start":64,"line_end":64,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":197229,"byte_end":197235,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":197398,"byte_end":197404,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199300,"byte_end":199305,"line_start":172,"line_end":172,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":200363,"byte_end":200368,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":200634,"byte_end":200639,"line_start":230,"line_end":230,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1843}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":200901,"byte_end":200906,"line_start":242,"line_end":242,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":201226,"byte_end":201231,"line_start":257,"line_end":257,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1856}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208263,"byte_end":208268,"line_start":472,"line_end":472,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1879}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208491,"byte_end":208496,"line_start":480,"line_end":480,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208717,"byte_end":208722,"line_start":490,"line_end":490,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1886}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208959,"byte_end":208964,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1890}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209318,"byte_end":209323,"line_start":512,"line_end":512,"column_start":66,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209701,"byte_end":209706,"line_start":528,"line_end":528,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":210052,"byte_end":210056,"line_start":549,"line_end":549,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230432,"byte_end":230442,"line_start":14,"line_end":14,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230567,"byte_end":230576,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":235547,"byte_end":235550,"line_start":199,"line_end":199,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2011}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":235658,"byte_end":235661,"line_start":205,"line_end":205,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2013}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":4055,"byte_end":4066,"line_start":101,"line_end":101,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1074}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":4076,"byte_end":4077,"line_start":102,"line_end":102,"column_start":9,"column_end":10},"ref_id":{"krate":0,"index":1218}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":4125,"byte_end":4129,"line_start":104,"line_end":104,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1255}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":4177,"byte_end":4181,"line_start":106,"line_end":106,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1365}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171161,"byte_end":171170,"line_start":244,"line_end":244,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1420}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/lib.rs","byte_start":4211,"byte_end":4215,"line_start":108,"line_end":108,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1696}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":5733,"byte_end":5746,"line_start":45,"line_end":45,"column_start":12,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":6631,"byte_end":6644,"line_start":80,"line_end":80,"column_start":12,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":7434,"byte_end":7447,"line_start":111,"line_end":111,"column_start":12,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":9041,"byte_end":9054,"line_start":171,"line_end":171,"column_start":26,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/histbuf.rs","byte_start":9301,"byte_end":9314,"line_start":185,"line_end":185,"column_start":34,"column_end":47},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13192,"byte_end":13201,"line_start":62,"line_end":62,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2023},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":13971,"byte_end":13974,"line_start":90,"line_end":90,"column_start":6,"column_end":9},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2046},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":15035,"byte_end":15042,"line_start":138,"line_end":138,"column_start":15,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":21261,"byte_end":21268,"line_start":314,"line_end":314,"column_start":25,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":167},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":23673,"byte_end":23681,"line_start":385,"line_end":385,"column_start":18,"column_end":26},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":24205,"byte_end":24213,"line_start":403,"line_end":403,"column_start":18,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":34810,"byte_end":34818,"line_start":765,"line_end":765,"column_start":47,"column_end":55},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":35140,"byte_end":35148,"line_start":779,"line_end":779,"column_start":50,"column_end":58},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":3331}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":35442,"byte_end":35450,"line_start":791,"line_end":791,"column_start":28,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":35772,"byte_end":35780,"line_start":806,"line_end":806,"column_start":33,"column_end":41},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":36085,"byte_end":36093,"line_start":818,"line_end":818,"column_start":30,"column_end":38},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":36427,"byte_end":36435,"line_start":832,"line_end":832,"column_start":64,"column_end":72},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":36903,"byte_end":36911,"line_start":849,"line_end":849,"column_start":25,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":37081,"byte_end":37089,"line_start":858,"line_end":858,"column_start":37,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":37451,"byte_end":37459,"line_start":874,"line_end":874,"column_start":49,"column_end":57},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":37832,"byte_end":37840,"line_start":889,"line_end":889,"column_start":43,"column_end":51},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":7711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":38898,"byte_end":38902,"line_start":937,"line_end":937,"column_start":29,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":39097,"byte_end":39101,"line_start":945,"line_end":945,"column_start":26,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexmap.rs","byte_start":39321,"byte_end":39328,"line_start":957,"line_end":957,"column_start":29,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":349},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":43906,"byte_end":43914,"line_start":90,"line_end":90,"column_start":15,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":44219,"byte_end":44227,"line_start":104,"line_end":104,"column_start":15,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55586,"byte_end":55594,"line_start":492,"line_end":492,"column_start":25,"column_end":33},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":55842,"byte_end":55850,"line_start":505,"line_end":505,"column_start":30,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":56131,"byte_end":56139,"line_start":516,"line_end":516,"column_start":27,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":56424,"byte_end":56432,"line_start":529,"line_end":529,"column_start":60,"column_end":68},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":56790,"byte_end":56798,"line_start":542,"line_end":542,"column_start":29,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":57116,"byte_end":57124,"line_start":556,"line_end":556,"column_start":37,"column_end":45},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":57444,"byte_end":57452,"line_start":570,"line_end":570,"column_start":35,"column_end":43},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":7711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":58142,"byte_end":58146,"line_start":604,"line_end":604,"column_start":26,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":519},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":58299,"byte_end":58303,"line_start":612,"line_end":612,"column_start":23,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":519},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":58648,"byte_end":58658,"line_start":630,"line_end":630,"column_start":32,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":533},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/indexset.rs","byte_start":59253,"byte_end":59265,"line_start":658,"line_end":658,"column_start":32,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":547},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60144,"byte_end":60153,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":60398,"byte_end":60407,"line_start":31,"line_end":31,"column_start":15,"column_end":24},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69575,"byte_end":69584,"line_start":381,"line_end":381,"column_start":44,"column_end":53},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":69842,"byte_end":69851,"line_start":394,"line_end":394,"column_start":47,"column_end":56},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":3331}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70083,"byte_end":70092,"line_start":405,"line_end":405,"column_start":27,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70229,"byte_end":70238,"line_start":415,"line_end":415,"column_start":25,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70474,"byte_end":70483,"line_start":428,"line_end":428,"column_start":30,"column_end":39},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":70735,"byte_end":70744,"line_start":439,"line_end":439,"column_start":40,"column_end":49},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":7711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":71146,"byte_end":71154,"line_start":462,"line_end":462,"column_start":28,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":679},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":71348,"byte_end":71357,"line_start":473,"line_end":473,"column_start":32,"column_end":41},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72139,"byte_end":72143,"line_start":509,"line_end":509,"column_start":29,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72325,"byte_end":72329,"line_start":517,"line_end":517,"column_start":26,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72466,"byte_end":72475,"line_start":525,"line_end":525,"column_start":24,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72734,"byte_end":72741,"line_start":539,"line_end":539,"column_start":29,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":727},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":72963,"byte_end":72972,"line_start":547,"line_end":547,"column_start":54,"column_end":63},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/linear_map.rs","byte_start":73324,"byte_end":73333,"line_start":562,"line_end":562,"column_start":22,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":598},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74759,"byte_end":74765,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":74984,"byte_end":74990,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":796},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84220,"byte_end":84226,"line_start":381,"line_end":381,"column_start":21,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84348,"byte_end":84354,"line_start":390,"line_end":390,"column_start":31,"column_end":37},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84541,"byte_end":84547,"line_start":401,"line_end":401,"column_start":26,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":12188}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84763,"byte_end":84769,"line_start":414,"line_end":414,"column_start":19,"column_end":25},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":84947,"byte_end":84953,"line_start":425,"line_end":425,"column_start":24,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":85128,"byte_end":85134,"line_start":434,"line_end":434,"column_start":26,"column_end":32},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":85309,"byte_end":85315,"line_start":443,"line_end":443,"column_start":24,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":9802}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":85501,"byte_end":85507,"line_start":453,"line_end":453,"column_start":26,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":796},"to":{"krate":6,"index":90}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":85695,"byte_end":85701,"line_start":463,"line_end":463,"column_start":24,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":9545}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86001,"byte_end":86007,"line_start":476,"line_end":476,"column_start":24,"column_end":30},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86154,"byte_end":86160,"line_start":487,"line_end":487,"column_start":27,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86296,"byte_end":86302,"line_start":496,"line_end":496,"column_start":24,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86429,"byte_end":86435,"line_start":506,"line_end":506,"column_start":25,"column_end":31},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":86589,"byte_end":86595,"line_start":516,"line_end":516,"column_start":40,"column_end":46},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/string.rs","byte_start":87726,"byte_end":87732,"line_start":565,"line_end":565,"column_start":16,"column_end":22},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":796},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":94058,"byte_end":94061,"line_start":6,"line_end":6,"column_start":19,"column_end":22},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":94308,"byte_end":94311,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98507,"byte_end":98510,"line_start":169,"line_end":169,"column_start":22,"column_end":25},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":98640,"byte_end":98643,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109035,"byte_end":109038,"line_start":518,"line_end":518,"column_start":24,"column_end":27},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109158,"byte_end":109161,"line_start":527,"line_end":527,"column_start":27,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109355,"byte_end":109358,"line_start":537,"line_end":537,"column_start":24,"column_end":27},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":9545}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109613,"byte_end":109616,"line_start":549,"line_end":549,"column_start":21,"column_end":24},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109766,"byte_end":109769,"line_start":558,"line_end":558,"column_start":26,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":109965,"byte_end":109968,"line_start":570,"line_end":570,"column_start":34,"column_end":37},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":110198,"byte_end":110201,"line_start":583,"line_end":583,"column_start":27,"column_end":30},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":9802}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":110401,"byte_end":110404,"line_start":593,"line_end":593,"column_start":29,"column_end":32},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":930},"to":{"krate":6,"index":90}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111048,"byte_end":111051,"line_start":627,"line_end":627,"column_start":32,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":7711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":111661,"byte_end":111669,"line_start":657,"line_end":657,"column_start":25,"column_end":33},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1014},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":112106,"byte_end":112114,"line_start":677,"line_end":677,"column_start":22,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1014},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":112610,"byte_end":112618,"line_start":699,"line_end":699,"column_start":21,"column_end":29},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1014},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":112960,"byte_end":112963,"line_start":713,"line_end":713,"column_start":29,"column_end":32},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":113194,"byte_end":113197,"line_start":725,"line_end":725,"column_start":46,"column_end":49},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114073,"byte_end":114076,"line_start":768,"line_end":768,"column_start":19,"column_end":22},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114154,"byte_end":114157,"line_start":775,"line_end":775,"column_start":27,"column_end":30},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114313,"byte_end":114316,"line_start":786,"line_end":786,"column_start":30,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114467,"byte_end":114470,"line_start":795,"line_end":795,"column_start":33,"column_end":36},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114608,"byte_end":114611,"line_start":805,"line_end":805,"column_start":33,"column_end":36},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":2924}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114751,"byte_end":114754,"line_start":815,"line_end":815,"column_start":27,"column_end":30},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/vec.rs","byte_start":114885,"byte_end":114888,"line_start":825,"line_end":825,"column_start":27,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":930},"to":{"krate":1,"index":2924}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":124060,"byte_end":124070,"line_start":29,"line_end":29,"column_start":22,"column_end":32},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":126067,"byte_end":126077,"line_start":95,"line_end":95,"column_start":15,"column_end":25},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":134433,"byte_end":134437,"line_start":382,"line_end":382,"column_start":13,"column_end":17},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136332,"byte_end":136339,"line_start":450,"line_end":450,"column_start":24,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136546,"byte_end":136553,"line_start":463,"line_end":463,"column_start":25,"column_end":32},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":136884,"byte_end":136891,"line_start":477,"line_end":477,"column_start":28,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137212,"byte_end":137219,"line_start":490,"line_end":490,"column_start":19,"column_end":26},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137523,"byte_end":137527,"line_start":504,"line_end":504,"column_start":22,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1143},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137782,"byte_end":137792,"line_start":515,"line_end":515,"column_start":27,"column_end":37},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":137938,"byte_end":137948,"line_start":526,"line_end":526,"column_start":25,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":138209,"byte_end":138219,"line_start":540,"line_end":540,"column_start":24,"column_end":34},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/binary_heap.rs","byte_start":138414,"byte_end":138424,"line_start":551,"line_end":551,"column_start":30,"column_end":40},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":146458,"byte_end":146460,"line_start":98,"line_end":98,"column_start":9,"column_end":11},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147350,"byte_end":147352,"line_start":130,"line_end":130,"column_start":25,"column_end":27},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":147542,"byte_end":147544,"line_start":139,"line_end":139,"column_start":9,"column_end":11},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148462,"byte_end":148464,"line_start":171,"line_end":171,"column_start":25,"column_end":27},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1284},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":148654,"byte_end":148656,"line_start":180,"line_end":180,"column_start":9,"column_end":11},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149773,"byte_end":149775,"line_start":221,"line_end":221,"column_start":25,"column_end":27},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1298},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":149968,"byte_end":149971,"line_start":230,"line_end":230,"column_start":9,"column_end":12},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151335,"byte_end":151338,"line_start":279,"line_end":279,"column_start":25,"column_end":28},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":151531,"byte_end":151534,"line_start":288,"line_end":288,"column_start":9,"column_end":12},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153394,"byte_end":153397,"line_start":353,"line_end":353,"column_start":25,"column_end":28},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":153590,"byte_end":153593,"line_start":362,"line_end":362,"column_start":9,"column_end":12},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":156445,"byte_end":156448,"line_start":459,"line_end":459,"column_start":25,"column_end":28},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1340},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/mpmc.rs","byte_start":156548,"byte_end":156552,"line_start":466,"line_end":466,"column_start":9,"column_end":13},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":182914,"byte_end":182917,"line_start":97,"line_end":97,"column_start":9,"column_end":12},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":183369,"byte_end":183372,"line_start":121,"line_end":121,"column_start":9,"column_end":12},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184159,"byte_end":184162,"line_start":149,"line_end":149,"column_start":9,"column_end":12},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184797,"byte_end":184800,"line_start":173,"line_end":173,"column_start":19,"column_end":22},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":184944,"byte_end":184947,"line_start":184,"line_end":184,"column_start":22,"column_end":25},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185115,"byte_end":185118,"line_start":193,"line_end":193,"column_start":58,"column_end":61},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1483},"to":{"krate":11,"index":7}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185149,"byte_end":185152,"line_start":195,"line_end":195,"column_start":24,"column_end":27},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185345,"byte_end":185348,"line_start":205,"line_end":205,"column_start":26,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185540,"byte_end":185543,"line_start":215,"line_end":215,"column_start":21,"column_end":24},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":185925,"byte_end":185928,"line_start":233,"line_end":233,"column_start":28,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186005,"byte_end":186008,"line_start":240,"line_end":240,"column_start":28,"column_end":31},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186081,"byte_end":186084,"line_start":247,"line_end":247,"column_start":24,"column_end":27},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1483},"to":{"krate":8,"index":8}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186267,"byte_end":186270,"line_start":259,"line_end":259,"column_start":27,"column_end":30},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1483},"to":{"krate":8,"index":11}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186449,"byte_end":186452,"line_start":269,"line_end":269,"column_start":23,"column_end":26},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186612,"byte_end":186615,"line_start":279,"line_end":279,"column_start":16,"column_end":19},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186683,"byte_end":186686,"line_start":286,"line_end":286,"column_start":24,"column_end":27},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":2722}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":186884,"byte_end":186887,"line_start":296,"line_end":296,"column_start":17,"column_end":20},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":2711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/singleton.rs","byte_start":187048,"byte_end":187051,"line_start":306,"line_end":306,"column_start":18,"column_end":21},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":9802}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":189518,"byte_end":189522,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":189657,"byte_end":189662,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":191505,"byte_end":191508,"line_start":102,"line_end":102,"column_start":19,"column_end":22},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1591},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":191584,"byte_end":191587,"line_start":108,"line_end":108,"column_start":18,"column_end":21},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1591},"to":{"krate":1,"index":3034}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":191603,"byte_end":191606,"line_start":110,"line_end":110,"column_start":9,"column_end":12},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/cas.rs","byte_start":193048,"byte_end":193054,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171846,"byte_end":171850,"line_start":269,"line_end":269,"column_start":25,"column_end":29},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1628},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":171866,"byte_end":171870,"line_start":271,"line_end":271,"column_start":9,"column_end":13},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":175843,"byte_end":175846,"line_start":418,"line_end":418,"column_start":9,"column_end":12},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176250,"byte_end":176253,"line_start":438,"line_end":438,"column_start":28,"column_end":31},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176305,"byte_end":176308,"line_start":440,"line_end":440,"column_start":28,"column_end":31},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176384,"byte_end":176387,"line_start":442,"line_end":442,"column_start":52,"column_end":55},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1643},"to":{"krate":11,"index":7}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176415,"byte_end":176418,"line_start":444,"line_end":444,"column_start":21,"column_end":24},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1643},"to":{"krate":8,"index":8}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176584,"byte_end":176587,"line_start":455,"line_end":455,"column_start":24,"column_end":27},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1643},"to":{"krate":8,"index":11}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176739,"byte_end":176742,"line_start":464,"line_end":464,"column_start":19,"column_end":22},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":176879,"byte_end":176882,"line_start":472,"line_end":472,"column_start":22,"column_end":25},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177015,"byte_end":177018,"line_start":478,"line_end":478,"column_start":24,"column_end":27},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177186,"byte_end":177189,"line_start":487,"line_end":487,"column_start":26,"column_end":29},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177358,"byte_end":177361,"line_start":496,"line_end":496,"column_start":23,"column_end":26},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177496,"byte_end":177499,"line_start":505,"line_end":505,"column_start":16,"column_end":19},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177542,"byte_end":177545,"line_start":507,"line_end":507,"column_start":24,"column_end":27},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":2722}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177718,"byte_end":177721,"line_start":516,"line_end":516,"column_start":17,"column_end":20},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":2711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/pool/mod.rs","byte_start":177857,"byte_end":177860,"line_start":525,"line_end":525,"column_start":18,"column_end":21},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1643},"to":{"krate":1,"index":9802}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":219870,"byte_end":219875,"line_start":10,"line_end":10,"column_start":18,"column_end":23},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":220813,"byte_end":220821,"line_start":43,"line_end":43,"column_start":38,"column_end":46},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1765},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/split.rs","byte_start":221297,"byte_end":221305,"line_start":64,"line_end":64,"column_start":38,"column_end":46},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1779},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":197229,"byte_end":197235,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":197398,"byte_end":197404,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":199300,"byte_end":199305,"line_start":172,"line_end":172,"column_start":18,"column_end":23},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":200363,"byte_end":200368,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1815},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":200634,"byte_end":200639,"line_start":230,"line_end":230,"column_start":33,"column_end":38},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1815},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":200901,"byte_end":200906,"line_start":242,"line_end":242,"column_start":33,"column_end":38},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1815},"to":{"krate":1,"index":9802}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":201226,"byte_end":201231,"line_start":257,"line_end":257,"column_start":35,"column_end":40},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1815},"to":{"krate":6,"index":90}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208263,"byte_end":208268,"line_start":472,"line_end":472,"column_start":19,"column_end":24},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208491,"byte_end":208496,"line_start":480,"line_end":480,"column_start":12,"column_end":17},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208717,"byte_end":208722,"line_start":490,"line_end":490,"column_start":19,"column_end":24},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":208959,"byte_end":208964,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209318,"byte_end":209323,"line_start":512,"line_end":512,"column_start":66,"column_end":71},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1815},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":209701,"byte_end":209706,"line_start":528,"line_end":528,"column_start":25,"column_end":30},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1815},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/spsc/mod.rs","byte_start":210052,"byte_end":210056,"line_start":549,"line_end":549,"column_start":32,"column_end":36},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1906},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230432,"byte_end":230442,"line_start":14,"line_end":14,"column_start":27,"column_end":37},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1796},"to":{"krate":0,"index":1959}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230567,"byte_end":230576,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1794},"to":{"krate":0,"index":1959}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230676,"byte_end":230680,"line_start":27,"line_end":27,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2927},"to":{"krate":0,"index":1965}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":230690,"byte_end":230694,"line_start":27,"line_end":27,"column_start":41,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":1965}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":235547,"byte_end":235550,"line_start":199,"line_end":199,"column_start":26,"column_end":29},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1112},"to":{"krate":0,"index":2008}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.6.1/src/sealed.rs","byte_start":235658,"byte_end":235661,"line_start":205,"line_end":205,"column_start":26,"column_end":29},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1113},"to":{"krate":0,"index":2008}}]}