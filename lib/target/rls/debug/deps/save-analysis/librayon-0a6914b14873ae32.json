{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2","program":"/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rayon","--edition=2018","/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=0a6914b14873ae32","-C","extra-filename=-0a6914b14873ae32","--out-dir","/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","-L","dependency=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","--extern","crossbeam_deque=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libcrossbeam_deque-88873171e786750a.rmeta","--extern","either=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libeither-4b5da52ea3e75845.rmeta","--extern","rayon_core=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/librayon_core-8d57e7d5e0552fa6.rmeta","--cap-lints","allow","--cfg","has_step_by_rev","--cfg","has_min_const_generics","--cfg","has_control_flow","--error-format=json","--sysroot","/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/librayon-0a6914b14873ae32.rmeta"},"prelude":{"crate_id":{"name":"rayon","disambiguator":[12098838121840115147,0]},"crate_root":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src","external_crates":[{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","num":20,"id":{"name":"either","disambiguator":[10174564351280660459,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":21,"id":{"name":"rayon_core","disambiguator":[10388243457493669298,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":22,"id":{"name":"crossbeam_channel","disambiguator":[14723630113849012677,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":23,"id":{"name":"cfg_if","disambiguator":[3771446270907224645,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":24,"id":{"name":"crossbeam_utils","disambiguator":[4654943673208440681,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":25,"id":{"name":"lazy_static","disambiguator":[18045484163755490912,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","num":26,"id":{"name":"crossbeam_deque","disambiguator":[12065098225646516364,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":27,"id":{"name":"crossbeam_epoch","disambiguator":[17301721565035502399,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":28,"id":{"name":"scopeguard","disambiguator":[3320008020467133727,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":29,"id":{"name":"memoffset","disambiguator":[9231318132155413823,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":30,"id":{"name":"num_cpus","disambiguator":[2498837368396224993,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","num":31,"id":{"name":"libc","disambiguator":[15500845381154614134,0]}}],"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":0,"byte_end":5684,"line_start":1,"line_end":147,"column_start":1,"column_end":31}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":181},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36705,"byte_end":36711,"line_start":84,"line_end":84,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7045},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38115,"byte_end":38120,"line_start":155,"line_end":155,"column_start":12,"column_end":17},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7058},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38134,"byte_end":38140,"line_start":156,"line_end":156,"column_start":13,"column_end":19},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7068},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38154,"byte_end":38160,"line_start":157,"line_end":157,"column_start":13,"column_end":19},"alias_span":null,"name":"Cloned","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7077},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38174,"byte_end":38180,"line_start":158,"line_end":158,"column_start":13,"column_end":19},"alias_span":null,"name":"Copied","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":930},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38194,"byte_end":38199,"line_start":159,"line_end":159,"column_start":13,"column_end":18},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":932},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38201,"byte_end":38206,"line_start":159,"line_end":159,"column_start":20,"column_end":25},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7086},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38224,"byte_end":38233,"line_start":160,"line_end":160,"column_start":16,"column_end":25},"alias_span":null,"name":"Enumerate","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7095},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38247,"byte_end":38253,"line_start":161,"line_end":161,"column_start":13,"column_end":19},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7104},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38271,"byte_end":38280,"line_start":162,"line_end":162,"column_start":17,"column_end":26},"alias_span":null,"name":"FilterMap","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7121},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38296,"byte_end":38303,"line_start":163,"line_end":163,"column_start":15,"column_end":22},"alias_span":null,"name":"FlatMap","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7130},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38324,"byte_end":38335,"line_start":164,"line_end":164,"column_start":20,"column_end":31},"alias_span":null,"name":"FlatMapIter","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7139},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38350,"byte_end":38357,"line_start":165,"line_end":165,"column_start":14,"column_end":21},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7148},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38377,"byte_end":38388,"line_start":166,"line_end":166,"column_start":19,"column_end":30},"alias_span":null,"name":"FlattenIter","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7157},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38401,"byte_end":38405,"line_start":167,"line_end":167,"column_start":12,"column_end":16},"alias_span":null,"name":"Fold","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7169},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38407,"byte_end":38415,"line_start":167,"line_end":167,"column_start":18,"column_end":26},"alias_span":null,"name":"FoldWith","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7181},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38431,"byte_end":38438,"line_start":168,"line_end":168,"column_start":14,"column_end":21},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7190},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38456,"byte_end":38466,"line_start":169,"line_end":169,"column_start":17,"column_end":27},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7203},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38493,"byte_end":38511,"line_start":170,"line_end":170,"column_start":26,"column_end":44},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7215},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38530,"byte_end":38541,"line_start":171,"line_end":171,"column_start":18,"column_end":29},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7235},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38553,"byte_end":38559,"line_start":172,"line_end":172,"column_start":11,"column_end":17},"alias_span":null,"name":"MaxLen","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7225},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38561,"byte_end":38567,"line_start":172,"line_end":172,"column_start":19,"column_end":25},"alias_span":null,"name":"MinLen","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7245},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38579,"byte_end":38582,"line_start":173,"line_end":173,"column_start":10,"column_end":13},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7266},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38599,"byte_end":38606,"line_start":174,"line_end":174,"column_start":16,"column_end":23},"alias_span":null,"name":"MapInit","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7254},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38608,"byte_end":38615,"line_start":174,"line_end":174,"column_start":25,"column_end":32},"alias_span":null,"name":"MapWith","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7278},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38632,"byte_end":38640,"line_start":175,"line_end":175,"column_start":15,"column_end":23},"alias_span":null,"name":"MultiZip","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":2950},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38653,"byte_end":38657,"line_start":176,"line_end":176,"column_start":12,"column_end":16},"alias_span":null,"name":"once","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8157},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38659,"byte_end":38663,"line_start":176,"line_end":176,"column_start":18,"column_end":22},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8166},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38682,"byte_end":38691,"line_start":177,"line_end":177,"column_start":17,"column_end":26},"alias_span":null,"name":"PanicFuse","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8182},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38710,"byte_end":38720,"line_start":178,"line_end":178,"column_start":18,"column_end":28},"alias_span":null,"name":"IterBridge","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3145},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38722,"byte_end":38736,"line_start":178,"line_end":178,"column_start":30,"column_end":44},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8191},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38754,"byte_end":38763,"line_start":179,"line_end":179,"column_start":16,"column_end":25},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3366},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38778,"byte_end":38784,"line_start":180,"line_end":180,"column_start":14,"column_end":20},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3387},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38786,"byte_end":38793,"line_start":180,"line_end":180,"column_start":22,"column_end":29},"alias_span":null,"name":"repeatn","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8200},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38795,"byte_end":38801,"line_start":180,"line_end":180,"column_start":31,"column_end":37},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8209},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38803,"byte_end":38810,"line_start":180,"line_end":180,"column_start":39,"column_end":46},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8219},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38822,"byte_end":38825,"line_start":181,"line_end":181,"column_start":10,"column_end":13},"alias_span":null,"name":"Rev","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8228},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38837,"byte_end":38841,"line_start":182,"line_end":182,"column_start":11,"column_end":15},"alias_span":null,"name":"Skip","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3518},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38858,"byte_end":38863,"line_start":183,"line_end":183,"column_start":16,"column_end":21},"alias_span":null,"name":"split","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8238},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38865,"byte_end":38870,"line_start":183,"line_end":183,"column_start":23,"column_end":28},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8247},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38883,"byte_end":38887,"line_start":184,"line_end":184,"column_start":11,"column_end":15},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8257},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38904,"byte_end":38911,"line_start":185,"line_end":185,"column_start":16,"column_end":23},"alias_span":null,"name":"TryFold","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8272},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38913,"byte_end":38924,"line_start":185,"line_end":185,"column_start":25,"column_end":36},"alias_span":null,"name":"TryFoldWith","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8284},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38939,"byte_end":38945,"line_start":186,"line_end":186,"column_start":13,"column_end":19},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8306},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38963,"byte_end":38972,"line_start":187,"line_end":187,"column_start":17,"column_end":26},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8315},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":38983,"byte_end":38986,"line_start":188,"line_end":188,"column_start":10,"column_end":13},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8328},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39000,"byte_end":39005,"line_start":189,"line_end":189,"column_start":13,"column_end":18},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8340},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39071,"byte_end":39077,"line_start":194,"line_end":194,"column_start":24,"column_end":30},"alias_span":null,"name":"StepBy","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":4947},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437042,"byte_end":437062,"line_start":5,"line_end":5,"column_start":22,"column_end":42},"alias_span":null,"name":"FromParallelIterator","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":4882},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437085,"byte_end":437108,"line_start":6,"line_end":6,"column_start":22,"column_end":45},"alias_span":null,"name":"IndexedParallelIterator","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":4648},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437131,"byte_end":437151,"line_start":7,"line_end":7,"column_start":22,"column_end":42},"alias_span":null,"name":"IntoParallelIterator","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":4652},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437174,"byte_end":437197,"line_start":8,"line_end":8,"column_start":22,"column_end":45},"alias_span":null,"name":"IntoParallelRefIterator","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":4663},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437220,"byte_end":437246,"line_start":9,"line_end":9,"column_start":22,"column_end":48},"alias_span":null,"name":"IntoParallelRefMutIterator","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":3145},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437269,"byte_end":437283,"line_start":10,"line_end":10,"column_start":22,"column_end":36},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":4955},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437306,"byte_end":437323,"line_start":11,"line_end":11,"column_start":22,"column_end":39},"alias_span":null,"name":"ParallelDrainFull","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":4959},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437346,"byte_end":437364,"line_start":12,"line_end":12,"column_start":22,"column_end":40},"alias_span":null,"name":"ParallelDrainRange","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":4951},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437387,"byte_end":437401,"line_start":13,"line_end":13,"column_start":22,"column_end":36},"alias_span":null,"name":"ParallelExtend","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":4674},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437424,"byte_end":437440,"line_start":14,"line_end":14,"column_start":22,"column_end":38},"alias_span":null,"name":"ParallelIterator","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":5816},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437464,"byte_end":437477,"line_start":15,"line_end":15,"column_start":23,"column_end":36},"alias_span":null,"name":"ParallelSlice","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":5829},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437501,"byte_end":437517,"line_start":16,"line_end":16,"column_start":23,"column_end":39},"alias_span":null,"name":"ParallelSliceMut","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":6026},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":437539,"byte_end":437553,"line_start":17,"line_end":17,"column_start":21,"column_end":35},"alias_span":null,"name":"ParallelString","value":"","parent":{"krate":0,"index":5089}},{"kind":"Use","ref_id":{"krate":0,"index":8797},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466401,"byte_end":466407,"line_start":24,"line_end":24,"column_start":24,"column_end":30},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":5314}},{"kind":"Use","ref_id":{"krate":0,"index":8806},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466409,"byte_end":466420,"line_start":24,"line_end":24,"column_start":32,"column_end":43},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":5314}},{"kind":"Use","ref_id":{"krate":0,"index":8825},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466422,"byte_end":466436,"line_start":24,"line_end":24,"column_start":45,"column_end":59},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":5314}},{"kind":"Use","ref_id":{"krate":0,"index":8816},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466438,"byte_end":466447,"line_start":24,"line_end":24,"column_start":61,"column_end":70},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":5314}},{"kind":"Use","ref_id":{"krate":0,"index":8857},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466474,"byte_end":466481,"line_start":25,"line_end":25,"column_start":25,"column_end":32},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":5314}},{"kind":"Use","ref_id":{"krate":0,"index":8866},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466483,"byte_end":466495,"line_start":25,"line_end":25,"column_start":34,"column_end":46},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":5314}},{"kind":"Use","ref_id":{"krate":0,"index":8885},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466497,"byte_end":466512,"line_start":25,"line_end":25,"column_start":48,"column_end":63},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":5314}},{"kind":"Use","ref_id":{"krate":0,"index":8876},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466514,"byte_end":466524,"line_start":25,"line_end":25,"column_start":65,"column_end":75},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":5314}},{"kind":"Use","ref_id":{"krate":21,"index":1367},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4239,"byte_end":4248,"line_start":112,"line_end":112,"column_start":21,"column_end":30},"alias_span":null,"name":"FnContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":428},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4270,"byte_end":4283,"line_start":113,"line_end":113,"column_start":21,"column_end":34},"alias_span":null,"name":"ThreadBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":926},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4305,"byte_end":4315,"line_start":114,"line_end":114,"column_start":21,"column_end":31},"alias_span":null,"name":"ThreadPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":1355},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4337,"byte_end":4357,"line_start":115,"line_end":115,"column_start":21,"column_end":41},"alias_span":null,"name":"ThreadPoolBuildError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":1062},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4379,"byte_end":4396,"line_start":116,"line_end":116,"column_start":21,"column_end":38},"alias_span":null,"name":"ThreadPoolBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":1061},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4419,"byte_end":4438,"line_start":117,"line_end":117,"column_start":22,"column_end":41},"alias_span":null,"name":"current_num_threads","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":971},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4440,"byte_end":4460,"line_start":117,"line_end":117,"column_start":43,"column_end":63},"alias_span":null,"name":"current_thread_index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":1060},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4462,"byte_end":4477,"line_start":117,"line_end":117,"column_start":65,"column_end":80},"alias_span":null,"name":"max_num_threads","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":663},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4501,"byte_end":4515,"line_start":118,"line_end":118,"column_start":22,"column_end":36},"alias_span":null,"name":"in_place_scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":651},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4517,"byte_end":4522,"line_start":118,"line_end":118,"column_start":38,"column_end":43},"alias_span":null,"name":"scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":631},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4524,"byte_end":4529,"line_start":118,"line_end":118,"column_start":45,"column_end":50},"alias_span":null,"name":"Scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":672},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4553,"byte_end":4572,"line_start":119,"line_end":119,"column_start":22,"column_end":41},"alias_span":null,"name":"in_place_scope_fifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":657},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4574,"byte_end":4584,"line_start":119,"line_end":119,"column_start":43,"column_end":53},"alias_span":null,"name":"scope_fifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":634},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4586,"byte_end":4595,"line_start":119,"line_end":119,"column_start":55,"column_end":64},"alias_span":null,"name":"ScopeFifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":198},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4619,"byte_end":4623,"line_start":120,"line_end":120,"column_start":22,"column_end":26},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":208},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4625,"byte_end":4637,"line_start":120,"line_end":120,"column_start":28,"column_end":40},"alias_span":null,"name":"join_context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":858},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4661,"byte_end":4666,"line_start":121,"line_end":121,"column_start":22,"column_end":27},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":865},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4668,"byte_end":4678,"line_start":121,"line_end":121,"column_start":29,"column_end":39},"alias_span":null,"name":"spawn_fifo","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":0,"byte_end":5684,"line_start":1,"line_end":147,"column_start":1,"column_end":31},"name":"","qualname":"::","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":11},{"krate":0,"index":50},{"krate":0,"index":104},{"krate":0,"index":357},{"krate":0,"index":5027},{"krate":0,"index":5089},{"krate":0,"index":5129},{"krate":0,"index":5206},{"krate":0,"index":5270},{"krate":0,"index":5314},{"krate":0,"index":6019},{"krate":0,"index":6233},{"krate":0,"index":6260},{"krate":0,"index":6393},{"krate":0,"index":6407},{"krate":0,"index":6438},{"krate":0,"index":6449},{"krate":0,"index":6452},{"krate":0,"index":6455},{"krate":0,"index":6458},{"krate":0,"index":6461},{"krate":0,"index":6464},{"krate":0,"index":6465},{"krate":0,"index":6468},{"krate":0,"index":6471},{"krate":0,"index":6474},{"krate":0,"index":6475},{"krate":0,"index":6478},{"krate":0,"index":6481},{"krate":0,"index":6484},{"krate":0,"index":6485},{"krate":0,"index":6488},{"krate":0,"index":6491},{"krate":0,"index":6494},{"krate":0,"index":6495},{"krate":0,"index":6498},{"krate":0,"index":6501},{"krate":0,"index":6502},{"krate":0,"index":6505},{"krate":0,"index":6508},{"krate":0,"index":6512},{"krate":0,"index":6514},{"krate":0,"index":6516},{"krate":0,"index":6519}],"decl_id":null,"docs":" Data-parallelism library that makes it easy to convert sequential\n computations into parallel","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":53,"byte_end":92,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":93,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":116,"byte_end":141,"line_start":4,"line_end":4,"column_start":1,"column_end":26}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":142,"byte_end":168,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/ Data-parallelism library that makes it easy to convert sequential","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":170,"byte_end":239,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ computations into parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":240,"byte_end":270,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":271,"byte_end":274,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Rayon is lightweight and convenient for introducing parallelism into existing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":275,"byte_end":356,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"/ code. It guarantees data-race free executions and takes advantage of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":357,"byte_end":429,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ parallelism when sensible, based on work-load at runtime.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":430,"byte_end":491,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":492,"byte_end":495,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # How to use Rayon","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":496,"byte_end":518,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":519,"byte_end":522,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ There are two ways to use Rayon:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":523,"byte_end":559,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":560,"byte_end":563,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ - **High-level parallel constructs** are the simplest way to use Rayon and also","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":564,"byte_end":647,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/   typically the most efficient.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":648,"byte_end":683,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/   - [Parallel iterators][iter module] make it easy to convert a sequential iterator to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":684,"byte_end":774,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/     execute in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":775,"byte_end":803,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/     - The [`ParallelIterator`] trait defines general methods for all parallel iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":804,"byte_end":896,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/     - The [`IndexedParallelIterator`] trait adds methods for iterators that support random","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":897,"byte_end":991,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"/       access.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":992,"byte_end":1009,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/   - The [`par_sort`] method sorts `&mut [T]` slices (or vectors) in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1010,"byte_end":1091,"line_start":25,"line_end":25,"column_start":1,"column_end":82}},{"value":"/   - [`par_extend`] can be used to efficiently grow collections with items produced","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1092,"byte_end":1178,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/     by a parallel iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1179,"byte_end":1210,"line_start":27,"line_end":27,"column_start":1,"column_end":32}},{"value":"/ - **Custom tasks** let you divide your work into parallel tasks yourself.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1211,"byte_end":1288,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/   - [`join`] is used to subdivide a task into two pieces.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1289,"byte_end":1350,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/   - [`scope`] creates a scope within which you can create any number of parallel tasks.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1351,"byte_end":1442,"line_start":30,"line_end":30,"column_start":1,"column_end":92}},{"value":"/   - [`ThreadPoolBuilder`] can be used to create your own thread pools or customize","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1443,"byte_end":1529,"line_start":31,"line_end":31,"column_start":1,"column_end":87}},{"value":"/     the global one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1530,"byte_end":1553,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1554,"byte_end":1557,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [iter module]: iter/index.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1558,"byte_end":1592,"line_start":34,"line_end":34,"column_start":1,"column_end":35}},{"value":"/ [`join`]: fn.join.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1593,"byte_end":1619,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"/ [`scope`]: fn.scope.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1620,"byte_end":1648,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ [`par_sort`]: slice/trait.ParallelSliceMut.html#method.par_sort","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1649,"byte_end":1716,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ [`par_extend`]: iter/trait.ParallelExtend.html#tymethod.par_extend","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1717,"byte_end":1787,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/ [`ThreadPoolBuilder`]: struct.ThreadPoolBuilder.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1788,"byte_end":1844,"line_start":39,"line_end":39,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1845,"byte_end":1848,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Basic usage and the Rayon prelude","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1849,"byte_end":1888,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1889,"byte_end":1892,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ First, you will need to add `rayon` to your `Cargo.toml`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1893,"byte_end":1954,"line_start":43,"line_end":43,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1955,"byte_end":1958,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Next, to use parallel iterators or the other high-level methods,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":1959,"byte_end":2027,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ you need to import several traits. Those traits are bundled into","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2028,"byte_end":2096,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ the module [`rayon::prelude`]. It is recommended that you import","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2097,"byte_end":2165,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ all of these traits at once by adding `use rayon::prelude::*` at","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2166,"byte_end":2234,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"/ the top of each module that uses Rayon methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2235,"byte_end":2286,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2287,"byte_end":2290,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ These traits give you access to the `par_iter` method which provides","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2291,"byte_end":2363,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ parallel implementations of many iterative functions such as [`map`],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2364,"byte_end":2437,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ [`for_each`], [`filter`], [`fold`], and [more].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2438,"byte_end":2489,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2490,"byte_end":2493,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`rayon::prelude`]: prelude/index.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2494,"byte_end":2536,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ [`map`]: iter/trait.ParallelIterator.html#method.map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2537,"byte_end":2593,"line_start":56,"line_end":56,"column_start":1,"column_end":57}},{"value":"/ [`for_each`]: iter/trait.ParallelIterator.html#method.for_each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2594,"byte_end":2660,"line_start":57,"line_end":57,"column_start":1,"column_end":67}},{"value":"/ [`filter`]: iter/trait.ParallelIterator.html#method.filter","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2661,"byte_end":2723,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"/ [`fold`]: iter/trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2724,"byte_end":2782,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"/ [more]: iter/trait.ParallelIterator.html#provided-methods","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2783,"byte_end":2844,"line_start":60,"line_end":60,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: iter/trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2845,"byte_end":2903,"line_start":61,"line_end":61,"column_start":1,"column_end":59}},{"value":"/ [`IndexedParallelIterator`]: iter/trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2904,"byte_end":2976,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2977,"byte_end":2980,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Crate Layout","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":2981,"byte_end":2999,"line_start":64,"line_end":64,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3000,"byte_end":3003,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Rayon extends many of the types found in the standard library with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3004,"byte_end":3074,"line_start":66,"line_end":66,"column_start":1,"column_end":71}},{"value":"/ parallel iterator implementations. The modules in the `rayon`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3075,"byte_end":3140,"line_start":67,"line_end":67,"column_start":1,"column_end":66}},{"value":"/ crate mirror [`std`] itself: so, e.g., the `option` module in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3141,"byte_end":3206,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/ Rayon contains parallel iterators for the `Option` type, which is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3207,"byte_end":3276,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/ found in [the `option` module of `std`]. Similarly, the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3277,"byte_end":3336,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/ `collections` module in Rayon offers parallel iterator types for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3337,"byte_end":3405,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/ [the `collections` from `std`]. You will rarely need to access","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3406,"byte_end":3472,"line_start":72,"line_end":72,"column_start":1,"column_end":67}},{"value":"/ these submodules unless you need to name iterator types","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3473,"byte_end":3532,"line_start":73,"line_end":73,"column_start":1,"column_end":60}},{"value":"/ explicitly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3533,"byte_end":3548,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3549,"byte_end":3552,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [the `option` module of `std`]: https://doc.rust-lang.org/std/option/index.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3553,"byte_end":3636,"line_start":76,"line_end":76,"column_start":1,"column_end":84}},{"value":"/ [the `collections` from `std`]: https://doc.rust-lang.org/std/collections/index.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3637,"byte_end":3725,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/ [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3726,"byte_end":3769,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3770,"byte_end":3773,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Other questions?","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3774,"byte_end":3796,"line_start":80,"line_end":80,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3797,"byte_end":3800,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ See [the Rayon FAQ][faq].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3801,"byte_end":3830,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3831,"byte_end":3834,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [faq]: https://github.com/rayon-rs/rayon/blob/master/FAQ.md","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3835,"byte_end":3898,"line_start":84,"line_end":84,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":7},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/private.rs","byte_start":8202,"byte_end":8215,"line_start":9,"line_end":9,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::private::PrivateMarker","value":"","parent":null,"children":[],"decl_id":null,"docs":" If this type is pub but not publicly reachable, third parties\n can't name it and can't implement traits using it.\n","sig":null,"attributes":[{"value":"/ If this type is pub but not publicly reachable, third parties","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/private.rs","byte_start":8030,"byte_end":8095,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ can't name it and can't implement traits using it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/private.rs","byte_start":8096,"byte_end":8150,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/private.rs","byte_start":8151,"byte_end":8190,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":74},{"krate":0,"index":82},{"krate":0,"index":6521},{"krate":0,"index":6526},{"krate":0,"index":6531},{"krate":0,"index":89},{"krate":0,"index":96}],"decl_id":null,"docs":" Parallel iterator types for [arrays] (`[T; N]`)","sig":null,"attributes":[{"value":"cfg(has_min_const_generics)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":12767,"byte_end":12798,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"/ Parallel iterator types for [arrays] (`[T; N]`)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":12799,"byte_end":12850,"line_start":2,"line_end":2,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":12851,"byte_end":12854,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":12855,"byte_end":12933,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":12934,"byte_end":12972,"line_start":5,"line_end":5,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":12973,"byte_end":12976,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Everything in this module requires const generics, stabilized in Rust 1.51.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":12977,"byte_end":13056,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":13057,"byte_end":13060,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [arrays]: https://doc.rust-lang.org/std/primitive.array.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":13061,"byte_end":13125,"line_start":9,"line_end":9,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":6521},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":14261,"byte_end":14269,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::array::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6524}],"decl_id":null,"docs":" Parallel iterator that moves out of an array.\n","sig":null,"attributes":[{"value":"/ Parallel iterator that moves out of an array.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":14176,"byte_end":14225,"line_start":47,"line_end":47,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collections","qualname":"::collections","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":149},{"krate":0,"index":163},{"krate":0,"index":176},{"krate":0,"index":208},{"krate":0,"index":238},{"krate":0,"index":251},{"krate":0,"index":320},{"krate":0,"index":323}],"decl_id":null,"docs":" Parallel iterator types for [standard collections][std::collections]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [standard collections][std::collections]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":15244,"byte_end":15316,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":15317,"byte_end":15320,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":15321,"byte_end":15399,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":15400,"byte_end":15438,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":15439,"byte_end":15442,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::collections]: https://doc.rust-lang.org/stable/std/collections/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":15443,"byte_end":15516,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":106},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::collections::binary_heap","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":6537},{"krate":0,"index":6540},{"krate":0,"index":6543},{"krate":0,"index":115},{"krate":0,"index":6553},{"krate":0,"index":6546},{"krate":0,"index":6559},{"krate":0,"index":6563},{"krate":0,"index":120},{"krate":0,"index":6567},{"krate":0,"index":6584},{"krate":0,"index":6576},{"krate":0,"index":6591},{"krate":0,"index":6595},{"krate":0,"index":124},{"krate":0,"index":130},{"krate":0,"index":137},{"krate":0,"index":145}],"decl_id":null,"docs":" This module contains the parallel iterator types for heaps\n (`BinaryHeap<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for heaps","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":17939,"byte_end":18001,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/ (`BinaryHeap<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18002,"byte_end":18074,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18075,"byte_end":18134,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6537},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18315,"byte_end":18323,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::binary_heap::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6539}],"decl_id":null,"docs":" Parallel iterator over a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a binary heap","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18239,"byte_end":18279,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6559},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18789,"byte_end":18793,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::binary_heap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6562}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a binary heap","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18694,"byte_end":18760,"line_start":34,"line_end":34,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":6591},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":19355,"byte_end":19360,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::binary_heap::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":6594}],"decl_id":null,"docs":" Draining parallel iterator that moves out of a binary heap,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves out of a binary heap,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":19229,"byte_end":19292,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/ but keeps the total capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":19293,"byte_end":19326,"line_start":61,"line_end":61,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":149},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_map","qualname":"::collections::btree_map","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":6599},{"krate":0,"index":6603},{"krate":0,"index":6607},{"krate":0,"index":6616},{"krate":0,"index":6623},{"krate":0,"index":6628},{"krate":0,"index":158},{"krate":0,"index":6633},{"krate":0,"index":6643},{"krate":0,"index":6651},{"krate":0,"index":6656},{"krate":0,"index":6661},{"krate":0,"index":6671}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree maps\n (`BTreeMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for B-Tree maps","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":20667,"byte_end":20735,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ (`BTreeMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":20736,"byte_end":20809,"line_start":2,"line_end":2,"column_start":1,"column_end":74}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":20810,"byte_end":20869,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6599},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":21061,"byte_end":21069,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6602}],"decl_id":null,"docs":" Parallel iterator over a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":20972,"byte_end":21011,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":6623},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":21404,"byte_end":21408,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6627}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":21310,"byte_end":21375,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":6651},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":21945,"byte_end":21952,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::btree_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6655}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a B-Tree map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":21854,"byte_end":21916,"line_start":52,"line_end":52,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":163},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_set","qualname":"::collections::btree_set","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":6679},{"krate":0,"index":6682},{"krate":0,"index":6685},{"krate":0,"index":6693},{"krate":0,"index":6699},{"krate":0,"index":6703},{"krate":0,"index":172},{"krate":0,"index":6707},{"krate":0,"index":6716}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree sets\n (`BTreeSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for B-Tree sets","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":22253,"byte_end":22321,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ (`BTreeSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":22322,"byte_end":22392,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":22393,"byte_end":22452,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6679},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":22644,"byte_end":22652,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6681}],"decl_id":null,"docs":" Parallel iterator over a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree set","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":22555,"byte_end":22594,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":6699},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":22941,"byte_end":22945,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6702}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree set","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":22847,"byte_end":22912,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":176},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_map","qualname":"::collections::hash_map","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":6723},{"krate":0,"index":6727},{"krate":0,"index":6731},{"krate":0,"index":6741},{"krate":0,"index":6748},{"krate":0,"index":6753},{"krate":0,"index":195},{"krate":0,"index":6758},{"krate":0,"index":6769},{"krate":0,"index":6777},{"krate":0,"index":6782},{"krate":0,"index":6787},{"krate":0,"index":6798},{"krate":0,"index":6806},{"krate":0,"index":6812},{"krate":0,"index":200},{"krate":0,"index":6817}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash maps\n (`HashMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for hash maps","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":23374,"byte_end":23440,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/ (`HashMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":23441,"byte_end":23513,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":23514,"byte_end":23573,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6723},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":23828,"byte_end":23836,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6726}],"decl_id":null,"docs":" Parallel iterator over a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":23741,"byte_end":23778,"line_start":14,"line_end":14,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":6748},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":24205,"byte_end":24209,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6752}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":24113,"byte_end":24176,"line_start":30,"line_end":30,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6777},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":24786,"byte_end":24793,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::hash_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6781}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a hash map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":24697,"byte_end":24757,"line_start":54,"line_end":54,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":6806},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":25253,"byte_end":25258,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::hash_map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":6810},{"krate":0,"index":6811}],"decl_id":null,"docs":" Draining parallel iterator that moves out of a hash map,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves out of a hash map,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":25130,"byte_end":25190,"line_start":70,"line_end":70,"column_start":1,"column_end":61}},{"value":"/ but keeps the total capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":25191,"byte_end":25224,"line_start":71,"line_end":71,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":208},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_set","qualname":"::collections::hash_set","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":6824},{"krate":0,"index":6827},{"krate":0,"index":6830},{"krate":0,"index":6839},{"krate":0,"index":6845},{"krate":0,"index":6849},{"krate":0,"index":227},{"krate":0,"index":6853},{"krate":0,"index":6863},{"krate":0,"index":6870},{"krate":0,"index":6875},{"krate":0,"index":231},{"krate":0,"index":6879}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash sets\n (`HashSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for hash sets","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":25837,"byte_end":25903,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/ (`HashSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":25904,"byte_end":25973,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":25974,"byte_end":26033,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6824},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":26288,"byte_end":26296,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6826}],"decl_id":null,"docs":" Parallel iterator over a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash set","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":26201,"byte_end":26238,"line_start":14,"line_end":14,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":6845},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":26619,"byte_end":26623,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6848}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash set","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":26527,"byte_end":26590,"line_start":30,"line_end":30,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6870},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":27211,"byte_end":27216,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::hash_set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":6873},{"krate":0,"index":6874}],"decl_id":null,"docs":" Draining parallel iterator that moves out of a hash set,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves out of a hash set,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":27088,"byte_end":27148,"line_start":56,"line_end":56,"column_start":1,"column_end":61}},{"value":"/ but keeps the total capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":27149,"byte_end":27182,"line_start":57,"line_end":57,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":238},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linked_list","qualname":"::collections::linked_list","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":6885},{"krate":0,"index":6888},{"krate":0,"index":6891},{"krate":0,"index":6894},{"krate":0,"index":6902},{"krate":0,"index":6908},{"krate":0,"index":6912},{"krate":0,"index":247},{"krate":0,"index":6916},{"krate":0,"index":6925},{"krate":0,"index":6932},{"krate":0,"index":6936},{"krate":0,"index":6940},{"krate":0,"index":6949}],"decl_id":null,"docs":" This module contains the parallel iterator types for linked lists\n (`LinkedList<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for linked lists","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":27737,"byte_end":27806,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ (`LinkedList<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":27807,"byte_end":27879,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":27880,"byte_end":27939,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6885},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":28120,"byte_end":28128,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::linked_list::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6887}],"decl_id":null,"docs":" Parallel iterator over a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a linked list","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":28044,"byte_end":28084,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6908},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":28402,"byte_end":28406,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6911}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a linked list","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":28307,"byte_end":28373,"line_start":28,"line_end":28,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":6932},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":28851,"byte_end":28858,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::linked_list::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6935}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a linked list","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":28759,"byte_end":28822,"line_start":52,"line_end":52,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":251},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec_deque","qualname":"::collections::vec_deque","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":6956},{"krate":0,"index":6959},{"krate":0,"index":6962},{"krate":0,"index":273},{"krate":0,"index":6972},{"krate":0,"index":6965},{"krate":0,"index":6978},{"krate":0,"index":6982},{"krate":0,"index":278},{"krate":0,"index":282},{"krate":0,"index":6994},{"krate":0,"index":6986},{"krate":0,"index":7001},{"krate":0,"index":7005},{"krate":0,"index":288},{"krate":0,"index":7017},{"krate":0,"index":7009},{"krate":0,"index":7024},{"krate":0,"index":7030},{"krate":0,"index":294},{"krate":0,"index":301},{"krate":0,"index":308},{"krate":0,"index":316}],"decl_id":null,"docs":" This module contains the parallel iterator types for double-ended queues\n (`VecDeque<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for double-ended queues","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":29084,"byte_end":29160,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ (`VecDeque<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":29161,"byte_end":29231,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":29232,"byte_end":29291,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6956},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":29564,"byte_end":29572,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::vec_deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6958}],"decl_id":null,"docs":" Parallel iterator over a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a double-ended queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":29481,"byte_end":29528,"line_start":15,"line_end":15,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6978},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":30104,"byte_end":30108,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::vec_deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6981}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a double-ended queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":30002,"byte_end":30075,"line_start":37,"line_end":37,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7001},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":30791,"byte_end":30798,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::vec_deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":7004}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a double-ended queue","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":30692,"byte_end":30762,"line_start":68,"line_end":68,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":7024},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":31409,"byte_end":31414,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::vec_deque::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":7027},{"krate":0,"index":7028},{"krate":0,"index":7029}],"decl_id":null,"docs":" Draining parallel iterator that moves a range out of a double-ended queue,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves a range out of a double-ended queue,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":31268,"byte_end":31346,"line_start":91,"line_end":91,"column_start":1,"column_end":79}},{"value":"/ but keeps the total capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":31347,"byte_end":31380,"line_start":92,"line_end":92,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":357},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":476},{"krate":0,"index":577},{"krate":0,"index":642},{"krate":0,"index":728},{"krate":0,"index":835},{"krate":0,"index":921},{"krate":0,"index":966},{"krate":0,"index":1015},{"krate":0,"index":1282},{"krate":0,"index":1350},{"krate":0,"index":1422},{"krate":0,"index":1486},{"krate":0,"index":1557},{"krate":0,"index":1631},{"krate":0,"index":1705},{"krate":0,"index":1748},{"krate":0,"index":1791},{"krate":0,"index":1921},{"krate":0,"index":1961},{"krate":0,"index":2077},{"krate":0,"index":2189},{"krate":0,"index":2287},{"krate":0,"index":2309},{"krate":0,"index":2426},{"krate":0,"index":2512},{"krate":0,"index":2631},{"krate":0,"index":2912},{"krate":0,"index":2919},{"krate":0,"index":2947},{"krate":0,"index":2965},{"krate":0,"index":3095},{"krate":0,"index":3173},{"krate":0,"index":3235},{"krate":0,"index":3292},{"krate":0,"index":3357},{"krate":0,"index":3427},{"krate":0,"index":3471},{"krate":0,"index":3508},{"krate":0,"index":3546},{"krate":0,"index":3603},{"krate":0,"index":3635},{"krate":0,"index":3778},{"krate":0,"index":3863},{"krate":0,"index":3940},{"krate":0,"index":4163},{"krate":0,"index":4295},{"krate":0,"index":4354},{"krate":0,"index":4420},{"krate":0,"index":4442},{"krate":0,"index":4443},{"krate":0,"index":4446},{"krate":0,"index":4449},{"krate":0,"index":4452},{"krate":0,"index":4455},{"krate":0,"index":4456},{"krate":0,"index":4459},{"krate":0,"index":4462},{"krate":0,"index":4465},{"krate":0,"index":4468},{"krate":0,"index":4471},{"krate":0,"index":4474},{"krate":0,"index":4477},{"krate":0,"index":4480},{"krate":0,"index":4483},{"krate":0,"index":4484},{"krate":0,"index":4487},{"krate":0,"index":4490},{"krate":0,"index":4493},{"krate":0,"index":4496},{"krate":0,"index":4499},{"krate":0,"index":4502},{"krate":0,"index":4503},{"krate":0,"index":4506},{"krate":0,"index":4509},{"krate":0,"index":4512},{"krate":0,"index":4513},{"krate":0,"index":4516},{"krate":0,"index":4519},{"krate":0,"index":4522},{"krate":0,"index":4523},{"krate":0,"index":4526},{"krate":0,"index":4529},{"krate":0,"index":4532},{"krate":0,"index":4533},{"krate":0,"index":4536},{"krate":0,"index":4539},{"krate":0,"index":4542},{"krate":0,"index":4543},{"krate":0,"index":4546},{"krate":0,"index":4549},{"krate":0,"index":4552},{"krate":0,"index":4555},{"krate":0,"index":4558},{"krate":0,"index":4561},{"krate":0,"index":4562},{"krate":0,"index":4565},{"krate":0,"index":4568},{"krate":0,"index":4571},{"krate":0,"index":4572},{"krate":0,"index":4575},{"krate":0,"index":4578},{"krate":0,"index":4581},{"krate":0,"index":4584},{"krate":0,"index":4587},{"krate":0,"index":4590},{"krate":0,"index":4645},{"krate":0,"index":4648},{"krate":0,"index":4652},{"krate":0,"index":4657},{"krate":0,"index":4663},{"krate":0,"index":4668},{"krate":0,"index":4674},{"krate":0,"index":4877},{"krate":0,"index":4882},{"krate":0,"index":4947},{"krate":0,"index":4951},{"krate":0,"index":4955},{"krate":0,"index":4959},{"krate":0,"index":4965}],"decl_id":null,"docs":" Traits for writing parallel programs using an iterator-style interface","sig":null,"attributes":[{"value":"/ Traits for writing parallel programs using an iterator-style interface","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33090,"byte_end":33164,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33165,"byte_end":33168,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33169,"byte_end":33247,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33248,"byte_end":33291,"line_start":4,"line_end":4,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33292,"byte_end":33295,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Parallel iterators make it easy to write iterator-like chains that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33296,"byte_end":33366,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ execute in parallel: typically all you have to do is convert the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33367,"byte_end":33435,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ first `.iter()` (or `iter_mut()`, `into_iter()`, etc) method into","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33436,"byte_end":33505,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ `par_iter()` (or `par_iter_mut()`, `into_par_iter()`, etc). For","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33506,"byte_end":33573,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ example, to compute the sum of the squares of a sequence of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33574,"byte_end":33637,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ integers, one might write:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33638,"byte_end":33668,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33669,"byte_end":33672,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33673,"byte_end":33684,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33685,"byte_end":33711,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/ fn sum_of_squares(input: &[i32]) -> i32 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33712,"byte_end":33757,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/     input.par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33758,"byte_end":33782,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/          .map(|i| i * i)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33783,"byte_end":33811,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/          .sum()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33812,"byte_end":33831,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33832,"byte_end":33837,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33838,"byte_end":33845,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33846,"byte_end":33849,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Or, to increment all the integers in a slice, you could write:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33850,"byte_end":33916,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33917,"byte_end":33920,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33921,"byte_end":33932,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33933,"byte_end":33959,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ fn increment_all(input: &mut [i32]) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":33960,"byte_end":34001,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/     input.par_iter_mut()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34002,"byte_end":34030,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/          .for_each(|p| *p += 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34031,"byte_end":34067,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34068,"byte_end":34073,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34074,"byte_end":34081,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34082,"byte_end":34085,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ To use parallel iterators, first import the traits by adding","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34086,"byte_end":34150,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/ something like `use rayon::prelude::*` to your module. You can","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34151,"byte_end":34217,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/ then call `par_iter`, `par_iter_mut`, or `into_par_iter` to get a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34218,"byte_end":34287,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ parallel iterator. Like a [regular iterator][], parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34288,"byte_end":34348,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"/ iterators work by first constructing a computation and then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34349,"byte_end":34412,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"/ executing it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34413,"byte_end":34430,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34431,"byte_end":34434,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In addition to `par_iter()` and friends, some types offer other","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34435,"byte_end":34502,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/ ways to create (or consume) parallel iterators:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34503,"byte_end":34554,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34555,"byte_end":34558,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - Slices (`&[T]`, `&mut [T]`) offer methods like `par_split` and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34559,"byte_end":34627,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"/   `par_windows`, as well as various parallel sorting","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34628,"byte_end":34684,"line_start":43,"line_end":43,"column_start":1,"column_end":57}},{"value":"/   operations. See [the `ParallelSlice` trait] for the full list.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34685,"byte_end":34753,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ - Strings (`&str`) offer methods like `par_split` and `par_lines`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34754,"byte_end":34824,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/   See [the `ParallelString` trait] for the full list.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34825,"byte_end":34882,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ - Various collections offer [`par_extend`], which grows a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34883,"byte_end":34944,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"/   collection given a parallel iterator. (If you don't have a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":34945,"byte_end":35009,"line_start":48,"line_end":48,"column_start":1,"column_end":65}},{"value":"/   collection to extend, you can use [`collect()`] to create a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35010,"byte_end":35079,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/   one from scratch.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35080,"byte_end":35104,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35105,"byte_end":35108,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ [the `ParallelSlice` trait]: ../slice/trait.ParallelSlice.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35109,"byte_end":35175,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"/ [the `ParallelString` trait]: ../str/trait.ParallelString.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35176,"byte_end":35242,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/ [`par_extend`]: trait.ParallelExtend.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35243,"byte_end":35288,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35289,"byte_end":35350,"line_start":55,"line_end":55,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35351,"byte_end":35354,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ To see the full range of methods available on parallel iterators,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35355,"byte_end":35424,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ check out the [`ParallelIterator`] and [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35425,"byte_end":35495,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"/ traits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35496,"byte_end":35507,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35508,"byte_end":35511,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ If you'd like to build a custom parallel iterator, or to write your own","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35512,"byte_end":35587,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ combinator, then check out the [split] function and the [plumbing] module.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35588,"byte_end":35666,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35667,"byte_end":35670,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [regular iterator]: https://doc.rust-lang.org/std/iter/trait.Iterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35671,"byte_end":35749,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35750,"byte_end":35803,"line_start":65,"line_end":65,"column_start":1,"column_end":54}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35804,"byte_end":35871,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"/ [split]: fn.split.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35872,"byte_end":35898,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"/ [plumbing]: plumbing/index.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35899,"byte_end":35934,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35935,"byte_end":35938,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Note: Several of the `ParallelIterator` methods rely on a `Try` trait which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":35939,"byte_end":36018,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ has been deliberately obscured from the public API.  This trait is intended","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36019,"byte_end":36098,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"/ to mirror the unstable `std::ops::Try` with implementations for `Option` and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36099,"byte_end":36179,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ `Result`, where `Some`/`Ok` values will let those iterators continue, but","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36180,"byte_end":36257,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ `None`/`Err` values will exit early.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36258,"byte_end":36298,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36299,"byte_end":36302,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ A note about object safety: It is currently _not_ possible to wrap","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36303,"byte_end":36373,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ a `ParallelIterator` (or any trait that depends on it) using a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36374,"byte_end":36440,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ `Box<dyn ParallelIterator>` or other kind of dynamic allocation,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36441,"byte_end":36509,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"/ because `ParallelIterator` is **not object-safe**.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36510,"byte_end":36564,"line_start":79,"line_end":79,"column_start":1,"column_end":55}},{"value":"/ (This keeps the implementation simpler and allows extra optimizations.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36565,"byte_end":36640,"line_start":80,"line_end":80,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":386},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"plumbing","qualname":"::iter::plumbing","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":399},{"krate":0,"index":404},{"krate":0,"index":413},{"krate":0,"index":421},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":436},{"krate":0,"index":7034},{"krate":0,"index":7036},{"krate":0,"index":7038},{"krate":0,"index":441},{"krate":0,"index":7039},{"krate":0,"index":7042},{"krate":0,"index":7044},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":460},{"krate":0,"index":468},{"krate":0,"index":471}],"decl_id":null,"docs":" Traits and functions used to implement parallel iteration.  These are\n low-level details -- users of parallel iterators should not need to\n interact with them directly.  See [the `plumbing` README][r] for a general overview.","sig":null,"attributes":[{"value":"/ Traits and functions used to implement parallel iteration.  These are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":141985,"byte_end":142058,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ low-level details -- users of parallel iterators should not need to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142059,"byte_end":142130,"line_start":2,"line_end":2,"column_start":1,"column_end":72}},{"value":"/ interact with them directly.  See [the `plumbing` README][r] for a general overview.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142131,"byte_end":142219,"line_start":3,"line_end":3,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142220,"byte_end":142223,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142224,"byte_end":142306,"line_start":5,"line_end":5,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":399},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142763,"byte_end":142779,"line_start":20,"line_end":20,"column_start":11,"column_end":27},"name":"ProducerCallback","qualname":"::iter::plumbing::ProducerCallback","value":"ProducerCallback<T>","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"decl_id":null,"docs":" The `ProducerCallback` trait is a kind of generic closure,\n [analogous to `FnOnce`][FnOnce]. See [the corresponding section in\n the plumbing README][r] for more details.","sig":null,"attributes":[{"value":"/ The `ProducerCallback` trait is a kind of generic closure,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142402,"byte_end":142464,"line_start":14,"line_end":14,"column_start":1,"column_end":63}},{"value":"/ [analogous to `FnOnce`][FnOnce]. See [the corresponding section in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142465,"byte_end":142535,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ the plumbing README][r] for more details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142536,"byte_end":142581,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142582,"byte_end":142585,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md#producer-callback","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142586,"byte_end":142686,"line_start":18,"line_end":18,"column_start":1,"column_end":101}},{"value":"/ [FnOnce]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142687,"byte_end":142752,"line_start":19,"line_end":19,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":401},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143012,"byte_end":143018,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::iter::plumbing::ProducerCallback::Output","value":"type Output;","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" The type of value returned by this callback. Analogous to\n [`Output` from the `FnOnce` trait][Output].","sig":null,"attributes":[{"value":"/ The type of value returned by this callback. Analogous to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142789,"byte_end":142850,"line_start":21,"line_end":21,"column_start":5,"column_end":66}},{"value":"/ [`Output` from the `FnOnce` trait][Output].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142855,"byte_end":142902,"line_start":22,"line_end":22,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142907,"byte_end":142910,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ [Output]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html#associatedtype.Output","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":142915,"byte_end":143002,"line_start":24,"line_end":24,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143236,"byte_end":143244,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"callback","qualname":"::iter::plumbing::ProducerCallback::callback","value":"pub fn callback<P>(Self, P) -> Self::Output where P: Producer<Item = T>","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Invokes the callback with the given producer as argument. The\n key point of this trait is that this method is generic over\n `P`, and hence implementors must be defined for any producer.\n","sig":null,"attributes":[{"value":"/ Invokes the callback with the given producer as argument. The","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143025,"byte_end":143090,"line_start":27,"line_end":27,"column_start":5,"column_end":70}},{"value":"/ key point of this trait is that this method is generic over","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143095,"byte_end":143158,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/ `P`, and hence implementors must be defined for any producer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143163,"byte_end":143228,"line_start":29,"line_end":29,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":404},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144718,"byte_end":144726,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"Producer","qualname":"::iter::plumbing::Producer","value":"Producer: Send + Sized","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"decl_id":null,"docs":" A `Producer` is effectively a \"splittable `IntoIterator`\". That\n is, a producer is a value which can be converted into an iterator\n at any time: at that point, it simply produces items on demand,\n like any iterator. But what makes a `Producer` special is that,\n *before* we convert to an iterator, we can also **split** it at a\n particular point using the `split_at` method. This will yield up\n two producers, one producing the items before that point, and one\n producing the items after that point (these two producers can then\n independently be split further, or be converted into iterators).\n In Rayon, this splitting is used to divide between threads.\n See [the `plumbing` README][r] for further details.","sig":null,"attributes":[{"value":"/ A `Producer` is effectively a \"splittable `IntoIterator`\". That","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143327,"byte_end":143394,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ is, a producer is a value which can be converted into an iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143395,"byte_end":143464,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ at any time: at that point, it simply produces items on demand,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143465,"byte_end":143532,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ like any iterator. But what makes a `Producer` special is that,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143533,"byte_end":143600,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/ *before* we convert to an iterator, we can also **split** it at a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143601,"byte_end":143670,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ particular point using the `split_at` method. This will yield up","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143671,"byte_end":143739,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ two producers, one producing the items before that point, and one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143740,"byte_end":143809,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ producing the items after that point (these two producers can then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143810,"byte_end":143880,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ independently be split further, or be converted into iterators).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143881,"byte_end":143949,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ In Rayon, this splitting is used to divide between threads.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":143950,"byte_end":144013,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/ See [the `plumbing` README][r] for further details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144014,"byte_end":144069,"line_start":45,"line_end":45,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144070,"byte_end":144073,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that each producer will always produce a fixed number of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144074,"byte_end":144139,"line_start":47,"line_end":47,"column_start":1,"column_end":66}},{"value":"/ items N. However, this number N is not queryable through the API;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144140,"byte_end":144209,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ the consumer is expected to track it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144210,"byte_end":144251,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144252,"byte_end":144255,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ NB. You might expect `Producer` to extend the `IntoIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144256,"byte_end":144320,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/ trait.  However, [rust-lang/rust#20671][20671] prevents us from","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144321,"byte_end":144388,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/ declaring the DoubleEndedIterator and ExactSizeIterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144389,"byte_end":144448,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ constraints on a required IntoIterator trait, so we inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144449,"byte_end":144511,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/ IntoIterator here until that issue is fixed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144512,"byte_end":144560,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144561,"byte_end":144564,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144565,"byte_end":144647,"line_start":57,"line_end":57,"column_start":1,"column_end":83}},{"value":"/ [20671]: https://github.com/rust-lang/rust/issues/20671","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144648,"byte_end":144707,"line_start":58,"line_end":58,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":405},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144863,"byte_end":144867,"line_start":62,"line_end":62,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::Producer::Item","value":"type Item;","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The type of item that will be produced by this producer once\n it is converted into an iterator.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced by this producer once","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144747,"byte_end":144811,"line_start":60,"line_end":60,"column_start":5,"column_end":69}},{"value":"/ it is converted into an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144816,"byte_end":144853,"line_start":61,"line_end":61,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":406},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144924,"byte_end":144932,"line_start":65,"line_end":65,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::plumbing::Producer::IntoIter","value":"type IntoIter: Iterator<Item = Self::Item> + DoubleEndedIterator + ExactSizeIterator;","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The type of iterator we will become.\n","sig":null,"attributes":[{"value":"/ The type of iterator we will become.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144874,"byte_end":144914,"line_start":64,"line_end":64,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145115,"byte_end":145124,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::plumbing::Producer::into_iter","value":"pub fn into_iter(Self) -> Self::IntoIter","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Convert `self` into an iterator; at this point, no more parallel splits\n are possible.\n","sig":null,"attributes":[{"value":"/ Convert `self` into an iterator; at this point, no more parallel splits","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145010,"byte_end":145085,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ are possible.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145090,"byte_end":145107,"line_start":68,"line_end":68,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145727,"byte_end":145734,"line_start":81,"line_end":81,"column_start":8,"column_end":15},"name":"min_len","qualname":"::iter::plumbing::Producer::min_len","value":"pub fn min_len(&Self) -> usize","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The minimum number of items that we will process\n sequentially. Defaults to 1, which means that we will split\n all the way down to a single item. This can be raised higher\n using the [`with_min_len`] method, which will force us to\n create sequential tasks at a larger granularity. Note that\n Rayon automatically normally attempts to adjust the size of\n parallel splits to reduce overhead, so this should not be\n needed.","sig":null,"attributes":[{"value":"/ The minimum number of items that we will process","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145155,"byte_end":145207,"line_start":71,"line_end":71,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to 1, which means that we will split","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145212,"byte_end":145275,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ all the way down to a single item. This can be raised higher","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145280,"byte_end":145344,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ using the [`with_min_len`] method, which will force us to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145349,"byte_end":145410,"line_start":74,"line_end":74,"column_start":5,"column_end":66}},{"value":"/ create sequential tasks at a larger granularity. Note that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145415,"byte_end":145477,"line_start":75,"line_end":75,"column_start":5,"column_end":67}},{"value":"/ Rayon automatically normally attempts to adjust the size of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145482,"byte_end":145545,"line_start":76,"line_end":76,"column_start":5,"column_end":68}},{"value":"/ parallel splits to reduce overhead, so this should not be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145550,"byte_end":145611,"line_start":77,"line_end":77,"column_start":5,"column_end":66}},{"value":"/ needed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145616,"byte_end":145627,"line_start":78,"line_end":78,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145632,"byte_end":145635,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [`with_min_len`]: ../trait.IndexedParallelIterator.html#method.with_min_len","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145640,"byte_end":145719,"line_start":80,"line_end":80,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146299,"byte_end":146306,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"max_len","qualname":"::iter::plumbing::Producer::max_len","value":"pub fn max_len(&Self) -> usize","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The maximum number of items that we will process\n sequentially. Defaults to MAX, which means that we can choose\n not to split at all. This can be lowered using the\n [`with_max_len`] method, which will force us to create more\n parallel tasks. Note that Rayon automatically normally\n attempts to adjust the size of parallel splits to reduce\n overhead, so this should not be needed.","sig":null,"attributes":[{"value":"/ The maximum number of items that we will process","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145774,"byte_end":145826,"line_start":85,"line_end":85,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to MAX, which means that we can choose","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145831,"byte_end":145896,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/ not to split at all. This can be lowered using the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145901,"byte_end":145955,"line_start":87,"line_end":87,"column_start":5,"column_end":59}},{"value":"/ [`with_max_len`] method, which will force us to create more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":145960,"byte_end":146023,"line_start":88,"line_end":88,"column_start":5,"column_end":68}},{"value":"/ parallel tasks. Note that Rayon automatically normally","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146028,"byte_end":146086,"line_start":89,"line_end":89,"column_start":5,"column_end":63}},{"value":"/ attempts to adjust the size of parallel splits to reduce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146091,"byte_end":146151,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/ overhead, so this should not be needed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146156,"byte_end":146199,"line_start":91,"line_end":91,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146204,"byte_end":146207,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ [`with_max_len`]: ../trait.IndexedParallelIterator.html#method.with_max_len","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146212,"byte_end":146291,"line_start":93,"line_end":93,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146494,"byte_end":146502,"line_start":100,"line_end":100,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Producer::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Split into two producers; one produces items `0..index`, the\n other `index..N`. Index must be less than or equal to `N`.\n","sig":null,"attributes":[{"value":"/ Split into two producers; one produces items `0..index`, the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146355,"byte_end":146419,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ other `index..N`. Index must be less than or equal to `N`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146424,"byte_end":146486,"line_start":99,"line_end":99,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146769,"byte_end":146778,"line_start":106,"line_end":106,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::Producer::fold_with","value":"pub fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146545,"byte_end":146608,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146613,"byte_end":146683,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146688,"byte_end":146691,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The provided implementation is sufficient for most iterables.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146696,"byte_end":146761,"line_start":105,"line_end":105,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":413},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147726,"byte_end":147734,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"name":"Consumer","qualname":"::iter::plumbing::Consumer","value":"Consumer<Item>: Send + Sized","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420}],"decl_id":null,"docs":" A consumer is effectively a [generalized \"fold\" operation][fold],\n and in fact each consumer will eventually be converted into a\n [`Folder`]. What makes a consumer special is that, like a\n [`Producer`], it can be **split** into multiple consumers using\n the `split_at` method. When a consumer is split, it produces two\n consumers, as well as a **reducer**. The two consumers can be fed\n items independently, and when they are done the reducer is used to\n combine their two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ A consumer is effectively a [generalized \"fold\" operation][fold],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146906,"byte_end":146975,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/ and in fact each consumer will eventually be converted into a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":146976,"byte_end":147041,"line_start":115,"line_end":115,"column_start":1,"column_end":66}},{"value":"/ [`Folder`]. What makes a consumer special is that, like a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147042,"byte_end":147103,"line_start":116,"line_end":116,"column_start":1,"column_end":62}},{"value":"/ [`Producer`], it can be **split** into multiple consumers using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147104,"byte_end":147171,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/ the `split_at` method. When a consumer is split, it produces two","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147172,"byte_end":147240,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/ consumers, as well as a **reducer**. The two consumers can be fed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147241,"byte_end":147310,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ items independently, and when they are done the reducer is used to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147311,"byte_end":147381,"line_start":120,"line_end":120,"column_start":1,"column_end":71}},{"value":"/ combine their two results into one. See [the `plumbing`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147382,"byte_end":147441,"line_start":121,"line_end":121,"column_start":1,"column_end":60}},{"value":"/ README][r] for further details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147442,"byte_end":147477,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147478,"byte_end":147481,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147482,"byte_end":147564,"line_start":124,"line_end":124,"column_start":1,"column_end":83}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147565,"byte_end":147643,"line_start":125,"line_end":125,"column_start":1,"column_end":79}},{"value":"/ [`Folder`]: trait.Folder.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147644,"byte_end":147677,"line_start":126,"line_end":126,"column_start":1,"column_end":34}},{"value":"/ [`Producer`]: trait.Producer.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147678,"byte_end":147715,"line_start":127,"line_end":127,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":415},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147835,"byte_end":147841,"line_start":130,"line_end":130,"column_start":10,"column_end":16},"name":"Folder","qualname":"::iter::plumbing::Consumer::Folder","value":"type Folder: Folder<Item, Result = Self::Result>;","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" The type of folder that this consumer can be converted into.\n","sig":null,"attributes":[{"value":"/ The type of folder that this consumer can be converted into.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147761,"byte_end":147825,"line_start":129,"line_end":129,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":416},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147962,"byte_end":147969,"line_start":133,"line_end":133,"column_start":10,"column_end":17},"name":"Reducer","qualname":"::iter::plumbing::Consumer::Reducer","value":"type Reducer: Reducer<Self::Result>;","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" The type of reducer that is produced if this consumer is split.\n","sig":null,"attributes":[{"value":"/ The type of reducer that is produced if this consumer is split.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147885,"byte_end":147952,"line_start":132,"line_end":132,"column_start":5,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":417},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148075,"byte_end":148081,"line_start":136,"line_end":136,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Consumer::Result","value":"type Result: Send;","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" The type of result that this consumer will ultimately produce.\n","sig":null,"attributes":[{"value":"/ The type of result that this consumer will ultimately produce.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147999,"byte_end":148065,"line_start":135,"line_end":135,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148317,"byte_end":148325,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Consumer::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self, Self::Reducer)","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" Divide the consumer into two consumers, one processing items\n `0..index` and one processing items from `index..`. Also\n produces a reducer that can be used to reduce the results at\n the end.\n","sig":null,"attributes":[{"value":"/ Divide the consumer into two consumers, one processing items","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148094,"byte_end":148158,"line_start":138,"line_end":138,"column_start":5,"column_end":69}},{"value":"/ `0..index` and one processing items from `index..`. Also","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148163,"byte_end":148223,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/ produces a reducer that can be used to reduce the results at","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148228,"byte_end":148292,"line_start":140,"line_end":140,"column_start":5,"column_end":69}},{"value":"/ the end.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148297,"byte_end":148309,"line_start":141,"line_end":141,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148511,"byte_end":148522,"line_start":146,"line_end":146,"column_start":8,"column_end":19},"name":"into_folder","qualname":"::iter::plumbing::Consumer::into_folder","value":"pub fn into_folder(Self) -> Self::Folder","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" Convert the consumer into a folder that can consume items\n sequentially, eventually producing a final result.\n","sig":null,"attributes":[{"value":"/ Convert the consumer into a folder that can consume items","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148383,"byte_end":148444,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/ sequentially, eventually producing a final result.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148449,"byte_end":148503,"line_start":145,"line_end":145,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148681,"byte_end":148685,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Consumer::full","value":"pub fn full(&Self) -> bool","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" Hint whether this `Consumer` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Consumer` would like to stop processing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148551,"byte_end":148613,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148618,"byte_end":148673,"line_start":149,"line_end":149,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":421},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149048,"byte_end":149054,"line_start":159,"line_end":159,"column_start":11,"column_end":17},"name":"Folder","qualname":"::iter::plumbing::Folder","value":"Folder<Item>: Sized","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":428}],"decl_id":null,"docs":" The `Folder` trait encapsulates [the standard fold\n operation][fold].  It can be fed many items using the `consume`\n method. At the end, once all items have been consumed, it can then\n be converted (using `complete`) into a final value.","sig":null,"attributes":[{"value":"/ The `Folder` trait encapsulates [the standard fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148705,"byte_end":148759,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/ operation][fold].  It can be fed many items using the `consume`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148760,"byte_end":148827,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ method. At the end, once all items have been consumed, it can then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148828,"byte_end":148898,"line_start":155,"line_end":155,"column_start":1,"column_end":71}},{"value":"/ be converted (using `complete`) into a final value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148899,"byte_end":148954,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148955,"byte_end":148958,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":148959,"byte_end":149037,"line_start":158,"line_end":158,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":423},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149154,"byte_end":149160,"line_start":161,"line_end":161,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Folder::Result","value":"type Result;","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" The type of result that will ultimately be produced by the folder.\n","sig":null,"attributes":[{"value":"/ The type of result that will ultimately be produced by the folder.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149074,"byte_end":149144,"line_start":160,"line_end":160,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149229,"byte_end":149236,"line_start":164,"line_end":164,"column_start":8,"column_end":15},"name":"consume","qualname":"::iter::plumbing::Folder::consume","value":"pub fn consume(Self, Item) -> Self","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Consume next item and return new sequential state.\n","sig":null,"attributes":[{"value":"/ Consume next item and return new sequential state.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149167,"byte_end":149221,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149665,"byte_end":149677,"line_start":174,"line_end":174,"column_start":8,"column_end":20},"name":"consume_iter","qualname":"::iter::plumbing::Folder::consume_iter","value":"pub fn consume_iter<I>(Self, I) -> Self where I: IntoIterator<Item = Item>","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Consume items from the iterator until full, and return new sequential state.","sig":null,"attributes":[{"value":"/ Consume items from the iterator until full, and return new sequential state.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149269,"byte_end":149349,"line_start":166,"line_end":166,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149354,"byte_end":149357,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This method is **optional**. The default simply iterates over","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149362,"byte_end":149427,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ `iter`, invoking `consume` and checking after each iteration","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149432,"byte_end":149496,"line_start":169,"line_end":169,"column_start":5,"column_end":69}},{"value":"/ whether `full` returns false.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149501,"byte_end":149534,"line_start":170,"line_end":170,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149539,"byte_end":149542,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The main reason to override it is if you can provide a more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149547,"byte_end":149610,"line_start":172,"line_end":172,"column_start":5,"column_end":68}},{"value":"/ specialized, efficient implementation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149615,"byte_end":149657,"line_start":173,"line_end":173,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149985,"byte_end":149993,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"complete","qualname":"::iter::plumbing::Folder::complete","value":"pub fn complete(Self) -> Self::Result","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Finish consuming items, produce final result.\n","sig":null,"attributes":[{"value":"/ Finish consuming items, produce final result.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149928,"byte_end":149977,"line_start":187,"line_end":187,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150150,"byte_end":150154,"line_start":192,"line_end":192,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Folder::full","value":"pub fn full(&Self) -> bool","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Hint whether this `Folder` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Folder` would like to stop processing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150022,"byte_end":150082,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150087,"byte_end":150142,"line_start":191,"line_end":191,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":429},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150584,"byte_end":150591,"line_start":202,"line_end":202,"column_start":11,"column_end":18},"name":"Reducer","qualname":"::iter::plumbing::Reducer","value":"Reducer<Result>","parent":null,"children":[{"krate":0,"index":431}],"decl_id":null,"docs":" The reducer is the final step of a `Consumer` -- after a consumer\n has been split into two parts, and each of those parts has been\n fully processed, we are left with two results. The reducer is then\n used to combine those two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ The reducer is the final step of a `Consumer` -- after a consumer","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150174,"byte_end":150243,"line_start":195,"line_end":195,"column_start":1,"column_end":70}},{"value":"/ has been split into two parts, and each of those parts has been","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150244,"byte_end":150311,"line_start":196,"line_end":196,"column_start":1,"column_end":68}},{"value":"/ fully processed, we are left with two results. The reducer is then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150312,"byte_end":150382,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ used to combine those two results into one. See [the `plumbing`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150383,"byte_end":150450,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ README][r] for further details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150451,"byte_end":150486,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150487,"byte_end":150490,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150491,"byte_end":150573,"line_start":201,"line_end":201,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150692,"byte_end":150698,"line_start":205,"line_end":205,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::plumbing::Reducer::reduce","value":"pub fn reduce(Self, Result, Result) -> Result","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Reduce two final results into one; this is executed after a\n split.\n","sig":null,"attributes":[{"value":"/ Reduce two final results into one; this is executed after a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150606,"byte_end":150669,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/ split.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150674,"byte_end":150684,"line_start":204,"line_end":204,"column_start":5,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":432},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151060,"byte_end":151077,"line_start":213,"line_end":213,"column_start":11,"column_end":28},"name":"UnindexedConsumer","qualname":"::iter::plumbing::UnindexedConsumer","value":"UnindexedConsumer<I>: Consumer<I>","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435}],"decl_id":null,"docs":" A stateless consumer can be freely copied. These consumers can be\n used like regular consumers, but they also support a\n `split_off_left` method that does not take an index to split, but\n simply splits at some arbitrary point (`for_each`, for example,\n produces an unindexed consumer).\n","sig":null,"attributes":[{"value":"/ A stateless consumer can be freely copied. These consumers can be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150748,"byte_end":150817,"line_start":208,"line_end":208,"column_start":1,"column_end":70}},{"value":"/ used like regular consumers, but they also support a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150818,"byte_end":150874,"line_start":209,"line_end":209,"column_start":1,"column_end":57}},{"value":"/ `split_off_left` method that does not take an index to split, but","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150875,"byte_end":150944,"line_start":210,"line_end":210,"column_start":1,"column_end":70}},{"value":"/ simply splits at some arbitrary point (`for_each`, for example,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":150945,"byte_end":151012,"line_start":211,"line_end":211,"column_start":1,"column_end":68}},{"value":"/ produces an unindexed consumer).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151013,"byte_end":151049,"line_start":212,"line_end":212,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151553,"byte_end":151567,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"split_off_left","qualname":"::iter::plumbing::UnindexedConsumer::split_off_left","value":"pub fn split_off_left(&Self) -> Self","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Splits off a \"left\" consumer and returns it. The `self`\n consumer should then be used to consume the \"right\" portion of\n the data. (The ordering matters for methods like find_first --\n values produced by the returned value are given precedence\n over values produced by `self`.) Once the left and right\n halves have been fully consumed, you should reduce the results\n with the result of `to_reducer`.\n","sig":null,"attributes":[{"value":"/ Splits off a \"left\" consumer and returns it. The `self`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151100,"byte_end":151159,"line_start":214,"line_end":214,"column_start":5,"column_end":64}},{"value":"/ consumer should then be used to consume the \"right\" portion of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151164,"byte_end":151230,"line_start":215,"line_end":215,"column_start":5,"column_end":71}},{"value":"/ the data. (The ordering matters for methods like find_first --","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151235,"byte_end":151301,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ values produced by the returned value are given precedence","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151306,"byte_end":151368,"line_start":217,"line_end":217,"column_start":5,"column_end":67}},{"value":"/ over values produced by `self`.) Once the left and right","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151373,"byte_end":151433,"line_start":218,"line_end":218,"column_start":5,"column_end":65}},{"value":"/ halves have been fully consumed, you should reduce the results","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151438,"byte_end":151504,"line_start":219,"line_end":219,"column_start":5,"column_end":71}},{"value":"/ with the result of `to_reducer`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151509,"byte_end":151545,"line_start":220,"line_end":220,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151689,"byte_end":151699,"line_start":225,"line_end":225,"column_start":8,"column_end":18},"name":"to_reducer","qualname":"::iter::plumbing::UnindexedConsumer::to_reducer","value":"pub fn to_reducer(&Self) -> Self::Reducer","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Creates a reducer that can be used to combine the results from\n a split consumer.\n","sig":null,"attributes":[{"value":"/ Creates a reducer that can be used to combine the results from","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151589,"byte_end":151655,"line_start":223,"line_end":223,"column_start":5,"column_end":71}},{"value":"/ a split consumer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151660,"byte_end":151681,"line_start":224,"line_end":224,"column_start":5,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":436},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152176,"byte_end":152193,"line_start":236,"line_end":236,"column_start":11,"column_end":28},"name":"UnindexedProducer","qualname":"::iter::plumbing::UnindexedProducer","value":"UnindexedProducer: Send + Sized","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"decl_id":null,"docs":" A variant on `Producer` which does not know its exact length or\n cannot represent it in a `usize`. These producers act like\n ordinary producers except that they cannot be told to split at a\n particular point. Instead, you just ask them to split 'somewhere'.","sig":null,"attributes":[{"value":"/ A variant on `Producer` which does not know its exact length or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151728,"byte_end":151795,"line_start":228,"line_end":228,"column_start":1,"column_end":68}},{"value":"/ cannot represent it in a `usize`. These producers act like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151796,"byte_end":151858,"line_start":229,"line_end":229,"column_start":1,"column_end":63}},{"value":"/ ordinary producers except that they cannot be told to split at a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151859,"byte_end":151927,"line_start":230,"line_end":230,"column_start":1,"column_end":69}},{"value":"/ particular point. Instead, you just ask them to split 'somewhere'.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151928,"byte_end":151998,"line_start":231,"line_end":231,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151999,"byte_end":152002,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ (In principle, `Producer` could extend this trait; however, it","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152003,"byte_end":152069,"line_start":233,"line_end":233,"column_start":1,"column_end":67}},{"value":"/ does not because to do so would require producers to carry their","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152070,"byte_end":152138,"line_start":234,"line_end":234,"column_start":1,"column_end":69}},{"value":"/ own length with them.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152139,"byte_end":152165,"line_start":235,"line_end":235,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":437},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152271,"byte_end":152275,"line_start":238,"line_end":238,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::UnindexedProducer::Item","value":"type Item;","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" The type of item returned by this producer.\n","sig":null,"attributes":[{"value":"/ The type of item returned by this producer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152214,"byte_end":152261,"line_start":237,"line_end":237,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152364,"byte_end":152369,"line_start":241,"line_end":241,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::plumbing::UnindexedProducer::split","value":"pub fn split(Self) -> (Self, Option<Self>)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Split midway into a new producer if possible, otherwise return `None`.\n","sig":null,"attributes":[{"value":"/ Split midway into a new producer if possible, otherwise return `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152282,"byte_end":152356,"line_start":240,"line_end":240,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152552,"byte_end":152561,"line_start":245,"line_end":245,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::UnindexedProducer::fold_with","value":"pub fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).\n","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152406,"byte_end":152469,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152474,"byte_end":152544,"line_start":244,"line_end":244,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":447},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156381,"byte_end":156387,"line_start":351,"line_end":351,"column_start":8,"column_end":14},"name":"bridge","qualname":"::iter::plumbing::bridge","value":"pub fn bridge<I, C>(I, C) -> C::Result where I: IndexedParallelIterator,\nC: Consumer<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a parallel iterator to a\n consumer. It will convert the `par_iter` into a producer P and\n then pull items from P and feed them to `consumer`, splitting and\n creating parallel threads as needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a parallel iterator to a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":155802,"byte_end":155872,"line_start":340,"line_end":340,"column_start":1,"column_end":71}},{"value":"/ consumer. It will convert the `par_iter` into a producer P and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":155873,"byte_end":155939,"line_start":341,"line_end":341,"column_start":1,"column_end":67}},{"value":"/ then pull items from P and feed them to `consumer`, splitting and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":155940,"byte_end":156009,"line_start":342,"line_end":342,"column_start":1,"column_end":70}},{"value":"/ creating parallel threads as needed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156010,"byte_end":156050,"line_start":343,"line_end":343,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156051,"byte_end":156054,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156055,"byte_end":156117,"line_start":345,"line_end":345,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156118,"byte_end":156174,"line_start":346,"line_end":346,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156175,"byte_end":156220,"line_start":347,"line_end":347,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156221,"byte_end":156224,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156225,"byte_end":156305,"line_start":349,"line_end":349,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156306,"byte_end":156373,"line_start":350,"line_end":350,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157633,"byte_end":157657,"line_start":391,"line_end":391,"column_start":8,"column_end":32},"name":"bridge_producer_consumer","qualname":"::iter::plumbing::bridge_producer_consumer","value":"pub fn bridge_producer_consumer<P, C>(usize, P, C) -> C::Result where\nP: Producer, C: Consumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a producer and a\n consumer. You may prefer to call [`bridge`], which wraps this\n function. This function will draw items from `producer` and feed\n them to `consumer`, splitting and creating parallel tasks when\n needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a producer and a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156995,"byte_end":157057,"line_start":378,"line_end":378,"column_start":1,"column_end":63}},{"value":"/ consumer. You may prefer to call [`bridge`], which wraps this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157058,"byte_end":157123,"line_start":379,"line_end":379,"column_start":1,"column_end":66}},{"value":"/ function. This function will draw items from `producer` and feed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157124,"byte_end":157192,"line_start":380,"line_end":380,"column_start":1,"column_end":69}},{"value":"/ them to `consumer`, splitting and creating parallel tasks when","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157193,"byte_end":157259,"line_start":381,"line_end":381,"column_start":1,"column_end":67}},{"value":"/ needed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157260,"byte_end":157271,"line_start":382,"line_end":382,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157272,"byte_end":157275,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157276,"byte_end":157338,"line_start":384,"line_end":384,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157339,"byte_end":157395,"line_start":385,"line_end":385,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157396,"byte_end":157441,"line_start":386,"line_end":386,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157442,"byte_end":157445,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ [`bridge`]: fn.bridge.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157446,"byte_end":157476,"line_start":388,"line_end":388,"column_start":1,"column_end":31}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157477,"byte_end":157557,"line_start":389,"line_end":389,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":157558,"byte_end":157625,"line_start":390,"line_end":390,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":468},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":159433,"byte_end":159449,"line_start":446,"line_end":446,"column_start":8,"column_end":24},"name":"bridge_unindexed","qualname":"::iter::plumbing::bridge_unindexed","value":"pub fn bridge_unindexed<P, C>(P, C) -> C::Result where P: UnindexedProducer,\nC: UnindexedConsumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","sig":null,"attributes":[{"value":"/ A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":159264,"byte_end":159354,"line_start":443,"line_end":443,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":159355,"byte_end":159358,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ [`bridge_producer_consumer`]: fn.bridge_producer_consumer.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":159359,"byte_end":159425,"line_start":445,"line_end":445,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":7045},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161306,"byte_end":161311,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":7048},{"krate":0,"index":7049}],"decl_id":null,"docs":" `Chain` is an iterator that joins `b` after `a` in one continuous iterator.\n This struct is created by the [`chain()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Chain` is an iterator that joins `b` after `a` in one continuous iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":160924,"byte_end":161003,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`chain()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161004,"byte_end":161080,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161081,"byte_end":161084,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`chain()`]: trait.ParallelIterator.html#method.chain","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161085,"byte_end":161142,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161143,"byte_end":161196,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161197,"byte_end":161270,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7058},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168239,"byte_end":168245,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::iter::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":7060},{"krate":0,"index":7061}],"decl_id":null,"docs":" `Chunks` is an iterator that groups elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Chunks` is an iterator that groups elements of an underlying iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":167826,"byte_end":167901,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":167902,"byte_end":167905,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`chunks()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":167906,"byte_end":167990,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":167991,"byte_end":167994,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`chunks()`]: trait.IndexedParallelIterator.html#method.chunks","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":167995,"byte_end":168061,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168062,"byte_end":168129,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168130,"byte_end":168203,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7068},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173229,"byte_end":173235,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::cloned::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":7070}],"decl_id":null,"docs":" `Cloned` is an iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Cloned` is an iterator that clones the elements of an underlying iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":172840,"byte_end":172919,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":172920,"byte_end":172923,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`cloned()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":172924,"byte_end":173001,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173002,"byte_end":173005,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`cloned()`]: trait.ParallelIterator.html#method.cloned","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173006,"byte_end":173065,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173066,"byte_end":173119,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173120,"byte_end":173193,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7077},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":202100,"byte_end":202106,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Copied","qualname":"::iter::copied::Copied","value":"Copied {  }","parent":null,"children":[{"krate":0,"index":7079}],"decl_id":null,"docs":" `Copied` is an iterator that copies the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Copied` is an iterator that copies the elements of an underlying iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":201711,"byte_end":201790,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":201791,"byte_end":201794,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`copied()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":201795,"byte_end":201872,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":201873,"byte_end":201876,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`copied()`]: trait.ParallelIterator.html#method.copied","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":201877,"byte_end":201936,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":201937,"byte_end":201990,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":201991,"byte_end":202064,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":930},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207108,"byte_end":207113,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::empty::empty","value":"pub fn empty<T: Send>() -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces nothing.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces nothing.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206690,"byte_end":206744,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206745,"byte_end":206748,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be used for code that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206749,"byte_end":206826,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ deals with generic parallel iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206827,"byte_end":206869,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206870,"byte_end":206873,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206874,"byte_end":206888,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206889,"byte_end":206892,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206893,"byte_end":206900,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206901,"byte_end":206927,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::empty;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206928,"byte_end":206955,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206956,"byte_end":206959,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206960,"byte_end":206998,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/     .chain(empty())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":206999,"byte_end":207022,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207023,"byte_end":207052,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207053,"byte_end":207056,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.count(), 10_000);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207057,"byte_end":207092,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207093,"byte_end":207100,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":932},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207266,"byte_end":207271,"line_start":31,"line_end":31,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":934}],"decl_id":null,"docs":" Iterator adaptor for [the `empty()` function](fn.empty.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `empty()` function](fn.empty.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207189,"byte_end":207254,"line_start":30,"line_end":30,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":7086},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209279,"byte_end":209288,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::enumerate::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":7088}],"decl_id":null,"docs":" `Enumerate` is an iterator that returns the current count along with the element.\n This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Enumerate` is an iterator that returns the current count along with the element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":208851,"byte_end":208936,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":208937,"byte_end":209024,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209025,"byte_end":209028,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`enumerate()`]: trait.IndexedParallelIterator.html#method.enumerate","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209029,"byte_end":209101,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209102,"byte_end":209169,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209170,"byte_end":209243,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7095},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227342,"byte_end":227348,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":7098},{"krate":0,"index":7099}],"decl_id":null,"docs":" `Filter` takes a predicate `filter_op` and filters out elements that match.\n This struct is created by the [`filter()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Filter` takes a predicate `filter_op` and filters out elements that match.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":226964,"byte_end":227043,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`filter()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227044,"byte_end":227121,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227122,"byte_end":227125,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter()`]: trait.ParallelIterator.html#method.filter","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227126,"byte_end":227185,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227186,"byte_end":227239,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227240,"byte_end":227313,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7104},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230881,"byte_end":230890,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":7107},{"krate":0,"index":7108}],"decl_id":null,"docs":" `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.\n This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230479,"byte_end":230569,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230570,"byte_end":230652,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230653,"byte_end":230656,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter_map()`]: trait.ParallelIterator.html#method.filter_map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230657,"byte_end":230724,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230725,"byte_end":230778,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230779,"byte_end":230852,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7121},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":244913,"byte_end":244920,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::flat_map::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":7124},{"krate":0,"index":7125}],"decl_id":null,"docs":" `FlatMap` maps each element to a parallel iterator, then flattens these iterators together.\n This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FlatMap` maps each element to a parallel iterator, then flattens these iterators together.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":244513,"byte_end":244608,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":244609,"byte_end":244688,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":244689,"byte_end":244692,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`flat_map()`]: trait.ParallelIterator.html#method.flat_map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":244693,"byte_end":244756,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":244757,"byte_end":244810,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":244811,"byte_end":244884,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7130},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248883,"byte_end":248894,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"FlatMapIter","qualname":"::iter::flat_map_iter::FlatMapIter","value":"FlatMapIter {  }","parent":null,"children":[{"krate":0,"index":7133},{"krate":0,"index":7134}],"decl_id":null,"docs":" `FlatMapIter` maps each element to a serial iterator, then flattens these iterators together.\n This struct is created by the [`flat_map_iter()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FlatMapIter` maps each element to a serial iterator, then flattens these iterators together.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248466,"byte_end":248563,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ This struct is created by the [`flat_map_iter()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248564,"byte_end":248648,"line_start":7,"line_end":7,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248649,"byte_end":248652,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`flat_map_iter()`]: trait.ParallelIterator.html#method.flat_map_iter","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248653,"byte_end":248726,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248727,"byte_end":248780,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248781,"byte_end":248854,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7139},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252596,"byte_end":252603,"line_start":11,"line_end":11,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::iter::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":7141}],"decl_id":null,"docs":" `Flatten` turns each element to a parallel iterator, then flattens these iterators\n together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `Flatten` turns each element to a parallel iterator, then flattens these iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252190,"byte_end":252276,"line_start":4,"line_end":4,"column_start":1,"column_end":87}},{"value":"/ together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252277,"byte_end":252366,"line_start":5,"line_end":5,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252367,"byte_end":252370,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`flatten()`]: trait.ParallelIterator.html#method.flatten","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252371,"byte_end":252432,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252433,"byte_end":252486,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252487,"byte_end":252560,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7148},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":255956,"byte_end":255967,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"FlattenIter","qualname":"::iter::flatten_iter::FlattenIter","value":"FlattenIter {  }","parent":null,"children":[{"krate":0,"index":7150}],"decl_id":null,"docs":" `FlattenIter` turns each element to a serial iterator, then flattens these iterators\n together. This struct is created by the [`flatten_iter()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `FlattenIter` turns each element to a serial iterator, then flattens these iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":255533,"byte_end":255621,"line_start":4,"line_end":4,"column_start":1,"column_end":89}},{"value":"/ together. This struct is created by the [`flatten_iter()`] method on [`ParallelIterator`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":255622,"byte_end":255716,"line_start":5,"line_end":5,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":255717,"byte_end":255720,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`flatten_iter()`]: trait.ParallelIterator.html#method.flatten_iter","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":255721,"byte_end":255792,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":255793,"byte_end":255846,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":255847,"byte_end":255920,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7157},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259394,"byte_end":259398,"line_start":29,"line_end":29,"column_start":12,"column_end":16},"name":"Fold","qualname":"::iter::fold::Fold","value":"Fold {  }","parent":null,"children":[{"krate":0,"index":7161},{"krate":0,"index":7162},{"krate":0,"index":7163}],"decl_id":null,"docs":" `Fold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Fold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259009,"byte_end":259101,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ This struct is created by the [`fold()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259102,"byte_end":259177,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259178,"byte_end":259181,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`fold()`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259182,"byte_end":259237,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259238,"byte_end":259291,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259292,"byte_end":259365,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7169},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263513,"byte_end":263521,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"FoldWith","qualname":"::iter::fold::FoldWith","value":"FoldWith {  }","parent":null,"children":[{"krate":0,"index":7173},{"krate":0,"index":7174},{"krate":0,"index":7175}],"decl_id":null,"docs":" `FoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263109,"byte_end":263205,"line_start":197,"line_end":197,"column_start":1,"column_end":97}},{"value":"/ This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263206,"byte_end":263286,"line_start":198,"line_end":198,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263287,"byte_end":263290,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ [`fold_with()`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263291,"byte_end":263356,"line_start":200,"line_end":200,"column_start":1,"column_end":66}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263357,"byte_end":263410,"line_start":201,"line_end":201,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263411,"byte_end":263484,"line_start":202,"line_end":202,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7181},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273762,"byte_end":273769,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::inspect::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":7184},{"krate":0,"index":7185}],"decl_id":null,"docs":" `Inspect` is an iterator that calls a function with a reference to each\n element before yielding it.","sig":null,"attributes":[{"value":"/ `Inspect` is an iterator that calls a function with a reference to each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273349,"byte_end":273424,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ element before yielding it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273425,"byte_end":273456,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273457,"byte_end":273460,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`inspect()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273461,"byte_end":273539,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273540,"byte_end":273543,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`inspect()`]: trait.ParallelIterator.html#method.inspect","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273544,"byte_end":273605,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273606,"byte_end":273659,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273660,"byte_end":273733,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7190},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":279904,"byte_end":279914,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::iter::interleave::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":7193},{"krate":0,"index":7194}],"decl_id":null,"docs":" `Interleave` is an iterator that interleaves elements of iterators\n `i` and `j` in one continuous iterator. This struct is created by\n the [`interleave()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Interleave` is an iterator that interleaves elements of iterators","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":279444,"byte_end":279514,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ `i` and `j` in one continuous iterator. This struct is created by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":279515,"byte_end":279584,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ the [`interleave()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":279585,"byte_end":279647,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":279648,"byte_end":279651,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`interleave()`]: trait.IndexedParallelIterator.html#method.interleave","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":279652,"byte_end":279726,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":279727,"byte_end":279794,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":279795,"byte_end":279868,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7203},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288915,"byte_end":288933,"line_start":15,"line_end":15,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::iter::interleave_shortest::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":7206}],"decl_id":null,"docs":" `InterleaveShortest` is an iterator that works similarly to\n `Interleave`, but this version stops returning elements once one\n of the iterators run out.","sig":null,"attributes":[{"value":"/ `InterleaveShortest` is an iterator that works similarly to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288371,"byte_end":288434,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/ `Interleave`, but this version stops returning elements once one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288435,"byte_end":288503,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ of the iterators run out.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288504,"byte_end":288533,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288534,"byte_end":288537,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`interleave_shortest()`] method on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288538,"byte_end":288607,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ [`IndexedParallelIterator`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288608,"byte_end":288640,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288641,"byte_end":288644,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`interleave_shortest()`]: trait.IndexedParallelIterator.html#method.interleave_shortest","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288645,"byte_end":288737,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288738,"byte_end":288805,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":288806,"byte_end":288879,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7215},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":291152,"byte_end":291163,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::iter::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":7217},{"krate":0,"index":7218}],"decl_id":null,"docs":" `Intersperse` is an iterator that inserts a particular item between each\n item of the adapted iterator.  This struct is created by the\n [`intersperse()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Intersperse` is an iterator that inserts a particular item between each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":290720,"byte_end":290796,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ item of the adapted iterator.  This struct is created by the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":290797,"byte_end":290861,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`intersperse()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":290862,"byte_end":290914,"line_start":8,"line_end":8,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":290915,"byte_end":290918,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`intersperse()`]: trait.ParallelIterator.html#method.intersperse","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":290919,"byte_end":290988,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":290989,"byte_end":291042,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":291043,"byte_end":291116,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7225},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301384,"byte_end":301390,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"MinLen","qualname":"::iter::len::MinLen","value":"MinLen {  }","parent":null,"children":[{"krate":0,"index":7227},{"krate":0,"index":7228}],"decl_id":null,"docs":" `MinLen` is an iterator that imposes a minimum length on iterator splits.\n This struct is created by the [`with_min_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MinLen` is an iterator that imposes a minimum length on iterator splits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":300955,"byte_end":301032,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`with_min_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301033,"byte_end":301123,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301124,"byte_end":301127,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`with_min_len()`]: trait.IndexedParallelIterator.html#method.with_min_len","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301128,"byte_end":301206,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301207,"byte_end":301274,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301275,"byte_end":301348,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7235},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304484,"byte_end":304490,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"MaxLen","qualname":"::iter::len::MaxLen","value":"MaxLen {  }","parent":null,"children":[{"krate":0,"index":7237},{"krate":0,"index":7238}],"decl_id":null,"docs":" `MaxLen` is an iterator that imposes a maximum length on iterator splits.\n This struct is created by the [`with_max_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MaxLen` is an iterator that imposes a maximum length on iterator splits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304055,"byte_end":304132,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`with_max_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304133,"byte_end":304223,"line_start":140,"line_end":140,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304224,"byte_end":304227,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [`with_max_len()`]: trait.IndexedParallelIterator.html#method.with_max_len","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304228,"byte_end":304306,"line_start":142,"line_end":142,"column_start":1,"column_end":79}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304307,"byte_end":304374,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304375,"byte_end":304448,"line_start":144,"line_end":144,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7245},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307613,"byte_end":307616,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":7248},{"krate":0,"index":7249}],"decl_id":null,"docs":" `Map` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Map` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307239,"byte_end":307319,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307320,"byte_end":307323,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307324,"byte_end":307398,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307399,"byte_end":307402,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`map()`]: trait.ParallelIterator.html#method.map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307403,"byte_end":307456,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307457,"byte_end":307510,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307511,"byte_end":307584,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7254},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313591,"byte_end":313598,"line_start":14,"line_end":14,"column_start":12,"column_end":19},"name":"MapWith","qualname":"::iter::map_with::MapWith","value":"MapWith {  }","parent":null,"children":[{"krate":0,"index":7258},{"krate":0,"index":7259},{"krate":0,"index":7260}],"decl_id":null,"docs":" `MapWith` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapWith` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313198,"byte_end":313282,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313283,"byte_end":313286,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313287,"byte_end":313366,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313367,"byte_end":313370,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`map_with()`]: trait.ParallelIterator.html#method.map_with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313371,"byte_end":313434,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313435,"byte_end":313488,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313489,"byte_end":313562,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7266},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321659,"byte_end":321666,"line_start":346,"line_end":346,"column_start":12,"column_end":19},"name":"MapInit","qualname":"::iter::map_with::MapInit","value":"MapInit {  }","parent":null,"children":[{"krate":0,"index":7270},{"krate":0,"index":7271},{"krate":0,"index":7272}],"decl_id":null,"docs":" `MapInit` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapInit` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321266,"byte_end":321350,"line_start":338,"line_end":338,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321351,"byte_end":321354,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_init()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321355,"byte_end":321434,"line_start":340,"line_end":340,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321435,"byte_end":321438,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ [`map_init()`]: trait.ParallelIterator.html#method.map_init","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321439,"byte_end":321502,"line_start":342,"line_end":342,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321503,"byte_end":321556,"line_start":343,"line_end":343,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321557,"byte_end":321630,"line_start":344,"line_end":344,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7278},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329820,"byte_end":329828,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"MultiZip","qualname":"::iter::multizip::MultiZip","value":"MultiZip {  }","parent":null,"children":[{"krate":0,"index":7280}],"decl_id":null,"docs":" `MultiZip` is an iterator that zips up a tuple of parallel iterators to\n produce tuples of their items.","sig":null,"attributes":[{"value":"/ `MultiZip` is an iterator that zips up a tuple of parallel iterators to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327404,"byte_end":327479,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ produce tuples of their items.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327480,"byte_end":327514,"line_start":5,"line_end":5,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327515,"byte_end":327518,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ It is created by calling `into_par_iter()` on a tuple of types that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327519,"byte_end":327590,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ implement `IntoParallelIterator`, or `par_iter()`/`par_iter_mut()` with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327591,"byte_end":327666,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types that are iterable by reference.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327667,"byte_end":327708,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327709,"byte_end":327712,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The implementation currently support tuples up to length 12.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327713,"byte_end":327777,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327778,"byte_end":327781,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327782,"byte_end":327796,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327797,"byte_end":327800,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327801,"byte_end":327808,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327809,"byte_end":327835,"line_start":16,"line_end":16,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327836,"byte_end":327839,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // This will iterate `r` by mutable reference, like `par_iter_mut()`, while","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327840,"byte_end":327919,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ // ranges are all iterated by value like `into_par_iter()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327920,"byte_end":327983,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ // Note that the zipped iterator is only as long as the shortest input.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":327984,"byte_end":328059,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ let mut r = vec![0; 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328060,"byte_end":328087,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/ (&mut r, 1..10, 10..100, 100..1000).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328088,"byte_end":328143,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     .for_each(|(r, x, y, z)| *r = x * y + z);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328144,"byte_end":328193,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328194,"byte_end":328197,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&r, &[1 * 10 + 100, 2 * 11 + 101, 3 * 12 + 102]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328198,"byte_end":328262,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328263,"byte_end":328270,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328271,"byte_end":328274,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ For a group that should all be iterated by reference, you can use a tuple reference.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328275,"byte_end":328363,"line_start":28,"line_end":28,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328364,"byte_end":328367,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328368,"byte_end":328375,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328376,"byte_end":328402,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328403,"byte_end":328406,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let xs: Vec<_> = (1..10).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328407,"byte_end":328446,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/ let ys: Vec<_> = (10..100).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328447,"byte_end":328488,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ let zs: Vec<_> = (100..1000).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328489,"byte_end":328532,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328533,"byte_end":328536,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // Reference each input separately with `IntoParallelIterator`:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328537,"byte_end":328604,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ let r1: Vec<_> = (&xs, &ys, &zs).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328605,"byte_end":328657,"line_start":38,"line_end":38,"column_start":1,"column_end":53}},{"value":"/     .map(|(x, y, z)| x * y + z)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328658,"byte_end":328693,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328694,"byte_end":328713,"line_start":40,"line_end":40,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328714,"byte_end":328717,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Reference them all together with `IntoParallelRefIterator`:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328718,"byte_end":328784,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/ let r2: Vec<_> = (xs, ys, zs).par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328785,"byte_end":328829,"line_start":43,"line_end":43,"column_start":1,"column_end":45}},{"value":"/     .map(|(x, y, z)| x * y + z)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328830,"byte_end":328865,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328866,"byte_end":328885,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328886,"byte_end":328889,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(r1, r2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328890,"byte_end":328913,"line_start":47,"line_end":47,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328914,"byte_end":328921,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328922,"byte_end":328925,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Mutable references to a tuple will work similarly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328926,"byte_end":328980,"line_start":50,"line_end":50,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328981,"byte_end":328984,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328985,"byte_end":328992,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":328993,"byte_end":329019,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329020,"byte_end":329023,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let mut xs: Vec<_> = (1..4).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329024,"byte_end":329066,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ let mut ys: Vec<_> = (-4..-1).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329067,"byte_end":329111,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ let mut zs = vec![0; 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329112,"byte_end":329140,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329141,"byte_end":329144,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Mutably reference each input separately with `IntoParallelIterator`:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329145,"byte_end":329220,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ (&mut xs, &mut ys, &mut zs).into_par_iter().for_each(|(x, y, z)| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329221,"byte_end":329291,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/     *z += *x + *y;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329292,"byte_end":329314,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"/     std::mem::swap(x, y);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329315,"byte_end":329344,"line_start":62,"line_end":62,"column_start":1,"column_end":30}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329345,"byte_end":329352,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329353,"byte_end":329356,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(xs, (vec![-4, -3, -2]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329357,"byte_end":329396,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(ys, (vec![1, 2, 3]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329397,"byte_end":329433,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(zs, (vec![-3, -1, 1]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329434,"byte_end":329472,"line_start":67,"line_end":67,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329473,"byte_end":329476,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // Mutably reference them all together with `IntoParallelRefMutIterator`:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329477,"byte_end":329554,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ let mut tuple = (xs, ys, zs);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329555,"byte_end":329588,"line_start":70,"line_end":70,"column_start":1,"column_end":34}},{"value":"/ tuple.par_iter_mut().for_each(|(x, y, z)| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329589,"byte_end":329636,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/     *z += *x + *y;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329637,"byte_end":329659,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/     std::mem::swap(x, y);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329660,"byte_end":329689,"line_start":73,"line_end":73,"column_start":1,"column_end":30}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329690,"byte_end":329697,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329698,"byte_end":329701,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple, (vec![1, 2, 3], vec![-4, -3, -2], vec![-6, -2, 2]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329702,"byte_end":329776,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/multizip.rs","byte_start":329777,"byte_end":329784,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2950},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338089,"byte_end":338093,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::once::once","value":"pub fn once<T: Send>(T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces an element exactly once.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces an element exactly once.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337447,"byte_end":337517,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337518,"byte_end":337521,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be chained to existing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337522,"byte_end":337600,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ parallel iterators to extend their contents, or otherwise used for any code","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337601,"byte_end":337680,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ that deals with generic parallel iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337681,"byte_end":337728,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337729,"byte_end":337732,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337733,"byte_end":337747,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337748,"byte_end":337751,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337752,"byte_end":337759,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337760,"byte_end":337786,"line_start":13,"line_end":13,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::once;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337787,"byte_end":337813,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337814,"byte_end":337817,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337818,"byte_end":337856,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/     .chain(once(-1))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337857,"byte_end":337881,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337882,"byte_end":337911,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337912,"byte_end":337915,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.clone().count(), 10_001);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337916,"byte_end":337959,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(pi.clone().filter(|&x| x < 0).count(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":337960,"byte_end":338017,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(pi.position_any(|x| x < 0), Some(1234));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338018,"byte_end":338073,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338074,"byte_end":338081,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8157},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338245,"byte_end":338249,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":8159}],"decl_id":null,"docs":" Iterator adaptor for [the `once()` function](fn.once.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `once()` function](fn.once.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338146,"byte_end":338209,"line_start":28,"line_end":28,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":8166},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339609,"byte_end":339618,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"PanicFuse","qualname":"::iter::panic_fuse::PanicFuse","value":"PanicFuse {  }","parent":null,"children":[{"krate":0,"index":8168}],"decl_id":null,"docs":" `PanicFuse` is an adaptor that wraps an iterator with a fuse in case\n of panics, to halt all threads as soon as possible.","sig":null,"attributes":[{"value":"/ `PanicFuse` is an adaptor that wraps an iterator with a fuse in case","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339159,"byte_end":339231,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of panics, to halt all threads as soon as possible.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339232,"byte_end":339287,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339288,"byte_end":339291,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`panic_fuse()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339292,"byte_end":339373,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339374,"byte_end":339377,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`panic_fuse()`]: trait.ParallelIterator.html#method.panic_fuse","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339378,"byte_end":339445,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339446,"byte_end":339499,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339500,"byte_end":339573,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":3145},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348360,"byte_end":348374,"line_start":46,"line_end":46,"column_start":11,"column_end":25},"name":"ParallelBridge","qualname":"::iter::par_bridge::ParallelBridge","value":"ParallelBridge: Sized","parent":null,"children":[{"krate":0,"index":3146}],"decl_id":null,"docs":" Conversion trait to convert an `Iterator` to a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ Conversion trait to convert an `Iterator` to a `ParallelIterator`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347096,"byte_end":347166,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347167,"byte_end":347170,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This creates a \"bridge\" from a sequential iterator to a parallel one, by distributing its items","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347171,"byte_end":347270,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ across the Rayon thread pool. This has the advantage of being able to parallelize just about","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347271,"byte_end":347367,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ anything, but the resulting `ParallelIterator` can be less efficient than if you started with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347368,"byte_end":347465,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ `par_iter` instead. However, it can still be useful for iterators that are difficult to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347466,"byte_end":347557,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"/ parallelize by other means, like channels or file or network I/O.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347558,"byte_end":347627,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347628,"byte_end":347631,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The resulting iterator is not guaranteed to keep the order of the original iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347632,"byte_end":347720,"line_start":19,"line_end":19,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347721,"byte_end":347724,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347725,"byte_end":347739,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347740,"byte_end":347743,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ To use this trait, take an existing `Iterator` and call `par_bridge` on it. After that, you can","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347744,"byte_end":347843,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ use any of the `ParallelIterator` methods:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347844,"byte_end":347890,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347891,"byte_end":347894,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347895,"byte_end":347902,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter::ParallelBridge;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347903,"byte_end":347939,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/ use rayon::prelude::ParallelIterator;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347940,"byte_end":347981,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":347982,"byte_end":348015,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348016,"byte_end":348019,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let rx = {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348020,"byte_end":348034,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/     let (tx, rx) = channel();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348035,"byte_end":348068,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348069,"byte_end":348072,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     tx.send(\"one!\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348073,"byte_end":348097,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"two!\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348098,"byte_end":348122,"line_start":35,"line_end":35,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"three!\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348123,"byte_end":348149,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348150,"byte_end":348153,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/     rx","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348154,"byte_end":348164,"line_start":38,"line_end":38,"column_start":1,"column_end":11}},{"value":"/ };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348165,"byte_end":348171,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348172,"byte_end":348175,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut output: Vec<&'static str> = rx.into_iter().par_bridge().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348176,"byte_end":348254,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ output.sort_unstable();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348255,"byte_end":348282,"line_start":42,"line_end":42,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348283,"byte_end":348286,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&*output, &[\"one!\", \"three!\", \"two!\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348287,"byte_end":348341,"line_start":44,"line_end":44,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348342,"byte_end":348349,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3146},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348456,"byte_end":348466,"line_start":48,"line_end":48,"column_start":8,"column_end":18},"name":"par_bridge","qualname":"::iter::par_bridge::ParallelBridge::par_bridge","value":"pub fn par_bridge(Self) -> IterBridge<Self>","parent":{"krate":0,"index":3145},"children":[],"decl_id":null,"docs":" Creates a bridge from this type to a `ParallelIterator`.\n","sig":null,"attributes":[{"value":"/ Creates a bridge from this type to a `ParallelIterator`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348388,"byte_end":348448,"line_start":47,"line_end":47,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":8182},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348965,"byte_end":348975,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"IterBridge","qualname":"::iter::par_bridge::IterBridge","value":"IterBridge {  }","parent":null,"children":[{"krate":0,"index":8184}],"decl_id":null,"docs":" `IterBridge` is a parallel iterator that wraps a sequential iterator.","sig":null,"attributes":[{"value":"/ `IterBridge` is a parallel iterator that wraps a sequential iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348659,"byte_end":348732,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348733,"byte_end":348736,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This type is created when using the `par_bridge` method on `ParallelBridge`. See the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348737,"byte_end":348825,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ [`ParallelBridge`] documentation for details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348826,"byte_end":348875,"line_start":63,"line_end":63,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348876,"byte_end":348879,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`ParallelBridge`]: trait.ParallelBridge.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348880,"byte_end":348929,"line_start":65,"line_end":65,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":8191},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":355086,"byte_end":355095,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"Positions","qualname":"::iter::positions::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":8194},{"krate":0,"index":8195}],"decl_id":null,"docs":" `Positions` takes a predicate `predicate` and filters out elements that match,\n yielding their indices.","sig":null,"attributes":[{"value":"/ `Positions` takes a predicate `predicate` and filters out elements that match,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":354636,"byte_end":354718,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/ yielding their indices.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":354719,"byte_end":354746,"line_start":7,"line_end":7,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":354747,"byte_end":354750,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`positions()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":354751,"byte_end":354838,"line_start":9,"line_end":9,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":354839,"byte_end":354842,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`positions()`]: trait.IndexedParallelIterator.html#method.positions","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":354843,"byte_end":354915,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":354916,"byte_end":354983,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":354984,"byte_end":355057,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8200},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":362775,"byte_end":362781,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":8202}],"decl_id":null,"docs":" Iterator adaptor for [the `repeat()` function](fn.repeat.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeat()` function](fn.repeat.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":362672,"byte_end":362739,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":3366},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363333,"byte_end":363339,"line_start":26,"line_end":26,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::repeat::repeat","value":"pub fn repeat<T: Clone + Send>(T) -> Repeat<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that endlessly repeats `elt` (by\n cloning it). Note that this iterator has \"infinite\" length, so\n typically you would want to use `zip` or `take` or some other\n means to shorten it, or consider using\n [the `repeatn()` function](fn.repeatn.html) instead.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that endlessly repeats `elt` (by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":362820,"byte_end":362884,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/ cloning it). Note that this iterator has \"infinite\" length, so","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":362885,"byte_end":362951,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ typically you would want to use `zip` or `take` or some other","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":362952,"byte_end":363017,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ means to shorten it, or consider using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363018,"byte_end":363060,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/ [the `repeatn()` function](fn.repeatn.html) instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363061,"byte_end":363117,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363118,"byte_end":363121,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363122,"byte_end":363136,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363137,"byte_end":363140,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363141,"byte_end":363148,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363149,"byte_end":363175,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeat;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363176,"byte_end":363204,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ let x: Vec<(i32, i32)> = repeat(22).zip(0..3).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363205,"byte_end":363265,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363266,"byte_end":363317,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363318,"byte_end":363325,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3370},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363737,"byte_end":363741,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"take","qualname":"<Repeat<T>>::take","value":"pub fn take(Self, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes only `n` repeats of the element, similar to the general\n [`take()`](trait.IndexedParallelIterator.html#method.take).","sig":null,"attributes":[{"value":"/ Takes only `n` repeats of the element, similar to the general","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363462,"byte_end":363527,"line_start":34,"line_end":34,"column_start":5,"column_end":70}},{"value":"/ [`take()`](trait.IndexedParallelIterator.html#method.take).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363532,"byte_end":363595,"line_start":35,"line_end":35,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363600,"byte_end":363603,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The resulting `RepeatN` is an `IndexedParallelIterator`, allowing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363608,"byte_end":363677,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/ more functionality than `Repeat` alone.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363682,"byte_end":363725,"line_start":38,"line_end":38,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3371},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":364003,"byte_end":364006,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"zip","qualname":"<Repeat<T>>::zip","value":"pub fn zip<Z>(Self, Z) -> Zip<RepeatN<T>, Z::Iter> where\nZ: IntoParallelIterator, Z::Iter: IndexedParallelIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterates tuples, repeating the element with items from another\n iterator, similar to the general\n [`zip()`](trait.IndexedParallelIterator.html#method.zip).\n","sig":null,"attributes":[{"value":"/ Iterates tuples, repeating the element with items from another","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363818,"byte_end":363884,"line_start":43,"line_end":43,"column_start":5,"column_end":71}},{"value":"/ iterator, similar to the general","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363889,"byte_end":363925,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/ [`zip()`](trait.IndexedParallelIterator.html#method.zip).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363930,"byte_end":363991,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":8209},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365275,"byte_end":365282,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::iter::repeat::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":8211},{"krate":0,"index":8212}],"decl_id":null,"docs":" Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365170,"byte_end":365239,"line_start":101,"line_end":101,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":3387},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365647,"byte_end":365654,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::iter::repeat::repeatn","value":"pub fn repeatn<T: Clone + Send>(T, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces `n` repeats of `elt`\n (by cloning it).","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces `n` repeats of `elt`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365339,"byte_end":365405,"line_start":108,"line_end":108,"column_start":1,"column_end":67}},{"value":"/ (by cloning it).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365406,"byte_end":365426,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365427,"byte_end":365430,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365431,"byte_end":365445,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365446,"byte_end":365449,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365450,"byte_end":365457,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365458,"byte_end":365484,"line_start":114,"line_end":114,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeatn;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365485,"byte_end":365514,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/ let x: Vec<(i32, i32)> = repeatn(22, 3).zip(0..3).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365515,"byte_end":365579,"line_start":116,"line_end":116,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365580,"byte_end":365631,"line_start":117,"line_end":117,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365632,"byte_end":365639,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8219},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368594,"byte_end":368597,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::rev::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":8221}],"decl_id":null,"docs":" `Rev` is an iterator that produces elements in reverse order. This struct\n is created by the [`rev()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Rev` is an iterator that produces elements in reverse order. This struct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368204,"byte_end":368281,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ is created by the [`rev()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368282,"byte_end":368351,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368352,"byte_end":368355,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`rev()`]: trait.IndexedParallelIterator.html#method.rev","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368356,"byte_end":368416,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368417,"byte_end":368484,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368485,"byte_end":368558,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8228},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371439,"byte_end":371443,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::skip::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":8230},{"krate":0,"index":8231}],"decl_id":null,"docs":" `Skip` is an iterator that skips over the first `n` elements.\n This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Skip` is an iterator that skips over the first `n` elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371046,"byte_end":371111,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371112,"byte_end":371194,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371195,"byte_end":371198,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`skip()`]: trait.IndexedParallelIterator.html#method.skip","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371199,"byte_end":371261,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371262,"byte_end":371329,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371330,"byte_end":371403,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":3518},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377366,"byte_end":377371,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::splitter::split","value":"pub fn split<D, S>(D, S) -> Split<D, S> where D: Send, S: Fn(D) ->\n(D, Option<D>) + Sync","parent":null,"children":[],"decl_id":null,"docs":" The `split` function takes arbitrary data and a closure that knows how to\n split it, and turns this into a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ The `split` function takes arbitrary data and a closure that knows how to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373482,"byte_end":373559,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ split it, and turns this into a `ParallelIterator`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373560,"byte_end":373615,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373616,"byte_end":373619,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373620,"byte_end":373634,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373635,"byte_end":373638,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ As a simple example, Rayon can recursively split ranges of indices","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373639,"byte_end":373709,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373710,"byte_end":373713,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373714,"byte_end":373721,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373722,"byte_end":373742,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373743,"byte_end":373769,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373770,"byte_end":373794,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373795,"byte_end":373798,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373799,"byte_end":373802,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // We define a range of indices as follows","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373803,"byte_end":373849,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ type Range1D = Range<usize>;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373850,"byte_end":373882,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373883,"byte_end":373886,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Splitting it in two can be done like this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373887,"byte_end":373935,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":373936,"byte_end":373999,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     // We are mathematically unable to split the range if there is only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374000,"byte_end":374075,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/     // one point inside of it, but we could stop splitting before that.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374076,"byte_end":374151,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374152,"byte_end":374205,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374206,"byte_end":374209,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/     // Here, our range is considered large enough to be splittable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374210,"byte_end":374280,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374281,"byte_end":374336,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374337,"byte_end":374387,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374388,"byte_end":374393,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374394,"byte_end":374397,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // By using iter::split, Rayon will split the range until it has enough work","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374398,"byte_end":374478,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ // to feed the CPU cores, then give us the resulting sub-ranges","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374479,"byte_end":374546,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ iter::split(0..4096, split_range1).for_each(|sub_range| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374547,"byte_end":374608,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/     // As our initial range had a power-of-two size, the final sub-ranges","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374609,"byte_end":374686,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/     // should have power-of-two sizes too","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374687,"byte_end":374732,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/     assert!((sub_range.end - sub_range.start).is_power_of_two());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374733,"byte_end":374802,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374803,"byte_end":374810,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374811,"byte_end":374818,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374819,"byte_end":374822,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This recursive splitting can be extended to two or three dimensions,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374823,"byte_end":374895,"line_start":42,"line_end":42,"column_start":1,"column_end":73}},{"value":"/ to reproduce a classic \"block-wise\" parallelization scheme of graphics and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374896,"byte_end":374974,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ numerical simulations:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":374975,"byte_end":375001,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375002,"byte_end":375005,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375006,"byte_end":375013,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ # use rayon::iter;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375014,"byte_end":375036,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/ # use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375037,"byte_end":375065,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ # use std::ops::Range;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375066,"byte_end":375092,"line_start":49,"line_end":49,"column_start":1,"column_end":27}},{"value":"/ # type Range1D = Range<usize>;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375093,"byte_end":375127,"line_start":50,"line_end":50,"column_start":1,"column_end":35}},{"value":"/ # fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375128,"byte_end":375193,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ #     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375194,"byte_end":375249,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/ #     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375250,"byte_end":375307,"line_start":53,"line_end":53,"column_start":1,"column_end":58}},{"value":"/ #     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375308,"byte_end":375360,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375361,"byte_end":375368,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375369,"byte_end":375374,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ // A two-dimensional range of indices can be built out of two 1D ones","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375375,"byte_end":375448,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ struct Range2D {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375449,"byte_end":375469,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/     // Range of horizontal indices","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375470,"byte_end":375508,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/     pub rx: Range1D,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375509,"byte_end":375533,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375534,"byte_end":375537,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     // Range of vertical indices","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375538,"byte_end":375574,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/     pub ry: Range1D,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375575,"byte_end":375599,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375600,"byte_end":375605,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375606,"byte_end":375609,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // We want to recursively split them by the largest dimension until we have","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375610,"byte_end":375689,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ // enough sub-ranges to feed our mighty multi-core CPU. This function","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375690,"byte_end":375763,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ // carries out one such split.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375764,"byte_end":375798,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/ fn split_range2(r2: Range2D) -> (Range2D, Option<Range2D>) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375799,"byte_end":375863,"line_start":69,"line_end":69,"column_start":1,"column_end":65}},{"value":"/     // Decide on which axis (horizontal/vertical) the range should be split","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375864,"byte_end":375943,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/     let width = r2.rx.end - r2.rx.start;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375944,"byte_end":375988,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/     let height = r2.ry.end - r2.ry.start;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":375989,"byte_end":376034,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/     if width >= height {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376035,"byte_end":376063,"line_start":73,"line_end":73,"column_start":1,"column_end":29}},{"value":"/         // This is a wide range, split it on the horizontal axis","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376064,"byte_end":376132,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/         let (split_rx, ry) = (split_range1(r2.rx), r2.ry);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376133,"byte_end":376195,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376196,"byte_end":376228,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/             rx: split_rx.0,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376229,"byte_end":376260,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/             ry: ry.clone(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376261,"byte_end":376292,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376293,"byte_end":376307,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_rx.1.map(|rx| Range2D { rx, ry });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376308,"byte_end":376371,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/         (out1, out2)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376372,"byte_end":376396,"line_start":81,"line_end":81,"column_start":1,"column_end":25}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376397,"byte_end":376413,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/         // This is a tall range, split it on the vertical axis","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376414,"byte_end":376480,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/         let (rx, split_ry) = (r2.rx, split_range1(r2.ry));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376481,"byte_end":376543,"line_start":84,"line_end":84,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376544,"byte_end":376576,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/             rx: rx.clone(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376577,"byte_end":376608,"line_start":86,"line_end":86,"column_start":1,"column_end":32}},{"value":"/             ry: split_ry.0,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376609,"byte_end":376640,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376641,"byte_end":376655,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_ry.1.map(|ry| Range2D { rx, ry, });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376656,"byte_end":376720,"line_start":89,"line_end":89,"column_start":1,"column_end":65}},{"value":"/         (out1, out2)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376721,"byte_end":376745,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376746,"byte_end":376755,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376756,"byte_end":376761,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376762,"byte_end":376765,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // Again, rayon can handle the recursive splitting for us","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376766,"byte_end":376827,"line_start":94,"line_end":94,"column_start":1,"column_end":62}},{"value":"/ let range = Range2D { rx: 0..800, ry: 0..600 };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376828,"byte_end":376879,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ iter::split(range, split_range2).for_each(|sub_range| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376880,"byte_end":376939,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/     // If the sub-ranges were indeed split by the largest dimension, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":376940,"byte_end":377017,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/     // if no dimension was twice larger than the other initially, this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377018,"byte_end":377092,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/     // property will remain true in the final sub-ranges.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377093,"byte_end":377154,"line_start":99,"line_end":99,"column_start":1,"column_end":62}},{"value":"/     let width = sub_range.rx.end - sub_range.rx.start;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377155,"byte_end":377213,"line_start":100,"line_end":100,"column_start":1,"column_end":59}},{"value":"/     let height = sub_range.ry.end - sub_range.ry.start;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377214,"byte_end":377273,"line_start":101,"line_end":101,"column_start":1,"column_end":60}},{"value":"/     assert!((width / 2 <= height) && (height / 2 <= width));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377274,"byte_end":377338,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377339,"byte_end":377346,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377347,"byte_end":377354,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377355,"byte_end":377358,"line_start":105,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":8238},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377708,"byte_end":377713,"line_start":119,"line_end":119,"column_start":12,"column_end":17},"name":"Split","qualname":"::iter::splitter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":8241},{"krate":0,"index":8242}],"decl_id":null,"docs":" `Split` is a parallel iterator using arbitrary data and a splitting function.\n This struct is created by the [`split()`] function.","sig":null,"attributes":[{"value":"/ `Split` is a parallel iterator using arbitrary data and a splitting function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377507,"byte_end":377588,"line_start":114,"line_end":114,"column_start":1,"column_end":82}},{"value":"/ This struct is created by the [`split()`] function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377589,"byte_end":377644,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377645,"byte_end":377648,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ [`split()`]: fn.split.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377649,"byte_end":377679,"line_start":117,"line_end":117,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8247},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381414,"byte_end":381418,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":8249},{"krate":0,"index":8250}],"decl_id":null,"docs":" `Take` is an iterator that iterates over the first `n` elements.\n This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Take` is an iterator that iterates over the first `n` elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381018,"byte_end":381086,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381087,"byte_end":381169,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381170,"byte_end":381173,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`take()`]: trait.IndexedParallelIterator.html#method.take","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381174,"byte_end":381236,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381237,"byte_end":381304,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381305,"byte_end":381378,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8257},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383954,"byte_end":383961,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"TryFold","qualname":"::iter::try_fold::TryFold","value":"TryFold {  }","parent":null,"children":[{"krate":0,"index":8262},{"krate":0,"index":8263},{"krate":0,"index":8264},{"krate":0,"index":8265}],"decl_id":null,"docs":" `TryFold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383554,"byte_end":383649,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383650,"byte_end":383729,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383730,"byte_end":383733,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`try_fold()`]: trait.ParallelIterator.html#method.try_fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383734,"byte_end":383797,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383798,"byte_end":383851,"line_start":31,"line_end":31,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383852,"byte_end":383925,"line_start":32,"line_end":32,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8272},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":388039,"byte_end":388050,"line_start":195,"line_end":195,"column_start":12,"column_end":23},"name":"TryFoldWith","qualname":"::iter::try_fold::TryFoldWith","value":"TryFoldWith {  }","parent":null,"children":[{"krate":0,"index":8276},{"krate":0,"index":8277},{"krate":0,"index":8278}],"decl_id":null,"docs":" `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":387620,"byte_end":387719,"line_start":188,"line_end":188,"column_start":1,"column_end":100}},{"value":"/ This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":387720,"byte_end":387804,"line_start":189,"line_end":189,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":387805,"byte_end":387808,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`try_fold_with()`]: trait.ParallelIterator.html#method.try_fold_with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":387809,"byte_end":387882,"line_start":191,"line_end":191,"column_start":1,"column_end":74}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":387883,"byte_end":387936,"line_start":192,"line_end":192,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":387937,"byte_end":388010,"line_start":193,"line_end":193,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":3945},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":397540,"byte_end":397544,"line_start":9,"line_end":9,"column_start":10,"column_end":14},"name":"Left","qualname":"::iter::unzip::UnzipOp::Left","value":"type Left: Send;","parent":{"krate":0,"index":3943},"children":[],"decl_id":null,"docs":" The type of item expected by the left consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the left consumer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":397479,"byte_end":397530,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":3946},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":397619,"byte_end":397624,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Right","qualname":"::iter::unzip::UnzipOp::Right","value":"type Right: Send;","parent":{"krate":0,"index":3943},"children":[],"decl_id":null,"docs":" The type of item expected by the right consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the right consumer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":397557,"byte_end":397609,"line_start":11,"line_end":11,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":8284},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411264,"byte_end":411270,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Update","qualname":"::iter::update::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":8287},{"krate":0,"index":8288}],"decl_id":null,"docs":" `Update` is an iterator that mutates the elements of an\n underlying iterator before they are yielded.","sig":null,"attributes":[{"value":"/ `Update` is an iterator that mutates the elements of an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":410853,"byte_end":410912,"line_start":6,"line_end":6,"column_start":1,"column_end":60}},{"value":"/ underlying iterator before they are yielded.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":410913,"byte_end":410961,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":410962,"byte_end":410965,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`update()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":410966,"byte_end":411043,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411044,"byte_end":411047,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`update()`]: trait.ParallelIterator.html#method.update","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411048,"byte_end":411107,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411108,"byte_end":411161,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411162,"byte_end":411235,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8306},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418987,"byte_end":418996,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::iter::while_some::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":8308}],"decl_id":null,"docs":" `WhileSome` is an iterator that yields the `Some` elements of an iterator,\n halting as soon as any `None` is produced.","sig":null,"attributes":[{"value":"/ `WhileSome` is an iterator that yields the `Some` elements of an iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418540,"byte_end":418618,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ halting as soon as any `None` is produced.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418619,"byte_end":418665,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418666,"byte_end":418669,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`while_some()`] method on [`ParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418670,"byte_end":418751,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418752,"byte_end":418755,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`while_some()`]: trait.ParallelIterator.html#method.while_some","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418756,"byte_end":418823,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418824,"byte_end":418877,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":418878,"byte_end":418951,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8315},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422692,"byte_end":422695,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":8318},{"krate":0,"index":8319}],"decl_id":null,"docs":" `Zip` is an iterator that zips up `a` and `b` into a single iterator\n of pairs. This struct is created by the [`zip()`] method on\n [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Zip` is an iterator that zips up `a` and `b` into a single iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422281,"byte_end":422353,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of pairs. This struct is created by the [`zip()`] method on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422354,"byte_end":422417,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/ [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422418,"byte_end":422449,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422450,"byte_end":422453,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip()`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422454,"byte_end":422514,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422515,"byte_end":422582,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422583,"byte_end":422656,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8328},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426682,"byte_end":426687,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::iter::zip_eq::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":8331}],"decl_id":null,"docs":" An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal\n length simultaneously.","sig":null,"attributes":[{"value":"/ An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426187,"byte_end":426272,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ length simultaneously.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426273,"byte_end":426299,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426300,"byte_end":426303,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`zip_eq`] method on [`IndexedParallelIterator`],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426304,"byte_end":426387,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/ see its documentation for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426388,"byte_end":426435,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426436,"byte_end":426439,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip_eq`]: trait.IndexedParallelIterator.html#method.zip_eq","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426440,"byte_end":426504,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426505,"byte_end":426572,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426573,"byte_end":426646,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8340},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428484,"byte_end":428490,"line_start":17,"line_end":17,"column_start":12,"column_end":18},"name":"StepBy","qualname":"::iter::step_by::StepBy","value":"StepBy {  }","parent":null,"children":[{"krate":0,"index":8342},{"krate":0,"index":8343}],"decl_id":null,"docs":" `StepBy` is an iterator that skips `n` elements between each yield, where `n` is the given step.\n This struct is created by the [`step_by()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `StepBy` is an iterator that skips `n` elements between each yield, where `n` is the given step.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428047,"byte_end":428147,"line_start":10,"line_end":10,"column_start":1,"column_end":101}},{"value":"/ This struct is created by the [`step_by()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428148,"byte_end":428233,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428234,"byte_end":428237,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`step_by()`]: trait.IndexedParallelIterator.html#method.step_by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428238,"byte_end":428306,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428307,"byte_end":428374,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428375,"byte_end":428448,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":4648},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39528,"byte_end":39548,"line_start":204,"line_end":204,"column_start":11,"column_end":31},"name":"IntoParallelIterator","qualname":"::iter::IntoParallelIterator","value":"IntoParallelIterator","parent":null,"children":[{"krate":0,"index":4649},{"krate":0,"index":4650},{"krate":0,"index":4651}],"decl_id":null,"docs":" `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39080,"byte_end":39159,"line_start":196,"line_end":196,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39160,"byte_end":39163,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ By implementing `IntoParallelIterator` for a type, you define how it will","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39164,"byte_end":39241,"line_start":198,"line_end":198,"column_start":1,"column_end":78}},{"value":"/ transformed into an iterator. This is a parallel version of the standard","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39242,"byte_end":39318,"line_start":199,"line_end":199,"column_start":1,"column_end":77}},{"value":"/ library's [`std::iter::IntoIterator`] trait.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39319,"byte_end":39367,"line_start":200,"line_end":200,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39368,"byte_end":39371,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39372,"byte_end":39425,"line_start":202,"line_end":202,"column_start":1,"column_end":54}},{"value":"/ [`std::iter::IntoIterator`]: https://doc.rust-lang.org/std/iter/trait.IntoIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39426,"byte_end":39517,"line_start":203,"line_end":203,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":4649},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39617,"byte_end":39621,"line_start":206,"line_end":206,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4648},"children":[],"decl_id":null,"docs":" The parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The parallel iterator type that will be created.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39555,"byte_end":39607,"line_start":205,"line_end":205,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":4650},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39736,"byte_end":39740,"line_start":209,"line_end":209,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":4648},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39665,"byte_end":39726,"line_start":208,"line_end":208,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4651},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40391,"byte_end":40404,"line_start":233,"line_end":233,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"::iter::IntoParallelIterator::into_par_iter","value":"pub fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4648},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39753,"byte_end":39798,"line_start":211,"line_end":211,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39803,"byte_end":39806,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39811,"byte_end":39825,"line_start":213,"line_end":213,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39830,"byte_end":39833,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39838,"byte_end":39845,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39850,"byte_end":39876,"line_start":216,"line_end":216,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39881,"byte_end":39884,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ println!(\"counting in parallel:\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39889,"byte_end":39927,"line_start":218,"line_end":218,"column_start":5,"column_end":43}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39932,"byte_end":39960,"line_start":219,"line_end":219,"column_start":5,"column_end":33}},{"value":"/     .for_each(|i| println!(\"{}\", i));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":39965,"byte_end":40006,"line_start":220,"line_end":220,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40011,"byte_end":40018,"line_start":221,"line_end":221,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40023,"byte_end":40026,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This conversion is often implicit for arguments to methods like [`zip`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40031,"byte_end":40107,"line_start":223,"line_end":223,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40112,"byte_end":40115,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40120,"byte_end":40127,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40132,"byte_end":40158,"line_start":226,"line_end":226,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40163,"byte_end":40166,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..5).into_par_iter().zip(5..10).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40171,"byte_end":40235,"line_start":228,"line_end":228,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(v, [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40240,"byte_end":40300,"line_start":229,"line_end":229,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40305,"byte_end":40312,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40317,"byte_end":40320,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ [`zip`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40325,"byte_end":40383,"line_start":232,"line_end":232,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":4652},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40993,"byte_end":41016,"line_start":249,"line_end":249,"column_start":11,"column_end":34},"name":"IntoParallelRefIterator","qualname":"::iter::IntoParallelRefIterator","value":"IntoParallelRefIterator<'data>","parent":null,"children":[{"krate":0,"index":4654},{"krate":0,"index":4655},{"krate":0,"index":4656}],"decl_id":null,"docs":" `IntoParallelRefIterator` implements the conversion to a\n [`ParallelIterator`], providing shared references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefIterator` implements the conversion to a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40429,"byte_end":40489,"line_start":236,"line_end":236,"column_start":1,"column_end":61}},{"value":"/ [`ParallelIterator`], providing shared references to the data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40490,"byte_end":40556,"line_start":237,"line_end":237,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40557,"byte_end":40560,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter()` method","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40561,"byte_end":40614,"line_start":239,"line_end":239,"column_start":1,"column_end":54}},{"value":"/ defined by various collections.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40615,"byte_end":40650,"line_start":240,"line_end":240,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40651,"byte_end":40654,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40655,"byte_end":40698,"line_start":242,"line_end":242,"column_start":1,"column_end":44}},{"value":"/ `for I where &I: IntoParallelIterator`. In most cases, users","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40699,"byte_end":40763,"line_start":243,"line_end":243,"column_start":1,"column_end":65}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40764,"byte_end":40837,"line_start":244,"line_end":244,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40838,"byte_end":40862,"line_start":245,"line_end":245,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40863,"byte_end":40866,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40867,"byte_end":40920,"line_start":247,"line_end":247,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":40921,"byte_end":40982,"line_start":248,"line_end":248,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":4654},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41100,"byte_end":41104,"line_start":251,"line_end":251,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4652},"children":[],"decl_id":null,"docs":" The type of the parallel iterator that will be returned.\n","sig":null,"attributes":[{"value":"/ The type of the parallel iterator that will be returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41030,"byte_end":41090,"line_start":250,"line_end":250,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":4655},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41280,"byte_end":41284,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":4652},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This will typically be an `&'data T` reference type.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41148,"byte_end":41209,"line_start":253,"line_end":253,"column_start":5,"column_end":66}},{"value":"/ This will typically be an `&'data T` reference type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41214,"byte_end":41270,"line_start":254,"line_end":254,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":4656},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41774,"byte_end":41782,"line_start":272,"line_end":272,"column_start":8,"column_end":16},"name":"par_iter","qualname":"::iter::IntoParallelRefIterator::par_iter","value":"pub fn par_iter(&'data Self) -> Self::Iter","parent":{"krate":0,"index":4652},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41305,"byte_end":41350,"line_start":257,"line_end":257,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41355,"byte_end":41358,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41363,"byte_end":41377,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41382,"byte_end":41385,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41390,"byte_end":41397,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41402,"byte_end":41428,"line_start":262,"line_end":262,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41433,"byte_end":41436,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..100).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41441,"byte_end":41480,"line_start":264,"line_end":264,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.par_iter().sum::<i32>(), 100 * 99 / 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41485,"byte_end":41541,"line_start":265,"line_end":265,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41546,"byte_end":41549,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ // `v.par_iter()` is shorthand for `(&v).into_par_iter()`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41554,"byte_end":41616,"line_start":267,"line_end":267,"column_start":5,"column_end":67}},{"value":"/ // producing the exact same references.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41621,"byte_end":41664,"line_start":268,"line_end":268,"column_start":5,"column_end":48}},{"value":"/ assert!(v.par_iter().zip(&v)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41669,"byte_end":41701,"line_start":269,"line_end":269,"column_start":5,"column_end":37}},{"value":"/          .all(|(a, b)| std::ptr::eq(a, b)));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41706,"byte_end":41754,"line_start":270,"line_end":270,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41759,"byte_end":41766,"line_start":271,"line_end":271,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4663},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42702,"byte_end":42728,"line_start":300,"line_end":300,"column_start":11,"column_end":37},"name":"IntoParallelRefMutIterator","qualname":"::iter::IntoParallelRefMutIterator","value":"IntoParallelRefMutIterator<'data>","parent":null,"children":[{"krate":0,"index":4665},{"krate":0,"index":4666},{"krate":0,"index":4667}],"decl_id":null,"docs":" `IntoParallelRefMutIterator` implements the conversion to a\n [`ParallelIterator`], providing mutable references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefMutIterator` implements the conversion to a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42126,"byte_end":42189,"line_start":287,"line_end":287,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`], providing mutable references to the data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42190,"byte_end":42257,"line_start":288,"line_end":288,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42258,"byte_end":42261,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter_mut()` method","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42262,"byte_end":42319,"line_start":290,"line_end":290,"column_start":1,"column_end":58}},{"value":"/ defined by various collections.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42320,"byte_end":42355,"line_start":291,"line_end":291,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42356,"byte_end":42359,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42360,"byte_end":42403,"line_start":293,"line_end":293,"column_start":1,"column_end":44}},{"value":"/ `for I where &mut I: IntoParallelIterator`. In most cases, users","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42404,"byte_end":42472,"line_start":294,"line_end":294,"column_start":1,"column_end":69}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42473,"byte_end":42546,"line_start":295,"line_end":295,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42547,"byte_end":42571,"line_start":296,"line_end":296,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42572,"byte_end":42575,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42576,"byte_end":42629,"line_start":298,"line_end":298,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42630,"byte_end":42691,"line_start":299,"line_end":299,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":4665},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42798,"byte_end":42802,"line_start":302,"line_end":302,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefMutIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4663},"children":[],"decl_id":null,"docs":" The type of iterator that will be created.\n","sig":null,"attributes":[{"value":"/ The type of iterator that will be created.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42742,"byte_end":42788,"line_start":301,"line_end":301,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":4666},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42954,"byte_end":42958,"line_start":306,"line_end":306,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefMutIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":4663},"children":[],"decl_id":null,"docs":" The type of item that will be produced; this is typically an\n `&'data mut T` reference.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced; this is typically an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42846,"byte_end":42910,"line_start":304,"line_end":304,"column_start":5,"column_end":69}},{"value":"/ `&'data mut T` reference.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42915,"byte_end":42944,"line_start":305,"line_end":305,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":4667},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43272,"byte_end":43284,"line_start":319,"line_end":319,"column_start":8,"column_end":20},"name":"par_iter_mut","qualname":"::iter::IntoParallelRefMutIterator::par_iter_mut","value":"pub fn par_iter_mut(&'data mut Self) -> Self::Iter","parent":{"krate":0,"index":4663},"children":[],"decl_id":null,"docs":" Creates the parallel iterator from `self`.","sig":null,"attributes":[{"value":"/ Creates the parallel iterator from `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":42979,"byte_end":43025,"line_start":308,"line_end":308,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43030,"byte_end":43033,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43038,"byte_end":43052,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43057,"byte_end":43060,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43065,"byte_end":43072,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43077,"byte_end":43103,"line_start":313,"line_end":313,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43108,"byte_end":43111,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0usize; 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43116,"byte_end":43148,"line_start":315,"line_end":315,"column_start":5,"column_end":37}},{"value":"/ v.par_iter_mut().enumerate().for_each(|(i, x)| *x = i);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43153,"byte_end":43212,"line_start":316,"line_end":316,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(v, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43217,"byte_end":43252,"line_start":317,"line_end":317,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43257,"byte_end":43264,"line_start":318,"line_end":318,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4674},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44261,"byte_end":44277,"line_start":348,"line_end":348,"column_start":11,"column_end":27},"name":"ParallelIterator","qualname":"::iter::ParallelIterator","value":"ParallelIterator: Sized + Send","parent":null,"children":[{"krate":0,"index":4675},{"krate":0,"index":4676},{"krate":0,"index":4678},{"krate":0,"index":4681},{"krate":0,"index":4685},{"krate":0,"index":4690},{"krate":0,"index":4696},{"krate":0,"index":4703},{"krate":0,"index":4706},{"krate":0,"index":4709},{"krate":0,"index":4713},{"krate":0,"index":4718},{"krate":0,"index":4721},{"krate":0,"index":4724},{"krate":0,"index":4726},{"krate":0,"index":4728},{"krate":0,"index":4730},{"krate":0,"index":4733},{"krate":0,"index":4736},{"krate":0,"index":4739},{"krate":0,"index":4740},{"krate":0,"index":4741},{"krate":0,"index":4744},{"krate":0,"index":4756},{"krate":0,"index":4760},{"krate":0,"index":4763},{"krate":0,"index":4767},{"krate":0,"index":4770},{"krate":0,"index":4775},{"krate":0,"index":4779},{"krate":0,"index":4781},{"krate":0,"index":4783},{"krate":0,"index":4784},{"krate":0,"index":4791},{"krate":0,"index":4803},{"krate":0,"index":4804},{"krate":0,"index":4811},{"krate":0,"index":4823},{"krate":0,"index":4825},{"krate":0,"index":4827},{"krate":0,"index":4829},{"krate":0,"index":4831},{"krate":0,"index":4836},{"krate":0,"index":4841},{"krate":0,"index":4846},{"krate":0,"index":4848},{"krate":0,"index":4850},{"krate":0,"index":4853},{"krate":0,"index":4855},{"krate":0,"index":4856},{"krate":0,"index":4858},{"krate":0,"index":4863},{"krate":0,"index":4867},{"krate":0,"index":4873},{"krate":0,"index":4874},{"krate":0,"index":4876}],"decl_id":null,"docs":" Parallel version of the standard iterator trait.","sig":null,"attributes":[{"value":"/ Parallel version of the standard iterator trait.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43655,"byte_end":43707,"line_start":334,"line_end":334,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43708,"byte_end":43711,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ The combinators on this trait are available on **all** parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43712,"byte_end":43779,"line_start":336,"line_end":336,"column_start":1,"column_end":68}},{"value":"/ iterators.  Additional methods can be found on the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43780,"byte_end":43834,"line_start":337,"line_end":337,"column_start":1,"column_end":55}},{"value":"/ [`IndexedParallelIterator`] trait: those methods are only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43835,"byte_end":43896,"line_start":338,"line_end":338,"column_start":1,"column_end":62}},{"value":"/ available for parallel iterators where the number of items is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43897,"byte_end":43962,"line_start":339,"line_end":339,"column_start":1,"column_end":66}},{"value":"/ known in advance (so, e.g., after invoking `filter`, those methods","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43963,"byte_end":44033,"line_start":340,"line_end":340,"column_start":1,"column_end":71}},{"value":"/ become unavailable).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44034,"byte_end":44058,"line_start":341,"line_end":341,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44059,"byte_end":44062,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ For examples of using parallel iterators, see [the docs on the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44063,"byte_end":44129,"line_start":343,"line_end":343,"column_start":1,"column_end":67}},{"value":"/ `iter` module][iter].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44130,"byte_end":44155,"line_start":344,"line_end":344,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44156,"byte_end":44159,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ [iter]: index.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44160,"byte_end":44182,"line_start":346,"line_end":346,"column_start":1,"column_end":23}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44183,"byte_end":44250,"line_start":347,"line_end":347,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":4675},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44543,"byte_end":44547,"line_start":354,"line_end":354,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" The type of item that this parallel iterator produces.\n For example, if you use the [`for_each`] method, this is the type of\n item that your closure will be invoked with.","sig":null,"attributes":[{"value":"/ The type of item that this parallel iterator produces.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44298,"byte_end":44356,"line_start":349,"line_end":349,"column_start":5,"column_end":63}},{"value":"/ For example, if you use the [`for_each`] method, this is the type of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44361,"byte_end":44433,"line_start":350,"line_end":350,"column_start":5,"column_end":77}},{"value":"/ item that your closure will be invoked with.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44438,"byte_end":44486,"line_start":351,"line_end":351,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44491,"byte_end":44494,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ [`for_each`]: #method.for_each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44499,"byte_end":44533,"line_start":353,"line_end":353,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4676},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44803,"byte_end":44811,"line_start":365,"line_end":365,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::ParallelIterator::for_each","value":"pub fn for_each<OP>(Self, OP) where OP: Fn(Self::Item) -> () + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Executes `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44560,"byte_end":44629,"line_start":356,"line_end":356,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44634,"byte_end":44637,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44642,"byte_end":44656,"line_start":358,"line_end":358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44661,"byte_end":44664,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44669,"byte_end":44676,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44681,"byte_end":44707,"line_start":361,"line_end":361,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44712,"byte_end":44715,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ (0..100).into_par_iter().for_each(|x| println!(\"{:?}\", x));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44720,"byte_end":44783,"line_start":363,"line_end":363,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44788,"byte_end":44795,"line_start":364,"line_end":364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4678},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45646,"byte_end":45659,"line_start":395,"line_end":395,"column_start":8,"column_end":21},"name":"for_each_with","qualname":"::iter::ParallelIterator::for_each_with","value":"pub fn for_each_with<OP, T>(Self, T, OP) where OP: Fn(&mut T, Self::Item) ->\n() + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Executes `OP` on the given `init` value with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on the given `init` value with each item produced by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44937,"byte_end":45007,"line_start":372,"line_end":372,"column_start":5,"column_end":75}},{"value":"/ the iterator, in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45012,"byte_end":45042,"line_start":373,"line_end":373,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45047,"byte_end":45050,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45055,"byte_end":45123,"line_start":375,"line_end":375,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45128,"byte_end":45199,"line_start":376,"line_end":376,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45204,"byte_end":45221,"line_start":377,"line_end":377,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45226,"byte_end":45229,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45234,"byte_end":45248,"line_start":379,"line_end":379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45253,"byte_end":45256,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45261,"byte_end":45268,"line_start":381,"line_end":381,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45273,"byte_end":45306,"line_start":382,"line_end":382,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45311,"byte_end":45337,"line_start":383,"line_end":383,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45342,"byte_end":45345,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45350,"byte_end":45389,"line_start":385,"line_end":385,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45394,"byte_end":45397,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter().for_each_with(sender, |s, x| s.send(x).unwrap());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45402,"byte_end":45478,"line_start":387,"line_end":387,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45483,"byte_end":45486,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45491,"byte_end":45543,"line_start":389,"line_end":389,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45548,"byte_end":45551,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45556,"byte_end":45571,"line_start":391,"line_end":391,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45576,"byte_end":45579,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45584,"byte_end":45626,"line_start":393,"line_end":393,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45631,"byte_end":45638,"line_start":394,"line_end":394,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4681},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46627,"byte_end":46640,"line_start":429,"line_end":429,"column_start":8,"column_end":21},"name":"for_each_init","qualname":"::iter::ParallelIterator::for_each_init","value":"pub fn for_each_init<OP, INIT, T>(Self, INIT, OP) where\nOP: Fn(&mut T, Self::Item) -> () + Sync + Send, INIT: Fn() -> T + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Executes `OP` on a value returned by `init` with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on a value returned by `init` with each item produced by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45834,"byte_end":45908,"line_start":403,"line_end":403,"column_start":5,"column_end":79}},{"value":"/ the iterator, in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45913,"byte_end":45943,"line_start":404,"line_end":404,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45948,"byte_end":45951,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":45956,"byte_end":46027,"line_start":406,"line_end":406,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46032,"byte_end":46098,"line_start":407,"line_end":407,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46103,"byte_end":46147,"line_start":408,"line_end":408,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46152,"byte_end":46155,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46160,"byte_end":46174,"line_start":410,"line_end":410,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46179,"byte_end":46182,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46187,"byte_end":46194,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46199,"byte_end":46217,"line_start":413,"line_end":413,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46222,"byte_end":46248,"line_start":414,"line_end":414,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46253,"byte_end":46256,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46261,"byte_end":46298,"line_start":416,"line_end":416,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46303,"byte_end":46306,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46311,"byte_end":46337,"line_start":418,"line_end":418,"column_start":5,"column_end":31}},{"value":"/     .for_each_init(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46342,"byte_end":46365,"line_start":419,"line_end":419,"column_start":5,"column_end":28}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46370,"byte_end":46404,"line_start":420,"line_end":420,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.fill(chunk),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46409,"byte_end":46450,"line_start":421,"line_end":421,"column_start":5,"column_end":46}},{"value":"/     );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46455,"byte_end":46465,"line_start":422,"line_end":422,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46470,"byte_end":46473,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46478,"byte_end":46531,"line_start":424,"line_end":424,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46536,"byte_end":46560,"line_start":425,"line_end":425,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46565,"byte_end":46597,"line_start":426,"line_end":426,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46602,"byte_end":46607,"line_start":427,"line_end":427,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46612,"byte_end":46619,"line_start":428,"line_end":428,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4685},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47743,"byte_end":47755,"line_start":457,"line_end":457,"column_start":8,"column_end":20},"name":"try_for_each","qualname":"::iter::ParallelIterator::try_for_each","value":"pub fn try_for_each<OP, R>(Self, OP) -> R where OP: Fn(Self::Item) -> R +\nSync + Send, R: Try<Output = ()> + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46838,"byte_end":46918,"line_start":437,"line_end":437,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46923,"byte_end":46926,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ If the `OP` returns `Result::Err` or `Option::None`, we will attempt to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":46931,"byte_end":47006,"line_start":439,"line_end":439,"column_start":5,"column_end":80}},{"value":"/ stop processing the rest of the items in the iterator as soon as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47011,"byte_end":47079,"line_start":440,"line_end":440,"column_start":5,"column_end":73}},{"value":"/ possible, and we will return that terminating value.  Otherwise, we will","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47084,"byte_end":47160,"line_start":441,"line_end":441,"column_start":5,"column_end":81}},{"value":"/ return an empty `Result::Ok(())` or `Option::Some(())`.  If there are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47165,"byte_end":47238,"line_start":442,"line_end":442,"column_start":5,"column_end":78}},{"value":"/ multiple errors in parallel, it is not specified which will be returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47243,"byte_end":47319,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47324,"byte_end":47327,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47332,"byte_end":47346,"line_start":445,"line_end":445,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47351,"byte_end":47354,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47359,"byte_end":47366,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47371,"byte_end":47397,"line_start":448,"line_end":448,"column_start":5,"column_end":31}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47402,"byte_end":47433,"line_start":449,"line_end":449,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47438,"byte_end":47441,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ // This will stop iteration early if there's any write error, like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47446,"byte_end":47516,"line_start":451,"line_end":451,"column_start":5,"column_end":75}},{"value":"/ // having piped output get closed on the other end.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47521,"byte_end":47576,"line_start":452,"line_end":452,"column_start":5,"column_end":60}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47581,"byte_end":47609,"line_start":453,"line_end":453,"column_start":5,"column_end":33}},{"value":"/     .try_for_each(|x| writeln!(io::stdout(), \"{:?}\", x))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47614,"byte_end":47674,"line_start":454,"line_end":454,"column_start":5,"column_end":65}},{"value":"/     .expect(\"expected no write errors\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47679,"byte_end":47723,"line_start":455,"line_end":455,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":47728,"byte_end":47735,"line_start":456,"line_end":456,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4690},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48876,"byte_end":48893,"line_start":496,"line_end":496,"column_start":8,"column_end":25},"name":"try_for_each_with","qualname":"::iter::ParallelIterator::try_for_each_with","value":"pub fn try_for_each_with<OP, T, R>(Self, T, OP) -> R where\nOP: Fn(&mut T, Self::Item) -> R + Sync + Send, T: Send + Clone, R: Try<Output\n= ()> + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on the given `init` value with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on the given `init` value with each item","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48041,"byte_end":48110,"line_start":469,"line_end":469,"column_start":5,"column_end":74}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48115,"byte_end":48157,"line_start":470,"line_end":470,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48162,"byte_end":48165,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_with()`] and the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48170,"byte_end":48239,"line_start":472,"line_end":472,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48244,"byte_end":48288,"line_start":473,"line_end":473,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48293,"byte_end":48296,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ [`for_each_with()`]: #method.for_each_with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48301,"byte_end":48347,"line_start":475,"line_end":475,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48352,"byte_end":48396,"line_start":476,"line_end":476,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48401,"byte_end":48404,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48409,"byte_end":48423,"line_start":478,"line_end":478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48428,"byte_end":48431,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48436,"byte_end":48443,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48448,"byte_end":48481,"line_start":481,"line_end":481,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48486,"byte_end":48512,"line_start":482,"line_end":482,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48517,"byte_end":48520,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48525,"byte_end":48564,"line_start":484,"line_end":484,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48569,"byte_end":48572,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48577,"byte_end":48603,"line_start":486,"line_end":486,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_with(sender, |s, x| s.send(x))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48608,"byte_end":48660,"line_start":487,"line_end":487,"column_start":5,"column_end":57}},{"value":"/     .expect(\"expected no send errors\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48665,"byte_end":48708,"line_start":488,"line_end":488,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48713,"byte_end":48716,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48721,"byte_end":48773,"line_start":490,"line_end":490,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48778,"byte_end":48781,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48786,"byte_end":48801,"line_start":492,"line_end":492,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48806,"byte_end":48809,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48814,"byte_end":48856,"line_start":494,"line_end":494,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":48861,"byte_end":48868,"line_start":495,"line_end":495,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4696},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50129,"byte_end":50146,"line_start":538,"line_end":538,"column_start":8,"column_end":25},"name":"try_for_each_init","qualname":"::iter::ParallelIterator::try_for_each_init","value":"pub fn try_for_each_init<OP, INIT, T, R>(Self, INIT, OP) -> R where\nOP: Fn(&mut T, Self::Item) -> R + Sync + Send, INIT: Fn() -> T + Sync + Send,\nR: Try<Output = ()> + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on a value returned by `init` with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on a value returned by `init` with each item","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49235,"byte_end":49308,"line_start":509,"line_end":509,"column_start":5,"column_end":78}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49313,"byte_end":49355,"line_start":510,"line_end":510,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49360,"byte_end":49363,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_init()`] and the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49368,"byte_end":49437,"line_start":512,"line_end":512,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49442,"byte_end":49486,"line_start":513,"line_end":513,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49491,"byte_end":49494,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ [`for_each_init()`]: #method.for_each_init","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49499,"byte_end":49545,"line_start":515,"line_end":515,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49550,"byte_end":49594,"line_start":516,"line_end":516,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49599,"byte_end":49602,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49607,"byte_end":49621,"line_start":518,"line_end":518,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49626,"byte_end":49629,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49634,"byte_end":49641,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49646,"byte_end":49664,"line_start":521,"line_end":521,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49669,"byte_end":49695,"line_start":522,"line_end":522,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49700,"byte_end":49703,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49708,"byte_end":49745,"line_start":524,"line_end":524,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49750,"byte_end":49753,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49758,"byte_end":49784,"line_start":526,"line_end":526,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_init(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49789,"byte_end":49816,"line_start":527,"line_end":527,"column_start":5,"column_end":32}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49821,"byte_end":49855,"line_start":528,"line_end":528,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.try_fill(chunk),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49860,"byte_end":49905,"line_start":529,"line_end":529,"column_start":5,"column_end":50}},{"value":"/     )","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49910,"byte_end":49919,"line_start":530,"line_end":530,"column_start":5,"column_end":14}},{"value":"/     .expect(\"expected no rand errors\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49924,"byte_end":49967,"line_start":531,"line_end":531,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49972,"byte_end":49975,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":49980,"byte_end":50033,"line_start":533,"line_end":533,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50038,"byte_end":50062,"line_start":534,"line_end":534,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50067,"byte_end":50099,"line_start":535,"line_end":535,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50104,"byte_end":50109,"line_start":536,"line_end":536,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50114,"byte_end":50121,"line_start":537,"line_end":537,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4703},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50768,"byte_end":50773,"line_start":562,"line_end":562,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::ParallelIterator::count","value":"pub fn count(Self) -> usize","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Counts the number of items in this parallel iterator.","sig":null,"attributes":[{"value":"/ Counts the number of items in this parallel iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50511,"byte_end":50568,"line_start":551,"line_end":551,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50573,"byte_end":50576,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50581,"byte_end":50595,"line_start":553,"line_end":553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50600,"byte_end":50603,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50608,"byte_end":50615,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50620,"byte_end":50646,"line_start":556,"line_end":556,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50651,"byte_end":50654,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ let count = (0..100).into_par_iter().count();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50659,"byte_end":50708,"line_start":558,"line_end":558,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50713,"byte_end":50716,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count, 100);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50721,"byte_end":50748,"line_start":560,"line_end":560,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50753,"byte_end":50760,"line_start":561,"line_end":561,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4706},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51282,"byte_end":51285,"line_start":584,"line_end":584,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::ParallelIterator::map","value":"pub fn map<F, R>(Self, F) -> Map<Self, F> where F: Fn(Self::Item) -> R +\nSync + Send, R: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator, producing a new\n iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator, producing a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50890,"byte_end":50957,"line_start":570,"line_end":570,"column_start":5,"column_end":72}},{"value":"/ iterator with the results.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50962,"byte_end":50992,"line_start":571,"line_end":571,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":50997,"byte_end":51000,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51005,"byte_end":51019,"line_start":573,"line_end":573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51024,"byte_end":51027,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51032,"byte_end":51039,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51044,"byte_end":51070,"line_start":576,"line_end":576,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51075,"byte_end":51078,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..5).into_par_iter().map(|x| x * 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51083,"byte_end":51144,"line_start":578,"line_end":578,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51149,"byte_end":51152,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51157,"byte_end":51202,"line_start":580,"line_end":580,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51207,"byte_end":51210,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51215,"byte_end":51262,"line_start":582,"line_end":582,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51267,"byte_end":51274,"line_start":583,"line_end":583,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4709},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52628,"byte_end":52636,"line_start":621,"line_end":621,"column_start":8,"column_end":16},"name":"map_with","qualname":"::iter::ParallelIterator::map_with","value":"pub fn map_with<F, T, R>(Self, T, F) -> MapWith<Self, T, F> where\nF: Fn(&mut T, Self::Item) -> R + Sync + Send, T: Send + Clone, R: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `map_op` to the given `init` value with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to the given `init` value with each item of this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51446,"byte_end":51515,"line_start":592,"line_end":592,"column_start":5,"column_end":74}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51520,"byte_end":51576,"line_start":593,"line_end":593,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51581,"byte_end":51584,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51589,"byte_end":51657,"line_start":595,"line_end":595,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51662,"byte_end":51733,"line_start":596,"line_end":596,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51738,"byte_end":51755,"line_start":597,"line_end":597,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51760,"byte_end":51763,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51768,"byte_end":51782,"line_start":599,"line_end":599,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51787,"byte_end":51790,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51795,"byte_end":51802,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51807,"byte_end":51840,"line_start":602,"line_end":602,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51845,"byte_end":51871,"line_start":603,"line_end":603,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51876,"byte_end":51879,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51884,"byte_end":51923,"line_start":605,"line_end":605,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51928,"byte_end":51931,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (0..5)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51936,"byte_end":51962,"line_start":607,"line_end":607,"column_start":5,"column_end":31}},{"value":"/                 .into_par_iter()            // iterating over i32","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":51967,"byte_end":52036,"line_start":608,"line_end":608,"column_start":5,"column_end":74}},{"value":"/                 .map_with(sender, |s, x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52041,"byte_end":52087,"line_start":609,"line_end":609,"column_start":5,"column_end":51}},{"value":"/                     s.send(x).unwrap();     // sending i32 values through the channel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52092,"byte_end":52181,"line_start":610,"line_end":610,"column_start":5,"column_end":94}},{"value":"/                     x                       // returning i32","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52186,"byte_end":52250,"line_start":611,"line_end":611,"column_start":5,"column_end":69}},{"value":"/                 })","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52255,"byte_end":52277,"line_start":612,"line_end":612,"column_start":5,"column_end":27}},{"value":"/                 .collect();                 // collecting the returned values into a vector","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52282,"byte_end":52377,"line_start":613,"line_end":613,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52382,"byte_end":52385,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ let mut b: Vec<_> = receiver.iter()         // iterating over the values in the channel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52390,"byte_end":52481,"line_start":615,"line_end":615,"column_start":5,"column_end":96}},{"value":"/                             .collect();     // and collecting them","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52486,"byte_end":52556,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/ b.sort();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52561,"byte_end":52574,"line_start":617,"line_end":617,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52579,"byte_end":52582,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52587,"byte_end":52608,"line_start":619,"line_end":619,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52613,"byte_end":52620,"line_start":620,"line_end":620,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4713},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53819,"byte_end":53827,"line_start":658,"line_end":658,"column_start":8,"column_end":16},"name":"map_init","qualname":"::iter::ParallelIterator::map_init","value":"pub fn map_init<F, INIT, T, R>(Self, INIT, F) -> MapInit<Self, INIT, F> where\nF: Fn(&mut T, Self::Item) -> R + Sync + Send, INIT: Fn() -> T + Sync + Send,\nR: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `map_op` to a value returned by `init` with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to a value returned by `init` with each item of this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52859,"byte_end":52932,"line_start":630,"line_end":630,"column_start":5,"column_end":78}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52937,"byte_end":52993,"line_start":631,"line_end":631,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":52998,"byte_end":53001,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53006,"byte_end":53077,"line_start":633,"line_end":633,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53082,"byte_end":53148,"line_start":634,"line_end":634,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53153,"byte_end":53197,"line_start":635,"line_end":635,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53202,"byte_end":53205,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53210,"byte_end":53224,"line_start":637,"line_end":637,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53229,"byte_end":53232,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53237,"byte_end":53244,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53249,"byte_end":53267,"line_start":640,"line_end":640,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53272,"byte_end":53298,"line_start":641,"line_end":641,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53303,"byte_end":53306,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (1i32..1_000_000)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53311,"byte_end":53348,"line_start":643,"line_end":643,"column_start":5,"column_end":42}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53353,"byte_end":53377,"line_start":644,"line_end":644,"column_start":5,"column_end":29}},{"value":"/     .map_init(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53382,"byte_end":53400,"line_start":645,"line_end":645,"column_start":5,"column_end":23}},{"value":"/         || rand::thread_rng(),  // get the thread-local RNG","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53405,"byte_end":53468,"line_start":646,"line_end":646,"column_start":5,"column_end":68}},{"value":"/         |rng, x| if rng.gen() { // randomly negate items","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53473,"byte_end":53533,"line_start":647,"line_end":647,"column_start":5,"column_end":65}},{"value":"/             -x","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53538,"byte_end":53556,"line_start":648,"line_end":648,"column_start":5,"column_end":23}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53561,"byte_end":53581,"line_start":649,"line_end":649,"column_start":5,"column_end":25}},{"value":"/             x","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53586,"byte_end":53603,"line_start":650,"line_end":650,"column_start":5,"column_end":22}},{"value":"/         },","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53608,"byte_end":53622,"line_start":651,"line_end":651,"column_start":5,"column_end":19}},{"value":"/     ).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53627,"byte_end":53647,"line_start":652,"line_end":652,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53652,"byte_end":53655,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53660,"byte_end":53713,"line_start":654,"line_end":654,"column_start":5,"column_end":58}},{"value":"/ assert!(a.iter().any(|&x| x < 0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53718,"byte_end":53756,"line_start":655,"line_end":655,"column_start":5,"column_end":43}},{"value":"/ assert!(a.iter().any(|&x| x > 0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53761,"byte_end":53799,"line_start":656,"line_end":656,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":53804,"byte_end":53811,"line_start":657,"line_end":657,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4718},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54758,"byte_end":54764,"line_start":688,"line_end":688,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::ParallelIterator::cloned","value":"pub fn cloned<'a, T>(Self) -> Cloned<Self> where T: 'a + Clone + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Creates an iterator which clones all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Clone`. See also [`copied()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which clones all of its elements.  This may be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54076,"byte_end":54146,"line_start":667,"line_end":667,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54151,"byte_end":54220,"line_start":668,"line_end":668,"column_start":5,"column_end":74}},{"value":"/ that type implements `Clone`. See also [`copied()`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54225,"byte_end":54281,"line_start":669,"line_end":669,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54286,"byte_end":54289,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ [`copied()`]: #method.copied","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54294,"byte_end":54326,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54331,"byte_end":54334,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54339,"byte_end":54353,"line_start":673,"line_end":673,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54358,"byte_end":54361,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54366,"byte_end":54373,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54378,"byte_end":54404,"line_start":676,"line_end":676,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54409,"byte_end":54412,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54417,"byte_end":54439,"line_start":678,"line_end":678,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54444,"byte_end":54447,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ let v_cloned: Vec<_> = a.par_iter().cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54452,"byte_end":54511,"line_start":680,"line_end":680,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54516,"byte_end":54519,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ // cloned is the same as .map(|&x| x), for integers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54524,"byte_end":54579,"line_start":682,"line_end":682,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54584,"byte_end":54643,"line_start":683,"line_end":683,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54648,"byte_end":54651,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_cloned, vec![1, 2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54656,"byte_end":54696,"line_start":685,"line_end":685,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54701,"byte_end":54738,"line_start":686,"line_end":686,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54743,"byte_end":54750,"line_start":687,"line_end":687,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4721},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55604,"byte_end":55610,"line_start":717,"line_end":717,"column_start":8,"column_end":14},"name":"copied","qualname":"::iter::ParallelIterator::copied","value":"pub fn copied<'a, T>(Self) -> Copied<Self> where T: 'a + Copy + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Creates an iterator which copies all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Copy`. See also [`cloned()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which copies all of its elements.  This may be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54923,"byte_end":54993,"line_start":696,"line_end":696,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":54998,"byte_end":55067,"line_start":697,"line_end":697,"column_start":5,"column_end":74}},{"value":"/ that type implements `Copy`. See also [`cloned()`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55072,"byte_end":55127,"line_start":698,"line_end":698,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55132,"byte_end":55135,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ [`cloned()`]: #method.cloned","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55140,"byte_end":55172,"line_start":700,"line_end":700,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55177,"byte_end":55180,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55185,"byte_end":55199,"line_start":702,"line_end":702,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55204,"byte_end":55207,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55212,"byte_end":55219,"line_start":704,"line_end":704,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55224,"byte_end":55250,"line_start":705,"line_end":705,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55255,"byte_end":55258,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55263,"byte_end":55285,"line_start":707,"line_end":707,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55290,"byte_end":55293,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ let v_copied: Vec<_> = a.par_iter().copied().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55298,"byte_end":55357,"line_start":709,"line_end":709,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55362,"byte_end":55365,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ // copied is the same as .map(|&x| x), for integers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55370,"byte_end":55425,"line_start":711,"line_end":711,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55430,"byte_end":55489,"line_start":712,"line_end":712,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55494,"byte_end":55497,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_copied, vec![1, 2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55502,"byte_end":55542,"line_start":714,"line_end":714,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55547,"byte_end":55584,"line_start":715,"line_end":715,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55589,"byte_end":55596,"line_start":716,"line_end":716,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4724},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56804,"byte_end":56811,"line_start":754,"line_end":754,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::ParallelIterator::inspect","value":"pub fn inspect<OP>(Self, OP) -> Inspect<Self, OP> where OP: Fn(&Self::Item) ->\n() + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `inspect_op` to a reference to each item of this iterator,\n producing a new iterator passing through the original items.  This is\n often useful for debugging to see what's happening in iterator stages.","sig":null,"attributes":[{"value":"/ Applies `inspect_op` to a reference to each item of this iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55768,"byte_end":55838,"line_start":725,"line_end":725,"column_start":5,"column_end":75}},{"value":"/ producing a new iterator passing through the original items.  This is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55843,"byte_end":55916,"line_start":726,"line_end":726,"column_start":5,"column_end":78}},{"value":"/ often useful for debugging to see what's happening in iterator stages.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":55921,"byte_end":55995,"line_start":727,"line_end":727,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56000,"byte_end":56003,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56008,"byte_end":56022,"line_start":729,"line_end":729,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56027,"byte_end":56030,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56035,"byte_end":56042,"line_start":731,"line_end":731,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56047,"byte_end":56073,"line_start":732,"line_end":732,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56078,"byte_end":56081,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 4, 2, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56086,"byte_end":56111,"line_start":734,"line_end":734,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56116,"byte_end":56119,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ // this iterator sequence is complex.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56124,"byte_end":56165,"line_start":736,"line_end":736,"column_start":5,"column_end":46}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56170,"byte_end":56196,"line_start":737,"line_end":737,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56201,"byte_end":56226,"line_start":738,"line_end":738,"column_start":5,"column_end":30}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56231,"byte_end":56271,"line_start":739,"line_end":739,"column_start":5,"column_end":45}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56276,"byte_end":56324,"line_start":740,"line_end":740,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56329,"byte_end":56332,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56337,"byte_end":56361,"line_start":742,"line_end":742,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56366,"byte_end":56369,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ // let's add some inspect() calls to investigate what's happening","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56374,"byte_end":56443,"line_start":744,"line_end":744,"column_start":5,"column_end":74}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56448,"byte_end":56474,"line_start":745,"line_end":745,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56479,"byte_end":56504,"line_start":746,"line_end":746,"column_start":5,"column_end":30}},{"value":"/             .inspect(|x| println!(\"about to filter: {}\", x))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56509,"byte_end":56573,"line_start":747,"line_end":747,"column_start":5,"column_end":69}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56578,"byte_end":56618,"line_start":748,"line_end":748,"column_start":5,"column_end":45}},{"value":"/             .inspect(|x| println!(\"made it through filter: {}\", x))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56623,"byte_end":56694,"line_start":749,"line_end":749,"column_start":5,"column_end":76}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56699,"byte_end":56747,"line_start":750,"line_end":750,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56752,"byte_end":56755,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56760,"byte_end":56784,"line_start":752,"line_end":752,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56789,"byte_end":56796,"line_start":753,"line_end":753,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4726},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57320,"byte_end":57326,"line_start":774,"line_end":774,"column_start":8,"column_end":14},"name":"update","qualname":"::iter::ParallelIterator::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where F: Fn(&mut Self::Item) ->\n() + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Mutates each item of this iterator before yielding it.","sig":null,"attributes":[{"value":"/ Mutates each item of this iterator before yielding it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":56968,"byte_end":57026,"line_start":761,"line_end":761,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57031,"byte_end":57034,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57039,"byte_end":57053,"line_start":763,"line_end":763,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57058,"byte_end":57061,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57066,"byte_end":57073,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57078,"byte_end":57104,"line_start":766,"line_end":766,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57109,"byte_end":57112,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..5).into_par_iter().update(|x| {*x *= 2;});","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57117,"byte_end":57182,"line_start":768,"line_end":768,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57187,"byte_end":57190,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57195,"byte_end":57240,"line_start":770,"line_end":770,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57245,"byte_end":57248,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57253,"byte_end":57300,"line_start":772,"line_end":772,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57305,"byte_end":57312,"line_start":773,"line_end":773,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4728},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57921,"byte_end":57927,"line_start":795,"line_end":795,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::ParallelIterator::filter","value":"pub fn filter<P>(Self, P) -> Filter<Self, P> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator, producing a new\n iterator with only the items that gave `true` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator, producing a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57479,"byte_end":57549,"line_start":781,"line_end":781,"column_start":5,"column_end":75}},{"value":"/ iterator with only the items that gave `true` results.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57554,"byte_end":57612,"line_start":782,"line_end":782,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57617,"byte_end":57620,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57625,"byte_end":57639,"line_start":784,"line_end":784,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57644,"byte_end":57647,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57652,"byte_end":57659,"line_start":786,"line_end":786,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57664,"byte_end":57690,"line_start":787,"line_end":787,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57695,"byte_end":57698,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter().filter(|x| x % 2 == 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57703,"byte_end":57773,"line_start":789,"line_end":789,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57778,"byte_end":57781,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57786,"byte_end":57836,"line_start":791,"line_end":791,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57841,"byte_end":57844,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57849,"byte_end":57901,"line_start":793,"line_end":793,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":57906,"byte_end":57913,"line_start":794,"line_end":794,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4730},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58721,"byte_end":58731,"line_start":820,"line_end":820,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::ParallelIterator::filter_map","value":"pub fn filter_map<P, R>(Self, P) -> FilterMap<Self, P> where P: Fn(Self::Item)\n-> Option<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator to get an `Option`,\n producing a new iterator with only the items from `Some` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator to get an `Option`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58084,"byte_end":58157,"line_start":802,"line_end":802,"column_start":5,"column_end":78}},{"value":"/ producing a new iterator with only the items from `Some` results.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58162,"byte_end":58231,"line_start":803,"line_end":803,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58236,"byte_end":58239,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58244,"byte_end":58258,"line_start":805,"line_end":805,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58263,"byte_end":58266,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58271,"byte_end":58278,"line_start":807,"line_end":807,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58283,"byte_end":58309,"line_start":808,"line_end":808,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58314,"byte_end":58317,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58322,"byte_end":58368,"line_start":810,"line_end":810,"column_start":5,"column_end":51}},{"value":"/                         .filter_map(|x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58373,"byte_end":58418,"line_start":811,"line_end":811,"column_start":5,"column_end":50}},{"value":"/                             if x % 2 == 0 { Some(x * 3) }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58423,"byte_end":58484,"line_start":812,"line_end":812,"column_start":5,"column_end":66}},{"value":"/                             else { None }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58489,"byte_end":58534,"line_start":813,"line_end":813,"column_start":5,"column_end":50}},{"value":"/                         });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58539,"byte_end":58570,"line_start":814,"line_end":814,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58575,"byte_end":58578,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58583,"byte_end":58633,"line_start":816,"line_end":816,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58638,"byte_end":58641,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 6, 12, 18, 24]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58646,"byte_end":58701,"line_start":818,"line_end":818,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58706,"byte_end":58713,"line_start":819,"line_end":819,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4733},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59500,"byte_end":59508,"line_start":846,"line_end":846,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::ParallelIterator::flat_map","value":"pub fn flat_map<F, PI>(Self, F) -> FlatMap<Self, F> where F: Fn(Self::Item) ->\nPI + Sync + Send, PI: IntoParallelIterator","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator to get nested parallel iterators,\n producing a new parallel iterator that flattens these back into one.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator to get nested parallel iterators,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":58918,"byte_end":59002,"line_start":828,"line_end":828,"column_start":5,"column_end":89}},{"value":"/ producing a new parallel iterator that flattens these back into one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59007,"byte_end":59079,"line_start":829,"line_end":829,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59084,"byte_end":59087,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ See also [`flat_map_iter`](#method.flat_map_iter).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59092,"byte_end":59146,"line_start":831,"line_end":831,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59151,"byte_end":59154,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59159,"byte_end":59173,"line_start":833,"line_end":833,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59178,"byte_end":59181,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59186,"byte_end":59193,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59198,"byte_end":59224,"line_start":836,"line_end":836,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59229,"byte_end":59232,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ let a = [[1, 2], [3, 4], [5, 6], [7, 8]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59237,"byte_end":59282,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59287,"byte_end":59290,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().cloned().flat_map(|a| a.to_vec());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59295,"byte_end":59361,"line_start":840,"line_end":840,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59366,"byte_end":59369,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59374,"byte_end":59415,"line_start":842,"line_end":842,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59420,"byte_end":59423,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&vec[..], &[1, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59428,"byte_end":59480,"line_start":844,"line_end":844,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59485,"byte_end":59492,"line_start":845,"line_end":845,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4736},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61519,"byte_end":61532,"line_start":892,"line_end":892,"column_start":8,"column_end":21},"name":"flat_map_iter","qualname":"::iter::ParallelIterator::flat_map_iter","value":"pub fn flat_map_iter<F, SI>(Self, F) -> FlatMapIter<Self, F> where\nF: Fn(Self::Item) -> SI + Sync + Send, SI: IntoIterator, SI::Item: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator to get nested serial iterators,\n producing a new parallel iterator that flattens these back into one.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator to get nested serial iterators,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59696,"byte_end":59778,"line_start":854,"line_end":854,"column_start":5,"column_end":87}},{"value":"/ producing a new parallel iterator that flattens these back into one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59783,"byte_end":59855,"line_start":855,"line_end":855,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59860,"byte_end":59863,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ # `flat_map_iter` versus `flat_map`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59868,"byte_end":59907,"line_start":857,"line_end":857,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59912,"byte_end":59915,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ These two methods are similar but behave slightly differently. With [`flat_map`],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":59920,"byte_end":60005,"line_start":859,"line_end":859,"column_start":5,"column_end":90}},{"value":"/ each of the nested iterators must be a parallel iterator, and they will be further","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60010,"byte_end":60096,"line_start":860,"line_end":860,"column_start":5,"column_end":91}},{"value":"/ split up with nested parallelism. With `flat_map_iter`, each nested iterator is a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60101,"byte_end":60186,"line_start":861,"line_end":861,"column_start":5,"column_end":90}},{"value":"/ sequential `Iterator`, and we only parallelize _between_ them, while the items","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60191,"byte_end":60273,"line_start":862,"line_end":862,"column_start":5,"column_end":87}},{"value":"/ produced by each nested iterator are processed sequentially.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60278,"byte_end":60342,"line_start":863,"line_end":863,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60347,"byte_end":60350,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ When choosing between these methods, consider whether nested parallelism suits the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60355,"byte_end":60441,"line_start":865,"line_end":865,"column_start":5,"column_end":91}},{"value":"/ potential iterators at hand. If there's little computation involved, or its length","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60446,"byte_end":60532,"line_start":866,"line_end":866,"column_start":5,"column_end":91}},{"value":"/ is much less than the outer parallel iterator, then it may perform better to avoid","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60537,"byte_end":60623,"line_start":867,"line_end":867,"column_start":5,"column_end":91}},{"value":"/ the overhead of parallelism, just flattening sequentially with `flat_map_iter`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60628,"byte_end":60711,"line_start":868,"line_end":868,"column_start":5,"column_end":88}},{"value":"/ If there is a lot of computation, potentially outweighing the outer parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60716,"byte_end":60796,"line_start":869,"line_end":869,"column_start":5,"column_end":85}},{"value":"/ iterator, then the nested parallelism of `flat_map` may be worthwhile.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60801,"byte_end":60875,"line_start":870,"line_end":870,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60880,"byte_end":60883,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ [`flat_map`]: #method.flat_map","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60888,"byte_end":60922,"line_start":872,"line_end":872,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60927,"byte_end":60930,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60935,"byte_end":60949,"line_start":874,"line_end":874,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60954,"byte_end":60957,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60962,"byte_end":60969,"line_start":876,"line_end":876,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":60974,"byte_end":61000,"line_start":877,"line_end":877,"column_start":5,"column_end":31}},{"value":"/ use std::cell::RefCell;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61005,"byte_end":61032,"line_start":878,"line_end":878,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61037,"byte_end":61040,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ let a = [[1, 2], [3, 4], [5, 6], [7, 8]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61045,"byte_end":61090,"line_start":880,"line_end":880,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61095,"byte_end":61098,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().flat_map_iter(|a| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61103,"byte_end":61154,"line_start":882,"line_end":882,"column_start":5,"column_end":56}},{"value":"/     // The serial iterator doesn't have to be thread-safe, just its items.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61159,"byte_end":61237,"line_start":883,"line_end":883,"column_start":5,"column_end":83}},{"value":"/     let cell_iter = RefCell::new(a.iter().cloned());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61242,"byte_end":61298,"line_start":884,"line_end":884,"column_start":5,"column_end":61}},{"value":"/     std::iter::from_fn(move || cell_iter.borrow_mut().next())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61303,"byte_end":61368,"line_start":885,"line_end":885,"column_start":5,"column_end":70}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61373,"byte_end":61380,"line_start":886,"line_end":886,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61385,"byte_end":61388,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61393,"byte_end":61434,"line_start":888,"line_end":888,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61439,"byte_end":61442,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&vec[..], &[1, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61447,"byte_end":61499,"line_start":890,"line_end":890,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61504,"byte_end":61511,"line_start":891,"line_end":891,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4739},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62165,"byte_end":62172,"line_start":915,"line_end":915,"column_start":8,"column_end":15},"name":"flatten","qualname":"::iter::ParallelIterator::flatten","value":"pub fn flatten(Self) -> Flatten<Self> where Self::Item: IntoParallelIterator","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" An adaptor that flattens parallel-iterable `Item`s into one large iterator.","sig":null,"attributes":[{"value":"/ An adaptor that flattens parallel-iterable `Item`s into one large iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61744,"byte_end":61823,"line_start":901,"line_end":901,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61828,"byte_end":61831,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ See also [`flatten_iter`](#method.flatten_iter).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61836,"byte_end":61888,"line_start":903,"line_end":903,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61893,"byte_end":61896,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61901,"byte_end":61915,"line_start":905,"line_end":905,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61920,"byte_end":61923,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61928,"byte_end":61935,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61940,"byte_end":61966,"line_start":908,"line_end":908,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61971,"byte_end":61974,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<Vec<_>> = vec![vec![1, 2], vec![3, 4]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":61979,"byte_end":62033,"line_start":910,"line_end":910,"column_start":5,"column_end":59}},{"value":"/ let y: Vec<_> = x.into_par_iter().flatten().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62038,"byte_end":62096,"line_start":911,"line_end":911,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62101,"byte_end":62104,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(y, vec![1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62109,"byte_end":62145,"line_start":913,"line_end":913,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62150,"byte_end":62157,"line_start":914,"line_end":914,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4740},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62891,"byte_end":62903,"line_start":938,"line_end":938,"column_start":8,"column_end":20},"name":"flatten_iter","qualname":"::iter::ParallelIterator::flatten_iter","value":"pub fn flatten_iter(Self) -> FlattenIter<Self> where Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::Item: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" An adaptor that flattens serial-iterable `Item`s into one large iterator.","sig":null,"attributes":[{"value":"/ An adaptor that flattens serial-iterable `Item`s into one large iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62292,"byte_end":62369,"line_start":922,"line_end":922,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62374,"byte_end":62377,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ See also [`flatten`](#method.flatten) and the analagous comparison of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62382,"byte_end":62455,"line_start":924,"line_end":924,"column_start":5,"column_end":78}},{"value":"/ [`flat_map_iter` versus `flat_map`](#flat_map_iter-versus-flat_map).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62460,"byte_end":62532,"line_start":925,"line_end":925,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62537,"byte_end":62540,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62545,"byte_end":62559,"line_start":927,"line_end":927,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62564,"byte_end":62567,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62572,"byte_end":62579,"line_start":929,"line_end":929,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62584,"byte_end":62610,"line_start":930,"line_end":930,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62615,"byte_end":62618,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<Vec<_>> = vec![vec![1, 2], vec![3, 4]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62623,"byte_end":62677,"line_start":932,"line_end":932,"column_start":5,"column_end":59}},{"value":"/ let iters: Vec<_> = x.into_iter().map(Vec::into_iter).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62682,"byte_end":62750,"line_start":933,"line_end":933,"column_start":5,"column_end":73}},{"value":"/ let y: Vec<_> = iters.into_par_iter().flatten_iter().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62755,"byte_end":62822,"line_start":934,"line_end":934,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62827,"byte_end":62830,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(y, vec![1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62835,"byte_end":62871,"line_start":936,"line_end":936,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":62876,"byte_end":62883,"line_start":937,"line_end":937,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4741},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64638,"byte_end":64644,"line_start":976,"line_end":976,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::ParallelIterator::reduce","value":"pub fn reduce<OP, ID>(Self, ID, OP) -> Self::Item where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send, ID: Fn() ->\nSelf::Item + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n The argument `identity` should be a closure that can produce\n \"identity\" value which may be inserted into the sequence as\n needed to create opportunities for parallel execution. So, for\n example, if you are doing a summation, then `identity()` ought\n to produce something that represents the zero for your type\n (but consider just calling `sum()` in that case).","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63073,"byte_end":63136,"line_start":946,"line_end":946,"column_start":5,"column_end":68}},{"value":"/ The argument `identity` should be a closure that can produce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63141,"byte_end":63205,"line_start":947,"line_end":947,"column_start":5,"column_end":69}},{"value":"/ \"identity\" value which may be inserted into the sequence as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63210,"byte_end":63273,"line_start":948,"line_end":948,"column_start":5,"column_end":68}},{"value":"/ needed to create opportunities for parallel execution. So, for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63278,"byte_end":63344,"line_start":949,"line_end":949,"column_start":5,"column_end":71}},{"value":"/ example, if you are doing a summation, then `identity()` ought","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63349,"byte_end":63415,"line_start":950,"line_end":950,"column_start":5,"column_end":71}},{"value":"/ to produce something that represents the zero for your type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63420,"byte_end":63483,"line_start":951,"line_end":951,"column_start":5,"column_end":68}},{"value":"/ (but consider just calling `sum()` in that case).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63488,"byte_end":63541,"line_start":952,"line_end":952,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63546,"byte_end":63549,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63554,"byte_end":63568,"line_start":954,"line_end":954,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63573,"byte_end":63576,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63581,"byte_end":63588,"line_start":956,"line_end":956,"column_start":5,"column_end":12}},{"value":"/ // Iterate over a sequence of pairs `(x0, y0), ..., (xN, yN)`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63593,"byte_end":63658,"line_start":957,"line_end":957,"column_start":5,"column_end":70}},{"value":"/ // and use reduce to compute one pair `(x0 + ... + xN, y0 + ... + yN)`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63663,"byte_end":63737,"line_start":958,"line_end":958,"column_start":5,"column_end":79}},{"value":"/ // where the first/second elements are summed separately.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63742,"byte_end":63803,"line_start":959,"line_end":959,"column_start":5,"column_end":66}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63808,"byte_end":63834,"line_start":960,"line_end":960,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63839,"byte_end":63887,"line_start":961,"line_end":961,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63892,"byte_end":63955,"line_start":962,"line_end":962,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":63960,"byte_end":64022,"line_start":963,"line_end":963,"column_start":5,"column_end":67}},{"value":"/            .reduce(|| (0, 0), // the \"identity\" is 0 in both columns","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64027,"byte_end":64099,"line_start":964,"line_end":964,"column_start":5,"column_end":77}},{"value":"/                    |a, b| (a.0 + b.0, a.1 + b.1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64104,"byte_end":64158,"line_start":965,"line_end":965,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64163,"byte_end":64217,"line_start":966,"line_end":966,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64222,"byte_end":64229,"line_start":967,"line_end":967,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64234,"byte_end":64237,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64242,"byte_end":64306,"line_start":969,"line_end":969,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64311,"byte_end":64375,"line_start":970,"line_end":970,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64380,"byte_end":64446,"line_start":971,"line_end":971,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic. And of course `identity()` should","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64451,"byte_end":64515,"line_start":972,"line_end":972,"column_start":5,"column_end":69}},{"value":"/ produce a true identity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64520,"byte_end":64548,"line_start":973,"line_end":973,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64553,"byte_end":64556,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64561,"byte_end":64630,"line_start":975,"line_end":975,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4744},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65985,"byte_end":65996,"line_start":1010,"line_end":1010,"column_start":8,"column_end":19},"name":"reduce_with","qualname":"::iter::ParallelIterator::reduce_with","value":"pub fn reduce_with<OP>(Self, OP) -> Option<Self::Item> where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n If the iterator is empty, `None` is returned; otherwise,\n `Some` is returned.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64879,"byte_end":64942,"line_start":984,"line_end":984,"column_start":5,"column_end":68}},{"value":"/ If the iterator is empty, `None` is returned; otherwise,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":64947,"byte_end":65007,"line_start":985,"line_end":985,"column_start":5,"column_end":65}},{"value":"/ `Some` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65012,"byte_end":65035,"line_start":986,"line_end":986,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65040,"byte_end":65043,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ This version of `reduce` is simple but somewhat less","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65048,"byte_end":65104,"line_start":988,"line_end":988,"column_start":5,"column_end":61}},{"value":"/ efficient. If possible, it is better to call `reduce()`, which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65109,"byte_end":65175,"line_start":989,"line_end":989,"column_start":5,"column_end":71}},{"value":"/ requires an identity element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65180,"byte_end":65213,"line_start":990,"line_end":990,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65218,"byte_end":65221,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65226,"byte_end":65240,"line_start":992,"line_end":992,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65245,"byte_end":65248,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65253,"byte_end":65260,"line_start":994,"line_end":994,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65265,"byte_end":65291,"line_start":995,"line_end":995,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65296,"byte_end":65344,"line_start":996,"line_end":996,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65349,"byte_end":65412,"line_start":997,"line_end":997,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65417,"byte_end":65479,"line_start":998,"line_end":998,"column_start":5,"column_end":67}},{"value":"/            .reduce_with(|a, b| (a.0 + b.0, a.1 + b.1))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65484,"byte_end":65542,"line_start":999,"line_end":999,"column_start":5,"column_end":63}},{"value":"/            .unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65547,"byte_end":65572,"line_start":1000,"line_end":1000,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65577,"byte_end":65631,"line_start":1001,"line_end":1001,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65636,"byte_end":65643,"line_start":1002,"line_end":1002,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65648,"byte_end":65651,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65656,"byte_end":65720,"line_start":1004,"line_end":1004,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65725,"byte_end":65789,"line_start":1005,"line_end":1005,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65794,"byte_end":65860,"line_start":1006,"line_end":1006,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65865,"byte_end":65895,"line_start":1007,"line_end":1007,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65900,"byte_end":65903,"line_start":1008,"line_end":1008,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":65908,"byte_end":65977,"line_start":1009,"line_end":1009,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4756},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68180,"byte_end":68190,"line_start":1064,"line_end":1064,"column_start":8,"column_end":18},"name":"try_reduce","qualname":"::iter::ParallelIterator::try_reduce","value":"pub fn try_reduce<T, OP, ID>(Self, ID, OP) -> Self::Item where OP: Fn(T, T) ->\nSelf::Item + Sync + Send, ID: Fn() -> T + Sync + Send, Self::Item: Try<Output\n= T>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.\n The `identity` argument is used the same way as in [`reduce()`].","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":66791,"byte_end":66865,"line_start":1033,"line_end":1033,"column_start":5,"column_end":79}},{"value":"/ The `identity` argument is used the same way as in [`reduce()`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":66870,"byte_end":66938,"line_start":1034,"line_end":1034,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":66943,"byte_end":66946,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ [`reduce()`]: #method.reduce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":66951,"byte_end":66983,"line_start":1036,"line_end":1036,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":66988,"byte_end":66991,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ If a `Result::Err` or `Option::None` item is found, or if `op` reduces","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":66996,"byte_end":67070,"line_start":1038,"line_end":1038,"column_start":5,"column_end":79}},{"value":"/ to one, we will attempt to stop processing the rest of the items in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67075,"byte_end":67150,"line_start":1039,"line_end":1039,"column_start":5,"column_end":80}},{"value":"/ iterator as soon as possible, and we will return that terminating value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67155,"byte_end":67231,"line_start":1040,"line_end":1040,"column_start":5,"column_end":81}},{"value":"/ Otherwise, we will return the final reduced `Result::Ok(T)` or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67236,"byte_end":67302,"line_start":1041,"line_end":1041,"column_start":5,"column_end":71}},{"value":"/ `Option::Some(T)`.  If there are multiple errors in parallel, it is not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67307,"byte_end":67382,"line_start":1042,"line_end":1042,"column_start":5,"column_end":80}},{"value":"/ specified which will be returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67387,"byte_end":67424,"line_start":1043,"line_end":1043,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67429,"byte_end":67432,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67437,"byte_end":67451,"line_start":1045,"line_end":1045,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67456,"byte_end":67459,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67464,"byte_end":67471,"line_start":1047,"line_end":1047,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67476,"byte_end":67502,"line_start":1048,"line_end":1048,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67507,"byte_end":67510,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ // Compute the sum of squares, being careful about overflow.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67515,"byte_end":67579,"line_start":1050,"line_end":1050,"column_start":5,"column_end":69}},{"value":"/ fn sum_squares<I: IntoParallelIterator<Item = i32>>(iter: I) -> Option<i32> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67584,"byte_end":67665,"line_start":1051,"line_end":1051,"column_start":5,"column_end":86}},{"value":"/     iter.into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67670,"byte_end":67698,"line_start":1052,"line_end":1052,"column_start":5,"column_end":33}},{"value":"/         .map(|i| i.checked_mul(i))            // square each item,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67703,"byte_end":67773,"line_start":1053,"line_end":1053,"column_start":5,"column_end":75}},{"value":"/         .try_reduce(|| 0, i32::checked_add)   // and add them up!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67778,"byte_end":67847,"line_start":1054,"line_end":1054,"column_start":5,"column_end":74}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67852,"byte_end":67857,"line_start":1055,"line_end":1055,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(sum_squares(0..5), Some(0 + 1 + 4 + 9 + 16));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67862,"byte_end":67922,"line_start":1056,"line_end":1056,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67927,"byte_end":67930,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ // The sum might overflow","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67935,"byte_end":67964,"line_start":1058,"line_end":1058,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(sum_squares(0..10_000), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":67969,"byte_end":68014,"line_start":1059,"line_end":1059,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68019,"byte_end":68022,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ // Or the squares might overflow before it even reaches `try_reduce`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68027,"byte_end":68099,"line_start":1061,"line_end":1061,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(sum_squares(1_000_000..1_000_001), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68104,"byte_end":68160,"line_start":1062,"line_end":1062,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68165,"byte_end":68172,"line_start":1063,"line_end":1063,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4760},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69821,"byte_end":69836,"line_start":1108,"line_end":1108,"column_start":8,"column_end":23},"name":"try_reduce_with","qualname":"::iter::ParallelIterator::try_reduce_with","value":"pub fn try_reduce_with<T, OP>(Self, OP) -> Option<Self::Item> where\nOP: Fn(T, T) -> Self::Item + Sync + Send, Self::Item: Try<Output = T>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68446,"byte_end":68520,"line_start":1073,"line_end":1073,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68525,"byte_end":68528,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ Like [`reduce_with()`], if the iterator is empty, `None` is returned;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68533,"byte_end":68606,"line_start":1075,"line_end":1075,"column_start":5,"column_end":78}},{"value":"/ otherwise, `Some` is returned.  Beyond that, it behaves like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68611,"byte_end":68675,"line_start":1076,"line_end":1076,"column_start":5,"column_end":69}},{"value":"/ [`try_reduce()`] for handling `Err`/`None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68680,"byte_end":68727,"line_start":1077,"line_end":1077,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68732,"byte_end":68735,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ [`reduce_with()`]: #method.reduce_with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68740,"byte_end":68782,"line_start":1079,"line_end":1079,"column_start":5,"column_end":47}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68787,"byte_end":68827,"line_start":1080,"line_end":1080,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68832,"byte_end":68835,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ For instance, with `Option` items, the return value may be:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68840,"byte_end":68903,"line_start":1082,"line_end":1082,"column_start":5,"column_end":68}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68908,"byte_end":68944,"line_start":1083,"line_end":1083,"column_start":5,"column_end":41}},{"value":"/ - `Some(None)`, we stopped after encountering `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":68949,"byte_end":69006,"line_start":1084,"line_end":1084,"column_start":5,"column_end":62}},{"value":"/ - `Some(Some(x))`, the entire iterator reduced to `x`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69011,"byte_end":69069,"line_start":1085,"line_end":1085,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69074,"byte_end":69077,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ With `Result` items, the nesting is more obvious:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69082,"byte_end":69135,"line_start":1087,"line_end":1087,"column_start":5,"column_end":58}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69140,"byte_end":69176,"line_start":1088,"line_end":1088,"column_start":5,"column_end":41}},{"value":"/ - `Some(Err(e))`, we stopped after encountering an error `e`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69181,"byte_end":69246,"line_start":1089,"line_end":1089,"column_start":5,"column_end":70}},{"value":"/ - `Some(Ok(x))`, the entire iterator reduced to `x`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69251,"byte_end":69307,"line_start":1090,"line_end":1090,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69312,"byte_end":69315,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69320,"byte_end":69334,"line_start":1092,"line_end":1092,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69339,"byte_end":69342,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69347,"byte_end":69354,"line_start":1094,"line_end":1094,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69359,"byte_end":69385,"line_start":1095,"line_end":1095,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69390,"byte_end":69393,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ let files = [\"/dev/null\", \"/does/not/exist\"];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69398,"byte_end":69447,"line_start":1097,"line_end":1097,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69452,"byte_end":69455,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ // Find the biggest file","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69460,"byte_end":69488,"line_start":1099,"line_end":1099,"column_start":5,"column_end":33}},{"value":"/ files.into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69493,"byte_end":69518,"line_start":1100,"line_end":1100,"column_start":5,"column_end":30}},{"value":"/     .map(|path| std::fs::metadata(path).map(|m| (path, m.len())))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69523,"byte_end":69592,"line_start":1101,"line_end":1101,"column_start":5,"column_end":74}},{"value":"/     .try_reduce_with(|a, b| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69597,"byte_end":69630,"line_start":1102,"line_end":1102,"column_start":5,"column_end":38}},{"value":"/         Ok(if a.1 >= b.1 { a } else { b })","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69635,"byte_end":69681,"line_start":1103,"line_end":1103,"column_start":5,"column_end":51}},{"value":"/     })","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69686,"byte_end":69696,"line_start":1104,"line_end":1104,"column_start":5,"column_end":15}},{"value":"/     .expect(\"Some value, since the iterator is not empty\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69701,"byte_end":69763,"line_start":1105,"line_end":1105,"column_start":5,"column_end":67}},{"value":"/     .expect_err(\"not found\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69768,"byte_end":69801,"line_start":1106,"line_end":1106,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":69806,"byte_end":69813,"line_start":1107,"line_end":1107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4763},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75618,"byte_end":75622,"line_start":1249,"line_end":1249,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::ParallelIterator::fold","value":"pub fn fold<T, ID, F>(Self, ID, F) -> Fold<Self, ID, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, ID: Fn() -> T + Sync + Send, T: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Parallel fold is similar to sequential fold except that the\n sequence of items may be subdivided before it is\n folded. Consider a list of numbers like `22 3 77 89 46`. If\n you used sequential fold to add them (`fold(0, |a,b| a+b)`,\n you would wind up first adding 0 + 22, then 22 + 3, then 25 +\n 77, and so forth. The **parallel fold** works similarly except\n that it first breaks up your list into sublists, and hence\n instead of yielding up a single sum at the end, it yields up\n multiple sums. The number of results is nondeterministic, as\n is the point where the breaks occur.","sig":null,"attributes":[{"value":"/ Parallel fold is similar to sequential fold except that the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70045,"byte_end":70108,"line_start":1116,"line_end":1116,"column_start":5,"column_end":68}},{"value":"/ sequence of items may be subdivided before it is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70113,"byte_end":70165,"line_start":1117,"line_end":1117,"column_start":5,"column_end":57}},{"value":"/ folded. Consider a list of numbers like `22 3 77 89 46`. If","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70170,"byte_end":70233,"line_start":1118,"line_end":1118,"column_start":5,"column_end":68}},{"value":"/ you used sequential fold to add them (`fold(0, |a,b| a+b)`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70238,"byte_end":70301,"line_start":1119,"line_end":1119,"column_start":5,"column_end":68}},{"value":"/ you would wind up first adding 0 + 22, then 22 + 3, then 25 +","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70306,"byte_end":70371,"line_start":1120,"line_end":1120,"column_start":5,"column_end":70}},{"value":"/ 77, and so forth. The **parallel fold** works similarly except","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70376,"byte_end":70442,"line_start":1121,"line_end":1121,"column_start":5,"column_end":71}},{"value":"/ that it first breaks up your list into sublists, and hence","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70447,"byte_end":70509,"line_start":1122,"line_end":1122,"column_start":5,"column_end":67}},{"value":"/ instead of yielding up a single sum at the end, it yields up","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70514,"byte_end":70578,"line_start":1123,"line_end":1123,"column_start":5,"column_end":69}},{"value":"/ multiple sums. The number of results is nondeterministic, as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70583,"byte_end":70647,"line_start":1124,"line_end":1124,"column_start":5,"column_end":69}},{"value":"/ is the point where the breaks occur.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70652,"byte_end":70692,"line_start":1125,"line_end":1125,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70697,"byte_end":70700,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ So if did the same parallel fold (`fold(0, |a,b| a+b)`) on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70705,"byte_end":70767,"line_start":1127,"line_end":1127,"column_start":5,"column_end":67}},{"value":"/ our example list, we might wind up with a sequence of two numbers,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70772,"byte_end":70842,"line_start":1128,"line_end":1128,"column_start":5,"column_end":75}},{"value":"/ like so:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70847,"byte_end":70859,"line_start":1129,"line_end":1129,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70864,"byte_end":70867,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70872,"byte_end":70886,"line_start":1131,"line_end":1131,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70891,"byte_end":70908,"line_start":1132,"line_end":1132,"column_start":5,"column_end":22}},{"value":"/       |     |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70913,"byte_end":70930,"line_start":1133,"line_end":1133,"column_start":5,"column_end":22}},{"value":"/     102   135","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70935,"byte_end":70952,"line_start":1134,"line_end":1134,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70957,"byte_end":70964,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70969,"byte_end":70972,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Or perhaps these three numbers:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":70977,"byte_end":71012,"line_start":1137,"line_end":1137,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71017,"byte_end":71020,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71025,"byte_end":71039,"line_start":1139,"line_end":1139,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71044,"byte_end":71061,"line_start":1140,"line_end":1140,"column_start":5,"column_end":22}},{"value":"/       |  |  |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71066,"byte_end":71083,"line_start":1141,"line_end":1141,"column_start":5,"column_end":22}},{"value":"/     102 89 46","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71088,"byte_end":71105,"line_start":1142,"line_end":1142,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71110,"byte_end":71117,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71122,"byte_end":71125,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ In general, Rayon will attempt to find good breaking points","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71130,"byte_end":71193,"line_start":1145,"line_end":1145,"column_start":5,"column_end":68}},{"value":"/ that keep all of your cores busy.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71198,"byte_end":71235,"line_start":1146,"line_end":1146,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71240,"byte_end":71243,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ ### Fold versus reduce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71248,"byte_end":71274,"line_start":1148,"line_end":1148,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71279,"byte_end":71282,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ The `fold()` and `reduce()` methods each take an identity element","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71287,"byte_end":71356,"line_start":1150,"line_end":1150,"column_start":5,"column_end":74}},{"value":"/ and a combining function, but they operate rather differently.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71361,"byte_end":71427,"line_start":1151,"line_end":1151,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71432,"byte_end":71435,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ `reduce()` requires that the identity function has the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71440,"byte_end":71503,"line_start":1153,"line_end":1153,"column_start":5,"column_end":68}},{"value":"/ type as the things you are iterating over, and it fully","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71508,"byte_end":71567,"line_start":1154,"line_end":1154,"column_start":5,"column_end":64}},{"value":"/ reduces the list of items into a single item. So, for example,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71572,"byte_end":71638,"line_start":1155,"line_end":1155,"column_start":5,"column_end":71}},{"value":"/ imagine we are iterating over a list of bytes `bytes: [128_u8,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71643,"byte_end":71709,"line_start":1156,"line_end":1156,"column_start":5,"column_end":71}},{"value":"/ 64_u8, 64_u8]`. If we used `bytes.reduce(|| 0_u8, |a: u8, b:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71714,"byte_end":71778,"line_start":1157,"line_end":1157,"column_start":5,"column_end":69}},{"value":"/ u8| a + b)`, we would get an overflow. This is because `0`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71783,"byte_end":71846,"line_start":1158,"line_end":1158,"column_start":5,"column_end":68}},{"value":"/ `a`, and `b` here are all bytes, just like the numbers in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71851,"byte_end":71916,"line_start":1159,"line_end":1159,"column_start":5,"column_end":70}},{"value":"/ list (I wrote the types explicitly above, but those are the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71921,"byte_end":71984,"line_start":1160,"line_end":1160,"column_start":5,"column_end":68}},{"value":"/ only types you can use). To avoid the overflow, we would need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":71989,"byte_end":72054,"line_start":1161,"line_end":1161,"column_start":5,"column_end":70}},{"value":"/ to do something like `bytes.map(|b| b as u32).reduce(|| 0, |a,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72059,"byte_end":72125,"line_start":1162,"line_end":1162,"column_start":5,"column_end":71}},{"value":"/ b| a + b)`, in which case our result would be `256`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72130,"byte_end":72186,"line_start":1163,"line_end":1163,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72191,"byte_end":72194,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ In contrast, with `fold()`, the identity function does not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72199,"byte_end":72261,"line_start":1165,"line_end":1165,"column_start":5,"column_end":67}},{"value":"/ have to have the same type as the things you are iterating","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72266,"byte_end":72328,"line_start":1166,"line_end":1166,"column_start":5,"column_end":67}},{"value":"/ over, and you potentially get back many results. So, if we","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72333,"byte_end":72395,"line_start":1167,"line_end":1167,"column_start":5,"column_end":67}},{"value":"/ continue with the `bytes` example from the previous paragraph,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72400,"byte_end":72466,"line_start":1168,"line_end":1168,"column_start":5,"column_end":71}},{"value":"/ we could do `bytes.fold(|| 0_u32, |a, b| a + (b as u32))` to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72471,"byte_end":72535,"line_start":1169,"line_end":1169,"column_start":5,"column_end":69}},{"value":"/ convert our bytes into `u32`. And of course we might not get","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72540,"byte_end":72604,"line_start":1170,"line_end":1170,"column_start":5,"column_end":69}},{"value":"/ back a single sum.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72609,"byte_end":72631,"line_start":1171,"line_end":1171,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72636,"byte_end":72639,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ There is a more subtle distinction as well, though it's","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72644,"byte_end":72703,"line_start":1173,"line_end":1173,"column_start":5,"column_end":64}},{"value":"/ actually implied by the above points. When you use `reduce()`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72708,"byte_end":72774,"line_start":1174,"line_end":1174,"column_start":5,"column_end":71}},{"value":"/ your reduction function is sometimes called with values that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72779,"byte_end":72843,"line_start":1175,"line_end":1175,"column_start":5,"column_end":69}},{"value":"/ were never part of your original parallel iterator (for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72848,"byte_end":72907,"line_start":1176,"line_end":1176,"column_start":5,"column_end":64}},{"value":"/ example, both the left and right might be a partial sum). With","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72912,"byte_end":72978,"line_start":1177,"line_end":1177,"column_start":5,"column_end":71}},{"value":"/ `fold()`, in contrast, the left value in the fold function is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":72983,"byte_end":73048,"line_start":1178,"line_end":1178,"column_start":5,"column_end":70}},{"value":"/ always the accumulator, and the right value is always from","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73053,"byte_end":73115,"line_start":1179,"line_end":1179,"column_start":5,"column_end":67}},{"value":"/ your original sequence.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73120,"byte_end":73147,"line_start":1180,"line_end":1180,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73152,"byte_end":73155,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ ### Fold vs Map/Reduce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73160,"byte_end":73186,"line_start":1182,"line_end":1182,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73191,"byte_end":73194,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ Fold makes sense if you have some operation where it is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73199,"byte_end":73258,"line_start":1184,"line_end":1184,"column_start":5,"column_end":64}},{"value":"/ cheaper to create groups of elements at a time. For example,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73263,"byte_end":73327,"line_start":1185,"line_end":1185,"column_start":5,"column_end":69}},{"value":"/ imagine collecting characters into a string. If you were going","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73332,"byte_end":73398,"line_start":1186,"line_end":1186,"column_start":5,"column_end":71}},{"value":"/ to use map/reduce, you might try this:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73403,"byte_end":73445,"line_start":1187,"line_end":1187,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73450,"byte_end":73453,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73458,"byte_end":73465,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73470,"byte_end":73496,"line_start":1190,"line_end":1190,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73501,"byte_end":73504,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73509,"byte_end":73520,"line_start":1192,"line_end":1192,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73525,"byte_end":73558,"line_start":1193,"line_end":1193,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73563,"byte_end":73582,"line_start":1194,"line_end":1194,"column_start":5,"column_end":24}},{"value":"/     .map(|c: &char| format!(\"{}\", c))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73587,"byte_end":73628,"line_start":1195,"line_end":1195,"column_start":5,"column_end":46}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73633,"byte_end":73666,"line_start":1196,"line_end":1196,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73671,"byte_end":73737,"line_start":1197,"line_end":1197,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73742,"byte_end":73745,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73750,"byte_end":73777,"line_start":1199,"line_end":1199,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73782,"byte_end":73789,"line_start":1200,"line_end":1200,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73794,"byte_end":73797,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ Because reduce produces the same type of element as its input,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73802,"byte_end":73868,"line_start":1202,"line_end":1202,"column_start":5,"column_end":71}},{"value":"/ you have to first map each character into a string, and then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73873,"byte_end":73937,"line_start":1203,"line_end":1203,"column_start":5,"column_end":69}},{"value":"/ you can reduce them. This means we create one string per","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":73942,"byte_end":74002,"line_start":1204,"line_end":1204,"column_start":5,"column_end":65}},{"value":"/ element in our iterator -- not so great. Using `fold`, we can","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74007,"byte_end":74072,"line_start":1205,"line_end":1205,"column_start":5,"column_end":70}},{"value":"/ do this instead:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74077,"byte_end":74097,"line_start":1206,"line_end":1206,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74102,"byte_end":74105,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74110,"byte_end":74117,"line_start":1208,"line_end":1208,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74122,"byte_end":74148,"line_start":1209,"line_end":1209,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74153,"byte_end":74156,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74161,"byte_end":74172,"line_start":1211,"line_end":1211,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74177,"byte_end":74210,"line_start":1212,"line_end":1212,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74215,"byte_end":74234,"line_start":1213,"line_end":1213,"column_start":5,"column_end":24}},{"value":"/     .fold(|| String::new(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74239,"byte_end":74270,"line_start":1214,"line_end":1214,"column_start":5,"column_end":36}},{"value":"/             |mut s: String, c: &char| { s.push(*c); s })","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74275,"byte_end":74335,"line_start":1215,"line_end":1215,"column_start":5,"column_end":65}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74340,"byte_end":74373,"line_start":1216,"line_end":1216,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74378,"byte_end":74444,"line_start":1217,"line_end":1217,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74449,"byte_end":74452,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74457,"byte_end":74484,"line_start":1219,"line_end":1219,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74489,"byte_end":74496,"line_start":1220,"line_end":1220,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74501,"byte_end":74504,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ Now `fold` will process groups of our characters at a time,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74509,"byte_end":74572,"line_start":1222,"line_end":1222,"column_start":5,"column_end":68}},{"value":"/ and we only make one string per group. We should wind up with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74577,"byte_end":74642,"line_start":1223,"line_end":1223,"column_start":5,"column_end":70}},{"value":"/ some small-ish number of strings roughly proportional to the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74647,"byte_end":74711,"line_start":1224,"line_end":1224,"column_start":5,"column_end":69}},{"value":"/ number of CPUs you have (it will ultimately depend on how busy","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74716,"byte_end":74782,"line_start":1225,"line_end":1225,"column_start":5,"column_end":71}},{"value":"/ your processors are). Note that we still need to do a reduce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74787,"byte_end":74851,"line_start":1226,"line_end":1226,"column_start":5,"column_end":69}},{"value":"/ afterwards to combine those groups of strings into a single","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74856,"byte_end":74919,"line_start":1227,"line_end":1227,"column_start":5,"column_end":68}},{"value":"/ string.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74924,"byte_end":74935,"line_start":1228,"line_end":1228,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74940,"byte_end":74943,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ You could use a similar trick to save partial results (e.g., a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":74948,"byte_end":75014,"line_start":1230,"line_end":1230,"column_start":5,"column_end":71}},{"value":"/ cache) or something similar.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75019,"byte_end":75051,"line_start":1231,"line_end":1231,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75056,"byte_end":75059,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ ### Combining fold with other operations","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75064,"byte_end":75108,"line_start":1233,"line_end":1233,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75113,"byte_end":75116,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ You can combine `fold` with `reduce` if you want to produce a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75121,"byte_end":75186,"line_start":1235,"line_end":1235,"column_start":5,"column_end":70}},{"value":"/ single value. This is then roughly equivalent to a map/reduce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75191,"byte_end":75256,"line_start":1236,"line_end":1236,"column_start":5,"column_end":70}},{"value":"/ combination in effect:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75261,"byte_end":75287,"line_start":1237,"line_end":1237,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75292,"byte_end":75295,"line_start":1238,"line_end":1238,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75300,"byte_end":75307,"line_start":1239,"line_end":1239,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75312,"byte_end":75338,"line_start":1240,"line_end":1240,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75343,"byte_end":75346,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75351,"byte_end":75376,"line_start":1242,"line_end":1242,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75381,"byte_end":75416,"line_start":1243,"line_end":1243,"column_start":5,"column_end":40}},{"value":"/                .fold(|| 0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75421,"byte_end":75487,"line_start":1244,"line_end":1244,"column_start":5,"column_end":71}},{"value":"/                .sum::<u32>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75492,"byte_end":75525,"line_start":1245,"line_end":1245,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75530,"byte_end":75533,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75538,"byte_end":75598,"line_start":1247,"line_end":1247,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75603,"byte_end":75610,"line_start":1248,"line_end":1248,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4767},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76547,"byte_end":76556,"line_start":1277,"line_end":1277,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::ParallelIterator::fold_with","value":"pub fn fold_with<F, T>(Self, T, F) -> FoldWith<Self, T, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies `fold_op` to the given `init` value with each item of this\n iterator, finally producing the value for further use.","sig":null,"attributes":[{"value":"/ Applies `fold_op` to the given `init` value with each item of this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75859,"byte_end":75929,"line_start":1258,"line_end":1258,"column_start":5,"column_end":75}},{"value":"/ iterator, finally producing the value for further use.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75934,"byte_end":75992,"line_start":1259,"line_end":1259,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":75997,"byte_end":76000,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"/ This works essentially like `fold(|| init.clone(), fold_op)`, except","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76005,"byte_end":76077,"line_start":1261,"line_end":1261,"column_start":5,"column_end":77}},{"value":"/ it doesn't require the `init` type to be `Sync`, nor any other form","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76082,"byte_end":76153,"line_start":1262,"line_end":1262,"column_start":5,"column_end":76}},{"value":"/ of added synchronization.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76158,"byte_end":76187,"line_start":1263,"line_end":1263,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76192,"byte_end":76195,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76200,"byte_end":76214,"line_start":1265,"line_end":1265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76219,"byte_end":76222,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76227,"byte_end":76234,"line_start":1267,"line_end":1267,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76239,"byte_end":76265,"line_start":1268,"line_end":1268,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76270,"byte_end":76273,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76278,"byte_end":76303,"line_start":1270,"line_end":1270,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76308,"byte_end":76343,"line_start":1271,"line_end":1271,"column_start":5,"column_end":40}},{"value":"/                .fold_with(0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76348,"byte_end":76416,"line_start":1272,"line_end":1272,"column_start":5,"column_end":73}},{"value":"/                .sum::<u32>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76421,"byte_end":76454,"line_start":1273,"line_end":1273,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76459,"byte_end":76462,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76467,"byte_end":76527,"line_start":1275,"line_end":1275,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76532,"byte_end":76539,"line_start":1276,"line_end":1276,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4770},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77689,"byte_end":77697,"line_start":1310,"line_end":1310,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::iter::ParallelIterator::try_fold","value":"pub fn try_fold<T, R, ID, F>(Self, ID, F) -> TryFold<Self, R, ID, F> where\nF: Fn(T, Self::Item) -> R + Sync + Send, ID: Fn() -> T + Sync + Send,\nR: Try<Output = T> + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Performs a fallible parallel fold.","sig":null,"attributes":[{"value":"/ Performs a fallible parallel fold.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76758,"byte_end":76796,"line_start":1285,"line_end":1285,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76801,"byte_end":76804,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ This is a variation of [`fold()`] for operations which can fail with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76809,"byte_end":76881,"line_start":1287,"line_end":1287,"column_start":5,"column_end":77}},{"value":"/ `Option::None` or `Result::Err`.  The first such failure stops","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76886,"byte_end":76952,"line_start":1288,"line_end":1288,"column_start":5,"column_end":71}},{"value":"/ processing the local set of items, without affecting other folds in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":76957,"byte_end":77032,"line_start":1289,"line_end":1289,"column_start":5,"column_end":80}},{"value":"/ iterator's subdivisions.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77037,"byte_end":77065,"line_start":1290,"line_end":1290,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77070,"byte_end":77073,"line_start":1291,"line_end":1291,"column_start":5,"column_end":8}},{"value":"/ Often, `try_fold()` will be followed by [`try_reduce()`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77078,"byte_end":77138,"line_start":1292,"line_end":1292,"column_start":5,"column_end":65}},{"value":"/ for a final reduction and global short-circuiting effect.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77143,"byte_end":77204,"line_start":1293,"line_end":1293,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77209,"byte_end":77212,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ [`fold()`]: #method.fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77217,"byte_end":77245,"line_start":1295,"line_end":1295,"column_start":5,"column_end":33}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77250,"byte_end":77290,"line_start":1296,"line_end":1296,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77295,"byte_end":77298,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77303,"byte_end":77317,"line_start":1298,"line_end":1298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77322,"byte_end":77325,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77330,"byte_end":77337,"line_start":1300,"line_end":1300,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77342,"byte_end":77368,"line_start":1301,"line_end":1301,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77373,"byte_end":77376,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77381,"byte_end":77406,"line_start":1303,"line_end":1303,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77411,"byte_end":77446,"line_start":1304,"line_end":1304,"column_start":5,"column_end":40}},{"value":"/                .try_fold(|| 0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77451,"byte_end":77530,"line_start":1305,"line_end":1305,"column_start":5,"column_end":84}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77535,"byte_end":77590,"line_start":1306,"line_end":1306,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77595,"byte_end":77598,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77603,"byte_end":77669,"line_start":1308,"line_end":1308,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77674,"byte_end":77681,"line_start":1309,"line_end":1309,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4775},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78621,"byte_end":78634,"line_start":1337,"line_end":1337,"column_start":8,"column_end":21},"name":"try_fold_with","qualname":"::iter::ParallelIterator::try_fold_with","value":"pub fn try_fold_with<F, T, R>(Self, T, F) -> TryFoldWith<Self, R, F> where\nF: Fn(T, Self::Item) -> R + Sync + Send, R: Try<Output = T> + Send, T: Clone +\nSend","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Performs a fallible parallel fold with a cloneable `init` value.","sig":null,"attributes":[{"value":"/ Performs a fallible parallel fold with a cloneable `init` value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":77964,"byte_end":78032,"line_start":1319,"line_end":1319,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78037,"byte_end":78040,"line_start":1320,"line_end":1320,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`fold_with()`] and the failure","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78045,"byte_end":78118,"line_start":1321,"line_end":1321,"column_start":5,"column_end":78}},{"value":"/ semantics of [`try_fold()`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78123,"byte_end":78155,"line_start":1322,"line_end":1322,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78160,"byte_end":78163,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ [`fold_with()`]: #method.fold_with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78168,"byte_end":78206,"line_start":1324,"line_end":1324,"column_start":5,"column_end":43}},{"value":"/ [`try_fold()`]: #method.try_fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78211,"byte_end":78247,"line_start":1325,"line_end":1325,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78252,"byte_end":78255,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78260,"byte_end":78267,"line_start":1327,"line_end":1327,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78272,"byte_end":78298,"line_start":1328,"line_end":1328,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78303,"byte_end":78306,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78311,"byte_end":78336,"line_start":1330,"line_end":1330,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78341,"byte_end":78376,"line_start":1331,"line_end":1331,"column_start":5,"column_end":40}},{"value":"/                .try_fold_with(0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78381,"byte_end":78462,"line_start":1332,"line_end":1332,"column_start":5,"column_end":86}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78467,"byte_end":78522,"line_start":1333,"line_end":1333,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78527,"byte_end":78530,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78535,"byte_end":78601,"line_start":1335,"line_end":1335,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78606,"byte_end":78613,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4779},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79663,"byte_end":79666,"line_start":1370,"line_end":1370,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::ParallelIterator::sum","value":"pub fn sum<S>(Self) -> S where S: Send + Sum<Self::Item> + Sum<S>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Sums up the items in the iterator.","sig":null,"attributes":[{"value":"/ Sums up the items in the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78880,"byte_end":78918,"line_start":1346,"line_end":1346,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78923,"byte_end":78926,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":78931,"byte_end":78997,"line_start":1348,"line_end":1348,"column_start":5,"column_end":71}},{"value":"/ so if the `+` operator is not truly [associative] \\(as is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79002,"byte_end":79067,"line_start":1349,"line_end":1349,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79072,"byte_end":79134,"line_start":1350,"line_end":1350,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79139,"byte_end":79163,"line_start":1351,"line_end":1351,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79168,"byte_end":79171,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79176,"byte_end":79245,"line_start":1353,"line_end":1353,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79250,"byte_end":79253,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 0, |a, b| a + b)`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79258,"byte_end":79320,"line_start":1355,"line_end":1355,"column_start":5,"column_end":67}},{"value":"/ except that the type of `0` and the `+` operation may vary","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79325,"byte_end":79387,"line_start":1356,"line_end":1356,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79392,"byte_end":79442,"line_start":1357,"line_end":1357,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79447,"byte_end":79450,"line_start":1358,"line_end":1358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79455,"byte_end":79469,"line_start":1359,"line_end":1359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79474,"byte_end":79477,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79482,"byte_end":79489,"line_start":1361,"line_end":1361,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79494,"byte_end":79520,"line_start":1362,"line_end":1362,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79525,"byte_end":79528,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 5, 7];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79533,"byte_end":79555,"line_start":1364,"line_end":1364,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79560,"byte_end":79563,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ let sum: i32 = a.par_iter().sum();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79568,"byte_end":79606,"line_start":1366,"line_end":1366,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79611,"byte_end":79614,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, 13);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79619,"byte_end":79643,"line_start":1368,"line_end":1368,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79648,"byte_end":79655,"line_start":1369,"line_end":1369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4781},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80665,"byte_end":80672,"line_start":1403,"line_end":1403,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::ParallelIterator::product","value":"pub fn product<P>(Self) -> P where P: Send + Product<Self::Item> + Product<P>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Multiplies all the items in the iterator.","sig":null,"attributes":[{"value":"/ Multiplies all the items in the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79775,"byte_end":79820,"line_start":1377,"line_end":1377,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79825,"byte_end":79828,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79833,"byte_end":79899,"line_start":1379,"line_end":1379,"column_start":5,"column_end":71}},{"value":"/ so if the `*` operator is not truly [associative] \\(as is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79904,"byte_end":79969,"line_start":1380,"line_end":1380,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":79974,"byte_end":80036,"line_start":1381,"line_end":1381,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80041,"byte_end":80065,"line_start":1382,"line_end":1382,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80070,"byte_end":80073,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80078,"byte_end":80147,"line_start":1384,"line_end":1384,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80152,"byte_end":80155,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 1, |a, b| a * b)`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80160,"byte_end":80222,"line_start":1386,"line_end":1386,"column_start":5,"column_end":67}},{"value":"/ except that the type of `1` and the `*` operation may vary","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80227,"byte_end":80289,"line_start":1387,"line_end":1387,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80294,"byte_end":80344,"line_start":1388,"line_end":1388,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80349,"byte_end":80352,"line_start":1389,"line_end":1389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80357,"byte_end":80371,"line_start":1390,"line_end":1390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80376,"byte_end":80379,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80384,"byte_end":80391,"line_start":1392,"line_end":1392,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80396,"byte_end":80422,"line_start":1393,"line_end":1393,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80427,"byte_end":80430,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ fn factorial(n: u32) -> u32 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80435,"byte_end":80468,"line_start":1395,"line_end":1395,"column_start":5,"column_end":38}},{"value":"/    (1..n+1).into_par_iter().product()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80473,"byte_end":80514,"line_start":1396,"line_end":1396,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80519,"byte_end":80524,"line_start":1397,"line_end":1397,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80529,"byte_end":80532,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(factorial(0), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80537,"byte_end":80569,"line_start":1399,"line_end":1399,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(1), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80574,"byte_end":80606,"line_start":1400,"line_end":1400,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(5), 120);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80611,"byte_end":80645,"line_start":1401,"line_end":1401,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80650,"byte_end":80657,"line_start":1402,"line_end":1402,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4783},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81515,"byte_end":81518,"line_start":1433,"line_end":1433,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::ParallelIterator::min","value":"pub fn min(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(min)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator. If the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80797,"byte_end":80862,"line_start":1410,"line_end":1410,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(min)`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80867,"byte_end":80932,"line_start":1411,"line_end":1411,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80937,"byte_end":80953,"line_start":1412,"line_end":1412,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80958,"byte_end":80961,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":80966,"byte_end":81031,"line_start":1414,"line_end":1414,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81036,"byte_end":81102,"line_start":1415,"line_end":1415,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81107,"byte_end":81145,"line_start":1416,"line_end":1416,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81150,"byte_end":81153,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::min(a, b))`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81158,"byte_end":81228,"line_start":1418,"line_end":1418,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81233,"byte_end":81236,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81241,"byte_end":81255,"line_start":1420,"line_end":1420,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81260,"byte_end":81263,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81268,"byte_end":81275,"line_start":1422,"line_end":1422,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81280,"byte_end":81306,"line_start":1423,"line_end":1423,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81311,"byte_end":81314,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81319,"byte_end":81344,"line_start":1425,"line_end":1425,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81349,"byte_end":81352,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min(), Some(&32));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81357,"byte_end":81403,"line_start":1427,"line_end":1427,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81408,"byte_end":81411,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81416,"byte_end":81441,"line_start":1429,"line_end":1429,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81446,"byte_end":81449,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().min(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81454,"byte_end":81495,"line_start":1431,"line_end":1431,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81500,"byte_end":81507,"line_start":1432,"line_end":1432,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4784},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82257,"byte_end":82263,"line_start":1457,"line_end":1457,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::ParallelIterator::min_by","value":"pub fn min_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nFn(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator with respect to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81634,"byte_end":81707,"line_start":1440,"line_end":1440,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81712,"byte_end":81782,"line_start":1441,"line_end":1441,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81787,"byte_end":81836,"line_start":1442,"line_end":1442,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81841,"byte_end":81844,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81849,"byte_end":81914,"line_start":1444,"line_end":1444,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81919,"byte_end":81988,"line_start":1445,"line_end":1445,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":81993,"byte_end":82031,"line_start":1446,"line_end":1446,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82036,"byte_end":82039,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82044,"byte_end":82058,"line_start":1448,"line_end":1448,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82063,"byte_end":82066,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82071,"byte_end":82078,"line_start":1450,"line_end":1450,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82083,"byte_end":82109,"line_start":1451,"line_end":1451,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82114,"byte_end":82117,"line_start":1452,"line_end":1452,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82122,"byte_end":82160,"line_start":1453,"line_end":1453,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82165,"byte_end":82168,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by(|x, y| x.cmp(y)), Some(&-3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82173,"byte_end":82237,"line_start":1455,"line_end":1455,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82242,"byte_end":82249,"line_start":1456,"line_end":1456,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4791},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83231,"byte_end":83241,"line_start":1488,"line_end":1488,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::ParallelIterator::min_by_key","value":"pub fn min_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + Fn(&Self::Item) -> K","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Computes the item that yields the minimum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the minimum value for the given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82633,"byte_end":82698,"line_start":1471,"line_end":1471,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82703,"byte_end":82762,"line_start":1472,"line_end":1472,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82767,"byte_end":82807,"line_start":1473,"line_end":1473,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82812,"byte_end":82815,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82820,"byte_end":82885,"line_start":1475,"line_end":1475,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82890,"byte_end":82956,"line_start":1476,"line_end":1476,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":82961,"byte_end":82999,"line_start":1477,"line_end":1477,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83004,"byte_end":83007,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83012,"byte_end":83026,"line_start":1479,"line_end":1479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83031,"byte_end":83034,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83039,"byte_end":83046,"line_start":1481,"line_end":1481,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83051,"byte_end":83077,"line_start":1482,"line_end":1482,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83082,"byte_end":83085,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83090,"byte_end":83135,"line_start":1484,"line_end":1484,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83140,"byte_end":83143,"line_start":1485,"line_end":1485,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by_key(|x| x.abs()), Some(&2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83148,"byte_end":83211,"line_start":1486,"line_end":1486,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83216,"byte_end":83223,"line_start":1487,"line_end":1487,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4803},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84474,"byte_end":84477,"line_start":1531,"line_end":1531,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::ParallelIterator::max","value":"pub fn max(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(max)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator. If the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83756,"byte_end":83821,"line_start":1508,"line_end":1508,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(max)`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83826,"byte_end":83891,"line_start":1509,"line_end":1509,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83896,"byte_end":83912,"line_start":1510,"line_end":1510,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83917,"byte_end":83920,"line_start":1511,"line_end":1511,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83925,"byte_end":83990,"line_start":1512,"line_end":1512,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":83995,"byte_end":84061,"line_start":1513,"line_end":1513,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84066,"byte_end":84104,"line_start":1514,"line_end":1514,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84109,"byte_end":84112,"line_start":1515,"line_end":1515,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::max(a, b))`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84117,"byte_end":84187,"line_start":1516,"line_end":1516,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84192,"byte_end":84195,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84200,"byte_end":84214,"line_start":1518,"line_end":1518,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84219,"byte_end":84222,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84227,"byte_end":84234,"line_start":1520,"line_end":1520,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84239,"byte_end":84265,"line_start":1521,"line_end":1521,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84270,"byte_end":84273,"line_start":1522,"line_end":1522,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84278,"byte_end":84303,"line_start":1523,"line_end":1523,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84308,"byte_end":84311,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max(), Some(&74));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84316,"byte_end":84362,"line_start":1525,"line_end":1525,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84367,"byte_end":84370,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84375,"byte_end":84400,"line_start":1527,"line_end":1527,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84405,"byte_end":84408,"line_start":1528,"line_end":1528,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().max(), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84413,"byte_end":84454,"line_start":1529,"line_end":1529,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84459,"byte_end":84466,"line_start":1530,"line_end":1530,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4804},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85230,"byte_end":85236,"line_start":1555,"line_end":1555,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::ParallelIterator::max_by","value":"pub fn max_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nFn(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator with respect to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84593,"byte_end":84666,"line_start":1538,"line_end":1538,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84671,"byte_end":84741,"line_start":1539,"line_end":1539,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84746,"byte_end":84795,"line_start":1540,"line_end":1540,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84800,"byte_end":84803,"line_start":1541,"line_end":1541,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84808,"byte_end":84873,"line_start":1542,"line_end":1542,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84878,"byte_end":84947,"line_start":1543,"line_end":1543,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84952,"byte_end":84990,"line_start":1544,"line_end":1544,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":84995,"byte_end":84998,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85003,"byte_end":85017,"line_start":1546,"line_end":1546,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85022,"byte_end":85025,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85030,"byte_end":85037,"line_start":1548,"line_end":1548,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85042,"byte_end":85068,"line_start":1549,"line_end":1549,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85073,"byte_end":85076,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85081,"byte_end":85119,"line_start":1551,"line_end":1551,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85124,"byte_end":85127,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by(|x, y| x.abs().cmp(&y.abs())), Some(&240));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85132,"byte_end":85210,"line_start":1553,"line_end":1553,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85215,"byte_end":85222,"line_start":1554,"line_end":1554,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4811},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86205,"byte_end":86215,"line_start":1586,"line_end":1586,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::ParallelIterator::max_by_key","value":"pub fn max_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + Fn(&Self::Item) -> K","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Computes the item that yields the maximum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the maximum value for the given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85606,"byte_end":85671,"line_start":1569,"line_end":1569,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85676,"byte_end":85735,"line_start":1570,"line_end":1570,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85740,"byte_end":85780,"line_start":1571,"line_end":1571,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85785,"byte_end":85788,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85793,"byte_end":85858,"line_start":1573,"line_end":1573,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85863,"byte_end":85929,"line_start":1574,"line_end":1574,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85934,"byte_end":85972,"line_start":1575,"line_end":1575,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85977,"byte_end":85980,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":85985,"byte_end":85999,"line_start":1577,"line_end":1577,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86004,"byte_end":86007,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86012,"byte_end":86019,"line_start":1579,"line_end":1579,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86024,"byte_end":86050,"line_start":1580,"line_end":1580,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86055,"byte_end":86058,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86063,"byte_end":86108,"line_start":1582,"line_end":1582,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86113,"byte_end":86116,"line_start":1583,"line_end":1583,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by_key(|x| x.abs()), Some(&34));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86121,"byte_end":86185,"line_start":1584,"line_end":1584,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86190,"byte_end":86197,"line_start":1585,"line_end":1585,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4823},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87146,"byte_end":87151,"line_start":1622,"line_end":1622,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::ParallelIterator::chain","value":"pub fn chain<C>(Self, C) -> Chain<Self, C::Iter> where\nC: IntoParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Takes two iterators and creates a new iterator over both.","sig":null,"attributes":[{"value":"/ Takes two iterators and creates a new iterator over both.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86730,"byte_end":86791,"line_start":1606,"line_end":1606,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86796,"byte_end":86799,"line_start":1607,"line_end":1607,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86804,"byte_end":86818,"line_start":1608,"line_end":1608,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86823,"byte_end":86826,"line_start":1609,"line_end":1609,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86831,"byte_end":86838,"line_start":1610,"line_end":1610,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86843,"byte_end":86869,"line_start":1611,"line_end":1611,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86874,"byte_end":86877,"line_start":1612,"line_end":1612,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 1, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86882,"byte_end":86904,"line_start":1613,"line_end":1613,"column_start":5,"column_end":27}},{"value":"/ let b = [9, 8, 7];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86909,"byte_end":86931,"line_start":1614,"line_end":1614,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86936,"byte_end":86939,"line_start":1615,"line_end":1615,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().chain(b.par_iter());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":86944,"byte_end":86996,"line_start":1616,"line_end":1616,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87001,"byte_end":87004,"line_start":1617,"line_end":1617,"column_start":5,"column_end":8}},{"value":"/ let chained: Vec<_> = par_iter.cloned().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87009,"byte_end":87063,"line_start":1618,"line_end":1618,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87068,"byte_end":87071,"line_start":1619,"line_end":1619,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&chained[..], &[0, 1, 2, 9, 8, 7]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87076,"byte_end":87126,"line_start":1620,"line_end":1620,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87131,"byte_end":87138,"line_start":1621,"line_end":1621,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4825},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88245,"byte_end":88253,"line_start":1652,"line_end":1652,"column_start":8,"column_end":16},"name":"find_any","qualname":"::iter::ParallelIterator::find_any","value":"pub fn find_any<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate and returns it. This operation\n is similar to [`find` on sequential iterators][find] but\n the item returned may not be the **first** one in the parallel\n sequence which matches, since we search the entire sequence in parallel.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87322,"byte_end":87382,"line_start":1629,"line_end":1629,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate and returns it. This operation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87387,"byte_end":87449,"line_start":1630,"line_end":1630,"column_start":5,"column_end":67}},{"value":"/ is similar to [`find` on sequential iterators][find] but","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87454,"byte_end":87514,"line_start":1631,"line_end":1631,"column_start":5,"column_end":65}},{"value":"/ the item returned may not be the **first** one in the parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87519,"byte_end":87585,"line_start":1632,"line_end":1632,"column_start":5,"column_end":71}},{"value":"/ sequence which matches, since we search the entire sequence in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87590,"byte_end":87666,"line_start":1633,"line_end":1633,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87671,"byte_end":87674,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, we will attempt to stop processing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87679,"byte_end":87740,"line_start":1635,"line_end":1635,"column_start":5,"column_end":66}},{"value":"/ the rest of the items in the iterator as soon as possible","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87745,"byte_end":87806,"line_start":1636,"line_end":1636,"column_start":5,"column_end":66}},{"value":"/ (just as `find` stops iterating once a match is found).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87811,"byte_end":87870,"line_start":1637,"line_end":1637,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87875,"byte_end":87878,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ [find]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87883,"byte_end":87961,"line_start":1639,"line_end":1639,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87966,"byte_end":87969,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87974,"byte_end":87988,"line_start":1641,"line_end":1641,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":87993,"byte_end":87996,"line_start":1642,"line_end":1642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88001,"byte_end":88008,"line_start":1643,"line_end":1643,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88013,"byte_end":88039,"line_start":1644,"line_end":1644,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88044,"byte_end":88047,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88052,"byte_end":88077,"line_start":1646,"line_end":1646,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88082,"byte_end":88085,"line_start":1647,"line_end":1647,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88090,"byte_end":88152,"line_start":1648,"line_end":1648,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88157,"byte_end":88160,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 100), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88165,"byte_end":88225,"line_start":1650,"line_end":1650,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88230,"byte_end":88237,"line_start":1651,"line_end":1651,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4827},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89292,"byte_end":89302,"line_start":1682,"line_end":1682,"column_start":8,"column_end":18},"name":"find_first","qualname":"::iter::ParallelIterator::find_first","value":"pub fn find_first<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item)\n-> bool + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88412,"byte_end":88485,"line_start":1659,"line_end":1659,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88490,"byte_end":88542,"line_start":1660,"line_end":1660,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88547,"byte_end":88550,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the right of the match","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88555,"byte_end":88620,"line_start":1662,"line_end":1662,"column_start":5,"column_end":70}},{"value":"/ will be stopped, while attempts to the left must continue in case","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88625,"byte_end":88694,"line_start":1663,"line_end":1663,"column_start":5,"column_end":74}},{"value":"/ an earlier match is found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88699,"byte_end":88729,"line_start":1664,"line_end":1664,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88734,"byte_end":88737,"line_start":1665,"line_end":1665,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88742,"byte_end":88813,"line_start":1666,"line_end":1666,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88818,"byte_end":88889,"line_start":1667,"line_end":1667,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88894,"byte_end":88965,"line_start":1668,"line_end":1668,"column_start":5,"column_end":76}},{"value":"/ `find_any` is a better choice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":88970,"byte_end":89004,"line_start":1669,"line_end":1669,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89009,"byte_end":89012,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89017,"byte_end":89031,"line_start":1671,"line_end":1671,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89036,"byte_end":89039,"line_start":1672,"line_end":1672,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89044,"byte_end":89051,"line_start":1673,"line_end":1673,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89056,"byte_end":89082,"line_start":1674,"line_end":1674,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89087,"byte_end":89090,"line_start":1675,"line_end":1675,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89095,"byte_end":89120,"line_start":1676,"line_end":1676,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89125,"byte_end":89128,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89133,"byte_end":89197,"line_start":1678,"line_end":1678,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89202,"byte_end":89205,"line_start":1679,"line_end":1679,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 100), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89210,"byte_end":89272,"line_start":1680,"line_end":1680,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89277,"byte_end":89284,"line_start":1681,"line_end":1681,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4829},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90315,"byte_end":90324,"line_start":1711,"line_end":1711,"column_start":8,"column_end":17},"name":"find_last","qualname":"::iter::ParallelIterator::find_last","value":"pub fn find_last<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89478,"byte_end":89550,"line_start":1689,"line_end":1689,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89555,"byte_end":89607,"line_start":1690,"line_end":1690,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89612,"byte_end":89615,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the left of the match","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89620,"byte_end":89684,"line_start":1692,"line_end":1692,"column_start":5,"column_end":69}},{"value":"/ will be stopped, while attempts to the right must continue in case","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89689,"byte_end":89759,"line_start":1693,"line_end":1693,"column_start":5,"column_end":75}},{"value":"/ a later match is found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89764,"byte_end":89791,"line_start":1694,"line_end":1694,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89796,"byte_end":89799,"line_start":1695,"line_end":1695,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89804,"byte_end":89875,"line_start":1696,"line_end":1696,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89880,"byte_end":89952,"line_start":1697,"line_end":1697,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `find_any` is a better choice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":89957,"byte_end":90029,"line_start":1698,"line_end":1698,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90034,"byte_end":90037,"line_start":1699,"line_end":1699,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90042,"byte_end":90056,"line_start":1700,"line_end":1700,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90061,"byte_end":90064,"line_start":1701,"line_end":1701,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90069,"byte_end":90076,"line_start":1702,"line_end":1702,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90081,"byte_end":90107,"line_start":1703,"line_end":1703,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90112,"byte_end":90115,"line_start":1704,"line_end":1704,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90120,"byte_end":90145,"line_start":1705,"line_end":1705,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90150,"byte_end":90153,"line_start":1706,"line_end":1706,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90158,"byte_end":90221,"line_start":1707,"line_end":1707,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90226,"byte_end":90229,"line_start":1708,"line_end":1708,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 100), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90234,"byte_end":90295,"line_start":1709,"line_end":1709,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90300,"byte_end":90307,"line_start":1710,"line_end":1710,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4831},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91401,"byte_end":91413,"line_start":1741,"line_end":1741,"column_start":8,"column_end":20},"name":"find_map_any","qualname":"::iter::ParallelIterator::find_map_any","value":"pub fn find_map_any<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator\n and returns **any** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90499,"byte_end":90568,"line_start":1718,"line_end":1718,"column_start":5,"column_end":74}},{"value":"/ and returns **any** non-None result of the map operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90573,"byte_end":90634,"line_start":1719,"line_end":1719,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90639,"byte_end":90642,"line_start":1720,"line_end":1720,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, we will","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90647,"byte_end":90716,"line_start":1721,"line_end":1721,"column_start":5,"column_end":74}},{"value":"/ attempt to stop processing the rest of the items in the iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90721,"byte_end":90789,"line_start":1722,"line_end":1722,"column_start":5,"column_end":73}},{"value":"/ as soon as possible.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90794,"byte_end":90818,"line_start":1723,"line_end":1723,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90823,"byte_end":90826,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ Note that this method only returns **some** item in the parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90831,"byte_end":90899,"line_start":1725,"line_end":1725,"column_start":5,"column_end":73}},{"value":"/ iterator that is not None from the map predicate. The item returned","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90904,"byte_end":90975,"line_start":1726,"line_end":1726,"column_start":5,"column_end":76}},{"value":"/ may not be the **first** non-None value produced in the parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":90980,"byte_end":91048,"line_start":1727,"line_end":1727,"column_start":5,"column_end":73}},{"value":"/ sequence, since the entire sequence is mapped over in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91053,"byte_end":91120,"line_start":1728,"line_end":1728,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91125,"byte_end":91128,"line_start":1729,"line_end":1729,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91133,"byte_end":91147,"line_start":1730,"line_end":1730,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91152,"byte_end":91155,"line_start":1731,"line_end":1731,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91160,"byte_end":91167,"line_start":1732,"line_end":1732,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91172,"byte_end":91198,"line_start":1733,"line_end":1733,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91203,"byte_end":91206,"line_start":1734,"line_end":1734,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"5\", \"5\"];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91211,"byte_end":91248,"line_start":1735,"line_end":1735,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91253,"byte_end":91256,"line_start":1736,"line_end":1736,"column_start":5,"column_end":8}},{"value":"/ let found_number = c.par_iter().find_map_any(|s| s.parse().ok());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91261,"byte_end":91330,"line_start":1737,"line_end":1737,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91335,"byte_end":91338,"line_start":1738,"line_end":1738,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(found_number, Some(5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91343,"byte_end":91381,"line_start":1739,"line_end":1739,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91386,"byte_end":91393,"line_start":1740,"line_end":1740,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4836},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92603,"byte_end":92617,"line_start":1775,"line_end":1775,"column_start":8,"column_end":22},"name":"find_map_first","qualname":"::iter::ParallelIterator::find_map_first","value":"pub fn find_map_first<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **first** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91662,"byte_end":91735,"line_start":1752,"line_end":1752,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **first** non-None result of the map operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91740,"byte_end":91816,"line_start":1753,"line_end":1753,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91821,"byte_end":91824,"line_start":1754,"line_end":1754,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91829,"byte_end":91903,"line_start":1755,"line_end":1755,"column_start":5,"column_end":79}},{"value":"/ to the right of the match will be stopped, while attempts to the left","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91908,"byte_end":91981,"line_start":1756,"line_end":1756,"column_start":5,"column_end":78}},{"value":"/ must continue in case an earlier match is found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":91986,"byte_end":92038,"line_start":1757,"line_end":1757,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92043,"byte_end":92046,"line_start":1758,"line_end":1758,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92051,"byte_end":92122,"line_start":1759,"line_end":1759,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92127,"byte_end":92197,"line_start":1760,"line_end":1760,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92202,"byte_end":92277,"line_start":1761,"line_end":1761,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92282,"byte_end":92320,"line_start":1762,"line_end":1762,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92325,"byte_end":92328,"line_start":1763,"line_end":1763,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92333,"byte_end":92347,"line_start":1764,"line_end":1764,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92352,"byte_end":92355,"line_start":1765,"line_end":1765,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92360,"byte_end":92367,"line_start":1766,"line_end":1766,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92372,"byte_end":92398,"line_start":1767,"line_end":1767,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92403,"byte_end":92406,"line_start":1768,"line_end":1768,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92411,"byte_end":92448,"line_start":1769,"line_end":1769,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92453,"byte_end":92456,"line_start":1770,"line_end":1770,"column_start":5,"column_end":8}},{"value":"/ let first_number = c.par_iter().find_map_first(|s| s.parse().ok());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92461,"byte_end":92532,"line_start":1771,"line_end":1771,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92537,"byte_end":92540,"line_start":1772,"line_end":1772,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first_number, Some(2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92545,"byte_end":92583,"line_start":1773,"line_end":1773,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92588,"byte_end":92595,"line_start":1774,"line_end":1774,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4841},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93802,"byte_end":93815,"line_start":1809,"line_end":1809,"column_start":8,"column_end":21},"name":"find_map_last","qualname":"::iter::ParallelIterator::find_map_last","value":"pub fn find_map_last<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **last** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92868,"byte_end":92941,"line_start":1786,"line_end":1786,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **last** non-None result of the map operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":92946,"byte_end":93021,"line_start":1787,"line_end":1787,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93026,"byte_end":93029,"line_start":1788,"line_end":1788,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93034,"byte_end":93108,"line_start":1789,"line_end":1789,"column_start":5,"column_end":79}},{"value":"/ to the left of the match will be stopped, while attempts to the right","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93113,"byte_end":93186,"line_start":1790,"line_end":1790,"column_start":5,"column_end":78}},{"value":"/ must continue in case a later match is found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93191,"byte_end":93240,"line_start":1791,"line_end":1791,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93245,"byte_end":93248,"line_start":1792,"line_end":1792,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93253,"byte_end":93324,"line_start":1793,"line_end":1793,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93329,"byte_end":93399,"line_start":1794,"line_end":1794,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93404,"byte_end":93479,"line_start":1795,"line_end":1795,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93484,"byte_end":93522,"line_start":1796,"line_end":1796,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93527,"byte_end":93530,"line_start":1797,"line_end":1797,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93535,"byte_end":93549,"line_start":1798,"line_end":1798,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93554,"byte_end":93557,"line_start":1799,"line_end":1799,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93562,"byte_end":93569,"line_start":1800,"line_end":1800,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93574,"byte_end":93600,"line_start":1801,"line_end":1801,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93605,"byte_end":93608,"line_start":1802,"line_end":1802,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93613,"byte_end":93650,"line_start":1803,"line_end":1803,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93655,"byte_end":93658,"line_start":1804,"line_end":1804,"column_start":5,"column_end":8}},{"value":"/ let last_number = c.par_iter().find_map_last(|s| s.parse().ok());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93663,"byte_end":93732,"line_start":1805,"line_end":1805,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93737,"byte_end":93740,"line_start":1806,"line_end":1806,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(last_number, Some(5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93745,"byte_end":93782,"line_start":1807,"line_end":1807,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":93787,"byte_end":93794,"line_start":1808,"line_end":1808,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4846},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94232,"byte_end":94236,"line_start":1823,"line_end":1823,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::ParallelIterator::find","value":"pub fn find<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n\"parallel `find` does not search in order -- use `find_any`, \\\\\n                         `find_first`, or `find_last`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94084,"byte_end":94224,"line_start":1821,"line_end":1822,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4848},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94941,"byte_end":94944,"line_start":1847,"line_end":1847,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::ParallelIterator::any","value":"pub fn any<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and if so returns true.  Once\n a match is found, we'll attempt to stop process the rest\n of the items.  Proving that there's no match, returning false,\n does require visiting every item.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94392,"byte_end":94452,"line_start":1830,"line_end":1830,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and if so returns true.  Once","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94457,"byte_end":94519,"line_start":1831,"line_end":1831,"column_start":5,"column_end":67}},{"value":"/ a match is found, we'll attempt to stop process the rest","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94524,"byte_end":94584,"line_start":1832,"line_end":1832,"column_start":5,"column_end":65}},{"value":"/ of the items.  Proving that there's no match, returning false,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94589,"byte_end":94655,"line_start":1833,"line_end":1833,"column_start":5,"column_end":71}},{"value":"/ does require visiting every item.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94660,"byte_end":94697,"line_start":1834,"line_end":1834,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94702,"byte_end":94705,"line_start":1835,"line_end":1835,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94710,"byte_end":94724,"line_start":1836,"line_end":1836,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94729,"byte_end":94732,"line_start":1837,"line_end":1837,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94737,"byte_end":94744,"line_start":1838,"line_end":1838,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94749,"byte_end":94775,"line_start":1839,"line_end":1839,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94780,"byte_end":94783,"line_start":1840,"line_end":1840,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94788,"byte_end":94824,"line_start":1841,"line_end":1841,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94829,"byte_end":94832,"line_start":1842,"line_end":1842,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().any(|&x| x > 10);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94837,"byte_end":94886,"line_start":1843,"line_end":1843,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94891,"byte_end":94894,"line_start":1844,"line_end":1844,"column_start":5,"column_end":8}},{"value":"/ assert!(is_valid);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94899,"byte_end":94921,"line_start":1845,"line_end":1845,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":94926,"byte_end":94933,"line_start":1846,"line_end":1846,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4850},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95572,"byte_end":95575,"line_start":1869,"line_end":1869,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::ParallelIterator::all","value":"pub fn all<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Tests that every item in the parallel iterator matches the given\n predicate, and if so returns true.  If a counter-example is found,\n we'll attempt to stop processing more items, then return false.","sig":null,"attributes":[{"value":"/ Tests that every item in the parallel iterator matches the given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95112,"byte_end":95180,"line_start":1854,"line_end":1854,"column_start":5,"column_end":73}},{"value":"/ predicate, and if so returns true.  If a counter-example is found,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95185,"byte_end":95255,"line_start":1855,"line_end":1855,"column_start":5,"column_end":75}},{"value":"/ we'll attempt to stop processing more items, then return false.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95260,"byte_end":95327,"line_start":1856,"line_end":1856,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95332,"byte_end":95335,"line_start":1857,"line_end":1857,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95340,"byte_end":95354,"line_start":1858,"line_end":1858,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95359,"byte_end":95362,"line_start":1859,"line_end":1859,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95367,"byte_end":95374,"line_start":1860,"line_end":1860,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95379,"byte_end":95405,"line_start":1861,"line_end":1861,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95410,"byte_end":95413,"line_start":1862,"line_end":1862,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95418,"byte_end":95454,"line_start":1863,"line_end":1863,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95459,"byte_end":95462,"line_start":1864,"line_end":1864,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().all(|&x| x > 10);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95467,"byte_end":95516,"line_start":1865,"line_end":1865,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95521,"byte_end":95524,"line_start":1866,"line_end":1866,"column_start":5,"column_end":8}},{"value":"/ assert!(!is_valid);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95529,"byte_end":95552,"line_start":1867,"line_end":1867,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95557,"byte_end":95564,"line_start":1868,"line_end":1868,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4853},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96557,"byte_end":96567,"line_start":1903,"line_end":1903,"column_start":8,"column_end":18},"name":"while_some","qualname":"::iter::ParallelIterator::while_some","value":"pub fn while_some<T>(Self) -> WhileSome<Self> where\nSelf: ParallelIterator<Item = Option<T>>, T: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Creates an iterator over the `Some` items of this iterator, halting\n as soon as any `None` is found.","sig":null,"attributes":[{"value":"/ Creates an iterator over the `Some` items of this iterator, halting","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95824,"byte_end":95895,"line_start":1881,"line_end":1881,"column_start":5,"column_end":76}},{"value":"/ as soon as any `None` is found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95900,"byte_end":95935,"line_start":1882,"line_end":1882,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95940,"byte_end":95943,"line_start":1883,"line_end":1883,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95948,"byte_end":95962,"line_start":1884,"line_end":1884,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95967,"byte_end":95970,"line_start":1885,"line_end":1885,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95975,"byte_end":95982,"line_start":1886,"line_end":1886,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":95987,"byte_end":96013,"line_start":1887,"line_end":1887,"column_start":5,"column_end":31}},{"value":"/ use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96018,"byte_end":96069,"line_start":1888,"line_end":1888,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96074,"byte_end":96077,"line_start":1889,"line_end":1889,"column_start":5,"column_end":8}},{"value":"/ let counter = AtomicUsize::new(0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96082,"byte_end":96120,"line_start":1890,"line_end":1890,"column_start":5,"column_end":43}},{"value":"/ let value = (0_i32..2048)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96125,"byte_end":96154,"line_start":1891,"line_end":1891,"column_start":5,"column_end":34}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96159,"byte_end":96183,"line_start":1892,"line_end":1892,"column_start":5,"column_end":29}},{"value":"/     .map(|x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96188,"byte_end":96206,"line_start":1893,"line_end":1893,"column_start":5,"column_end":23}},{"value":"/              counter.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96211,"byte_end":96267,"line_start":1894,"line_end":1894,"column_start":5,"column_end":61}},{"value":"/              if x < 1024 { Some(x) } else { None }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96272,"byte_end":96326,"line_start":1895,"line_end":1895,"column_start":5,"column_end":59}},{"value":"/          })","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96331,"byte_end":96346,"line_start":1896,"line_end":1896,"column_start":5,"column_end":20}},{"value":"/     .while_some()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96351,"byte_end":96372,"line_start":1897,"line_end":1897,"column_start":5,"column_end":26}},{"value":"/     .max();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96377,"byte_end":96392,"line_start":1898,"line_end":1898,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96397,"byte_end":96400,"line_start":1899,"line_end":1899,"column_start":5,"column_end":8}},{"value":"/ assert!(value < Some(1024));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96405,"byte_end":96437,"line_start":1900,"line_end":1900,"column_start":5,"column_end":37}},{"value":"/ assert!(counter.load(Ordering::SeqCst) < 2048); // should not have visited every single one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96442,"byte_end":96537,"line_start":1901,"line_end":1901,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96542,"byte_end":96549,"line_start":1902,"line_end":1902,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4855},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97878,"byte_end":97888,"line_start":1941,"line_end":1941,"column_start":8,"column_end":18},"name":"panic_fuse","qualname":"::iter::ParallelIterator::panic_fuse","value":"pub fn panic_fuse(Self) -> PanicFuse<Self>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Wraps an iterator with a fuse in case of panics, to halt all threads\n as soon as possible.","sig":null,"attributes":[{"value":"/ Wraps an iterator with a fuse in case of panics, to halt all threads","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96719,"byte_end":96791,"line_start":1911,"line_end":1911,"column_start":5,"column_end":77}},{"value":"/ as soon as possible.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96796,"byte_end":96820,"line_start":1912,"line_end":1912,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96825,"byte_end":96828,"line_start":1913,"line_end":1913,"column_start":5,"column_end":8}},{"value":"/ Panics within parallel iterators are always propagated to the caller,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96833,"byte_end":96906,"line_start":1914,"line_end":1914,"column_start":5,"column_end":78}},{"value":"/ but they don't always halt the rest of the iterator right away, due to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96911,"byte_end":96985,"line_start":1915,"line_end":1915,"column_start":5,"column_end":79}},{"value":"/ the internal semantics of [`join`]. This adaptor makes a greater effort","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":96990,"byte_end":97065,"line_start":1916,"line_end":1916,"column_start":5,"column_end":80}},{"value":"/ to stop processing other items sooner, with the cost of additional","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97070,"byte_end":97140,"line_start":1917,"line_end":1917,"column_start":5,"column_end":75}},{"value":"/ synchronization overhead, which may also inhibit some optimizations.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97145,"byte_end":97217,"line_start":1918,"line_end":1918,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97222,"byte_end":97225,"line_start":1919,"line_end":1919,"column_start":5,"column_end":8}},{"value":"/ [`join`]: ../fn.join.html#panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97230,"byte_end":97266,"line_start":1920,"line_end":1920,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97271,"byte_end":97274,"line_start":1921,"line_end":1921,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97279,"byte_end":97293,"line_start":1922,"line_end":1922,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97298,"byte_end":97301,"line_start":1923,"line_end":1923,"column_start":5,"column_end":8}},{"value":"/ If this code didn't use `panic_fuse()`, it would continue processing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97306,"byte_end":97378,"line_start":1924,"line_end":1924,"column_start":5,"column_end":77}},{"value":"/ many more items in other threads (with long sleep delays) before the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97383,"byte_end":97455,"line_start":1925,"line_end":1925,"column_start":5,"column_end":77}},{"value":"/ panic is finally propagated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97460,"byte_end":97492,"line_start":1926,"line_end":1926,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97497,"byte_end":97500,"line_start":1927,"line_end":1927,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97505,"byte_end":97524,"line_start":1928,"line_end":1928,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97529,"byte_end":97555,"line_start":1929,"line_end":1929,"column_start":5,"column_end":31}},{"value":"/ use std::{thread, time};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97560,"byte_end":97588,"line_start":1930,"line_end":1930,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97593,"byte_end":97596,"line_start":1931,"line_end":1931,"column_start":5,"column_end":8}},{"value":"/ (0..1_000_000)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97601,"byte_end":97619,"line_start":1932,"line_end":1932,"column_start":5,"column_end":23}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97624,"byte_end":97648,"line_start":1933,"line_end":1933,"column_start":5,"column_end":29}},{"value":"/     .panic_fuse()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97653,"byte_end":97674,"line_start":1934,"line_end":1934,"column_start":5,"column_end":26}},{"value":"/     .for_each(|i| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97679,"byte_end":97702,"line_start":1935,"line_end":1935,"column_start":5,"column_end":28}},{"value":"/         // simulate some work","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97707,"byte_end":97740,"line_start":1936,"line_end":1936,"column_start":5,"column_end":38}},{"value":"/         thread::sleep(time::Duration::from_secs(1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97745,"byte_end":97801,"line_start":1937,"line_end":1937,"column_start":5,"column_end":61}},{"value":"/         assert!(i > 0); // oops!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97806,"byte_end":97842,"line_start":1938,"line_end":1938,"column_start":5,"column_end":41}},{"value":"/     });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97847,"byte_end":97858,"line_start":1939,"line_end":1939,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97863,"byte_end":97870,"line_start":1940,"line_end":1940,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4856},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101183,"byte_end":101190,"line_start":2042,"line_end":2042,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::ParallelIterator::collect","value":"pub fn collect<C>(Self) -> C where C: FromParallelIterator<Self::Item>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Creates a fresh collection containing all the elements produced\n by this parallel iterator.","sig":null,"attributes":[{"value":"/ Creates a fresh collection containing all the elements produced","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":97956,"byte_end":98023,"line_start":1945,"line_end":1945,"column_start":5,"column_end":72}},{"value":"/ by this parallel iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98028,"byte_end":98058,"line_start":1946,"line_end":1946,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98063,"byte_end":98066,"line_start":1947,"line_end":1947,"column_start":5,"column_end":8}},{"value":"/ You may prefer [`collect_into_vec()`] implemented on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98071,"byte_end":98127,"line_start":1948,"line_end":1948,"column_start":5,"column_end":61}},{"value":"/ [`IndexedParallelIterator`], if your underlying iterator also implements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98132,"byte_end":98208,"line_start":1949,"line_end":1949,"column_start":5,"column_end":81}},{"value":"/ it. [`collect_into_vec()`] allocates efficiently with precise knowledge","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98213,"byte_end":98288,"line_start":1950,"line_end":1950,"column_start":5,"column_end":80}},{"value":"/ of how many elements the iterator contains, and even allows you to reuse","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98293,"byte_end":98369,"line_start":1951,"line_end":1951,"column_start":5,"column_end":81}},{"value":"/ an existing vector's backing store rather than allocating a fresh vector.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98374,"byte_end":98451,"line_start":1952,"line_end":1952,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98456,"byte_end":98459,"line_start":1953,"line_end":1953,"column_start":5,"column_end":8}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98464,"byte_end":98531,"line_start":1954,"line_end":1954,"column_start":5,"column_end":72}},{"value":"/ [`collect_into_vec()`]:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98536,"byte_end":98563,"line_start":1955,"line_end":1955,"column_start":5,"column_end":32}},{"value":"/     trait.IndexedParallelIterator.html#method.collect_into_vec","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98568,"byte_end":98634,"line_start":1956,"line_end":1956,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98639,"byte_end":98642,"line_start":1957,"line_end":1957,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98647,"byte_end":98661,"line_start":1958,"line_end":1958,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98666,"byte_end":98669,"line_start":1959,"line_end":1959,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98674,"byte_end":98681,"line_start":1960,"line_end":1960,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98686,"byte_end":98712,"line_start":1961,"line_end":1961,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98717,"byte_end":98720,"line_start":1962,"line_end":1962,"column_start":5,"column_end":8}},{"value":"/ let sync_vec: Vec<_> = (0..100).into_iter().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98725,"byte_end":98783,"line_start":1963,"line_end":1963,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98788,"byte_end":98791,"line_start":1964,"line_end":1964,"column_start":5,"column_end":8}},{"value":"/ let async_vec: Vec<_> = (0..100).into_par_iter().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98796,"byte_end":98859,"line_start":1965,"line_end":1965,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98864,"byte_end":98867,"line_start":1966,"line_end":1966,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sync_vec, async_vec);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98872,"byte_end":98908,"line_start":1967,"line_end":1967,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98913,"byte_end":98920,"line_start":1968,"line_end":1968,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98925,"byte_end":98928,"line_start":1969,"line_end":1969,"column_start":5,"column_end":8}},{"value":"/ You can collect a pair of collections like [`unzip`](#method.unzip)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":98933,"byte_end":99004,"line_start":1970,"line_end":1970,"column_start":5,"column_end":76}},{"value":"/ for paired items:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99009,"byte_end":99030,"line_start":1971,"line_end":1971,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99035,"byte_end":99038,"line_start":1972,"line_end":1972,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99043,"byte_end":99050,"line_start":1973,"line_end":1973,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99055,"byte_end":99081,"line_start":1974,"line_end":1974,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99086,"byte_end":99089,"line_start":1975,"line_end":1975,"column_start":5,"column_end":8}},{"value":"/ let a = [(0, 1), (1, 2), (2, 3), (3, 4)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99094,"byte_end":99139,"line_start":1976,"line_end":1976,"column_start":5,"column_end":50}},{"value":"/ let (first, second): (Vec<_>, Vec<_>) = a.into_par_iter().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99144,"byte_end":99216,"line_start":1977,"line_end":1977,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99221,"byte_end":99224,"line_start":1978,"line_end":1978,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first, [0, 1, 2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99229,"byte_end":99265,"line_start":1979,"line_end":1979,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(second, [1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99270,"byte_end":99307,"line_start":1980,"line_end":1980,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99312,"byte_end":99319,"line_start":1981,"line_end":1981,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99324,"byte_end":99327,"line_start":1982,"line_end":1982,"column_start":5,"column_end":8}},{"value":"/ Or like [`partition_map`](#method.partition_map) for `Either` items:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99332,"byte_end":99404,"line_start":1983,"line_end":1983,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99409,"byte_end":99412,"line_start":1984,"line_end":1984,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99417,"byte_end":99424,"line_start":1985,"line_end":1985,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99429,"byte_end":99455,"line_start":1986,"line_end":1986,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99460,"byte_end":99488,"line_start":1987,"line_end":1987,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99493,"byte_end":99496,"line_start":1988,"line_end":1988,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter().map(|x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99501,"byte_end":99575,"line_start":1989,"line_end":1989,"column_start":5,"column_end":79}},{"value":"/     if x % 2 == 0 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99580,"byte_end":99603,"line_start":1990,"line_end":1990,"column_start":5,"column_end":28}},{"value":"/         Either::Left(x * 4)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99608,"byte_end":99639,"line_start":1991,"line_end":1991,"column_start":5,"column_end":36}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99644,"byte_end":99660,"line_start":1992,"line_end":1992,"column_start":5,"column_end":21}},{"value":"/         Either::Right(x * 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99665,"byte_end":99697,"line_start":1993,"line_end":1993,"column_start":5,"column_end":37}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99702,"byte_end":99711,"line_start":1994,"line_end":1994,"column_start":5,"column_end":14}},{"value":"/ }).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99716,"byte_end":99733,"line_start":1995,"line_end":1995,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99738,"byte_end":99741,"line_start":1996,"line_end":1996,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99746,"byte_end":99783,"line_start":1997,"line_end":1997,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99788,"byte_end":99826,"line_start":1998,"line_end":1998,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99831,"byte_end":99838,"line_start":1999,"line_end":1999,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99843,"byte_end":99846,"line_start":2000,"line_end":2000,"column_start":5,"column_end":8}},{"value":"/ You can even collect an arbitrarily-nested combination of pairs and `Either`:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99851,"byte_end":99932,"line_start":2001,"line_end":2001,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99937,"byte_end":99940,"line_start":2002,"line_end":2002,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99945,"byte_end":99952,"line_start":2003,"line_end":2003,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99957,"byte_end":99983,"line_start":2004,"line_end":2004,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":99988,"byte_end":100016,"line_start":2005,"line_end":2005,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100021,"byte_end":100024,"line_start":2006,"line_end":2006,"column_start":5,"column_end":8}},{"value":"/ let (first, (left, right)): (Vec<_>, (Vec<_>, Vec<_>))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100029,"byte_end":100087,"line_start":2007,"line_end":2007,"column_start":5,"column_end":63}},{"value":"/     = (0..8).into_par_iter().map(|x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100092,"byte_end":100134,"line_start":2008,"line_end":2008,"column_start":5,"column_end":47}},{"value":"/         if x % 2 == 0 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100139,"byte_end":100166,"line_start":2009,"line_end":2009,"column_start":5,"column_end":32}},{"value":"/             (x, Either::Left(x * 4))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100171,"byte_end":100211,"line_start":2010,"line_end":2010,"column_start":5,"column_end":45}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100216,"byte_end":100236,"line_start":2011,"line_end":2011,"column_start":5,"column_end":25}},{"value":"/             (-x, Either::Right(x * 3))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100241,"byte_end":100283,"line_start":2012,"line_end":2012,"column_start":5,"column_end":47}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100288,"byte_end":100301,"line_start":2013,"line_end":2013,"column_start":5,"column_end":18}},{"value":"/     }).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100306,"byte_end":100327,"line_start":2014,"line_end":2014,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100332,"byte_end":100335,"line_start":2015,"line_end":2015,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first, [0, -1, 2, -3, 4, -5, 6, -7]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100340,"byte_end":100392,"line_start":2016,"line_end":2016,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100397,"byte_end":100434,"line_start":2017,"line_end":2017,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100439,"byte_end":100477,"line_start":2018,"line_end":2018,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100482,"byte_end":100489,"line_start":2019,"line_end":2019,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100494,"byte_end":100497,"line_start":2020,"line_end":2020,"column_start":5,"column_end":8}},{"value":"/ All of that can _also_ be combined with short-circuiting collection of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100502,"byte_end":100576,"line_start":2021,"line_end":2021,"column_start":5,"column_end":79}},{"value":"/ `Result` or `Option` types:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100581,"byte_end":100612,"line_start":2022,"line_end":2022,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100617,"byte_end":100620,"line_start":2023,"line_end":2023,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100625,"byte_end":100632,"line_start":2024,"line_end":2024,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100637,"byte_end":100663,"line_start":2025,"line_end":2025,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100668,"byte_end":100696,"line_start":2026,"line_end":2026,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100701,"byte_end":100704,"line_start":2027,"line_end":2027,"column_start":5,"column_end":8}},{"value":"/ let result: Result<(Vec<_>, (Vec<_>, Vec<_>)), _>","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100709,"byte_end":100762,"line_start":2028,"line_end":2028,"column_start":5,"column_end":58}},{"value":"/     = (0..8).into_par_iter().map(|x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100767,"byte_end":100809,"line_start":2029,"line_end":2029,"column_start":5,"column_end":47}},{"value":"/         if x > 5 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100814,"byte_end":100836,"line_start":2030,"line_end":2030,"column_start":5,"column_end":27}},{"value":"/             Err(x)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100841,"byte_end":100863,"line_start":2031,"line_end":2031,"column_start":5,"column_end":27}},{"value":"/         } else if x % 2 == 0 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100868,"byte_end":100902,"line_start":2032,"line_end":2032,"column_start":5,"column_end":39}},{"value":"/             Ok((x, Either::Left(x * 4)))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100907,"byte_end":100951,"line_start":2033,"line_end":2033,"column_start":5,"column_end":49}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100956,"byte_end":100976,"line_start":2034,"line_end":2034,"column_start":5,"column_end":25}},{"value":"/             Ok((-x, Either::Right(x * 3)))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":100981,"byte_end":101027,"line_start":2035,"line_end":2035,"column_start":5,"column_end":51}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101032,"byte_end":101045,"line_start":2036,"line_end":2036,"column_start":5,"column_end":18}},{"value":"/     }).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101050,"byte_end":101071,"line_start":2037,"line_end":2037,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101076,"byte_end":101079,"line_start":2038,"line_end":2038,"column_start":5,"column_end":8}},{"value":"/ let error = result.unwrap_err();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101084,"byte_end":101120,"line_start":2039,"line_end":2039,"column_start":5,"column_end":41}},{"value":"/ assert!(error == 6 || error == 7);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101125,"byte_end":101163,"line_start":2040,"line_end":2040,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101168,"byte_end":101175,"line_start":2041,"line_end":2041,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4858},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102442,"byte_end":102447,"line_start":2083,"line_end":2083,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::ParallelIterator::unzip","value":"pub fn unzip<A, B, FromA, FromB>(Self) -> (FromA, FromB) where\nSelf: ParallelIterator<Item = (A, B)>, FromA: Default + Send +\nParallelExtend<A>, FromB: Default + Send + ParallelExtend<B>, A: Send, B: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Unzips the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.","sig":null,"attributes":[{"value":"/ Unzips the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101308,"byte_end":101376,"line_start":2049,"line_end":2049,"column_start":5,"column_end":73}},{"value":"/ `ParallelExtend` containers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101381,"byte_end":101413,"line_start":2050,"line_end":2050,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101418,"byte_end":101421,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `unzip_into_vecs()`, which allocates more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101426,"byte_end":101493,"line_start":2052,"line_end":2052,"column_start":5,"column_end":72}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101498,"byte_end":101561,"line_start":2053,"line_end":2053,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse existing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101566,"byte_end":101626,"line_start":2054,"line_end":2054,"column_start":5,"column_end":65}},{"value":"/ vectors' backing stores rather than allocating fresh vectors.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101631,"byte_end":101696,"line_start":2055,"line_end":2055,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101701,"byte_end":101704,"line_start":2056,"line_end":2056,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101709,"byte_end":101723,"line_start":2057,"line_end":2057,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101728,"byte_end":101731,"line_start":2058,"line_end":2058,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101736,"byte_end":101743,"line_start":2059,"line_end":2059,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101748,"byte_end":101774,"line_start":2060,"line_end":2060,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101779,"byte_end":101782,"line_start":2061,"line_end":2061,"column_start":5,"column_end":8}},{"value":"/ let a = [(0, 1), (1, 2), (2, 3), (3, 4)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101787,"byte_end":101832,"line_start":2062,"line_end":2062,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101837,"byte_end":101840,"line_start":2063,"line_end":2063,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = a.par_iter().cloned().unzip();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101845,"byte_end":101917,"line_start":2064,"line_end":2064,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101922,"byte_end":101925,"line_start":2065,"line_end":2065,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101930,"byte_end":101965,"line_start":2066,"line_end":2066,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":101970,"byte_end":102006,"line_start":2067,"line_end":2067,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102011,"byte_end":102018,"line_start":2068,"line_end":2068,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102023,"byte_end":102026,"line_start":2069,"line_end":2069,"column_start":5,"column_end":8}},{"value":"/ Nested pairs can be unzipped too.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102031,"byte_end":102068,"line_start":2070,"line_end":2070,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102073,"byte_end":102076,"line_start":2071,"line_end":2071,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102081,"byte_end":102088,"line_start":2072,"line_end":2072,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102093,"byte_end":102119,"line_start":2073,"line_end":2073,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102124,"byte_end":102127,"line_start":2074,"line_end":2074,"column_start":5,"column_end":8}},{"value":"/ let (values, (squares, cubes)): (Vec<_>, (Vec<_>, Vec<_>)) = (0..4).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102132,"byte_end":102219,"line_start":2075,"line_end":2075,"column_start":5,"column_end":92}},{"value":"/     .map(|i| (i, (i * i, i * i * i)))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102224,"byte_end":102265,"line_start":2076,"line_end":2076,"column_start":5,"column_end":46}},{"value":"/     .unzip();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102270,"byte_end":102287,"line_start":2077,"line_end":2077,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102292,"byte_end":102295,"line_start":2078,"line_end":2078,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(values, [0, 1, 2, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102300,"byte_end":102337,"line_start":2079,"line_end":2079,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(squares, [0, 1, 4, 9]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102342,"byte_end":102380,"line_start":2080,"line_end":2080,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(cubes, [0, 1, 8, 27]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102385,"byte_end":102422,"line_start":2081,"line_end":2081,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102427,"byte_end":102434,"line_start":2082,"line_end":2082,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4863},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103553,"byte_end":103562,"line_start":2113,"line_end":2113,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::ParallelIterator::partition","value":"pub fn partition<A, B, P>(Self, P) -> (A, B) where A: Default + Send +\nParallelExtend<Self::Item>, B: Default + Send + ParallelExtend<Self::Item>,\nP: Fn(&Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Partitions the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.  Items for which the `predicate` returns\n true go into the first container, and the rest go into the second.","sig":null,"attributes":[{"value":"/ Partitions the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102729,"byte_end":102801,"line_start":2094,"line_end":2094,"column_start":5,"column_end":77}},{"value":"/ `ParallelExtend` containers.  Items for which the `predicate` returns","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102806,"byte_end":102879,"line_start":2095,"line_end":2095,"column_start":5,"column_end":78}},{"value":"/ true go into the first container, and the rest go into the second.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102884,"byte_end":102954,"line_start":2096,"line_end":2096,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102959,"byte_end":102962,"line_start":2097,"line_end":2097,"column_start":5,"column_end":8}},{"value":"/ Note: unlike the standard `Iterator::partition`, this allows distinct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":102967,"byte_end":103040,"line_start":2098,"line_end":2098,"column_start":5,"column_end":78}},{"value":"/ collection types for the left and right items.  This is more flexible,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103045,"byte_end":103119,"line_start":2099,"line_end":2099,"column_start":5,"column_end":79}},{"value":"/ but may require new type annotations when converting sequential code","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103124,"byte_end":103196,"line_start":2100,"line_end":2100,"column_start":5,"column_end":77}},{"value":"/ that used type inferrence assuming the two were the same.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103201,"byte_end":103262,"line_start":2101,"line_end":2101,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103267,"byte_end":103270,"line_start":2102,"line_end":2102,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103275,"byte_end":103289,"line_start":2103,"line_end":2103,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103294,"byte_end":103297,"line_start":2104,"line_end":2104,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103302,"byte_end":103309,"line_start":2105,"line_end":2105,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103314,"byte_end":103340,"line_start":2106,"line_end":2106,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103345,"byte_end":103348,"line_start":2107,"line_end":2107,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter().partition(|x| x % 2 == 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103353,"byte_end":103444,"line_start":2108,"line_end":2108,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103449,"byte_end":103452,"line_start":2109,"line_end":2109,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 2, 4, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103457,"byte_end":103492,"line_start":2110,"line_end":2110,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 3, 5, 7]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103497,"byte_end":103533,"line_start":2111,"line_end":2111,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103538,"byte_end":103545,"line_start":2112,"line_end":2112,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4867},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105282,"byte_end":105295,"line_start":2165,"line_end":2165,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::iter::ParallelIterator::partition_map","value":"pub fn partition_map<A, B, P, L, R>(Self, P) -> (A, B) where A: Default +\nSend + ParallelExtend<L>, B: Default + Send + ParallelExtend<R>,\nP: Fn(Self::Item) -> Either<L, R> + Sync + Send, L: Send, R: Send","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Partitions and maps the items of a parallel iterator into a pair of\n arbitrary `ParallelExtend` containers.  `Either::Left` items go into\n the first container, and `Either::Right` items go into the second.","sig":null,"attributes":[{"value":"/ Partitions and maps the items of a parallel iterator into a pair of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103833,"byte_end":103904,"line_start":2122,"line_end":2122,"column_start":5,"column_end":76}},{"value":"/ arbitrary `ParallelExtend` containers.  `Either::Left` items go into","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103909,"byte_end":103981,"line_start":2123,"line_end":2123,"column_start":5,"column_end":77}},{"value":"/ the first container, and `Either::Right` items go into the second.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":103986,"byte_end":104056,"line_start":2124,"line_end":2124,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104061,"byte_end":104064,"line_start":2125,"line_end":2125,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104069,"byte_end":104083,"line_start":2126,"line_end":2126,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104088,"byte_end":104091,"line_start":2127,"line_end":2127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104096,"byte_end":104103,"line_start":2128,"line_end":2128,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104108,"byte_end":104134,"line_start":2129,"line_end":2129,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104139,"byte_end":104167,"line_start":2130,"line_end":2130,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104172,"byte_end":104175,"line_start":2131,"line_end":2131,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104180,"byte_end":104244,"line_start":2132,"line_end":2132,"column_start":5,"column_end":69}},{"value":"/     .partition_map(|x| {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104249,"byte_end":104277,"line_start":2133,"line_end":2133,"column_start":5,"column_end":33}},{"value":"/         if x % 2 == 0 {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104282,"byte_end":104309,"line_start":2134,"line_end":2134,"column_start":5,"column_end":32}},{"value":"/             Either::Left(x * 4)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104314,"byte_end":104349,"line_start":2135,"line_end":2135,"column_start":5,"column_end":40}},{"value":"/         } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104354,"byte_end":104374,"line_start":2136,"line_end":2136,"column_start":5,"column_end":25}},{"value":"/             Either::Right(x * 3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104379,"byte_end":104415,"line_start":2137,"line_end":2137,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104420,"byte_end":104433,"line_start":2138,"line_end":2138,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104438,"byte_end":104449,"line_start":2139,"line_end":2139,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104454,"byte_end":104457,"line_start":2140,"line_end":2140,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104462,"byte_end":104499,"line_start":2141,"line_end":2141,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104504,"byte_end":104542,"line_start":2142,"line_end":2142,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104547,"byte_end":104554,"line_start":2143,"line_end":2143,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104559,"byte_end":104562,"line_start":2144,"line_end":2144,"column_start":5,"column_end":8}},{"value":"/ Nested `Either` enums can be split as well.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104567,"byte_end":104614,"line_start":2145,"line_end":2145,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104619,"byte_end":104622,"line_start":2146,"line_end":2146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104627,"byte_end":104634,"line_start":2147,"line_end":2147,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104639,"byte_end":104665,"line_start":2148,"line_end":2148,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104670,"byte_end":104701,"line_start":2149,"line_end":2149,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104706,"byte_end":104709,"line_start":2150,"line_end":2150,"column_start":5,"column_end":8}},{"value":"/ let ((fizzbuzz, fizz), (buzz, other)): ((Vec<_>, Vec<_>), (Vec<_>, Vec<_>)) = (1..20)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104714,"byte_end":104803,"line_start":2151,"line_end":2151,"column_start":5,"column_end":94}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104808,"byte_end":104832,"line_start":2152,"line_end":2152,"column_start":5,"column_end":29}},{"value":"/     .partition_map(|x| match (x % 3, x % 5) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104837,"byte_end":104886,"line_start":2153,"line_end":2153,"column_start":5,"column_end":54}},{"value":"/         (0, 0) => Left(Left(x)),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104891,"byte_end":104927,"line_start":2154,"line_end":2154,"column_start":5,"column_end":41}},{"value":"/         (0, _) => Left(Right(x)),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104932,"byte_end":104969,"line_start":2155,"line_end":2155,"column_start":5,"column_end":42}},{"value":"/         (_, 0) => Right(Left(x)),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":104974,"byte_end":105011,"line_start":2156,"line_end":2156,"column_start":5,"column_end":42}},{"value":"/         (_, _) => Right(Right(x)),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105016,"byte_end":105054,"line_start":2157,"line_end":2157,"column_start":5,"column_end":43}},{"value":"/     });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105059,"byte_end":105070,"line_start":2158,"line_end":2158,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105075,"byte_end":105078,"line_start":2159,"line_end":2159,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(fizzbuzz, [15]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105083,"byte_end":105114,"line_start":2160,"line_end":2160,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(fizz, [3, 6, 9, 12, 18]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105119,"byte_end":105159,"line_start":2161,"line_end":2161,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(buzz, [5, 10]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105164,"byte_end":105194,"line_start":2162,"line_end":2162,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(other, [1, 2, 4, 7, 8, 11, 13, 14, 16, 17, 19]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105199,"byte_end":105262,"line_start":2163,"line_end":2163,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105267,"byte_end":105274,"line_start":2164,"line_end":2164,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4873},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105928,"byte_end":105939,"line_start":2188,"line_end":2188,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::iter::ParallelIterator::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where\nSelf::Item: Clone","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Intersperses clones of an element between items of this iterator.","sig":null,"attributes":[{"value":"/ Intersperses clones of an element between items of this iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105599,"byte_end":105668,"line_start":2176,"line_end":2176,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105673,"byte_end":105676,"line_start":2177,"line_end":2177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105681,"byte_end":105695,"line_start":2178,"line_end":2178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105700,"byte_end":105703,"line_start":2179,"line_end":2179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105708,"byte_end":105715,"line_start":2180,"line_end":2180,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105720,"byte_end":105746,"line_start":2181,"line_end":2181,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105751,"byte_end":105754,"line_start":2182,"line_end":2182,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105759,"byte_end":105785,"line_start":2183,"line_end":2183,"column_start":5,"column_end":31}},{"value":"/ let r: Vec<_> = x.into_par_iter().intersperse(-1).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105790,"byte_end":105854,"line_start":2184,"line_end":2184,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105859,"byte_end":105862,"line_start":2185,"line_end":2185,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(r, vec![1, -1, 2, -1, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105867,"byte_end":105908,"line_start":2186,"line_end":2186,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":105913,"byte_end":105920,"line_start":2187,"line_end":2187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4874},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106665,"byte_end":106680,"line_start":2207,"line_end":2207,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"::iter::ParallelIterator::drive_unindexed","value":"pub fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106082,"byte_end":106146,"line_start":2195,"line_end":2195,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106151,"byte_end":106207,"line_start":2196,"line_end":2196,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106212,"byte_end":106215,"line_start":2197,"line_end":2197,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106220,"byte_end":106281,"line_start":2198,"line_end":2198,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106286,"byte_end":106351,"line_start":2199,"line_end":2199,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106356,"byte_end":106415,"line_start":2200,"line_end":2200,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106420,"byte_end":106459,"line_start":2201,"line_end":2201,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106464,"byte_end":106467,"line_start":2202,"line_end":2202,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106472,"byte_end":106538,"line_start":2203,"line_end":2203,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106543,"byte_end":106557,"line_start":2204,"line_end":2204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106562,"byte_end":106565,"line_start":2205,"line_end":2205,"column_start":5,"column_end":8}},{"value":"/ [README]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106570,"byte_end":106657,"line_start":2206,"line_end":2206,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":4876},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107567,"byte_end":107574,"line_start":2225,"line_end":2225,"column_start":8,"column_end":15},"name":"opt_len","qualname":"::iter::ParallelIterator::opt_len","value":"pub fn opt_len(&Self) -> Option<usize>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106773,"byte_end":106837,"line_start":2211,"line_end":2211,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106842,"byte_end":106898,"line_start":2212,"line_end":2212,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106903,"byte_end":106906,"line_start":2213,"line_end":2213,"column_start":5,"column_end":8}},{"value":"/ Returns the number of items produced by this iterator, if known","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106911,"byte_end":106978,"line_start":2214,"line_end":2214,"column_start":5,"column_end":72}},{"value":"/ statically. This can be used by consumers to trigger special fast","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":106983,"byte_end":107052,"line_start":2215,"line_end":2215,"column_start":5,"column_end":74}},{"value":"/ paths. Therefore, if `Some(_)` is returned, this iterator must only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107057,"byte_end":107128,"line_start":2216,"line_end":2216,"column_start":5,"column_end":76}},{"value":"/ use the (indexed) `Consumer` methods when driving a consumer, such","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107133,"byte_end":107203,"line_start":2217,"line_end":2217,"column_start":5,"column_end":75}},{"value":"/ as `split_at()`. Calling `UnindexedConsumer::split_off_left()` or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107208,"byte_end":107277,"line_start":2218,"line_end":2218,"column_start":5,"column_end":74}},{"value":"/ other `UnindexedConsumer` methods -- or returning an inaccurate","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107282,"byte_end":107349,"line_start":2219,"line_end":2219,"column_start":5,"column_end":72}},{"value":"/ value -- may result in panics.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107354,"byte_end":107388,"line_start":2220,"line_end":2220,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107393,"byte_end":107396,"line_start":2221,"line_end":2221,"column_start":5,"column_end":8}},{"value":"/ This method is currently used to optimize `collect` for want","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107401,"byte_end":107465,"line_start":2222,"line_end":2222,"column_start":5,"column_end":69}},{"value":"/ of true Rust specialization; it may be removed when","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107470,"byte_end":107525,"line_start":2223,"line_end":2223,"column_start":5,"column_end":60}},{"value":"/ specialization is stable.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107530,"byte_end":107559,"line_start":2224,"line_end":2224,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":4882},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108017,"byte_end":108040,"line_start":2244,"line_end":2244,"column_start":11,"column_end":34},"name":"IndexedParallelIterator","qualname":"::iter::IndexedParallelIterator","value":"IndexedParallelIterator: ParallelIterator","parent":null,"children":[{"krate":0,"index":4883},{"krate":0,"index":4884},{"krate":0,"index":4887},{"krate":0,"index":4889},{"krate":0,"index":4891},{"krate":0,"index":4893},{"krate":0,"index":4895},{"krate":0,"index":4896},{"krate":0,"index":4901},{"krate":0,"index":4907},{"krate":0,"index":4912},{"krate":0,"index":4914},{"krate":0,"index":4916},{"krate":0,"index":4918},{"krate":0,"index":4920},{"krate":0,"index":4922},{"krate":0,"index":4923},{"krate":0,"index":4924},{"krate":0,"index":4925},{"krate":0,"index":4926},{"krate":0,"index":4929},{"krate":0,"index":4932},{"krate":0,"index":4935},{"krate":0,"index":4937},{"krate":0,"index":4939},{"krate":0,"index":4940},{"krate":0,"index":4941},{"krate":0,"index":4942},{"krate":0,"index":4943},{"krate":0,"index":4945}],"decl_id":null,"docs":" An iterator that supports \"random access\" to its data, meaning\n that you can split it at arbitrary indices and draw data from\n those points.","sig":null,"attributes":[{"value":"/ An iterator that supports \"random access\" to its data, meaning","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107779,"byte_end":107845,"line_start":2239,"line_end":2239,"column_start":1,"column_end":67}},{"value":"/ that you can split it at arbitrary indices and draw data from","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107846,"byte_end":107911,"line_start":2240,"line_end":2240,"column_start":1,"column_end":66}},{"value":"/ those points.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107912,"byte_end":107929,"line_start":2241,"line_end":2241,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107930,"byte_end":107933,"line_start":2242,"line_end":2242,"column_start":1,"column_end":4}},{"value":"/ **Note:** Not implemented for `u64`, `i64`, `u128`, or `i128` ranges","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107934,"byte_end":108006,"line_start":2243,"line_end":2243,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":4883},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108649,"byte_end":108665,"line_start":2263,"line_end":2263,"column_start":8,"column_end":24},"name":"collect_into_vec","qualname":"::iter::IndexedParallelIterator::collect_into_vec","value":"pub fn collect_into_vec(Self, &mut Vec<Self::Item>)","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Collects the results of the iterator into the specified\n vector. The vector is always truncated before execution\n begins. If possible, reusing the vector across calls can lead\n to better performance since it reuses the same backing buffer.","sig":null,"attributes":[{"value":"/ Collects the results of the iterator into the specified","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108065,"byte_end":108124,"line_start":2245,"line_end":2245,"column_start":5,"column_end":64}},{"value":"/ vector. The vector is always truncated before execution","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108129,"byte_end":108188,"line_start":2246,"line_end":2246,"column_start":5,"column_end":64}},{"value":"/ begins. If possible, reusing the vector across calls can lead","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108193,"byte_end":108258,"line_start":2247,"line_end":2247,"column_start":5,"column_end":70}},{"value":"/ to better performance since it reuses the same backing buffer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108263,"byte_end":108329,"line_start":2248,"line_end":2248,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108334,"byte_end":108337,"line_start":2249,"line_end":2249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108342,"byte_end":108356,"line_start":2250,"line_end":2250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108361,"byte_end":108364,"line_start":2251,"line_end":2251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108369,"byte_end":108376,"line_start":2252,"line_end":2252,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108381,"byte_end":108407,"line_start":2253,"line_end":2253,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108412,"byte_end":108415,"line_start":2254,"line_end":2254,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108420,"byte_end":108459,"line_start":2255,"line_end":2255,"column_start":5,"column_end":44}},{"value":"/ let mut vec = vec![-1, -2, -3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108464,"byte_end":108499,"line_start":2256,"line_end":2256,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108504,"byte_end":108507,"line_start":2257,"line_end":2257,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108512,"byte_end":108538,"line_start":2258,"line_end":2258,"column_start":5,"column_end":31}},{"value":"/     .collect_into_vec(&mut vec);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108543,"byte_end":108579,"line_start":2259,"line_end":2259,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108584,"byte_end":108587,"line_start":2260,"line_end":2260,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108592,"byte_end":108629,"line_start":2261,"line_end":2261,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108634,"byte_end":108641,"line_start":2262,"line_end":2262,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4884},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109475,"byte_end":109490,"line_start":2288,"line_end":2288,"column_start":8,"column_end":23},"name":"unzip_into_vecs","qualname":"::iter::IndexedParallelIterator::unzip_into_vecs","value":"pub fn unzip_into_vecs<A, B>(Self, &mut Vec<A>, &mut Vec<B>) where\nSelf: IndexedParallelIterator<Item = (A, B)>, A: Send, B: Send","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Unzips the results of the iterator into the specified\n vectors. The vectors are always truncated before execution\n begins. If possible, reusing the vectors across calls can lead\n to better performance since they reuse the same backing buffer.","sig":null,"attributes":[{"value":"/ Unzips the results of the iterator into the specified","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108764,"byte_end":108821,"line_start":2267,"line_end":2267,"column_start":5,"column_end":62}},{"value":"/ vectors. The vectors are always truncated before execution","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108826,"byte_end":108888,"line_start":2268,"line_end":2268,"column_start":5,"column_end":67}},{"value":"/ begins. If possible, reusing the vectors across calls can lead","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108893,"byte_end":108959,"line_start":2269,"line_end":2269,"column_start":5,"column_end":71}},{"value":"/ to better performance since they reuse the same backing buffer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108964,"byte_end":109031,"line_start":2270,"line_end":2270,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109036,"byte_end":109039,"line_start":2271,"line_end":2271,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109044,"byte_end":109058,"line_start":2272,"line_end":2272,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109063,"byte_end":109066,"line_start":2273,"line_end":2273,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109071,"byte_end":109078,"line_start":2274,"line_end":2274,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109083,"byte_end":109109,"line_start":2275,"line_end":2275,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109114,"byte_end":109117,"line_start":2276,"line_end":2276,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109122,"byte_end":109161,"line_start":2277,"line_end":2277,"column_start":5,"column_end":44}},{"value":"/ let mut left = vec![42; 10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109166,"byte_end":109198,"line_start":2278,"line_end":2278,"column_start":5,"column_end":37}},{"value":"/ let mut right = vec![-1; 10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109203,"byte_end":109236,"line_start":2279,"line_end":2279,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109241,"byte_end":109244,"line_start":2280,"line_end":2280,"column_start":5,"column_end":8}},{"value":"/ (10..15).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109249,"byte_end":109277,"line_start":2281,"line_end":2281,"column_start":5,"column_end":33}},{"value":"/     .enumerate()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109282,"byte_end":109302,"line_start":2282,"line_end":2282,"column_start":5,"column_end":25}},{"value":"/     .unzip_into_vecs(&mut left, &mut right);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109307,"byte_end":109355,"line_start":2283,"line_end":2283,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109360,"byte_end":109363,"line_start":2284,"line_end":2284,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109368,"byte_end":109406,"line_start":2285,"line_end":2285,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(right, [10, 11, 12, 13, 14]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109411,"byte_end":109455,"line_start":2286,"line_end":2286,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109460,"byte_end":109467,"line_start":2287,"line_end":2287,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4887},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110302,"byte_end":110305,"line_start":2315,"line_end":2315,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::IndexedParallelIterator::zip","value":"pub fn zip<Z>(Self, Z) -> Zip<Self, Z::Iter> where Z: IntoParallelIterator,\nZ::Iter: IndexedParallelIterator","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Iterates over tuples `(A, B)`, where the items `A` are from\n this iterator and `B` are from the iterator given as argument.\n Like the `zip` method on ordinary iterators, if the two\n iterators are of unequal length, you only get the items they\n have in common.","sig":null,"attributes":[{"value":"/ Iterates over tuples `(A, B)`, where the items `A` are from","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109710,"byte_end":109773,"line_start":2297,"line_end":2297,"column_start":5,"column_end":68}},{"value":"/ this iterator and `B` are from the iterator given as argument.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109778,"byte_end":109844,"line_start":2298,"line_end":2298,"column_start":5,"column_end":71}},{"value":"/ Like the `zip` method on ordinary iterators, if the two","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109849,"byte_end":109908,"line_start":2299,"line_end":2299,"column_start":5,"column_end":64}},{"value":"/ iterators are of unequal length, you only get the items they","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109913,"byte_end":109977,"line_start":2300,"line_end":2300,"column_start":5,"column_end":69}},{"value":"/ have in common.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":109982,"byte_end":110001,"line_start":2301,"line_end":2301,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110006,"byte_end":110009,"line_start":2302,"line_end":2302,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110014,"byte_end":110028,"line_start":2303,"line_end":2303,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110033,"byte_end":110036,"line_start":2304,"line_end":2304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110041,"byte_end":110048,"line_start":2305,"line_end":2305,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110053,"byte_end":110079,"line_start":2306,"line_end":2306,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110084,"byte_end":110087,"line_start":2307,"line_end":2307,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (1..4)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110092,"byte_end":110123,"line_start":2308,"line_end":2308,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110128,"byte_end":110152,"line_start":2309,"line_end":2309,"column_start":5,"column_end":29}},{"value":"/     .zip(vec!['a', 'b', 'c'])","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110157,"byte_end":110190,"line_start":2310,"line_end":2310,"column_start":5,"column_end":38}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110195,"byte_end":110214,"line_start":2311,"line_end":2311,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110219,"byte_end":110222,"line_start":2312,"line_end":2312,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(1, 'a'), (2, 'b'), (3, 'c')]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110227,"byte_end":110282,"line_start":2313,"line_end":2313,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110287,"byte_end":110294,"line_start":2314,"line_end":2314,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4889},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111079,"byte_end":111085,"line_start":2342,"line_end":2342,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::iter::IndexedParallelIterator::zip_eq","value":"pub fn zip_eq<Z>(Self, Z) -> ZipEq<Self, Z::Iter> where\nZ: IntoParallelIterator, Z::Iter: IndexedParallelIterator","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" The same as `Zip`, but requires that both iterators have the same length.","sig":null,"attributes":[{"value":"/ The same as `Zip`, but requires that both iterators have the same length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110497,"byte_end":110574,"line_start":2323,"line_end":2323,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110579,"byte_end":110582,"line_start":2324,"line_end":2324,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110587,"byte_end":110599,"line_start":2325,"line_end":2325,"column_start":5,"column_end":17}},{"value":"/ Will panic if `self` and `zip_op` are not the same length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110604,"byte_end":110666,"line_start":2326,"line_end":2326,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110671,"byte_end":110674,"line_start":2327,"line_end":2327,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110679,"byte_end":110698,"line_start":2328,"line_end":2328,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110703,"byte_end":110729,"line_start":2329,"line_end":2329,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110734,"byte_end":110737,"line_start":2330,"line_end":2330,"column_start":5,"column_end":8}},{"value":"/ let one = [1u8];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110742,"byte_end":110762,"line_start":2331,"line_end":2331,"column_start":5,"column_end":25}},{"value":"/ let two = [2u8, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110767,"byte_end":110790,"line_start":2332,"line_end":2332,"column_start":5,"column_end":28}},{"value":"/ let one_iter = one.par_iter();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110795,"byte_end":110829,"line_start":2333,"line_end":2333,"column_start":5,"column_end":39}},{"value":"/ let two_iter = two.par_iter();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110834,"byte_end":110868,"line_start":2334,"line_end":2334,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110873,"byte_end":110876,"line_start":2335,"line_end":2335,"column_start":5,"column_end":8}},{"value":"/ // this will panic","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110881,"byte_end":110903,"line_start":2336,"line_end":2336,"column_start":5,"column_end":27}},{"value":"/ let zipped: Vec<(&u8, &u8)> = one_iter.zip_eq(two_iter).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110908,"byte_end":110978,"line_start":2337,"line_end":2337,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110983,"byte_end":110986,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ // we should never get here","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":110991,"byte_end":111022,"line_start":2339,"line_end":2339,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(1, zipped.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111027,"byte_end":111059,"line_start":2340,"line_end":2340,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111064,"byte_end":111071,"line_start":2341,"line_end":2341,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4891},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111932,"byte_end":111942,"line_start":2366,"line_end":2366,"column_start":8,"column_end":18},"name":"interleave","qualname":"::iter::IndexedParallelIterator::interleave","value":"pub fn interleave<I>(Self, I) -> Interleave<Self, I::Iter> where\nI: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Interleaves elements of this iterator and the other given\n iterator. Alternately yields elements from this iterator and\n the given iterator, until both are exhausted. If one iterator\n is exhausted before the other, the last elements are provided\n from the other.","sig":null,"attributes":[{"value":"/ Interleaves elements of this iterator and the other given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111371,"byte_end":111432,"line_start":2352,"line_end":2352,"column_start":5,"column_end":66}},{"value":"/ iterator. Alternately yields elements from this iterator and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111437,"byte_end":111501,"line_start":2353,"line_end":2353,"column_start":5,"column_end":69}},{"value":"/ the given iterator, until both are exhausted. If one iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111506,"byte_end":111571,"line_start":2354,"line_end":2354,"column_start":5,"column_end":70}},{"value":"/ is exhausted before the other, the last elements are provided","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111576,"byte_end":111641,"line_start":2355,"line_end":2355,"column_start":5,"column_end":70}},{"value":"/ from the other.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111646,"byte_end":111665,"line_start":2356,"line_end":2356,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111670,"byte_end":111673,"line_start":2357,"line_end":2357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111678,"byte_end":111692,"line_start":2358,"line_end":2358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111697,"byte_end":111700,"line_start":2359,"line_end":2359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111705,"byte_end":111712,"line_start":2360,"line_end":2360,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111717,"byte_end":111743,"line_start":2361,"line_end":2361,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2], vec![3, 4, 5, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111748,"byte_end":111796,"line_start":2362,"line_end":2362,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave(y).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111801,"byte_end":111865,"line_start":2363,"line_end":2363,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(r, vec![1, 3, 2, 4, 5, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111870,"byte_end":111912,"line_start":2364,"line_end":2364,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":111917,"byte_end":111924,"line_start":2365,"line_end":2365,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4893},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112560,"byte_end":112579,"line_start":2385,"line_end":2385,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::iter::IndexedParallelIterator::interleave_shortest","value":"pub fn interleave_shortest<I>(Self, I) -> InterleaveShortest<Self, I::Iter>\nwhere I: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Interleaves elements of this iterator and the other given\n iterator, until one is exhausted.","sig":null,"attributes":[{"value":"/ Interleaves elements of this iterator and the other given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112184,"byte_end":112245,"line_start":2374,"line_end":2374,"column_start":5,"column_end":66}},{"value":"/ iterator, until one is exhausted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112250,"byte_end":112287,"line_start":2375,"line_end":2375,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112292,"byte_end":112295,"line_start":2376,"line_end":2376,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112300,"byte_end":112314,"line_start":2377,"line_end":2377,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112319,"byte_end":112322,"line_start":2378,"line_end":2378,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112327,"byte_end":112334,"line_start":2379,"line_end":2379,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112339,"byte_end":112365,"line_start":2380,"line_end":2380,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2, 3, 4], vec![5, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112370,"byte_end":112418,"line_start":2381,"line_end":2381,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave_shortest(y).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112423,"byte_end":112496,"line_start":2382,"line_end":2382,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(r, vec![1, 5, 2, 6, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112501,"byte_end":112540,"line_start":2383,"line_end":2383,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112545,"byte_end":112552,"line_start":2384,"line_end":2384,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4895},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113760,"byte_end":113766,"line_start":2413,"line_end":2413,"column_start":8,"column_end":14},"name":"chunks","qualname":"::iter::IndexedParallelIterator::chunks","value":"pub fn chunks(Self, usize) -> Chunks<Self>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Splits an iterator up into fixed-size chunks.","sig":null,"attributes":[{"value":"/ Splits an iterator up into fixed-size chunks.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112837,"byte_end":112886,"line_start":2393,"line_end":2393,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112891,"byte_end":112894,"line_start":2394,"line_end":2394,"column_start":5,"column_end":8}},{"value":"/ Returns an iterator that returns `Vec`s of the given number of elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112899,"byte_end":112975,"line_start":2395,"line_end":2395,"column_start":5,"column_end":81}},{"value":"/ If the number of elements in the iterator is not divisible by `chunk_size`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":112980,"byte_end":113059,"line_start":2396,"line_end":2396,"column_start":5,"column_end":84}},{"value":"/ the last chunk may be shorter than `chunk_size`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113064,"byte_end":113116,"line_start":2397,"line_end":2397,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113121,"byte_end":113124,"line_start":2398,"line_end":2398,"column_start":5,"column_end":8}},{"value":"/ See also [`par_chunks()`] and [`par_chunks_mut()`] for similar behavior on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113129,"byte_end":113207,"line_start":2399,"line_end":2399,"column_start":5,"column_end":83}},{"value":"/ slices, without having to allocate intermediate `Vec`s for the chunks.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113212,"byte_end":113286,"line_start":2400,"line_end":2400,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113291,"byte_end":113294,"line_start":2401,"line_end":2401,"column_start":5,"column_end":8}},{"value":"/ [`par_chunks()`]: ../slice/trait.ParallelSlice.html#method.par_chunks","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113299,"byte_end":113372,"line_start":2402,"line_end":2402,"column_start":5,"column_end":78}},{"value":"/ [`par_chunks_mut()`]: ../slice/trait.ParallelSliceMut.html#method.par_chunks_mut","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113377,"byte_end":113461,"line_start":2403,"line_end":2403,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113466,"byte_end":113469,"line_start":2404,"line_end":2404,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113474,"byte_end":113488,"line_start":2405,"line_end":2405,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113493,"byte_end":113496,"line_start":2406,"line_end":2406,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113501,"byte_end":113508,"line_start":2407,"line_end":2407,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113513,"byte_end":113539,"line_start":2408,"line_end":2408,"column_start":5,"column_end":31}},{"value":"/ let a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113544,"byte_end":113592,"line_start":2409,"line_end":2409,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<Vec<i32>> = a.into_par_iter().chunks(3).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113597,"byte_end":113662,"line_start":2410,"line_end":2410,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(r, vec![vec![1,2,3], vec![4,5,6], vec![7,8,9], vec![10]]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113667,"byte_end":113740,"line_start":2411,"line_end":2411,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113745,"byte_end":113752,"line_start":2412,"line_end":2412,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4896},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114378,"byte_end":114381,"line_start":2432,"line_end":2432,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::IndexedParallelIterator::cmp","value":"pub fn cmp<I>(Self, I) -> Ordering where I: IntoParallelIterator<Item =\nSelf::Item>, I::Iter: IndexedParallelIterator, Self::Item: Ord","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":113924,"byte_end":114008,"line_start":2418,"line_end":2418,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114013,"byte_end":114025,"line_start":2419,"line_end":2419,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114030,"byte_end":114033,"line_start":2420,"line_end":2420,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114038,"byte_end":114052,"line_start":2421,"line_end":2421,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114057,"byte_end":114060,"line_start":2422,"line_end":2422,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114065,"byte_end":114072,"line_start":2423,"line_end":2423,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114077,"byte_end":114103,"line_start":2424,"line_end":2424,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114108,"byte_end":114138,"line_start":2425,"line_end":2425,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114143,"byte_end":114146,"line_start":2426,"line_end":2426,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114151,"byte_end":114177,"line_start":2427,"line_end":2427,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 3, 0]), Less);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114182,"byte_end":114237,"line_start":2428,"line_end":2428,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2, 3]), Equal);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114242,"byte_end":114298,"line_start":2429,"line_end":2429,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2]), Greater);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114303,"byte_end":114358,"line_start":2430,"line_end":2430,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114363,"byte_end":114370,"line_start":2431,"line_end":2431,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4901},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115610,"byte_end":115621,"line_start":2472,"line_end":2472,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::IndexedParallelIterator::partial_cmp","value":"pub fn partial_cmp<I>(Self, I) -> Option<Ordering> where\nI: IntoParallelIterator, I::Iter: IndexedParallelIterator,\nSelf::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":114996,"byte_end":115080,"line_start":2456,"line_end":2456,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115085,"byte_end":115097,"line_start":2457,"line_end":2457,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115102,"byte_end":115105,"line_start":2458,"line_end":2458,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115110,"byte_end":115124,"line_start":2459,"line_end":2459,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115129,"byte_end":115132,"line_start":2460,"line_end":2460,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115137,"byte_end":115144,"line_start":2461,"line_end":2461,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115149,"byte_end":115175,"line_start":2462,"line_end":2462,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115180,"byte_end":115210,"line_start":2463,"line_end":2463,"column_start":5,"column_end":35}},{"value":"/ use std::f64::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115215,"byte_end":115237,"line_start":2464,"line_end":2464,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115242,"byte_end":115245,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1.0, 2.0, 3.0];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115250,"byte_end":115282,"line_start":2466,"line_end":2466,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 3.0, 0.0]), Some(Less));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115287,"byte_end":115362,"line_start":2467,"line_end":2467,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0, 3.0]), Some(Equal));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115367,"byte_end":115443,"line_start":2468,"line_end":2468,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0]), Some(Greater));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115448,"byte_end":115521,"line_start":2469,"line_end":2469,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, NAN]), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115526,"byte_end":115590,"line_start":2470,"line_end":2470,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":115595,"byte_end":115602,"line_start":2471,"line_end":2471,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4907},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":116400,"byte_end":116402,"line_start":2498,"line_end":2498,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::IndexedParallelIterator::eq","value":"pub fn eq<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are equal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":116297,"byte_end":116354,"line_start":2496,"line_end":2496,"column_start":5,"column_end":62}},{"value":"/ are equal to those of another","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":116359,"byte_end":116392,"line_start":2497,"line_end":2497,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":4912},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":116904,"byte_end":116906,"line_start":2515,"line_end":2515,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::IndexedParallelIterator::ne","value":"pub fn ne<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are unequal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":116799,"byte_end":116856,"line_start":2513,"line_end":2513,"column_start":5,"column_end":62}},{"value":"/ are unequal to those of another","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":116861,"byte_end":116896,"line_start":2514,"line_end":2514,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":4914},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117223,"byte_end":117225,"line_start":2526,"line_end":2526,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::IndexedParallelIterator::lt","value":"pub fn lt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically less than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117100,"byte_end":117157,"line_start":2524,"line_end":2524,"column_start":5,"column_end":62}},{"value":"/ are lexicographically less than those of another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117162,"byte_end":117215,"line_start":2525,"line_end":2525,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":4916},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117564,"byte_end":117566,"line_start":2537,"line_end":2537,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::IndexedParallelIterator::le","value":"pub fn le<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117452,"byte_end":117509,"line_start":2535,"line_end":2535,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117514,"byte_end":117556,"line_start":2536,"line_end":2536,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4918},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117974,"byte_end":117976,"line_start":2549,"line_end":2549,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::IndexedParallelIterator::gt","value":"pub fn gt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically greater than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117848,"byte_end":117905,"line_start":2547,"line_end":2547,"column_start":5,"column_end":62}},{"value":"/ are lexicographically greater than those of another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":117910,"byte_end":117966,"line_start":2548,"line_end":2548,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":4920},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118318,"byte_end":118320,"line_start":2560,"line_end":2560,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::IndexedParallelIterator::ge","value":"pub fn ge<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118206,"byte_end":118263,"line_start":2558,"line_end":2558,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118268,"byte_end":118310,"line_start":2559,"line_end":2559,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4922},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118974,"byte_end":118983,"line_start":2585,"line_end":2585,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::IndexedParallelIterator::enumerate","value":"pub fn enumerate(Self) -> Enumerate<Self>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Yields an index along with each item.","sig":null,"attributes":[{"value":"/ Yields an index along with each item.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118605,"byte_end":118646,"line_start":2570,"line_end":2570,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118651,"byte_end":118654,"line_start":2571,"line_end":2571,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118659,"byte_end":118673,"line_start":2572,"line_end":2572,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118678,"byte_end":118681,"line_start":2573,"line_end":2573,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118686,"byte_end":118693,"line_start":2574,"line_end":2574,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118698,"byte_end":118724,"line_start":2575,"line_end":2575,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118729,"byte_end":118732,"line_start":2576,"line_end":2576,"column_start":5,"column_end":8}},{"value":"/ let chars = vec!['a', 'b', 'c'];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118737,"byte_end":118773,"line_start":2577,"line_end":2577,"column_start":5,"column_end":41}},{"value":"/ let result: Vec<_> = chars","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118778,"byte_end":118808,"line_start":2578,"line_end":2578,"column_start":5,"column_end":35}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118813,"byte_end":118837,"line_start":2579,"line_end":2579,"column_start":5,"column_end":29}},{"value":"/     .enumerate()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118842,"byte_end":118862,"line_start":2580,"line_end":2580,"column_start":5,"column_end":25}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118867,"byte_end":118886,"line_start":2581,"line_end":2581,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118891,"byte_end":118894,"line_start":2582,"line_end":2582,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(0, 'a'), (1, 'b'), (2, 'c')]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118899,"byte_end":118954,"line_start":2583,"line_end":2583,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":118959,"byte_end":118966,"line_start":2584,"line_end":2584,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4923},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119527,"byte_end":119534,"line_start":2609,"line_end":2609,"column_start":8,"column_end":15},"name":"step_by","qualname":"::iter::IndexedParallelIterator::step_by","value":"pub fn step_by(Self, usize) -> StepBy<Self>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Creates an iterator that steps by the given amount","sig":null,"attributes":[{"value":"/ Creates an iterator that steps by the given amount","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119051,"byte_end":119105,"line_start":2589,"line_end":2589,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119110,"byte_end":119113,"line_start":2590,"line_end":2590,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119118,"byte_end":119132,"line_start":2591,"line_end":2591,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119137,"byte_end":119140,"line_start":2592,"line_end":2592,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119145,"byte_end":119152,"line_start":2593,"line_end":2593,"column_start":5,"column_end":12}},{"value":"/use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119157,"byte_end":119182,"line_start":2594,"line_end":2594,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119187,"byte_end":119190,"line_start":2595,"line_end":2595,"column_start":5,"column_end":8}},{"value":"/ let range = (3..10);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119195,"byte_end":119219,"line_start":2596,"line_end":2596,"column_start":5,"column_end":29}},{"value":"/ let result: Vec<i32> = range","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119224,"byte_end":119256,"line_start":2597,"line_end":2597,"column_start":5,"column_end":37}},{"value":"/    .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119261,"byte_end":119284,"line_start":2598,"line_end":2598,"column_start":5,"column_end":28}},{"value":"/    .step_by(3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119289,"byte_end":119307,"line_start":2599,"line_end":2599,"column_start":5,"column_end":23}},{"value":"/    .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119312,"byte_end":119330,"line_start":2600,"line_end":2600,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119335,"byte_end":119338,"line_start":2601,"line_end":2601,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [3, 6, 9])","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119343,"byte_end":119376,"line_start":2602,"line_end":2602,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119381,"byte_end":119388,"line_start":2603,"line_end":2603,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119393,"byte_end":119396,"line_start":2604,"line_end":2604,"column_start":5,"column_end":8}},{"value":"/ # Compatibility","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119401,"byte_end":119420,"line_start":2605,"line_end":2605,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119425,"byte_end":119428,"line_start":2606,"line_end":2606,"column_start":5,"column_end":8}},{"value":"/ This method is only available on Rust 1.38 or greater.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119433,"byte_end":119491,"line_start":2607,"line_end":2607,"column_start":5,"column_end":63}},{"value":"cfg(has_step_by_rev)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119496,"byte_end":119519,"line_start":2608,"line_end":2608,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4924},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119950,"byte_end":119954,"line_start":2627,"line_end":2627,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::IndexedParallelIterator::skip","value":"pub fn skip(Self, usize) -> Skip<Self>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Creates an iterator that skips the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that skips the first `n` elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119615,"byte_end":119673,"line_start":2613,"line_end":2613,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119678,"byte_end":119681,"line_start":2614,"line_end":2614,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119686,"byte_end":119700,"line_start":2615,"line_end":2615,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119705,"byte_end":119708,"line_start":2616,"line_end":2616,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119713,"byte_end":119720,"line_start":2617,"line_end":2617,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119725,"byte_end":119751,"line_start":2618,"line_end":2618,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119756,"byte_end":119759,"line_start":2619,"line_end":2619,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119764,"byte_end":119797,"line_start":2620,"line_end":2620,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119802,"byte_end":119826,"line_start":2621,"line_end":2621,"column_start":5,"column_end":29}},{"value":"/     .skip(95)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119831,"byte_end":119848,"line_start":2622,"line_end":2622,"column_start":5,"column_end":22}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119853,"byte_end":119872,"line_start":2623,"line_end":2623,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119877,"byte_end":119880,"line_start":2624,"line_end":2624,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [95, 96, 97, 98, 99]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119885,"byte_end":119930,"line_start":2625,"line_end":2625,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":119935,"byte_end":119942,"line_start":2626,"line_end":2626,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4925},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120355,"byte_end":120359,"line_start":2645,"line_end":2645,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::IndexedParallelIterator::take","value":"pub fn take(Self, usize) -> Take<Self>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Creates an iterator that yields the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that yields the first `n` elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120025,"byte_end":120084,"line_start":2631,"line_end":2631,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120089,"byte_end":120092,"line_start":2632,"line_end":2632,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120097,"byte_end":120111,"line_start":2633,"line_end":2633,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120116,"byte_end":120119,"line_start":2634,"line_end":2634,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120124,"byte_end":120131,"line_start":2635,"line_end":2635,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120136,"byte_end":120162,"line_start":2636,"line_end":2636,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120167,"byte_end":120170,"line_start":2637,"line_end":2637,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120175,"byte_end":120208,"line_start":2638,"line_end":2638,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120213,"byte_end":120237,"line_start":2639,"line_end":2639,"column_start":5,"column_end":29}},{"value":"/     .take(5)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120242,"byte_end":120258,"line_start":2640,"line_end":2640,"column_start":5,"column_end":21}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120263,"byte_end":120282,"line_start":2641,"line_end":2641,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120287,"byte_end":120290,"line_start":2642,"line_end":2642,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120295,"byte_end":120335,"line_start":2643,"line_end":2643,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120340,"byte_end":120347,"line_start":2644,"line_end":2644,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4926},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121073,"byte_end":121085,"line_start":2667,"line_end":2667,"column_start":8,"column_end":20},"name":"position_any","qualname":"::iter::IndexedParallelIterator::position_any","value":"pub fn position_any<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and returns its index.  Like\n `ParallelIterator::find_any`, the parallel search will not\n necessarily find the **first** match, and once a match is\n found we'll attempt to stop processing any more.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120430,"byte_end":120490,"line_start":2649,"line_end":2649,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and returns its index.  Like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120495,"byte_end":120556,"line_start":2650,"line_end":2650,"column_start":5,"column_end":66}},{"value":"/ `ParallelIterator::find_any`, the parallel search will not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120561,"byte_end":120623,"line_start":2651,"line_end":2651,"column_start":5,"column_end":67}},{"value":"/ necessarily find the **first** match, and once a match is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120628,"byte_end":120689,"line_start":2652,"line_end":2652,"column_start":5,"column_end":66}},{"value":"/ found we'll attempt to stop processing any more.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120694,"byte_end":120746,"line_start":2653,"line_end":2653,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120751,"byte_end":120754,"line_start":2654,"line_end":2654,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120759,"byte_end":120773,"line_start":2655,"line_end":2655,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120778,"byte_end":120781,"line_start":2656,"line_end":2656,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120786,"byte_end":120793,"line_start":2657,"line_end":2657,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120798,"byte_end":120824,"line_start":2658,"line_end":2658,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120829,"byte_end":120832,"line_start":2659,"line_end":2659,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120837,"byte_end":120862,"line_start":2660,"line_end":2660,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120867,"byte_end":120870,"line_start":2661,"line_end":2661,"column_start":5,"column_end":8}},{"value":"/ let i = a.par_iter().position_any(|&x| x == 3).expect(\"found\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120875,"byte_end":120942,"line_start":2662,"line_end":2662,"column_start":5,"column_end":72}},{"value":"/ assert!(i == 2 || i == 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120947,"byte_end":120977,"line_start":2663,"line_end":2663,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120982,"byte_end":120985,"line_start":2664,"line_end":2664,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_any(|&x| x == 100), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":120990,"byte_end":121053,"line_start":2665,"line_end":2665,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121058,"byte_end":121065,"line_start":2666,"line_end":2666,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4929},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122326,"byte_end":122340,"line_start":2704,"line_end":2704,"column_start":8,"column_end":22},"name":"position_first","qualname":"::iter::IndexedParallelIterator::position_first","value":"pub fn position_first<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121384,"byte_end":121457,"line_start":2680,"line_end":2680,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121462,"byte_end":121522,"line_start":2681,"line_end":2681,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121527,"byte_end":121530,"line_start":2682,"line_end":2682,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_first`, once a match is found,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121535,"byte_end":121598,"line_start":2683,"line_end":2683,"column_start":5,"column_end":68}},{"value":"/ all attempts to the right of the match will be stopped, while","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121603,"byte_end":121668,"line_start":2684,"line_end":2684,"column_start":5,"column_end":70}},{"value":"/ attempts to the left must continue in case an earlier match","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121673,"byte_end":121736,"line_start":2685,"line_end":2685,"column_start":5,"column_end":68}},{"value":"/ is found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121741,"byte_end":121754,"line_start":2686,"line_end":2686,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121759,"byte_end":121762,"line_start":2687,"line_end":2687,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121767,"byte_end":121838,"line_start":2688,"line_end":2688,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121843,"byte_end":121914,"line_start":2689,"line_end":2689,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121919,"byte_end":121990,"line_start":2690,"line_end":2690,"column_start":5,"column_end":76}},{"value":"/ `position_any` is a better choice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":121995,"byte_end":122033,"line_start":2691,"line_end":2691,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122038,"byte_end":122041,"line_start":2692,"line_end":2692,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122046,"byte_end":122060,"line_start":2693,"line_end":2693,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122065,"byte_end":122068,"line_start":2694,"line_end":2694,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122073,"byte_end":122080,"line_start":2695,"line_end":2695,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122085,"byte_end":122111,"line_start":2696,"line_end":2696,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122116,"byte_end":122119,"line_start":2697,"line_end":2697,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122124,"byte_end":122149,"line_start":2698,"line_end":2698,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122154,"byte_end":122157,"line_start":2699,"line_end":2699,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 3), Some(2));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122162,"byte_end":122228,"line_start":2700,"line_end":2700,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122233,"byte_end":122236,"line_start":2701,"line_end":2701,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 100), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122241,"byte_end":122306,"line_start":2702,"line_end":2702,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122311,"byte_end":122318,"line_start":2703,"line_end":2703,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4932},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123547,"byte_end":123560,"line_start":2741,"line_end":2741,"column_start":8,"column_end":21},"name":"position_last","qualname":"::iter::IndexedParallelIterator::position_last","value":"pub fn position_last<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122641,"byte_end":122713,"line_start":2717,"line_end":2717,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122718,"byte_end":122778,"line_start":2718,"line_end":2718,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122783,"byte_end":122786,"line_start":2719,"line_end":2719,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_last`, once a match is found,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122791,"byte_end":122853,"line_start":2720,"line_end":2720,"column_start":5,"column_end":67}},{"value":"/ all attempts to the left of the match will be stopped, while","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122858,"byte_end":122922,"line_start":2721,"line_end":2721,"column_start":5,"column_end":69}},{"value":"/ attempts to the right must continue in case a later match","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122927,"byte_end":122988,"line_start":2722,"line_end":2722,"column_start":5,"column_end":66}},{"value":"/ is found.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":122993,"byte_end":123006,"line_start":2723,"line_end":2723,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123011,"byte_end":123014,"line_start":2724,"line_end":2724,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123019,"byte_end":123090,"line_start":2725,"line_end":2725,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123095,"byte_end":123167,"line_start":2726,"line_end":2726,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `position_any` is a better","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123172,"byte_end":123240,"line_start":2727,"line_end":2727,"column_start":5,"column_end":73}},{"value":"/ choice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123245,"byte_end":123256,"line_start":2728,"line_end":2728,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123261,"byte_end":123264,"line_start":2729,"line_end":2729,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123269,"byte_end":123283,"line_start":2730,"line_end":2730,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123288,"byte_end":123291,"line_start":2731,"line_end":2731,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123296,"byte_end":123303,"line_start":2732,"line_end":2732,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123308,"byte_end":123334,"line_start":2733,"line_end":2733,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123339,"byte_end":123342,"line_start":2734,"line_end":2734,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123347,"byte_end":123372,"line_start":2735,"line_end":2735,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123377,"byte_end":123380,"line_start":2736,"line_end":2736,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 3), Some(3));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123385,"byte_end":123450,"line_start":2737,"line_end":2737,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123455,"byte_end":123458,"line_start":2738,"line_end":2738,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 100), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123463,"byte_end":123527,"line_start":2739,"line_end":2739,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123532,"byte_end":123539,"line_start":2740,"line_end":2740,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4935},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124048,"byte_end":124056,"line_start":2759,"line_end":2759,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::IndexedParallelIterator::position","value":"pub fn position<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) -> bool +\nSync + Send","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n\"parallel `position` does not search in order -- use `position_any`, \\\\\n                `position_first`, or `position_last`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":123879,"byte_end":124040,"line_start":2755,"line_end":2758,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":4937},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124947,"byte_end":124956,"line_start":2784,"line_end":2784,"column_start":8,"column_end":17},"name":"positions","qualname":"::iter::IndexedParallelIterator::positions","value":"pub fn positions<P>(Self, P) -> Positions<Self, P> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Searches for items in the parallel iterator that match the given\n predicate, and returns their indices.","sig":null,"attributes":[{"value":"/ Searches for items in the parallel iterator that match the given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124210,"byte_end":124278,"line_start":2766,"line_end":2766,"column_start":5,"column_end":73}},{"value":"/ predicate, and returns their indices.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124283,"byte_end":124324,"line_start":2767,"line_end":2767,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124329,"byte_end":124332,"line_start":2768,"line_end":2768,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124337,"byte_end":124351,"line_start":2769,"line_end":2769,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124356,"byte_end":124359,"line_start":2770,"line_end":2770,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124364,"byte_end":124371,"line_start":2771,"line_end":2771,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124376,"byte_end":124402,"line_start":2772,"line_end":2772,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124407,"byte_end":124410,"line_start":2773,"line_end":2773,"column_start":5,"column_end":8}},{"value":"/ let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124415,"byte_end":124473,"line_start":2774,"line_end":2774,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124478,"byte_end":124481,"line_start":2775,"line_end":2775,"column_start":5,"column_end":8}},{"value":"/ // Find the positions of primes congruent to 1 modulo 6","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124486,"byte_end":124545,"line_start":2776,"line_end":2776,"column_start":5,"column_end":64}},{"value":"/ let p1mod6: Vec<_> = primes.par_iter().positions(|&p| p % 6 == 1).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124550,"byte_end":124630,"line_start":2777,"line_end":2777,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(p1mod6, [3, 5, 7]); // primes 7, 13, and 19","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124635,"byte_end":124693,"line_start":2778,"line_end":2778,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124698,"byte_end":124701,"line_start":2779,"line_end":2779,"column_start":5,"column_end":8}},{"value":"/ // Find the positions of primes congruent to 5 modulo 6","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124706,"byte_end":124765,"line_start":2780,"line_end":2780,"column_start":5,"column_end":64}},{"value":"/ let p5mod6: Vec<_> = primes.par_iter().positions(|&p| p % 6 == 5).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124770,"byte_end":124850,"line_start":2781,"line_end":2781,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(p5mod6, [2, 4, 6, 8, 9]); // primes 5, 11, 17, 23, and 29","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124855,"byte_end":124927,"line_start":2782,"line_end":2782,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":124932,"byte_end":124939,"line_start":2783,"line_end":2783,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4939},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125473,"byte_end":125476,"line_start":2806,"line_end":2806,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::IndexedParallelIterator::rev","value":"pub fn rev(Self) -> Rev<Self>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Produces a new iterator with the elements of this iterator in\n reverse order.","sig":null,"attributes":[{"value":"/ Produces a new iterator with the elements of this iterator in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125118,"byte_end":125183,"line_start":2791,"line_end":2791,"column_start":5,"column_end":70}},{"value":"/ reverse order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125188,"byte_end":125206,"line_start":2792,"line_end":2792,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125211,"byte_end":125214,"line_start":2793,"line_end":2793,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125219,"byte_end":125233,"line_start":2794,"line_end":2794,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125238,"byte_end":125241,"line_start":2795,"line_end":2795,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125246,"byte_end":125253,"line_start":2796,"line_end":2796,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125258,"byte_end":125284,"line_start":2797,"line_end":2797,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125289,"byte_end":125292,"line_start":2798,"line_end":2798,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..5)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125297,"byte_end":125328,"line_start":2799,"line_end":2799,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125333,"byte_end":125357,"line_start":2800,"line_end":2800,"column_start":5,"column_end":29}},{"value":"/     .rev()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125362,"byte_end":125376,"line_start":2801,"line_end":2801,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125381,"byte_end":125400,"line_start":2802,"line_end":2802,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125405,"byte_end":125408,"line_start":2803,"line_end":2803,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [4, 3, 2, 1, 0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125413,"byte_end":125453,"line_start":2804,"line_end":2804,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125458,"byte_end":125465,"line_start":2805,"line_end":2805,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4940},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126296,"byte_end":126308,"line_start":2832,"line_end":2832,"column_start":8,"column_end":20},"name":"with_min_len","qualname":"::iter::IndexedParallelIterator::with_min_len","value":"pub fn with_min_len(Self, usize) -> MinLen<Self>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Sets the minimum length of iterators desired to process in each\n rayon job.  Rayon will not split any smaller than this length, but\n of course an iterator could already be smaller to begin with.","sig":null,"attributes":[{"value":"/ Sets the minimum length of iterators desired to process in each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125532,"byte_end":125599,"line_start":2810,"line_end":2810,"column_start":5,"column_end":72}},{"value":"/ rayon job.  Rayon will not split any smaller than this length, but","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125604,"byte_end":125674,"line_start":2811,"line_end":2811,"column_start":5,"column_end":75}},{"value":"/ of course an iterator could already be smaller to begin with.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125679,"byte_end":125744,"line_start":2812,"line_end":2812,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125749,"byte_end":125752,"line_start":2813,"line_end":2813,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use greater of the two","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125757,"byte_end":125826,"line_start":2814,"line_end":2814,"column_start":5,"column_end":74}},{"value":"/ minimums.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125831,"byte_end":125844,"line_start":2815,"line_end":2815,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125849,"byte_end":125915,"line_start":2816,"line_end":2816,"column_start":5,"column_end":71}},{"value":"/ their own minimum length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125920,"byte_end":125949,"line_start":2817,"line_end":2817,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125954,"byte_end":125957,"line_start":2818,"line_end":2818,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125962,"byte_end":125976,"line_start":2819,"line_end":2819,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125981,"byte_end":125984,"line_start":2820,"line_end":2820,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":125989,"byte_end":125996,"line_start":2821,"line_end":2821,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126001,"byte_end":126027,"line_start":2822,"line_end":2822,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126032,"byte_end":126035,"line_start":2823,"line_end":2823,"column_start":5,"column_end":8}},{"value":"/ let min = (0..1_000_000)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126040,"byte_end":126068,"line_start":2824,"line_end":2824,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126073,"byte_end":126097,"line_start":2825,"line_end":2825,"column_start":5,"column_end":29}},{"value":"/     .with_min_len(1234)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126102,"byte_end":126129,"line_start":2826,"line_end":2826,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126134,"byte_end":126209,"line_start":2827,"line_end":2827,"column_start":5,"column_end":80}},{"value":"/     .min().unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126214,"byte_end":126238,"line_start":2828,"line_end":2828,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126243,"byte_end":126246,"line_start":2829,"line_end":2829,"column_start":5,"column_end":8}},{"value":"/ assert!(min >= 1234);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126251,"byte_end":126276,"line_start":2830,"line_end":2830,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126281,"byte_end":126288,"line_start":2831,"line_end":2831,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4941},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127250,"byte_end":127262,"line_start":2860,"line_end":2860,"column_start":8,"column_end":20},"name":"with_max_len","qualname":"::iter::IndexedParallelIterator::with_max_len","value":"pub fn with_max_len(Self, usize) -> MaxLen<Self>","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Sets the maximum length of iterators desired to process in each\n rayon job.  Rayon will try to split at least below this length,\n unless that would put it below the length from `with_min_len()`.\n For example, given min=10 and max=15, a length of 16 will not be\n split any further.","sig":null,"attributes":[{"value":"/ Sets the maximum length of iterators desired to process in each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126387,"byte_end":126454,"line_start":2836,"line_end":2836,"column_start":5,"column_end":72}},{"value":"/ rayon job.  Rayon will try to split at least below this length,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126459,"byte_end":126526,"line_start":2837,"line_end":2837,"column_start":5,"column_end":72}},{"value":"/ unless that would put it below the length from `with_min_len()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126531,"byte_end":126599,"line_start":2838,"line_end":2838,"column_start":5,"column_end":73}},{"value":"/ For example, given min=10 and max=15, a length of 16 will not be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126604,"byte_end":126672,"line_start":2839,"line_end":2839,"column_start":5,"column_end":73}},{"value":"/ split any further.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126677,"byte_end":126699,"line_start":2840,"line_end":2840,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126704,"byte_end":126707,"line_start":2841,"line_end":2841,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use lesser of the two","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126712,"byte_end":126780,"line_start":2842,"line_end":2842,"column_start":5,"column_end":73}},{"value":"/ maximums.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126785,"byte_end":126798,"line_start":2843,"line_end":2843,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126803,"byte_end":126869,"line_start":2844,"line_end":2844,"column_start":5,"column_end":71}},{"value":"/ their own maximum length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126874,"byte_end":126903,"line_start":2845,"line_end":2845,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126908,"byte_end":126911,"line_start":2846,"line_end":2846,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126916,"byte_end":126930,"line_start":2847,"line_end":2847,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126935,"byte_end":126938,"line_start":2848,"line_end":2848,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126943,"byte_end":126950,"line_start":2849,"line_end":2849,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126955,"byte_end":126981,"line_start":2850,"line_end":2850,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126986,"byte_end":126989,"line_start":2851,"line_end":2851,"column_start":5,"column_end":8}},{"value":"/ let max = (0..1_000_000)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":126994,"byte_end":127022,"line_start":2852,"line_end":2852,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127027,"byte_end":127051,"line_start":2853,"line_end":2853,"column_start":5,"column_end":29}},{"value":"/     .with_max_len(1234)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127056,"byte_end":127083,"line_start":2854,"line_end":2854,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127088,"byte_end":127163,"line_start":2855,"line_end":2855,"column_start":5,"column_end":80}},{"value":"/     .max().unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127168,"byte_end":127192,"line_start":2856,"line_end":2856,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127197,"byte_end":127200,"line_start":2857,"line_end":2857,"column_start":5,"column_end":8}},{"value":"/ assert!(max <= 1234);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127205,"byte_end":127230,"line_start":2858,"line_end":2858,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127235,"byte_end":127242,"line_start":2859,"line_end":2859,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4942},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127750,"byte_end":127753,"line_start":2878,"line_end":2878,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::IndexedParallelIterator::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Produces an exact count of how many items this iterator will\n produce, presuming no panic occurs.","sig":null,"attributes":[{"value":"/ Produces an exact count of how many items this iterator will","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127341,"byte_end":127405,"line_start":2864,"line_end":2864,"column_start":5,"column_end":69}},{"value":"/ produce, presuming no panic occurs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127410,"byte_end":127449,"line_start":2865,"line_end":2865,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127454,"byte_end":127457,"line_start":2866,"line_end":2866,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127462,"byte_end":127476,"line_start":2867,"line_end":2867,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127481,"byte_end":127484,"line_start":2868,"line_end":2868,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127489,"byte_end":127496,"line_start":2869,"line_end":2869,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127501,"byte_end":127527,"line_start":2870,"line_end":2870,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127532,"byte_end":127535,"line_start":2871,"line_end":2871,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..100).into_par_iter().zip(vec![0; 10]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127540,"byte_end":127601,"line_start":2872,"line_end":2872,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(par_iter.len(), 10);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127606,"byte_end":127641,"line_start":2873,"line_end":2873,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127646,"byte_end":127649,"line_start":2874,"line_end":2874,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127654,"byte_end":127695,"line_start":2875,"line_end":2875,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec.len(), 10);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127700,"byte_end":127730,"line_start":2876,"line_end":2876,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127735,"byte_end":127742,"line_start":2877,"line_end":2877,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4943},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128517,"byte_end":128522,"line_start":2894,"line_end":2894,"column_start":8,"column_end":13},"name":"drive","qualname":"::iter::IndexedParallelIterator::drive","value":"pub fn drive<C: Consumer<Self::Item>>(Self, C) -> C::Result","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127776,"byte_end":127840,"line_start":2880,"line_end":2880,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127845,"byte_end":127901,"line_start":2881,"line_end":2881,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127906,"byte_end":127909,"line_start":2882,"line_end":2882,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127914,"byte_end":127975,"line_start":2883,"line_end":2883,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":127980,"byte_end":128045,"line_start":2884,"line_end":2884,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128050,"byte_end":128109,"line_start":2885,"line_end":2885,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel. If a split does happen, it","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128114,"byte_end":128180,"line_start":2886,"line_end":2886,"column_start":5,"column_end":71}},{"value":"/ will inform the consumer of the index where the split should","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128185,"byte_end":128249,"line_start":2887,"line_end":2887,"column_start":5,"column_end":69}},{"value":"/ occur (unlike `ParallelIterator::drive_unindexed()`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128254,"byte_end":128311,"line_start":2888,"line_end":2888,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128316,"byte_end":128319,"line_start":2889,"line_end":2889,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128324,"byte_end":128390,"line_start":2890,"line_end":2890,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128395,"byte_end":128409,"line_start":2891,"line_end":2891,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128414,"byte_end":128417,"line_start":2892,"line_end":2892,"column_start":5,"column_end":8}},{"value":"/ [README]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128422,"byte_end":128509,"line_start":2893,"line_end":2893,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":4945},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129362,"byte_end":129375,"line_start":2911,"line_end":2911,"column_start":8,"column_end":21},"name":"with_producer","qualname":"::iter::IndexedParallelIterator::with_producer","value":"pub fn with_producer<CB: ProducerCallback<Self::Item>>(Self, CB) -> CB::Output","parent":{"krate":0,"index":4882},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128586,"byte_end":128650,"line_start":2896,"line_end":2896,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128655,"byte_end":128711,"line_start":2897,"line_end":2897,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128716,"byte_end":128719,"line_start":2898,"line_end":2898,"column_start":5,"column_end":8}},{"value":"/ This method converts the iterator into a producer P and then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128724,"byte_end":128788,"line_start":2899,"line_end":2899,"column_start":5,"column_end":69}},{"value":"/ invokes `callback.callback()` with P. Note that the type of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128793,"byte_end":128856,"line_start":2900,"line_end":2900,"column_start":5,"column_end":68}},{"value":"/ this producer is not defined as part of the API, since","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128861,"byte_end":128919,"line_start":2901,"line_end":2901,"column_start":5,"column_end":63}},{"value":"/ `callback` must be defined generically for all producers. This","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128924,"byte_end":128990,"line_start":2902,"line_end":2902,"column_start":5,"column_end":71}},{"value":"/ allows the producer type to contain references; it also means","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":128995,"byte_end":129060,"line_start":2903,"line_end":2903,"column_start":5,"column_end":70}},{"value":"/ that parallel iterators can adjust that type without causing a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129065,"byte_end":129131,"line_start":2904,"line_end":2904,"column_start":5,"column_end":71}},{"value":"/ breaking change.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129136,"byte_end":129156,"line_start":2905,"line_end":2905,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129161,"byte_end":129164,"line_start":2906,"line_end":2906,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129169,"byte_end":129235,"line_start":2907,"line_end":2907,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129240,"byte_end":129254,"line_start":2908,"line_end":2908,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129259,"byte_end":129262,"line_start":2909,"line_end":2909,"column_start":5,"column_end":8}},{"value":"/ [README]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129267,"byte_end":129354,"line_start":2910,"line_end":2910,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":4947},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130525,"byte_end":130545,"line_start":2950,"line_end":2950,"column_start":11,"column_end":31},"name":"FromParallelIterator","qualname":"::iter::FromParallelIterator","value":"FromParallelIterator<T>","parent":null,"children":[{"krate":0,"index":4949}],"decl_id":null,"docs":" `FromParallelIterator` implements the creation of a collection\n from a [`ParallelIterator`]. By implementing\n `FromParallelIterator` for a given type, you define how it will be\n created from an iterator.","sig":null,"attributes":[{"value":"/ `FromParallelIterator` implements the creation of a collection","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129448,"byte_end":129514,"line_start":2914,"line_end":2914,"column_start":1,"column_end":67}},{"value":"/ from a [`ParallelIterator`]. By implementing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129515,"byte_end":129563,"line_start":2915,"line_end":2915,"column_start":1,"column_end":49}},{"value":"/ `FromParallelIterator` for a given type, you define how it will be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129564,"byte_end":129634,"line_start":2916,"line_end":2916,"column_start":1,"column_end":71}},{"value":"/ created from an iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129635,"byte_end":129664,"line_start":2917,"line_end":2917,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129665,"byte_end":129668,"line_start":2918,"line_end":2918,"column_start":1,"column_end":4}},{"value":"/ `FromParallelIterator` is used through [`ParallelIterator`]'s [`collect()`] method.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129669,"byte_end":129756,"line_start":2919,"line_end":2919,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129757,"byte_end":129760,"line_start":2920,"line_end":2920,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129761,"byte_end":129814,"line_start":2921,"line_end":2921,"column_start":1,"column_end":54}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129815,"byte_end":129876,"line_start":2922,"line_end":2922,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129877,"byte_end":129880,"line_start":2923,"line_end":2923,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129881,"byte_end":129895,"line_start":2924,"line_end":2924,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129896,"byte_end":129899,"line_start":2925,"line_end":2925,"column_start":1,"column_end":4}},{"value":"/ Implementing `FromParallelIterator` for your type:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129900,"byte_end":129954,"line_start":2926,"line_end":2926,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129955,"byte_end":129958,"line_start":2927,"line_end":2927,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129959,"byte_end":129966,"line_start":2928,"line_end":2928,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129967,"byte_end":129993,"line_start":2929,"line_end":2929,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":129994,"byte_end":130011,"line_start":2930,"line_end":2930,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130012,"byte_end":130015,"line_start":2931,"line_end":2931,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130016,"byte_end":130038,"line_start":2932,"line_end":2932,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130039,"byte_end":130059,"line_start":2933,"line_end":2933,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130060,"byte_end":130065,"line_start":2934,"line_end":2934,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130066,"byte_end":130069,"line_start":2935,"line_end":2935,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> FromParallelIterator<T> for BlackHole {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130070,"byte_end":130127,"line_start":2936,"line_end":2936,"column_start":1,"column_end":58}},{"value":"/     fn from_par_iter<I>(par_iter: I) -> Self","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130128,"byte_end":130176,"line_start":2937,"line_end":2937,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130177,"byte_end":130228,"line_start":2938,"line_end":2938,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130229,"byte_end":130238,"line_start":2939,"line_end":2939,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130239,"byte_end":130291,"line_start":2940,"line_end":2940,"column_start":1,"column_end":53}},{"value":"/         BlackHole {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130292,"byte_end":130315,"line_start":2941,"line_end":2941,"column_start":1,"column_end":24}},{"value":"/             mass: par_iter.count() * mem::size_of::<T>(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130316,"byte_end":130377,"line_start":2942,"line_end":2942,"column_start":1,"column_end":62}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130378,"byte_end":130391,"line_start":2943,"line_end":2943,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130392,"byte_end":130401,"line_start":2944,"line_end":2944,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130402,"byte_end":130407,"line_start":2945,"line_end":2945,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130408,"byte_end":130411,"line_start":2946,"line_end":2946,"column_start":1,"column_end":4}},{"value":"/ let bh: BlackHole = (0i32..1000).into_par_iter().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130412,"byte_end":130475,"line_start":2947,"line_end":2947,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130476,"byte_end":130506,"line_start":2948,"line_end":2948,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130507,"byte_end":130514,"line_start":2949,"line_end":2949,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4949},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131523,"byte_end":131536,"line_start":2969,"line_end":2969,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"::iter::FromParallelIterator::from_par_iter","value":"pub fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":4947},"children":[],"decl_id":null,"docs":" Creates an instance of the collection from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Creates an instance of the collection from the parallel iterator `par_iter`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130574,"byte_end":130654,"line_start":2954,"line_end":2954,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130659,"byte_end":130662,"line_start":2955,"line_end":2955,"column_start":5,"column_end":8}},{"value":"/ If your collection is not naturally parallel, the easiest (and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130667,"byte_end":130733,"line_start":2956,"line_end":2956,"column_start":5,"column_end":71}},{"value":"/ fastest) way to do this is often to collect `par_iter` into a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130738,"byte_end":130803,"line_start":2957,"line_end":2957,"column_start":5,"column_end":70}},{"value":"/ [`LinkedList`] or other intermediate data structure and then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130808,"byte_end":130872,"line_start":2958,"line_end":2958,"column_start":5,"column_end":69}},{"value":"/ sequentially extend your collection. However, a more 'native'","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130877,"byte_end":130942,"line_start":2959,"line_end":2959,"column_start":5,"column_end":70}},{"value":"/ technique is to use the [`par_iter.fold`] or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":130947,"byte_end":130995,"line_start":2960,"line_end":2960,"column_start":5,"column_end":53}},{"value":"/ [`par_iter.fold_with`] methods to create the collection.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131000,"byte_end":131060,"line_start":2961,"line_end":2961,"column_start":5,"column_end":65}},{"value":"/ Alternatively, if your collection is 'natively' parallel, you","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131065,"byte_end":131130,"line_start":2962,"line_end":2962,"column_start":5,"column_end":70}},{"value":"/ can use `par_iter.for_each` to process each element in turn.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131135,"byte_end":131199,"line_start":2963,"line_end":2963,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131204,"byte_end":131207,"line_start":2964,"line_end":2964,"column_start":5,"column_end":8}},{"value":"/ [`LinkedList`]: https://doc.rust-lang.org/std/collections/struct.LinkedList.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131212,"byte_end":131296,"line_start":2965,"line_end":2965,"column_start":5,"column_end":89}},{"value":"/ [`par_iter.fold`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131301,"byte_end":131363,"line_start":2966,"line_end":2966,"column_start":5,"column_end":67}},{"value":"/ [`par_iter.fold_with`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131368,"byte_end":131440,"line_start":2967,"line_end":2967,"column_start":5,"column_end":77}},{"value":"/ [`par_iter.for_each`]: trait.ParallelIterator.html#method.for_each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131445,"byte_end":131515,"line_start":2968,"line_end":2968,"column_start":5,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":4951},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132435,"byte_end":132449,"line_start":3005,"line_end":3005,"column_start":11,"column_end":25},"name":"ParallelExtend","qualname":"::iter::ParallelExtend","value":"ParallelExtend<T>","parent":null,"children":[{"krate":0,"index":4953}],"decl_id":null,"docs":" `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131617,"byte_end":131708,"line_start":2974,"line_end":2974,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131709,"byte_end":131712,"line_start":2975,"line_end":2975,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131713,"byte_end":131766,"line_start":2976,"line_end":2976,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131767,"byte_end":131770,"line_start":2977,"line_end":2977,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131771,"byte_end":131785,"line_start":2978,"line_end":2978,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131786,"byte_end":131789,"line_start":2979,"line_end":2979,"column_start":1,"column_end":4}},{"value":"/ Implementing `ParallelExtend` for your type:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131790,"byte_end":131838,"line_start":2980,"line_end":2980,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131839,"byte_end":131842,"line_start":2981,"line_end":2981,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131843,"byte_end":131850,"line_start":2982,"line_end":2982,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131851,"byte_end":131877,"line_start":2983,"line_end":2983,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131878,"byte_end":131895,"line_start":2984,"line_end":2984,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131896,"byte_end":131899,"line_start":2985,"line_end":2985,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131900,"byte_end":131922,"line_start":2986,"line_end":2986,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131923,"byte_end":131943,"line_start":2987,"line_end":2987,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131944,"byte_end":131949,"line_start":2988,"line_end":2988,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131950,"byte_end":131953,"line_start":2989,"line_end":2989,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> ParallelExtend<T> for BlackHole {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":131954,"byte_end":132005,"line_start":2990,"line_end":2990,"column_start":1,"column_end":52}},{"value":"/     fn par_extend<I>(&mut self, par_iter: I)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132006,"byte_end":132054,"line_start":2991,"line_end":2991,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132055,"byte_end":132106,"line_start":2992,"line_end":2992,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132107,"byte_end":132116,"line_start":2993,"line_end":2993,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132117,"byte_end":132169,"line_start":2994,"line_end":2994,"column_start":1,"column_end":53}},{"value":"/         self.mass += par_iter.count() * mem::size_of::<T>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132170,"byte_end":132234,"line_start":2995,"line_end":2995,"column_start":1,"column_end":65}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132235,"byte_end":132244,"line_start":2996,"line_end":2996,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132245,"byte_end":132250,"line_start":2997,"line_end":2997,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132251,"byte_end":132254,"line_start":2998,"line_end":2998,"column_start":1,"column_end":4}},{"value":"/ let mut bh = BlackHole { mass: 0 };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132255,"byte_end":132294,"line_start":2999,"line_end":2999,"column_start":1,"column_end":40}},{"value":"/ bh.par_extend(0i32..1000);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132295,"byte_end":132325,"line_start":3000,"line_end":3000,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132326,"byte_end":132356,"line_start":3001,"line_end":3001,"column_start":1,"column_end":31}},{"value":"/ bh.par_extend(0i64..10);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132357,"byte_end":132385,"line_start":3002,"line_end":3002,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(bh.mass, 4080);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132386,"byte_end":132416,"line_start":3003,"line_end":3003,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132417,"byte_end":132424,"line_start":3004,"line_end":3004,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4953},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132877,"byte_end":132887,"line_start":3022,"line_end":3022,"column_start":8,"column_end":18},"name":"par_extend","qualname":"::iter::ParallelExtend::par_extend","value":"pub fn par_extend<I>(&mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":4951},"children":[],"decl_id":null,"docs":" Extends an instance of the collection with the elements drawn\n from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Extends an instance of the collection with the elements drawn","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132478,"byte_end":132543,"line_start":3009,"line_end":3009,"column_start":5,"column_end":70}},{"value":"/ from the parallel iterator `par_iter`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132548,"byte_end":132590,"line_start":3010,"line_end":3010,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132595,"byte_end":132598,"line_start":3011,"line_end":3011,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132603,"byte_end":132617,"line_start":3012,"line_end":3012,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132622,"byte_end":132625,"line_start":3013,"line_end":3013,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132630,"byte_end":132637,"line_start":3014,"line_end":3014,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132642,"byte_end":132668,"line_start":3015,"line_end":3015,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132673,"byte_end":132676,"line_start":3016,"line_end":3016,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132681,"byte_end":132706,"line_start":3017,"line_end":3017,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend(0..5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132711,"byte_end":132736,"line_start":3018,"line_end":3018,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend((0..5).into_par_iter().map(|i| i * i));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132741,"byte_end":132799,"line_start":3019,"line_end":3019,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4, 0, 1, 4, 9, 16]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132804,"byte_end":132857,"line_start":3020,"line_end":3020,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132862,"byte_end":132869,"line_start":3021,"line_end":3021,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4955},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133315,"byte_end":133332,"line_start":3034,"line_end":3034,"column_start":11,"column_end":28},"name":"ParallelDrainFull","qualname":"::iter::ParallelDrainFull","value":"ParallelDrainFull","parent":null,"children":[{"krate":0,"index":4956},{"krate":0,"index":4957},{"krate":0,"index":4958}],"decl_id":null,"docs":" `ParallelDrainFull` creates a parallel iterator that moves all items\n from a collection while retaining the original capacity.","sig":null,"attributes":[{"value":"/ `ParallelDrainFull` creates a parallel iterator that moves all items","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":132971,"byte_end":133043,"line_start":3027,"line_end":3027,"column_start":1,"column_end":73}},{"value":"/ from a collection while retaining the original capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133044,"byte_end":133104,"line_start":3028,"line_end":3028,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133105,"byte_end":133108,"line_start":3029,"line_end":3029,"column_start":1,"column_end":4}},{"value":"/ Types which are indexable typically implement [`ParallelDrainRange`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133109,"byte_end":133181,"line_start":3030,"line_end":3030,"column_start":1,"column_end":73}},{"value":"/ instead, where you can drain fully with `par_drain(..)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133182,"byte_end":133242,"line_start":3031,"line_end":3031,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133243,"byte_end":133246,"line_start":3032,"line_end":3032,"column_start":1,"column_end":4}},{"value":"/ [`ParallelDrainRange`]: trait.ParallelDrainRange.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133247,"byte_end":133304,"line_start":3033,"line_end":3033,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":4956},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133410,"byte_end":133414,"line_start":3036,"line_end":3036,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::ParallelDrainFull::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4955},"children":[],"decl_id":null,"docs":" The draining parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The draining parallel iterator type that will be created.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133339,"byte_end":133400,"line_start":3035,"line_end":3035,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":4957},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133595,"byte_end":133599,"line_start":3040,"line_end":3040,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelDrainFull::Item","value":"type Item: Send;","parent":{"krate":0,"index":4955},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This is usually the same as `IntoParallelIterator::Item`.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133458,"byte_end":133519,"line_start":3038,"line_end":3038,"column_start":5,"column_end":66}},{"value":"/ This is usually the same as `IntoParallelIterator::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133524,"byte_end":133585,"line_start":3039,"line_end":3039,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4958},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134539,"byte_end":134548,"line_start":3067,"line_end":3067,"column_start":8,"column_end":17},"name":"par_drain","qualname":"::iter::ParallelDrainFull::par_drain","value":"pub fn par_drain(Self) -> Self::Iter","parent":{"krate":0,"index":4955},"children":[],"decl_id":null,"docs":" Returns a draining parallel iterator over an entire collection.","sig":null,"attributes":[{"value":"/ Returns a draining parallel iterator over an entire collection.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133612,"byte_end":133679,"line_start":3042,"line_end":3042,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133684,"byte_end":133687,"line_start":3043,"line_end":3043,"column_start":5,"column_end":8}},{"value":"/ When the iterator is dropped, all items are removed, even if the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133692,"byte_end":133760,"line_start":3044,"line_end":3044,"column_start":5,"column_end":73}},{"value":"/ iterator was not fully consumed. If the iterator is leaked, for example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133765,"byte_end":133840,"line_start":3045,"line_end":3045,"column_start":5,"column_end":80}},{"value":"/ using `std::mem::forget`, it is unspecified how many items are removed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133845,"byte_end":133920,"line_start":3046,"line_end":3046,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133925,"byte_end":133928,"line_start":3047,"line_end":3047,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133933,"byte_end":133947,"line_start":3048,"line_end":3048,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133952,"byte_end":133955,"line_start":3049,"line_end":3049,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133960,"byte_end":133967,"line_start":3050,"line_end":3050,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":133972,"byte_end":133998,"line_start":3051,"line_end":3051,"column_start":5,"column_end":31}},{"value":"/ use std::collections::{BinaryHeap, HashSet};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134003,"byte_end":134051,"line_start":3052,"line_end":3052,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134056,"byte_end":134059,"line_start":3053,"line_end":3053,"column_start":5,"column_end":8}},{"value":"/ let squares: HashSet<i32> = (0..10).map(|x| x * x).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134064,"byte_end":134129,"line_start":3054,"line_end":3054,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134134,"byte_end":134137,"line_start":3055,"line_end":3055,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_> = squares.iter().copied().collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134142,"byte_end":134210,"line_start":3056,"line_end":3056,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134215,"byte_end":134230,"line_start":3057,"line_end":3057,"column_start":5,"column_end":20}},{"value":"/     // heaps are drained in arbitrary order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134235,"byte_end":134282,"line_start":3058,"line_end":3058,"column_start":5,"column_end":52}},{"value":"/     heap.par_drain()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134287,"byte_end":134311,"line_start":3059,"line_end":3059,"column_start":5,"column_end":29}},{"value":"/         .inspect(|x| assert!(squares.contains(x)))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134316,"byte_end":134370,"line_start":3060,"line_end":3060,"column_start":5,"column_end":59}},{"value":"/         .count(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134375,"byte_end":134396,"line_start":3061,"line_end":3061,"column_start":5,"column_end":26}},{"value":"/     squares.len(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134401,"byte_end":134423,"line_start":3062,"line_end":3062,"column_start":5,"column_end":27}},{"value":"/ );","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134428,"byte_end":134434,"line_start":3063,"line_end":3063,"column_start":5,"column_end":11}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134439,"byte_end":134468,"line_start":3064,"line_end":3064,"column_start":5,"column_end":34}},{"value":"/ assert!(heap.capacity() >= squares.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134473,"byte_end":134519,"line_start":3065,"line_end":3065,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134524,"byte_end":134531,"line_start":3066,"line_end":3066,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4959},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134868,"byte_end":134886,"line_start":3076,"line_end":3076,"column_start":11,"column_end":29},"name":"ParallelDrainRange","qualname":"::iter::ParallelDrainRange","value":"ParallelDrainRange<Idx = usize>","parent":null,"children":[{"krate":0,"index":4961},{"krate":0,"index":4962},{"krate":0,"index":4963}],"decl_id":null,"docs":" `ParallelDrainRange` creates a parallel iterator that moves a range of items\n from a collection while retaining the original capacity.","sig":null,"attributes":[{"value":"/ `ParallelDrainRange` creates a parallel iterator that moves a range of items","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134573,"byte_end":134653,"line_start":3070,"line_end":3070,"column_start":1,"column_end":81}},{"value":"/ from a collection while retaining the original capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134654,"byte_end":134714,"line_start":3071,"line_end":3071,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134715,"byte_end":134718,"line_start":3072,"line_end":3072,"column_start":1,"column_end":4}},{"value":"/ Types which are not indexable may implement [`ParallelDrainFull`] instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134719,"byte_end":134797,"line_start":3073,"line_end":3073,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134798,"byte_end":134801,"line_start":3074,"line_end":3074,"column_start":1,"column_end":4}},{"value":"/ [`ParallelDrainFull`]: trait.ParallelDrainFull.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134802,"byte_end":134857,"line_start":3075,"line_end":3075,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":4961},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134977,"byte_end":134981,"line_start":3078,"line_end":3078,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::ParallelDrainRange::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4959},"children":[],"decl_id":null,"docs":" The draining parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The draining parallel iterator type that will be created.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":134906,"byte_end":134967,"line_start":3077,"line_end":3077,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":4962},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135162,"byte_end":135166,"line_start":3082,"line_end":3082,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelDrainRange::Item","value":"type Item: Send;","parent":{"krate":0,"index":4959},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This is usually the same as `IntoParallelIterator::Item`.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135025,"byte_end":135086,"line_start":3080,"line_end":3080,"column_start":5,"column_end":66}},{"value":"/ This is usually the same as `IntoParallelIterator::Item`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135091,"byte_end":135152,"line_start":3081,"line_end":3081,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4963},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137377,"byte_end":137386,"line_start":3142,"line_end":3142,"column_start":8,"column_end":17},"name":"par_drain","qualname":"::iter::ParallelDrainRange::par_drain","value":"pub fn par_drain<R: RangeBounds<Idx>>(Self, R) -> Self::Iter","parent":{"krate":0,"index":4959},"children":[],"decl_id":null,"docs":" Returns a draining parallel iterator over a range of the collection.","sig":null,"attributes":[{"value":"/ Returns a draining parallel iterator over a range of the collection.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135179,"byte_end":135251,"line_start":3084,"line_end":3084,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135256,"byte_end":135259,"line_start":3085,"line_end":3085,"column_start":5,"column_end":8}},{"value":"/ When the iterator is dropped, all items in the range are removed, even","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135264,"byte_end":135338,"line_start":3086,"line_end":3086,"column_start":5,"column_end":79}},{"value":"/ if the iterator was not fully consumed. If the iterator is leaked, for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135343,"byte_end":135417,"line_start":3087,"line_end":3087,"column_start":5,"column_end":79}},{"value":"/ example using `std::mem::forget`, it is unspecified how many items are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135422,"byte_end":135496,"line_start":3088,"line_end":3088,"column_start":5,"column_end":79}},{"value":"/ removed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135501,"byte_end":135513,"line_start":3089,"line_end":3089,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135518,"byte_end":135521,"line_start":3090,"line_end":3090,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135526,"byte_end":135540,"line_start":3091,"line_end":3091,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135545,"byte_end":135548,"line_start":3092,"line_end":3092,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135553,"byte_end":135560,"line_start":3093,"line_end":3093,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135565,"byte_end":135591,"line_start":3094,"line_end":3094,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135596,"byte_end":135599,"line_start":3095,"line_end":3095,"column_start":5,"column_end":8}},{"value":"/ let squares: Vec<i32> = (0..10).map(|x| x * x).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135604,"byte_end":135665,"line_start":3096,"line_end":3096,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135670,"byte_end":135673,"line_start":3097,"line_end":3097,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeFull\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135678,"byte_end":135704,"line_start":3098,"line_end":3098,"column_start":5,"column_end":31}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135709,"byte_end":135743,"line_start":3099,"line_end":3099,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(..)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135748,"byte_end":135777,"line_start":3100,"line_end":3100,"column_start":5,"column_end":34}},{"value":"/            .eq(squares.par_iter().copied()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135782,"byte_end":135831,"line_start":3101,"line_end":3101,"column_start":5,"column_end":54}},{"value":"/ assert!(vec.is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135836,"byte_end":135864,"line_start":3102,"line_end":3102,"column_start":5,"column_end":33}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135869,"byte_end":135914,"line_start":3103,"line_end":3103,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135919,"byte_end":135922,"line_start":3104,"line_end":3104,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeFrom\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135927,"byte_end":135953,"line_start":3105,"line_end":3105,"column_start":5,"column_end":31}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135958,"byte_end":135992,"line_start":3106,"line_end":3106,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(5..)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":135997,"byte_end":136027,"line_start":3107,"line_end":3107,"column_start":5,"column_end":35}},{"value":"/            .eq(squares[5..].par_iter().copied()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136032,"byte_end":136086,"line_start":3108,"line_end":3108,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(&vec[..], &squares[..5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136091,"byte_end":136131,"line_start":3109,"line_end":3109,"column_start":5,"column_end":45}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136136,"byte_end":136181,"line_start":3110,"line_end":3110,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136186,"byte_end":136189,"line_start":3111,"line_end":3111,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeTo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136194,"byte_end":136218,"line_start":3112,"line_end":3112,"column_start":5,"column_end":29}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136223,"byte_end":136257,"line_start":3113,"line_end":3113,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(..5)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136262,"byte_end":136292,"line_start":3114,"line_end":3114,"column_start":5,"column_end":35}},{"value":"/            .eq(squares[..5].par_iter().copied()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136297,"byte_end":136351,"line_start":3115,"line_end":3115,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(&vec[..], &squares[5..]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136356,"byte_end":136396,"line_start":3116,"line_end":3116,"column_start":5,"column_end":45}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136401,"byte_end":136446,"line_start":3117,"line_end":3117,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136451,"byte_end":136454,"line_start":3118,"line_end":3118,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeToInclusive\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136459,"byte_end":136492,"line_start":3119,"line_end":3119,"column_start":5,"column_end":38}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136497,"byte_end":136531,"line_start":3120,"line_end":3120,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(..=5)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136536,"byte_end":136567,"line_start":3121,"line_end":3121,"column_start":5,"column_end":36}},{"value":"/            .eq(squares[..=5].par_iter().copied()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136572,"byte_end":136627,"line_start":3122,"line_end":3122,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(&vec[..], &squares[6..]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136632,"byte_end":136672,"line_start":3123,"line_end":3123,"column_start":5,"column_end":45}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136677,"byte_end":136722,"line_start":3124,"line_end":3124,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136727,"byte_end":136730,"line_start":3125,"line_end":3125,"column_start":5,"column_end":8}},{"value":"/ println!(\"Range\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136735,"byte_end":136757,"line_start":3126,"line_end":3126,"column_start":5,"column_end":27}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136762,"byte_end":136796,"line_start":3127,"line_end":3127,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(3..7)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136801,"byte_end":136832,"line_start":3128,"line_end":3128,"column_start":5,"column_end":36}},{"value":"/            .eq(squares[3..7].par_iter().copied()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136837,"byte_end":136892,"line_start":3129,"line_end":3129,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(&vec[..3], &squares[..3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136897,"byte_end":136938,"line_start":3130,"line_end":3130,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(&vec[3..], &squares[7..]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136943,"byte_end":136984,"line_start":3131,"line_end":3131,"column_start":5,"column_end":46}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":136989,"byte_end":137034,"line_start":3132,"line_end":3132,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137039,"byte_end":137042,"line_start":3133,"line_end":3133,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeInclusive\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137047,"byte_end":137078,"line_start":3134,"line_end":3134,"column_start":5,"column_end":36}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137083,"byte_end":137117,"line_start":3135,"line_end":3135,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(3..=7)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137122,"byte_end":137154,"line_start":3136,"line_end":3136,"column_start":5,"column_end":37}},{"value":"/            .eq(squares[3..=7].par_iter().copied()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137159,"byte_end":137215,"line_start":3137,"line_end":3137,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(&vec[..3], &squares[..3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137220,"byte_end":137261,"line_start":3138,"line_end":3138,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(&vec[3..], &squares[8..]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137266,"byte_end":137307,"line_start":3139,"line_end":3139,"column_start":5,"column_end":46}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137312,"byte_end":137357,"line_start":3140,"line_end":3140,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137362,"byte_end":137369,"line_start":3141,"line_end":3141,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4982},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":138071,"byte_end":138074,"line_start":3166,"line_end":3166,"column_start":15,"column_end":18},"name":"Try","qualname":"::iter::private::Try","value":"Try","parent":null,"children":[{"krate":0,"index":8350},{"krate":0,"index":4983},{"krate":0,"index":4984},{"krate":0,"index":4985},{"krate":0,"index":4986},{"krate":0,"index":4987}],"decl_id":null,"docs":" Clone of `std::ops::Try`.","sig":null,"attributes":[{"value":"/ Clone of `std::ops::Try`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137950,"byte_end":137979,"line_start":3163,"line_end":3163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137984,"byte_end":137987,"line_start":3164,"line_end":3164,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":137992,"byte_end":138056,"line_start":3165,"line_end":3165,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":4983},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":138116,"byte_end":138122,"line_start":3169,"line_end":3169,"column_start":14,"column_end":20},"name":"Output","qualname":"::iter::private::Try::Output","value":"type Output;","parent":{"krate":0,"index":4982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4984},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":138137,"byte_end":138145,"line_start":3170,"line_end":3170,"column_start":14,"column_end":22},"name":"Residual","qualname":"::iter::private::Try::Residual","value":"type Residual;","parent":{"krate":0,"index":4982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4985},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":138159,"byte_end":138170,"line_start":3172,"line_end":3172,"column_start":12,"column_end":23},"name":"from_output","qualname":"::iter::private::Try::from_output","value":"pub fn from_output(Self::Output) -> Self","parent":{"krate":0,"index":4982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4986},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":138214,"byte_end":138227,"line_start":3174,"line_end":3174,"column_start":12,"column_end":25},"name":"from_residual","qualname":"::iter::private::Try::from_residual","value":"pub fn from_residual(Self::Residual) -> Self","parent":{"krate":0,"index":4982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4987},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":138275,"byte_end":138281,"line_start":3176,"line_end":3176,"column_start":12,"column_end":18},"name":"branch","qualname":"::iter::private::Try::branch","value":"pub fn branch(Self) -> ControlFlow<Self::Residual, Self::Output>","parent":{"krate":0,"index":4982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5027},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","parent":null,"children":[{"krate":0,"index":5028},{"krate":0,"index":5029},{"krate":0,"index":5030},{"krate":0,"index":5031},{"krate":0,"index":5034},{"krate":0,"index":8356},{"krate":0,"index":8359},{"krate":0,"index":8362},{"krate":0,"index":5037},{"krate":0,"index":5042},{"krate":0,"index":5048},{"krate":0,"index":8365},{"krate":0,"index":8369},{"krate":0,"index":5055},{"krate":0,"index":5059},{"krate":0,"index":8381},{"krate":0,"index":8373},{"krate":0,"index":8388},{"krate":0,"index":8392},{"krate":0,"index":5065},{"krate":0,"index":8404},{"krate":0,"index":8396},{"krate":0,"index":5071},{"krate":0,"index":5074},{"krate":0,"index":5080}],"decl_id":null,"docs":" Parallel iterator types for [options][std::option]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [options][std::option]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431372,"byte_end":431426,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431427,"byte_end":431430,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431431,"byte_end":431509,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431510,"byte_end":431548,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431549,"byte_end":431552,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::option]: https://doc.rust-lang.org/stable/std/option/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431553,"byte_end":431616,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":8356},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432224,"byte_end":432232,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":8358}],"decl_id":null,"docs":" A parallel iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over the value in [`Some`] variant of an [`Option`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431716,"byte_end":431792,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431793,"byte_end":431796,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431797,"byte_end":431879,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431880,"byte_end":431883,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_par_iter`] function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431884,"byte_end":431947,"line_start":16,"line_end":16,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431948,"byte_end":431951,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":431952,"byte_end":432021,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432022,"byte_end":432102,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ [`into_par_iter`]: ../iter/trait.IntoParallelIterator.html#tymethod.into_par_iter","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432103,"byte_end":432188,"line_start":20,"line_end":20,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":8365},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433874,"byte_end":433878,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8368}],"decl_id":null,"docs":" A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433379,"byte_end":433461,"line_start":77,"line_end":77,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433462,"byte_end":433465,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433466,"byte_end":433548,"line_start":79,"line_end":79,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433549,"byte_end":433552,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter`] function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433553,"byte_end":433611,"line_start":81,"line_end":81,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433612,"byte_end":433615,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433616,"byte_end":433685,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433686,"byte_end":433766,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ [`par_iter`]: ../iter/trait.IntoParallelRefIterator.html#tymethod.par_iter","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433767,"byte_end":433845,"line_start":85,"line_end":85,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":8388},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434912,"byte_end":434919,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":8391}],"decl_id":null,"docs":" A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434394,"byte_end":434484,"line_start":115,"line_end":115,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434485,"byte_end":434488,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434489,"byte_end":434571,"line_start":117,"line_end":117,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434572,"byte_end":434575,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter_mut`] function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434576,"byte_end":434638,"line_start":119,"line_end":119,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434639,"byte_end":434642,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434643,"byte_end":434712,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434713,"byte_end":434793,"line_start":122,"line_end":122,"column_start":1,"column_end":81}},{"value":"/ [`par_iter_mut`]: ../iter/trait.IntoParallelRefMutIterator.html#tymethod.par_iter_mut","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":434794,"byte_end":434883,"line_start":123,"line_end":123,"column_start":1,"column_end":90}}]},{"kind":"Mod","id":{"krate":0,"index":5089},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","parent":null,"children":[{"krate":0,"index":5090},{"krate":0,"index":5093},{"krate":0,"index":5096},{"krate":0,"index":5099},{"krate":0,"index":5102},{"krate":0,"index":5105},{"krate":0,"index":5108},{"krate":0,"index":5111},{"krate":0,"index":5114},{"krate":0,"index":5117},{"krate":0,"index":5120},{"krate":0,"index":5123},{"krate":0,"index":5126}],"decl_id":null,"docs":" The rayon prelude imports the various `ParallelIterator` traits.\n The intention is that one can include `use rayon::prelude::*` and\n have easy access to the various traits and methods you will need.\n","sig":null,"attributes":[{"value":"/ The rayon prelude imports the various `ParallelIterator` traits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":436811,"byte_end":436879,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ The intention is that one can include `use rayon::prelude::*` and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":436880,"byte_end":436949,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ have easy access to the various traits and methods you will need.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/prelude.rs","byte_start":436950,"byte_end":437019,"line_start":3,"line_end":3,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":5129},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::range","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","parent":null,"children":[{"krate":0,"index":5130},{"krate":0,"index":5131},{"krate":0,"index":5132},{"krate":0,"index":5135},{"krate":0,"index":5138},{"krate":0,"index":5141},{"krate":0,"index":8411},{"krate":0,"index":8414},{"krate":0,"index":8417},{"krate":0,"index":5144},{"krate":0,"index":5149},{"krate":0,"index":5152},{"krate":0,"index":5157},{"krate":0,"index":5169},{"krate":0,"index":5170},{"krate":0,"index":5173},{"krate":0,"index":5176},{"krate":0,"index":5182},{"krate":0,"index":5189},{"krate":0,"index":5190},{"krate":0,"index":5193},{"krate":0,"index":8422},{"krate":0,"index":8426},{"krate":0,"index":8432},{"krate":0,"index":8439},{"krate":0,"index":8443},{"krate":0,"index":8449},{"krate":0,"index":8456},{"krate":0,"index":8460},{"krate":0,"index":8466},{"krate":0,"index":8473},{"krate":0,"index":8477},{"krate":0,"index":8483},{"krate":0,"index":8490},{"krate":0,"index":8494},{"krate":0,"index":8500},{"krate":0,"index":8507},{"krate":0,"index":8511},{"krate":0,"index":8517},{"krate":0,"index":8524},{"krate":0,"index":8528},{"krate":0,"index":8534},{"krate":0,"index":8541},{"krate":0,"index":8545},{"krate":0,"index":8551},{"krate":0,"index":8558},{"krate":0,"index":8560},{"krate":0,"index":8567},{"krate":0,"index":8573},{"krate":0,"index":8575},{"krate":0,"index":8582},{"krate":0,"index":8588},{"krate":0,"index":8590},{"krate":0,"index":8597},{"krate":0,"index":8603},{"krate":0,"index":8605},{"krate":0,"index":8612},{"krate":0,"index":5194},{"krate":0,"index":5195},{"krate":0,"index":5200}],"decl_id":null,"docs":" Parallel iterator types for [ranges][std::range],\n the type for values created by `a..b` expressions","sig":null,"attributes":[{"value":"/ Parallel iterator types for [ranges][std::range],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437556,"byte_end":437609,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/ the type for values created by `a..b` expressions","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437610,"byte_end":437663,"line_start":2,"line_end":2,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437664,"byte_end":437667,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437668,"byte_end":437746,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437747,"byte_end":437790,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437791,"byte_end":437794,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437795,"byte_end":437802,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437803,"byte_end":437829,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437830,"byte_end":437833,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ let r = (0..100u64).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437834,"byte_end":437873,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/                    .sum();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437874,"byte_end":437904,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437905,"byte_end":437908,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ // compare result with sequential calculation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437909,"byte_end":437958,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ assert_eq!((0..100).sum::<u64>(), r);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":437959,"byte_end":438000,"line_start":14,"line_end":14,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438001,"byte_end":438008,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438009,"byte_end":438012,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [std::range]: https://doc.rust-lang.org/core/ops/struct.Range.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438013,"byte_end":438083,"line_start":17,"line_end":17,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":8411},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438955,"byte_end":438959,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8413}],"decl_id":null,"docs":" Parallel iterator over a range, implemented for all integer types and `char`.","sig":null,"attributes":[{"value":"/ Parallel iterator over a range, implemented for all integer types and `char`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438215,"byte_end":438296,"line_start":26,"line_end":26,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438297,"byte_end":438300,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438301,"byte_end":438369,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ which is not implemented for `u64`, `i64`, `u128`, or `i128`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438370,"byte_end":438435,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438436,"byte_end":438439,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438440,"byte_end":438447,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438448,"byte_end":438474,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438475,"byte_end":438478,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let p = (0..25usize).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438479,"byte_end":438519,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/                   .zip(0..25usize)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438520,"byte_end":438558,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438559,"byte_end":438624,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438625,"byte_end":438667,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/                   .sum::<usize>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438668,"byte_end":438706,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438707,"byte_end":438710,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let s = (0..25usize).zip(0..25)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438711,"byte_end":438746,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438747,"byte_end":438812,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438813,"byte_end":438855,"line_start":42,"line_end":42,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438856,"byte_end":438885,"line_start":43,"line_end":43,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438886,"byte_end":438889,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438890,"byte_end":438911,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":438912,"byte_end":438919,"line_start":46,"line_end":46,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":5159},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440256,"byte_end":440268,"line_start":92,"line_end":92,"column_start":15,"column_end":27},"name":"RangeInteger","qualname":"::range::private::RangeInteger","value":"RangeInteger: Sized + Send","parent":null,"children":[{"krate":0,"index":8420},{"krate":0,"index":5160},{"krate":0,"index":5162}],"decl_id":null,"docs":" Implementation details of `ParallelIterator for Iter<Self>`\n","sig":null,"attributes":[{"value":"/ Implementation details of `ParallelIterator for Iter<Self>`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440178,"byte_end":440241,"line_start":91,"line_end":91,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5160},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440322,"byte_end":440337,"line_start":95,"line_end":95,"column_start":12,"column_end":27},"name":"drive_unindexed","qualname":"::range::private::RangeInteger::drive_unindexed","value":"pub fn drive_unindexed<C>(Iter<Self>, C) -> C::Result where\nC: UnindexedConsumer<Self>","parent":{"krate":0,"index":5159},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5162},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440451,"byte_end":440458,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"opt_len","qualname":"::range::private::RangeInteger::opt_len","value":"pub fn opt_len(&Iter<Self>) -> Option<usize>","parent":{"krate":0,"index":5159},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5163},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440592,"byte_end":440611,"line_start":103,"line_end":103,"column_start":15,"column_end":34},"name":"IndexedRangeInteger","qualname":"::range::private::IndexedRangeInteger","value":"IndexedRangeInteger: RangeInteger","parent":null,"children":[{"krate":0,"index":8421},{"krate":0,"index":5164},{"krate":0,"index":5166},{"krate":0,"index":5167}],"decl_id":null,"docs":" Implementation details of `IndexedParallelIterator for Iter<Self>`\n","sig":null,"attributes":[{"value":"/ Implementation details of `IndexedParallelIterator for Iter<Self>`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440507,"byte_end":440577,"line_start":102,"line_end":102,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5164},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440665,"byte_end":440670,"line_start":106,"line_end":106,"column_start":12,"column_end":17},"name":"drive","qualname":"::range::private::IndexedRangeInteger::drive","value":"pub fn drive<C>(Iter<Self>, C) -> C::Result where C: Consumer<Self>","parent":{"krate":0,"index":5163},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5166},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440775,"byte_end":440778,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"len","qualname":"::range::private::IndexedRangeInteger::len","value":"pub fn len(&Iter<Self>) -> usize","parent":{"krate":0,"index":5163},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5167},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440820,"byte_end":440833,"line_start":112,"line_end":112,"column_start":12,"column_end":25},"name":"with_producer","qualname":"::range::private::IndexedRangeInteger::with_producer","value":"pub fn with_producer<CB>(Iter<Self>, CB) -> CB::Output where\nCB: ProducerCallback<Self>","parent":{"krate":0,"index":5163},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5206},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range_inclusive","qualname":"::range_inclusive","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","parent":null,"children":[{"krate":0,"index":5207},{"krate":0,"index":5208},{"krate":0,"index":5209},{"krate":0,"index":5212},{"krate":0,"index":8624},{"krate":0,"index":8627},{"krate":0,"index":8630},{"krate":0,"index":5215},{"krate":0,"index":5218},{"krate":0,"index":5223},{"krate":0,"index":5235},{"krate":0,"index":5236},{"krate":0,"index":5239},{"krate":0,"index":5242},{"krate":0,"index":5248},{"krate":0,"index":5255},{"krate":0,"index":5256},{"krate":0,"index":5257},{"krate":0,"index":8641},{"krate":0,"index":8635},{"krate":0,"index":8653},{"krate":0,"index":8647},{"krate":0,"index":8665},{"krate":0,"index":8659},{"krate":0,"index":8677},{"krate":0,"index":8671},{"krate":0,"index":8683},{"krate":0,"index":8688},{"krate":0,"index":8693},{"krate":0,"index":8698},{"krate":0,"index":8703},{"krate":0,"index":8708},{"krate":0,"index":8713},{"krate":0,"index":8718},{"krate":0,"index":5258},{"krate":0,"index":5259},{"krate":0,"index":5264}],"decl_id":null,"docs":" Parallel iterator types for [inclusive ranges][std::range],\n the type for values created by `a..=b` expressions","sig":null,"attributes":[{"value":"/ Parallel iterator types for [inclusive ranges][std::range],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451017,"byte_end":451080,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/ the type for values created by `a..=b` expressions","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451081,"byte_end":451135,"line_start":2,"line_end":2,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451136,"byte_end":451139,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451140,"byte_end":451218,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451219,"byte_end":451262,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451263,"byte_end":451266,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451267,"byte_end":451274,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451275,"byte_end":451301,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451302,"byte_end":451305,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ let r = (0..=100u64).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451306,"byte_end":451346,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"/                     .sum();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451347,"byte_end":451378,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451379,"byte_end":451382,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ // compare result with sequential calculation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451383,"byte_end":451432,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ assert_eq!((0..=100).sum::<u64>(), r);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451433,"byte_end":451475,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451476,"byte_end":451483,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451484,"byte_end":451487,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [std::range]: https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451488,"byte_end":451567,"line_start":17,"line_end":17,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":8624},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452421,"byte_end":452425,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range_inclusive::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8626}],"decl_id":null,"docs":" Parallel iterator over an inclusive range, implemented for all integer types and `char`.","sig":null,"attributes":[{"value":"/ Parallel iterator over an inclusive range, implemented for all integer types and `char`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451665,"byte_end":451757,"line_start":24,"line_end":24,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451758,"byte_end":451761,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451762,"byte_end":451830,"line_start":26,"line_end":26,"column_start":1,"column_end":69}},{"value":"/ which is only implemented for `u8`, `i8`, `u16`, `i16`, and `char`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451831,"byte_end":451902,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451903,"byte_end":451906,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451907,"byte_end":451914,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451915,"byte_end":451941,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451942,"byte_end":451945,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let p = (0..=25u16).into_par_iter()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451946,"byte_end":451985,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/                   .zip(0..=25u16)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":451986,"byte_end":452023,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452024,"byte_end":452089,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452090,"byte_end":452132,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/                   .sum::<u16>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452133,"byte_end":452169,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452170,"byte_end":452173,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let s = (0..=25u16).zip(0..=25u16)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452174,"byte_end":452212,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452213,"byte_end":452278,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452279,"byte_end":452321,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452322,"byte_end":452351,"line_start":41,"line_end":41,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452352,"byte_end":452355,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452356,"byte_end":452377,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452378,"byte_end":452385,"line_start":44,"line_end":44,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":5225},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454317,"byte_end":454329,"line_start":98,"line_end":98,"column_start":15,"column_end":27},"name":"RangeInteger","qualname":"::range_inclusive::private::RangeInteger","value":"RangeInteger: Sized + Send","parent":null,"children":[{"krate":0,"index":8633},{"krate":0,"index":5226},{"krate":0,"index":5228}],"decl_id":null,"docs":" Implementation details of `ParallelIterator for Iter<Self>`\n","sig":null,"attributes":[{"value":"/ Implementation details of `ParallelIterator for Iter<Self>`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454239,"byte_end":454302,"line_start":97,"line_end":97,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5226},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454383,"byte_end":454398,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"drive_unindexed","qualname":"::range_inclusive::private::RangeInteger::drive_unindexed","value":"pub fn drive_unindexed<C>(Iter<Self>, C) -> C::Result where\nC: UnindexedConsumer<Self>","parent":{"krate":0,"index":5225},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5228},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454512,"byte_end":454519,"line_start":105,"line_end":105,"column_start":12,"column_end":19},"name":"opt_len","qualname":"::range_inclusive::private::RangeInteger::opt_len","value":"pub fn opt_len(&Iter<Self>) -> Option<usize>","parent":{"krate":0,"index":5225},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5229},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454653,"byte_end":454672,"line_start":109,"line_end":109,"column_start":15,"column_end":34},"name":"IndexedRangeInteger","qualname":"::range_inclusive::private::IndexedRangeInteger","value":"IndexedRangeInteger: RangeInteger","parent":null,"children":[{"krate":0,"index":8634},{"krate":0,"index":5230},{"krate":0,"index":5232},{"krate":0,"index":5233}],"decl_id":null,"docs":" Implementation details of `IndexedParallelIterator for Iter<Self>`\n","sig":null,"attributes":[{"value":"/ Implementation details of `IndexedParallelIterator for Iter<Self>`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454568,"byte_end":454638,"line_start":108,"line_end":108,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5230},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454726,"byte_end":454731,"line_start":112,"line_end":112,"column_start":12,"column_end":17},"name":"drive","qualname":"::range_inclusive::private::IndexedRangeInteger::drive","value":"pub fn drive<C>(Iter<Self>, C) -> C::Result where C: Consumer<Self>","parent":{"krate":0,"index":5229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5232},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454836,"byte_end":454839,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"len","qualname":"::range_inclusive::private::IndexedRangeInteger::len","value":"pub fn len(&Iter<Self>) -> usize","parent":{"krate":0,"index":5229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5233},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454881,"byte_end":454894,"line_start":118,"line_end":118,"column_start":12,"column_end":25},"name":"with_producer","qualname":"::range_inclusive::private::IndexedRangeInteger::with_producer","value":"pub fn with_producer<CB>(Iter<Self>, CB) -> CB::Output where\nCB: ProducerCallback<Self>","parent":{"krate":0,"index":5229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5270},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","parent":null,"children":[{"krate":0,"index":5271},{"krate":0,"index":5272},{"krate":0,"index":5273},{"krate":0,"index":5276},{"krate":0,"index":8729},{"krate":0,"index":8732},{"krate":0,"index":8735},{"krate":0,"index":5279},{"krate":0,"index":8745},{"krate":0,"index":8738},{"krate":0,"index":8751},{"krate":0,"index":8755},{"krate":0,"index":5285},{"krate":0,"index":5289},{"krate":0,"index":8767},{"krate":0,"index":8759},{"krate":0,"index":8774},{"krate":0,"index":8778},{"krate":0,"index":5296},{"krate":0,"index":8790},{"krate":0,"index":8782},{"krate":0,"index":5303}],"decl_id":null,"docs":" Parallel iterator types for [results][std::result]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [results][std::result]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462439,"byte_end":462493,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462494,"byte_end":462497,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462498,"byte_end":462576,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462577,"byte_end":462615,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462616,"byte_end":462619,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::result]: https://doc.rust-lang.org/stable/std/result/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462620,"byte_end":462683,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":8729},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462849,"byte_end":462857,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":8731}],"decl_id":null,"docs":" Parallel iterator over a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a result","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462778,"byte_end":462813,"line_start":14,"line_end":14,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":8751},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":463299,"byte_end":463303,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8754}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a result","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":463209,"byte_end":463270,"line_start":36,"line_end":36,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":8774},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":463925,"byte_end":463932,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":8777}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a result","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":463838,"byte_end":463896,"line_start":66,"line_end":66,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":5314},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","parent":null,"children":[{"krate":0,"index":5315},{"krate":0,"index":5460},{"krate":0,"index":5548},{"krate":0,"index":5626},{"krate":0,"index":5768},{"krate":0,"index":5771},{"krate":0,"index":5774},{"krate":0,"index":5775},{"krate":0,"index":5776},{"krate":0,"index":5777},{"krate":0,"index":5780},{"krate":0,"index":5783},{"krate":0,"index":5784},{"krate":0,"index":5787},{"krate":0,"index":5788},{"krate":0,"index":5790},{"krate":0,"index":5791},{"krate":0,"index":5794},{"krate":0,"index":5797},{"krate":0,"index":5800},{"krate":0,"index":5803},{"krate":0,"index":5804},{"krate":0,"index":5807},{"krate":0,"index":5810},{"krate":0,"index":5813},{"krate":0,"index":5816},{"krate":0,"index":5826},{"krate":0,"index":5829},{"krate":0,"index":5854},{"krate":0,"index":5857},{"krate":0,"index":5863},{"krate":0,"index":8895},{"krate":0,"index":8899},{"krate":0,"index":5869},{"krate":0,"index":5873},{"krate":0,"index":5880},{"krate":0,"index":5888},{"krate":0,"index":5892},{"krate":0,"index":8903},{"krate":0,"index":8908},{"krate":0,"index":5899},{"krate":0,"index":5903},{"krate":0,"index":5910},{"krate":0,"index":5918},{"krate":0,"index":5923},{"krate":0,"index":8912},{"krate":0,"index":8916},{"krate":0,"index":5930},{"krate":0,"index":5937},{"krate":0,"index":5945},{"krate":0,"index":5949},{"krate":0,"index":5956},{"krate":0,"index":5962},{"krate":0,"index":5967},{"krate":0,"index":5972},{"krate":0,"index":5979},{"krate":0,"index":5990},{"krate":0,"index":5996},{"krate":0,"index":6001},{"krate":0,"index":6008}],"decl_id":null,"docs":" Parallel iterator types for [slices][std::slice]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [slices][std::slice]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":465849,"byte_end":465901,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":465902,"byte_end":465905,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":465906,"byte_end":465984,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":465985,"byte_end":466023,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466024,"byte_end":466027,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::slice]: https://doc.rust-lang.org/stable/std/slice/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466028,"byte_end":466089,"line_start":6,"line_end":6,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":8797},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":494435,"byte_end":494441,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":8800},{"krate":0,"index":8801}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":494336,"byte_end":494406,"line_start":6,"line_end":6,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":8806},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":496551,"byte_end":496562,"line_start":94,"line_end":94,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::chunks::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":8809},{"krate":0,"index":8810},{"krate":0,"index":8811}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":496452,"byte_end":496522,"line_start":92,"line_end":92,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":5363},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497179,"byte_end":497188,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'data [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":496999,"byte_end":497069,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497074,"byte_end":497149,"line_start":113,"line_end":113,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497154,"byte_end":497167,"line_start":114,"line_end":114,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":8816},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":499139,"byte_end":499148,"line_start":195,"line_end":195,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::chunks::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":8819},{"krate":0,"index":8820}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":499042,"byte_end":499110,"line_start":193,"line_end":193,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":8825},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501195,"byte_end":501209,"line_start":275,"line_end":275,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::chunks::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":8828},{"krate":0,"index":8829},{"krate":0,"index":8830}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501098,"byte_end":501166,"line_start":273,"line_end":273,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5430},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502212,"byte_end":502226,"line_start":302,"line_end":302,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501665,"byte_end":501735,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501740,"byte_end":501815,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501820,"byte_end":501833,"line_start":295,"line_end":295,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501838,"byte_end":501841,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Note that this has to consume `self` to return the original lifetime of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501846,"byte_end":501921,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ the data, which prevents this from actually being used as a parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501926,"byte_end":501998,"line_start":298,"line_end":298,"column_start":5,"column_end":77}},{"value":"/ iterator since that also consumes. This method is provided for parity","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502003,"byte_end":502076,"line_start":299,"line_end":299,"column_start":5,"column_end":78}},{"value":"/ with `std::iter::ChunksExactMut`, but consider calling `remainder()` or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502081,"byte_end":502156,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ `take_remainder()` as alternatives.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502161,"byte_end":502200,"line_start":301,"line_end":301,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5431},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502620,"byte_end":502629,"line_start":312,"line_end":312,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ChunksExactMut>::remainder","value":"pub fn remainder(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502281,"byte_end":502351,"line_start":306,"line_end":306,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502356,"byte_end":502431,"line_start":307,"line_end":307,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502436,"byte_end":502449,"line_start":308,"line_end":308,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502454,"byte_end":502457,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ Consider `take_remainder()` if you need access to the data with its","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502462,"byte_end":502533,"line_start":310,"line_end":310,"column_start":5,"column_end":76}},{"value":"/ original lifetime, rather than borrowing through `&mut self` here.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502538,"byte_end":502608,"line_start":311,"line_end":311,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5432},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502908,"byte_end":502922,"line_start":319,"line_end":319,"column_start":12,"column_end":26},"name":"take_remainder","qualname":"<ChunksExactMut>::take_remainder","value":"pub fn take_remainder(&mut Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements. Subsequent calls will return an empty slice.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502683,"byte_end":502753,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502758,"byte_end":502833,"line_start":317,"line_end":317,"column_start":5,"column_end":80}},{"value":"/ elements. Subsequent calls will return an empty slice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":502838,"byte_end":502896,"line_start":318,"line_end":318,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":8857},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":568871,"byte_end":568878,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::rchunks::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":8860},{"krate":0,"index":8861}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice, starting at the end.\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice, starting at the end.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":568750,"byte_end":568842,"line_start":5,"line_end":5,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":8866},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571027,"byte_end":571039,"line_start":93,"line_end":93,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::rchunks::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":8869},{"krate":0,"index":8870},{"krate":0,"index":8871}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice, starting at the end.\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice, starting at the end.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":570906,"byte_end":570998,"line_start":91,"line_end":91,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":5671},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571620,"byte_end":571629,"line_start":113,"line_end":113,"column_start":12,"column_end":21},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'data [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571440,"byte_end":571510,"line_start":110,"line_end":110,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571515,"byte_end":571590,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571595,"byte_end":571608,"line_start":112,"line_end":112,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":8876},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":573632,"byte_end":573642,"line_start":193,"line_end":193,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::rchunks::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":8879},{"krate":0,"index":8880}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice, starting at the end.\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice, starting at the end.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":573513,"byte_end":573603,"line_start":191,"line_end":191,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":8885},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":575726,"byte_end":575741,"line_start":273,"line_end":273,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::rchunks::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":8888},{"krate":0,"index":8889},{"krate":0,"index":8890}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice, starting at the end.\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice, starting at the end.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":575607,"byte_end":575697,"line_start":271,"line_end":271,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":5738},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576709,"byte_end":576723,"line_start":299,"line_end":299,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576161,"byte_end":576231,"line_start":290,"line_end":290,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576236,"byte_end":576311,"line_start":291,"line_end":291,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576316,"byte_end":576329,"line_start":292,"line_end":292,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576334,"byte_end":576337,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Note that this has to consume `self` to return the original lifetime of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576342,"byte_end":576417,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ the data, which prevents this from actually being used as a parallel","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576422,"byte_end":576494,"line_start":295,"line_end":295,"column_start":5,"column_end":77}},{"value":"/ iterator since that also consumes. This method is provided for parity","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576499,"byte_end":576572,"line_start":296,"line_end":296,"column_start":5,"column_end":78}},{"value":"/ with `std::iter::RChunksExactMut`, but consider calling `remainder()` or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576577,"byte_end":576653,"line_start":297,"line_end":297,"column_start":5,"column_end":81}},{"value":"/ `take_remainder()` as alternatives.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576658,"byte_end":576697,"line_start":298,"line_end":298,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5739},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577117,"byte_end":577126,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"name":"remainder","qualname":"<RChunksExactMut>::remainder","value":"pub fn remainder(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576778,"byte_end":576848,"line_start":303,"line_end":303,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576853,"byte_end":576928,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576933,"byte_end":576946,"line_start":305,"line_end":305,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576951,"byte_end":576954,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Consider `take_remainder()` if you need access to the data with its","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":576959,"byte_end":577030,"line_start":307,"line_end":307,"column_start":5,"column_end":76}},{"value":"/ original lifetime, rather than borrowing through `&mut self` here.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577035,"byte_end":577105,"line_start":308,"line_end":308,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5740},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577405,"byte_end":577419,"line_start":316,"line_end":316,"column_start":12,"column_end":26},"name":"take_remainder","qualname":"<RChunksExactMut>::take_remainder","value":"pub fn take_remainder(&mut Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements. Subsequent calls will return an empty slice.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577180,"byte_end":577250,"line_start":313,"line_end":313,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577255,"byte_end":577330,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ elements. Subsequent calls will return an empty slice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577335,"byte_end":577393,"line_start":315,"line_end":315,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":5816},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466574,"byte_end":466587,"line_start":28,"line_end":28,"column_start":11,"column_end":24},"name":"ParallelSlice","qualname":"::slice::ParallelSlice","value":"ParallelSlice<T: Sync>","parent":null,"children":[{"krate":0,"index":5818},{"krate":0,"index":5819},{"krate":0,"index":5821},{"krate":0,"index":5822},{"krate":0,"index":5823},{"krate":0,"index":5824},{"krate":0,"index":5825}],"decl_id":null,"docs":" Parallel extensions for slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for slices.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466528,"byte_end":466563,"line_start":27,"line_end":27,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":5818},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466706,"byte_end":466723,"line_start":31,"line_end":31,"column_start":8,"column_end":25},"name":"as_parallel_slice","qualname":"::slice::ParallelSlice::as_parallel_slice","value":"pub fn as_parallel_slice(&Self) -> &[T]","parent":{"krate":0,"index":5816},"children":[],"decl_id":null,"docs":" Returns a plain slice, which is used to implement the rest of the\n parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain slice, which is used to implement the rest of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466603,"byte_end":466672,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/ parallel methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466677,"byte_end":466698,"line_start":30,"line_end":30,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":5819},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467156,"byte_end":467165,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"par_split","qualname":"::slice::ParallelSlice::par_split","value":"pub fn par_split<P>(&Self, P) -> Split<, T, P> where P: Fn(&T) -> bool +\nSync + Send","parent":{"krate":0,"index":5816},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over subslices separated by elements that\n match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over subslices separated by elements that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466745,"byte_end":466818,"line_start":33,"line_end":33,"column_start":5,"column_end":78}},{"value":"/ match the separator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466823,"byte_end":466847,"line_start":34,"line_end":34,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466852,"byte_end":466855,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466860,"byte_end":466874,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466879,"byte_end":466882,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466887,"byte_end":466894,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466899,"byte_end":466925,"line_start":39,"line_end":39,"column_start":5,"column_end":31}},{"value":"/ let smallest = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466930,"byte_end":466982,"line_start":40,"line_end":40,"column_start":5,"column_end":57}},{"value":"/     .par_split(|i| *i == 0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":466987,"byte_end":467018,"line_start":41,"line_end":41,"column_start":5,"column_end":36}},{"value":"/     .map(|numbers| numbers.iter().min().unwrap())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467023,"byte_end":467076,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/     .min();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467081,"byte_end":467096,"line_start":43,"line_end":43,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(Some(&1), smallest);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467101,"byte_end":467136,"line_start":44,"line_end":44,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467141,"byte_end":467148,"line_start":45,"line_end":45,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5821},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467699,"byte_end":467710,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"par_windows","qualname":"::slice::ParallelSlice::par_windows","value":"pub fn par_windows(&Self, usize) -> Windows<, T>","parent":{"krate":0,"index":5816},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over all contiguous windows of length\n `window_size`. The windows overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over all contiguous windows of length","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467371,"byte_end":467440,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/ `window_size`. The windows overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467445,"byte_end":467484,"line_start":57,"line_end":57,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467489,"byte_end":467492,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467497,"byte_end":467511,"line_start":59,"line_end":59,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467516,"byte_end":467519,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467524,"byte_end":467531,"line_start":61,"line_end":61,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467536,"byte_end":467562,"line_start":62,"line_end":62,"column_start":5,"column_end":31}},{"value":"/ let windows: Vec<_> = [1, 2, 3].par_windows(2).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467567,"byte_end":467628,"line_start":63,"line_end":63,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(vec![[1, 2], [2, 3]], windows);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467633,"byte_end":467679,"line_start":64,"line_end":64,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467684,"byte_end":467691,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5822},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468423,"byte_end":468433,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"par_chunks","qualname":"::slice::ParallelSlice::par_chunks","value":"pub fn par_chunks(&Self, usize) -> Chunks<, T>","parent":{"krate":0,"index":5816},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467867,"byte_end":467936,"line_start":73,"line_end":73,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467941,"byte_end":467989,"line_start":74,"line_end":74,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":467994,"byte_end":467997,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468002,"byte_end":468067,"line_start":76,"line_end":76,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468072,"byte_end":468143,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468148,"byte_end":468193,"line_start":78,"line_end":78,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468198,"byte_end":468201,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468206,"byte_end":468220,"line_start":80,"line_end":80,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468225,"byte_end":468228,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468233,"byte_end":468240,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468245,"byte_end":468271,"line_start":83,"line_end":83,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks(2).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468276,"byte_end":468341,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4], &[5]]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468346,"byte_end":468403,"line_start":85,"line_end":85,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468408,"byte_end":468415,"line_start":86,"line_end":86,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5823},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469172,"byte_end":469188,"line_start":106,"line_end":106,"column_start":8,"column_end":24},"name":"par_chunks_exact","qualname":"::slice::ParallelSlice::par_chunks_exact","value":"pub fn par_chunks_exact(&Self, usize) -> ChunksExact<, T>","parent":{"krate":0,"index":5816},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468613,"byte_end":468674,"line_start":92,"line_end":92,"column_start":5,"column_end":66}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468679,"byte_end":468727,"line_start":93,"line_end":93,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468732,"byte_end":468735,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468740,"byte_end":468809,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468814,"byte_end":468879,"line_start":96,"line_end":96,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468884,"byte_end":468942,"line_start":97,"line_end":97,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468947,"byte_end":468950,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468955,"byte_end":468969,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468974,"byte_end":468977,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468982,"byte_end":468989,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":468994,"byte_end":469020,"line_start":102,"line_end":102,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks_exact(2).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469025,"byte_end":469096,"line_start":103,"line_end":103,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4]]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469101,"byte_end":469152,"line_start":104,"line_end":104,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469157,"byte_end":469164,"line_start":105,"line_end":105,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5824},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469956,"byte_end":469967,"line_start":125,"line_end":125,"column_start":8,"column_end":19},"name":"par_rchunks","qualname":"::slice::ParallelSlice::par_rchunks","value":"pub fn par_rchunks(&Self, usize) -> RChunks<, T>","parent":{"krate":0,"index":5816},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of `self` at a time,\n starting at the end. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of `self` at a time,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469378,"byte_end":469465,"line_start":111,"line_end":111,"column_start":5,"column_end":92}},{"value":"/ starting at the end. The chunks do not overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469470,"byte_end":469521,"line_start":112,"line_end":112,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469526,"byte_end":469529,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469534,"byte_end":469599,"line_start":114,"line_end":114,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469604,"byte_end":469675,"line_start":115,"line_end":115,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469680,"byte_end":469725,"line_start":116,"line_end":116,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469730,"byte_end":469733,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469738,"byte_end":469752,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469757,"byte_end":469760,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469765,"byte_end":469772,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469777,"byte_end":469803,"line_start":121,"line_end":121,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_rchunks(2).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469808,"byte_end":469874,"line_start":122,"line_end":122,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(chunks, vec![&[4, 5][..], &[2, 3], &[1]]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469879,"byte_end":469936,"line_start":123,"line_end":123,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":469941,"byte_end":469948,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5825},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470730,"byte_end":470747,"line_start":144,"line_end":144,"column_start":8,"column_end":25},"name":"par_rchunks_exact","qualname":"::slice::ParallelSlice::par_rchunks_exact","value":"pub fn par_rchunks_exact(&Self, usize) -> RChunksExact<, T>","parent":{"krate":0,"index":5816},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of `self` at a time,\n starting at the end. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of `self` at a time,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470149,"byte_end":470228,"line_start":130,"line_end":130,"column_start":5,"column_end":84}},{"value":"/ starting at the end. The chunks do not overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470233,"byte_end":470284,"line_start":131,"line_end":131,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470289,"byte_end":470292,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470297,"byte_end":470366,"line_start":133,"line_end":133,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470371,"byte_end":470436,"line_start":134,"line_end":134,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470441,"byte_end":470499,"line_start":135,"line_end":135,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470504,"byte_end":470507,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470512,"byte_end":470526,"line_start":137,"line_end":137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470531,"byte_end":470534,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470539,"byte_end":470546,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470551,"byte_end":470577,"line_start":140,"line_end":140,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_rchunks_exact(2).collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470582,"byte_end":470654,"line_start":141,"line_end":141,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(chunks, vec![&[4, 5][..], &[2, 3]]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470659,"byte_end":470710,"line_start":142,"line_end":142,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":470715,"byte_end":470722,"line_start":143,"line_end":143,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":5829},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471110,"byte_end":471126,"line_start":158,"line_end":158,"column_start":11,"column_end":27},"name":"ParallelSliceMut","qualname":"::slice::ParallelSliceMut","value":"ParallelSliceMut<T: Send>","parent":null,"children":[{"krate":0,"index":5831},{"krate":0,"index":5832},{"krate":0,"index":5834},{"krate":0,"index":5835},{"krate":0,"index":5836},{"krate":0,"index":5837},{"krate":0,"index":5838},{"krate":0,"index":5839},{"krate":0,"index":5842},{"krate":0,"index":5846},{"krate":0,"index":5847},{"krate":0,"index":5850}],"decl_id":null,"docs":" Parallel extensions for mutable slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for mutable slices.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471056,"byte_end":471099,"line_start":157,"line_end":157,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5831},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471253,"byte_end":471274,"line_start":161,"line_end":161,"column_start":8,"column_end":29},"name":"as_parallel_slice_mut","qualname":"::slice::ParallelSliceMut::as_parallel_slice_mut","value":"pub fn as_parallel_slice_mut(&mut Self) -> &mut [T]","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Returns a plain mutable slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain mutable slice, which is used to implement the rest of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471142,"byte_end":471215,"line_start":159,"line_end":159,"column_start":5,"column_end":78}},{"value":"/ the parallel methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471220,"byte_end":471245,"line_start":160,"line_end":160,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":5832},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471723,"byte_end":471736,"line_start":175,"line_end":175,"column_start":8,"column_end":21},"name":"par_split_mut","qualname":"::slice::ParallelSliceMut::par_split_mut","value":"pub fn par_split_mut<P>(&mut Self, P) -> SplitMut<, T, P> where P: Fn(&T) ->\nbool + Sync + Send","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over mutable subslices separated by\n elements that match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over mutable subslices separated by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471304,"byte_end":471371,"line_start":163,"line_end":163,"column_start":5,"column_end":72}},{"value":"/ elements that match the separator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471376,"byte_end":471414,"line_start":164,"line_end":164,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471419,"byte_end":471422,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471427,"byte_end":471441,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471446,"byte_end":471449,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471454,"byte_end":471461,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471466,"byte_end":471492,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471497,"byte_end":471551,"line_start":170,"line_end":170,"column_start":5,"column_end":59}},{"value":"/ array.par_split_mut(|i| *i == 0)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471556,"byte_end":471592,"line_start":171,"line_end":171,"column_start":5,"column_end":41}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471597,"byte_end":471641,"line_start":172,"line_end":172,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 0, 8, 4, 2, 0, 9, 6, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471646,"byte_end":471703,"line_start":173,"line_end":173,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471708,"byte_end":471715,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5834},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472562,"byte_end":472576,"line_start":201,"line_end":201,"column_start":8,"column_end":22},"name":"par_chunks_mut","qualname":"::slice::ParallelSliceMut::par_chunks_mut","value":"pub fn par_chunks_mut(&mut Self, usize) -> ChunksMut<, T>","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":471956,"byte_end":472025,"line_start":185,"line_end":185,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472030,"byte_end":472094,"line_start":186,"line_end":186,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472099,"byte_end":472102,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472107,"byte_end":472172,"line_start":188,"line_end":188,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472177,"byte_end":472248,"line_start":189,"line_end":189,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472253,"byte_end":472298,"line_start":190,"line_end":190,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472303,"byte_end":472306,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472311,"byte_end":472325,"line_start":192,"line_end":192,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472330,"byte_end":472333,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472338,"byte_end":472345,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472350,"byte_end":472376,"line_start":195,"line_end":195,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472381,"byte_end":472417,"line_start":196,"line_end":196,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_mut(2)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472422,"byte_end":472449,"line_start":197,"line_end":197,"column_start":5,"column_end":32}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472454,"byte_end":472498,"line_start":198,"line_end":198,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [2, 1, 4, 3, 5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472503,"byte_end":472542,"line_start":199,"line_end":199,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472547,"byte_end":472554,"line_start":200,"line_end":200,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5835},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473385,"byte_end":473405,"line_start":222,"line_end":222,"column_start":8,"column_end":28},"name":"par_chunks_exact_mut","qualname":"::slice::ParallelSliceMut::par_chunks_exact_mut","value":"pub fn par_chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, T>","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472770,"byte_end":472831,"line_start":206,"line_end":206,"column_start":5,"column_end":66}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472836,"byte_end":472900,"line_start":207,"line_end":207,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472905,"byte_end":472908,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472913,"byte_end":472982,"line_start":209,"line_end":209,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":472987,"byte_end":473052,"line_start":210,"line_end":210,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473057,"byte_end":473115,"line_start":211,"line_end":211,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473120,"byte_end":473123,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473128,"byte_end":473142,"line_start":213,"line_end":213,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473147,"byte_end":473150,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473155,"byte_end":473162,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473167,"byte_end":473193,"line_start":216,"line_end":216,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473198,"byte_end":473234,"line_start":217,"line_end":217,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_exact_mut(3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473239,"byte_end":473272,"line_start":218,"line_end":218,"column_start":5,"column_end":38}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473277,"byte_end":473321,"line_start":219,"line_end":219,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 4, 5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473326,"byte_end":473365,"line_start":220,"line_end":220,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473370,"byte_end":473377,"line_start":221,"line_end":221,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5836},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474237,"byte_end":474252,"line_start":243,"line_end":243,"column_start":8,"column_end":23},"name":"par_rchunks_mut","qualname":"::slice::ParallelSliceMut::par_rchunks_mut","value":"pub fn par_rchunks_mut(&mut Self, usize) -> RChunksMut<, T>","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of `self` at a time,\n starting at the end. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of `self` at a time,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473609,"byte_end":473696,"line_start":227,"line_end":227,"column_start":5,"column_end":92}},{"value":"/ starting at the end. The chunks are mutable and do not overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473701,"byte_end":473768,"line_start":228,"line_end":228,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473773,"byte_end":473776,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473781,"byte_end":473846,"line_start":230,"line_end":230,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473851,"byte_end":473922,"line_start":231,"line_end":231,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473927,"byte_end":473972,"line_start":232,"line_end":232,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473977,"byte_end":473980,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":473985,"byte_end":473999,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474004,"byte_end":474007,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474012,"byte_end":474019,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474024,"byte_end":474050,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474055,"byte_end":474091,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/ array.par_rchunks_mut(2)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474096,"byte_end":474124,"line_start":239,"line_end":239,"column_start":5,"column_end":33}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474129,"byte_end":474173,"line_start":240,"line_end":240,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [1, 3, 2, 5, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474178,"byte_end":474217,"line_start":241,"line_end":241,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474222,"byte_end":474229,"line_start":242,"line_end":242,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5837},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475085,"byte_end":475106,"line_start":264,"line_end":264,"column_start":8,"column_end":29},"name":"par_rchunks_exact_mut","qualname":"::slice::ParallelSliceMut::par_rchunks_exact_mut","value":"pub fn par_rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, T>","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of `self` at a time,\n starting at the end. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of `self` at a time,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474448,"byte_end":474527,"line_start":248,"line_end":248,"column_start":5,"column_end":84}},{"value":"/ starting at the end. The chunks are mutable and do not overlap.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474532,"byte_end":474599,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474604,"byte_end":474607,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474612,"byte_end":474681,"line_start":251,"line_end":251,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474686,"byte_end":474751,"line_start":252,"line_end":252,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474756,"byte_end":474814,"line_start":253,"line_end":253,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474819,"byte_end":474822,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474827,"byte_end":474841,"line_start":255,"line_end":255,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474846,"byte_end":474849,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474854,"byte_end":474861,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474866,"byte_end":474892,"line_start":258,"line_end":258,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474897,"byte_end":474933,"line_start":259,"line_end":259,"column_start":5,"column_end":41}},{"value":"/ array.par_rchunks_exact_mut(3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474938,"byte_end":474972,"line_start":260,"line_end":260,"column_start":5,"column_end":39}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":474977,"byte_end":475021,"line_start":261,"line_end":261,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [1, 2, 5, 4, 3]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475026,"byte_end":475065,"line_start":262,"line_end":262,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475070,"byte_end":475077,"line_start":263,"line_end":263,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5838},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476769,"byte_end":476777,"line_start":302,"line_end":302,"column_start":8,"column_end":16},"name":"par_sort","qualname":"::slice::ParallelSliceMut::par_sort","value":"pub fn par_sort(&mut Self) where T: Ord","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475312,"byte_end":475344,"line_start":269,"line_end":269,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475349,"byte_end":475352,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475357,"byte_end":475448,"line_start":271,"line_end":271,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475453,"byte_end":475456,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475461,"byte_end":475554,"line_start":273,"line_end":273,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475559,"byte_end":475612,"line_start":274,"line_end":274,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable`](#method.par_sort_unstable).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475617,"byte_end":475674,"line_start":275,"line_end":275,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475679,"byte_end":475682,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475687,"byte_end":475715,"line_start":277,"line_end":277,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475720,"byte_end":475723,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475728,"byte_end":475791,"line_start":279,"line_end":279,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475796,"byte_end":475849,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475854,"byte_end":475946,"line_start":281,"line_end":281,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":475951,"byte_end":476015,"line_start":282,"line_end":282,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476020,"byte_end":476023,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476028,"byte_end":476121,"line_start":284,"line_end":284,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476126,"byte_end":476176,"line_start":285,"line_end":285,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476181,"byte_end":476184,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476189,"byte_end":476283,"line_start":287,"line_end":287,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476288,"byte_end":476382,"line_start":288,"line_end":288,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476387,"byte_end":476483,"line_start":289,"line_end":289,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476488,"byte_end":476552,"line_start":290,"line_end":290,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476557,"byte_end":476560,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476565,"byte_end":476579,"line_start":292,"line_end":292,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476584,"byte_end":476587,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476592,"byte_end":476599,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476604,"byte_end":476630,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476635,"byte_end":476638,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476643,"byte_end":476677,"line_start":297,"line_end":297,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476682,"byte_end":476685,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ v.par_sort();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476690,"byte_end":476707,"line_start":299,"line_end":299,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476712,"byte_end":476749,"line_start":300,"line_end":300,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476754,"byte_end":476761,"line_start":301,"line_end":301,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5839},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478503,"byte_end":478514,"line_start":345,"line_end":345,"column_start":8,"column_end":19},"name":"par_sort_by","qualname":"::slice::ParallelSliceMut::par_sort_by","value":"pub fn par_sort_by<F>(&mut Self, F) where F: Fn(&T, &T) -> Ordering + Sync","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476892,"byte_end":476951,"line_start":309,"line_end":309,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476956,"byte_end":476959,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":476964,"byte_end":477055,"line_start":311,"line_end":311,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477060,"byte_end":477063,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477068,"byte_end":477161,"line_start":313,"line_end":313,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477166,"byte_end":477219,"line_start":314,"line_end":314,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by`](#method.par_sort_unstable_by).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477224,"byte_end":477287,"line_start":315,"line_end":315,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477292,"byte_end":477295,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477300,"byte_end":477328,"line_start":317,"line_end":317,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477333,"byte_end":477336,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477341,"byte_end":477404,"line_start":319,"line_end":319,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477409,"byte_end":477462,"line_start":320,"line_end":320,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477467,"byte_end":477559,"line_start":321,"line_end":321,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477564,"byte_end":477628,"line_start":322,"line_end":322,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477633,"byte_end":477636,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477641,"byte_end":477734,"line_start":324,"line_end":324,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477739,"byte_end":477789,"line_start":325,"line_end":325,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477794,"byte_end":477797,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477802,"byte_end":477896,"line_start":327,"line_end":327,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":477901,"byte_end":477995,"line_start":328,"line_end":328,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478000,"byte_end":478096,"line_start":329,"line_end":329,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478101,"byte_end":478165,"line_start":330,"line_end":330,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478170,"byte_end":478173,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478178,"byte_end":478192,"line_start":332,"line_end":332,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478197,"byte_end":478200,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478205,"byte_end":478212,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478217,"byte_end":478243,"line_start":335,"line_end":335,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478248,"byte_end":478251,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478256,"byte_end":478288,"line_start":337,"line_end":337,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_by(|a, b| a.cmp(b));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478293,"byte_end":478328,"line_start":338,"line_end":338,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478333,"byte_end":478368,"line_start":339,"line_end":339,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478373,"byte_end":478376,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478381,"byte_end":478403,"line_start":341,"line_end":341,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_by(|a, b| b.cmp(a));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478408,"byte_end":478443,"line_start":342,"line_end":342,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478448,"byte_end":478483,"line_start":343,"line_end":343,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478488,"byte_end":478495,"line_start":344,"line_end":344,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5842},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480250,"byte_end":480265,"line_start":387,"line_end":387,"column_start":8,"column_end":23},"name":"par_sort_by_key","qualname":"::slice::ParallelSliceMut::par_sort_by_key","value":"pub fn par_sort_by_key<B, F>(&mut Self, F) where B: Ord, F: Fn(&T) -> B + Sync","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478727,"byte_end":478790,"line_start":354,"line_end":354,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478795,"byte_end":478798,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478803,"byte_end":478894,"line_start":356,"line_end":356,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478899,"byte_end":478902,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":478907,"byte_end":479000,"line_start":358,"line_end":358,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479005,"byte_end":479058,"line_start":359,"line_end":359,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by_key`](#method.par_sort_unstable_by_key).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479063,"byte_end":479134,"line_start":360,"line_end":360,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479139,"byte_end":479142,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479147,"byte_end":479175,"line_start":362,"line_end":362,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479180,"byte_end":479183,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479188,"byte_end":479251,"line_start":364,"line_end":364,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479256,"byte_end":479309,"line_start":365,"line_end":365,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479314,"byte_end":479406,"line_start":366,"line_end":366,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479411,"byte_end":479475,"line_start":367,"line_end":367,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479480,"byte_end":479483,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479488,"byte_end":479581,"line_start":369,"line_end":369,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479586,"byte_end":479636,"line_start":370,"line_end":370,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479641,"byte_end":479644,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479649,"byte_end":479743,"line_start":372,"line_end":372,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479748,"byte_end":479842,"line_start":373,"line_end":373,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479847,"byte_end":479943,"line_start":374,"line_end":374,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":479948,"byte_end":480012,"line_start":375,"line_end":375,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480017,"byte_end":480020,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480025,"byte_end":480039,"line_start":377,"line_end":377,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480044,"byte_end":480047,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480052,"byte_end":480059,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480064,"byte_end":480090,"line_start":380,"line_end":380,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480095,"byte_end":480098,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480103,"byte_end":480140,"line_start":382,"line_end":382,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480145,"byte_end":480148,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_by_key(|k| k.abs());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480153,"byte_end":480188,"line_start":384,"line_end":384,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480193,"byte_end":480230,"line_start":385,"line_end":385,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480235,"byte_end":480242,"line_start":386,"line_end":386,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5846},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481710,"byte_end":481727,"line_start":426,"line_end":426,"column_start":8,"column_end":25},"name":"par_sort_unstable","qualname":"::slice::ParallelSliceMut::par_sort_unstable","value":"pub fn par_sort_unstable(&mut Self) where T: Ord","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel, but may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel, but may not preserve the order of equal elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480439,"byte_end":480521,"line_start":395,"line_end":395,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480526,"byte_end":480529,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480534,"byte_end":480629,"line_start":397,"line_end":397,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480634,"byte_end":480666,"line_start":398,"line_end":398,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480671,"byte_end":480674,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480679,"byte_end":480707,"line_start":400,"line_end":400,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480712,"byte_end":480715,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480720,"byte_end":480811,"line_start":402,"line_end":402,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480816,"byte_end":480903,"line_start":403,"line_end":403,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":480908,"byte_end":480998,"line_start":404,"line_end":404,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481003,"byte_end":481037,"line_start":405,"line_end":405,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481042,"byte_end":481045,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481050,"byte_end":481142,"line_start":407,"line_end":407,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481147,"byte_end":481207,"line_start":408,"line_end":408,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481212,"byte_end":481215,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481220,"byte_end":481309,"line_start":410,"line_end":410,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481314,"byte_end":481407,"line_start":411,"line_end":411,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481412,"byte_end":481425,"line_start":412,"line_end":412,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481430,"byte_end":481433,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481438,"byte_end":481484,"line_start":414,"line_end":414,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481489,"byte_end":481492,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481497,"byte_end":481511,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481516,"byte_end":481519,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481524,"byte_end":481531,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481536,"byte_end":481562,"line_start":419,"line_end":419,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481567,"byte_end":481570,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481575,"byte_end":481609,"line_start":421,"line_end":421,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481614,"byte_end":481617,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481622,"byte_end":481648,"line_start":423,"line_end":423,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481653,"byte_end":481690,"line_start":424,"line_end":424,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481695,"byte_end":481702,"line_start":425,"line_end":425,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5847},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483278,"byte_end":483298,"line_start":468,"line_end":468,"column_start":8,"column_end":28},"name":"par_sort_unstable_by","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by","value":"pub fn par_sort_unstable_by<F>(&mut Self, F) where F: Fn(&T, &T) -> Ordering +\nSync","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function, but may not preserve the order of\n equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function, but may not preserve the order of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481842,"byte_end":481935,"line_start":433,"line_end":433,"column_start":5,"column_end":98}},{"value":"/ equal elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481940,"byte_end":481959,"line_start":434,"line_end":434,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481964,"byte_end":481967,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":481972,"byte_end":482067,"line_start":436,"line_end":436,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482072,"byte_end":482104,"line_start":437,"line_end":437,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482109,"byte_end":482112,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482117,"byte_end":482145,"line_start":439,"line_end":439,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482150,"byte_end":482153,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482158,"byte_end":482249,"line_start":441,"line_end":441,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482254,"byte_end":482341,"line_start":442,"line_end":442,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482346,"byte_end":482436,"line_start":443,"line_end":443,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482441,"byte_end":482475,"line_start":444,"line_end":444,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482480,"byte_end":482483,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482488,"byte_end":482580,"line_start":446,"line_end":446,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482585,"byte_end":482645,"line_start":447,"line_end":447,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482650,"byte_end":482653,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482658,"byte_end":482747,"line_start":449,"line_end":449,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482752,"byte_end":482845,"line_start":450,"line_end":450,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482850,"byte_end":482863,"line_start":451,"line_end":451,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482868,"byte_end":482871,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482876,"byte_end":482922,"line_start":453,"line_end":453,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482927,"byte_end":482930,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482935,"byte_end":482949,"line_start":455,"line_end":455,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482954,"byte_end":482957,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482962,"byte_end":482969,"line_start":457,"line_end":457,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":482974,"byte_end":483000,"line_start":458,"line_end":458,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483005,"byte_end":483008,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483013,"byte_end":483045,"line_start":460,"line_end":460,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_unstable_by(|a, b| a.cmp(b));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483050,"byte_end":483094,"line_start":461,"line_end":461,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483099,"byte_end":483134,"line_start":462,"line_end":462,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483139,"byte_end":483142,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483147,"byte_end":483169,"line_start":464,"line_end":464,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_unstable_by(|a, b| b.cmp(a));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483174,"byte_end":483218,"line_start":465,"line_end":465,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483223,"byte_end":483258,"line_start":466,"line_end":466,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483263,"byte_end":483270,"line_start":467,"line_end":467,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5850},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484842,"byte_end":484866,"line_start":509,"line_end":509,"column_start":8,"column_end":32},"name":"par_sort_unstable_by_key","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by_key","value":"pub fn par_sort_unstable_by_key<B, F>(&mut Self, F) where B: Ord, F: Fn(&T) ->\nB + Sync","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function, but may not preserve the order\n of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function, but may not preserve the order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483511,"byte_end":483605,"line_start":477,"line_end":477,"column_start":5,"column_end":99}},{"value":"/ of equal elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483610,"byte_end":483632,"line_start":478,"line_end":478,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483637,"byte_end":483640,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483645,"byte_end":483740,"line_start":480,"line_end":480,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483745,"byte_end":483777,"line_start":481,"line_end":481,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483782,"byte_end":483785,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483790,"byte_end":483818,"line_start":483,"line_end":483,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483823,"byte_end":483826,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483831,"byte_end":483922,"line_start":485,"line_end":485,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":483927,"byte_end":484014,"line_start":486,"line_end":486,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484019,"byte_end":484109,"line_start":487,"line_end":487,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484114,"byte_end":484148,"line_start":488,"line_end":488,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484153,"byte_end":484156,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484161,"byte_end":484253,"line_start":490,"line_end":490,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484258,"byte_end":484318,"line_start":491,"line_end":491,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484323,"byte_end":484326,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484331,"byte_end":484420,"line_start":493,"line_end":493,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484425,"byte_end":484518,"line_start":494,"line_end":494,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484523,"byte_end":484536,"line_start":495,"line_end":495,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484541,"byte_end":484544,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484549,"byte_end":484595,"line_start":497,"line_end":497,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484600,"byte_end":484603,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484608,"byte_end":484622,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484627,"byte_end":484630,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484635,"byte_end":484642,"line_start":501,"line_end":501,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484647,"byte_end":484673,"line_start":502,"line_end":502,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484678,"byte_end":484681,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484686,"byte_end":484723,"line_start":504,"line_end":504,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484728,"byte_end":484731,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable_by_key(|k| k.abs());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484736,"byte_end":484780,"line_start":506,"line_end":506,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484785,"byte_end":484822,"line_start":507,"line_end":507,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":484827,"byte_end":484834,"line_start":508,"line_end":508,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8895},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":485682,"byte_end":485686,"line_start":545,"line_end":545,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8898}],"decl_id":null,"docs":" Parallel iterator over immutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable items in a slice","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":485600,"byte_end":485653,"line_start":543,"line_end":543,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":8903},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":487193,"byte_end":487200,"line_start":610,"line_end":610,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":8906},{"krate":0,"index":8907}],"decl_id":null,"docs":" Parallel iterator over immutable overlapping windows of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable overlapping windows of a slice","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":487097,"byte_end":487164,"line_start":608,"line_end":608,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":8912},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":489237,"byte_end":489244,"line_start":692,"line_end":692,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":8915}],"decl_id":null,"docs":" Parallel iterator over mutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable items in a slice","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":489157,"byte_end":489208,"line_start":690,"line_end":690,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5956},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":490696,"byte_end":490701,"line_start":753,"line_end":753,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":5960},{"krate":0,"index":5961}],"decl_id":null,"docs":" Parallel iterator over slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over slices separated by a predicate","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":490626,"byte_end":490684,"line_start":752,"line_end":752,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":5990},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":492570,"byte_end":492578,"line_start":829,"line_end":829,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":5994},{"krate":0,"index":5995}],"decl_id":null,"docs":" Parallel iterator over mutable slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable slices separated by a predicate","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":492492,"byte_end":492558,"line_start":828,"line_end":828,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":6019},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","parent":null,"children":[{"krate":0,"index":6020},{"krate":0,"index":6021},{"krate":0,"index":6022},{"krate":0,"index":6023},{"krate":0,"index":6024},{"krate":0,"index":6025},{"krate":0,"index":6026},{"krate":0,"index":6042},{"krate":0,"index":6044},{"krate":0,"index":6061},{"krate":0,"index":6064},{"krate":0,"index":6068},{"krate":0,"index":6069},{"krate":0,"index":6070},{"krate":0,"index":6071},{"krate":0,"index":8960},{"krate":0,"index":8963},{"krate":0,"index":8966},{"krate":0,"index":6073},{"krate":0,"index":6076},{"krate":0,"index":6081},{"krate":0,"index":8969},{"krate":0,"index":8972},{"krate":0,"index":8975},{"krate":0,"index":6087},{"krate":0,"index":6091},{"krate":0,"index":6096},{"krate":0,"index":8978},{"krate":0,"index":8981},{"krate":0,"index":8984},{"krate":0,"index":6102},{"krate":0,"index":6105},{"krate":0,"index":6110},{"krate":0,"index":8987},{"krate":0,"index":8990},{"krate":0,"index":8993},{"krate":0,"index":6116},{"krate":0,"index":6119},{"krate":0,"index":6124},{"krate":0,"index":8996},{"krate":0,"index":9001},{"krate":0,"index":9005},{"krate":0,"index":6130},{"krate":0,"index":6134},{"krate":0,"index":6140},{"krate":0,"index":9009},{"krate":0,"index":9014},{"krate":0,"index":9018},{"krate":0,"index":6150},{"krate":0,"index":6156},{"krate":0,"index":6160},{"krate":0,"index":6165},{"krate":0,"index":6171},{"krate":0,"index":9022},{"krate":0,"index":9026},{"krate":0,"index":9029},{"krate":0,"index":6180},{"krate":0,"index":6181},{"krate":0,"index":9032},{"krate":0,"index":9036},{"krate":0,"index":9039},{"krate":0,"index":6186},{"krate":0,"index":6187},{"krate":0,"index":9042},{"krate":0,"index":9047},{"krate":0,"index":9051},{"krate":0,"index":6192},{"krate":0,"index":6198},{"krate":0,"index":6204},{"krate":0,"index":9055},{"krate":0,"index":9060},{"krate":0,"index":9064},{"krate":0,"index":6212},{"krate":0,"index":6219},{"krate":0,"index":6225}],"decl_id":null,"docs":" Parallel iterator types for [strings][std::str]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [strings][std::str]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":584965,"byte_end":585016,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585017,"byte_end":585020,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585021,"byte_end":585099,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585100,"byte_end":585138,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585139,"byte_end":585142,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Note: [`ParallelString::par_split()`] and [`par_split_terminator()`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585143,"byte_end":585215,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ reference a `Pattern` trait which is not visible outside this crate.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585216,"byte_end":585288,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ This trait is intentionally kept private, for use only by Rayon itself.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585289,"byte_end":585364,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585365,"byte_end":585437,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585438,"byte_end":585478,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585479,"byte_end":585482,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`ParallelString::par_split()`]: trait.ParallelString.html#method.par_split","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585483,"byte_end":585562,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`par_split_terminator()`]: trait.ParallelString.html#method.par_split_terminator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585563,"byte_end":585648,"line_start":13,"line_end":13,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585649,"byte_end":585652,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [std::str]: https://doc.rust-lang.org/stable/std/str/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":585653,"byte_end":585710,"line_start":15,"line_end":15,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":6026},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":586959,"byte_end":586973,"line_start":60,"line_end":60,"column_start":11,"column_end":25},"name":"ParallelString","qualname":"::str::ParallelString","value":"ParallelString","parent":null,"children":[{"krate":0,"index":6027},{"krate":0,"index":6028},{"krate":0,"index":6029},{"krate":0,"index":6030},{"krate":0,"index":6031},{"krate":0,"index":6032},{"krate":0,"index":6034},{"krate":0,"index":6036},{"krate":0,"index":6037},{"krate":0,"index":6038},{"krate":0,"index":6040}],"decl_id":null,"docs":" Parallel extensions for strings.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for strings.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":586912,"byte_end":586948,"line_start":59,"line_end":59,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":6027},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587090,"byte_end":587108,"line_start":63,"line_end":63,"column_start":8,"column_end":26},"name":"as_parallel_string","qualname":"::str::ParallelString::as_parallel_string","value":"pub fn as_parallel_string(&Self) -> &str","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a plain string slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain string slice, which is used to implement the rest of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":586980,"byte_end":587052,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ the parallel methods.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587057,"byte_end":587082,"line_start":62,"line_end":62,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":6028},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587393,"byte_end":587402,"line_start":74,"line_end":74,"column_start":8,"column_end":17},"name":"par_chars","qualname":"::str::ParallelString::par_chars","value":"pub fn par_chars(&Self) -> Chars","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587130,"byte_end":587194,"line_start":65,"line_end":65,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587199,"byte_end":587202,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587207,"byte_end":587221,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587226,"byte_end":587229,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587234,"byte_end":587241,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587246,"byte_end":587272,"line_start":70,"line_end":70,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_chars().max_by_key(|c| *c as i32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587277,"byte_end":587337,"line_start":71,"line_end":71,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(Some('o'), max);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587342,"byte_end":587373,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587378,"byte_end":587385,"line_start":73,"line_end":73,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6029},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587811,"byte_end":587827,"line_start":89,"line_end":89,"column_start":8,"column_end":24},"name":"par_char_indices","qualname":"::str::ParallelString::par_char_indices","value":"pub fn par_char_indices(&Self) -> CharIndices","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string, with their positions.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string, with their positions.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587508,"byte_end":587594,"line_start":80,"line_end":80,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587599,"byte_end":587602,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587607,"byte_end":587621,"line_start":82,"line_end":82,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587626,"byte_end":587629,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587634,"byte_end":587641,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587646,"byte_end":587672,"line_start":85,"line_end":85,"column_start":5,"column_end":31}},{"value":"/ let min = \"hello\".par_char_indices().min_by_key(|&(_i, c)| c as i32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587677,"byte_end":587750,"line_start":86,"line_end":86,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(Some((1, 'e')), min);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587755,"byte_end":587791,"line_start":87,"line_end":87,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587796,"byte_end":587803,"line_start":88,"line_end":88,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6030},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588487,"byte_end":588496,"line_start":109,"line_end":109,"column_start":8,"column_end":17},"name":"par_bytes","qualname":"::str::ParallelString::par_bytes","value":"pub fn par_bytes(&Self) -> Bytes","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the bytes of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the bytes of a string.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":587945,"byte_end":588004,"line_start":95,"line_end":95,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588009,"byte_end":588012,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Note that multi-byte sequences (for code points greater than `U+007F`)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588017,"byte_end":588091,"line_start":97,"line_end":97,"column_start":5,"column_end":79}},{"value":"/ are produced as separate items, but will not be split across threads.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588096,"byte_end":588169,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ If you would prefer an indexed iterator without that guarantee, consider","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588174,"byte_end":588250,"line_start":99,"line_end":99,"column_start":5,"column_end":81}},{"value":"/ `string.as_bytes().par_iter().copied()` instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588255,"byte_end":588307,"line_start":100,"line_end":100,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588312,"byte_end":588315,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588320,"byte_end":588334,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588339,"byte_end":588342,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588347,"byte_end":588354,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588359,"byte_end":588385,"line_start":105,"line_end":105,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_bytes().max();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588390,"byte_end":588430,"line_start":106,"line_end":106,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(b'o'), max);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588435,"byte_end":588467,"line_start":107,"line_end":107,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588472,"byte_end":588479,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6031},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589217,"byte_end":589233,"line_start":133,"line_end":133,"column_start":8,"column_end":24},"name":"par_encode_utf16","qualname":"::str::ParallelString::par_encode_utf16","value":"pub fn par_encode_utf16(&Self) -> EncodeUtf16","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over a string encoded as UTF-16.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over a string encoded as UTF-16.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588602,"byte_end":588666,"line_start":115,"line_end":115,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588671,"byte_end":588674,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Note that surrogate pairs (for code points greater than `U+FFFF`) are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588679,"byte_end":588752,"line_start":117,"line_end":117,"column_start":5,"column_end":78}},{"value":"/ produced as separate items, but will not be split across threads.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588757,"byte_end":588826,"line_start":118,"line_end":118,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588831,"byte_end":588834,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588839,"byte_end":588853,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588858,"byte_end":588861,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588866,"byte_end":588873,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588878,"byte_end":588904,"line_start":123,"line_end":123,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588909,"byte_end":588912,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ let max = \"hello\".par_encode_utf16().max();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588917,"byte_end":588964,"line_start":125,"line_end":125,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(Some(b'o' as u16), max);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":588969,"byte_end":589008,"line_start":126,"line_end":126,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589013,"byte_end":589016,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let text = \"Zażółć gęślą jaźń\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589021,"byte_end":589065,"line_start":128,"line_end":128,"column_start":5,"column_end":40}},{"value":"/ let utf8_len = text.len();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589070,"byte_end":589100,"line_start":129,"line_end":129,"column_start":5,"column_end":35}},{"value":"/ let utf16_len = text.par_encode_utf16().count();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589105,"byte_end":589157,"line_start":130,"line_end":130,"column_start":5,"column_end":57}},{"value":"/ assert!(utf16_len <= utf8_len);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589162,"byte_end":589197,"line_start":131,"line_end":131,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589202,"byte_end":589209,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6032},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589961,"byte_end":589970,"line_start":156,"line_end":156,"column_start":8,"column_end":17},"name":"par_split","qualname":"::str::ParallelString::par_split","value":"pub fn par_split<P: Pattern>(&Self, P) -> Split<, P>","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings separated by a\n given character or predicate, similar to `str::split`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings separated by a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589351,"byte_end":589413,"line_start":139,"line_end":139,"column_start":5,"column_end":67}},{"value":"/ given character or predicate, similar to `str::split`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589418,"byte_end":589476,"line_start":140,"line_end":140,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589481,"byte_end":589484,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589489,"byte_end":589560,"line_start":142,"line_end":142,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589565,"byte_end":589637,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589642,"byte_end":589682,"line_start":144,"line_end":144,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589687,"byte_end":589690,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589695,"byte_end":589709,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589714,"byte_end":589717,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589722,"byte_end":589729,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589734,"byte_end":589760,"line_start":149,"line_end":149,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589765,"byte_end":589807,"line_start":150,"line_end":150,"column_start":5,"column_end":47}},{"value":"/    .par_split(',')","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589812,"byte_end":589834,"line_start":151,"line_end":151,"column_start":5,"column_end":27}},{"value":"/    .filter_map(|s| s.trim().parse::<i32>().ok())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589839,"byte_end":589891,"line_start":152,"line_end":152,"column_start":5,"column_end":57}},{"value":"/    .sum();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589896,"byte_end":589910,"line_start":153,"line_end":153,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589915,"byte_end":589941,"line_start":154,"line_end":154,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":589946,"byte_end":589953,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6034},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590839,"byte_end":590859,"line_start":178,"line_end":178,"column_start":8,"column_end":28},"name":"par_split_terminator","qualname":"::str::ParallelString::par_split_terminator","value":"pub fn par_split_terminator<P: Pattern>(&Self, P) -> SplitTerminator<, P>","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings terminated by a\n given character or predicate, similar to `str::split_terminator`.\n It's equivalent to `par_split`, except it doesn't produce an empty\n substring after a trailing terminator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings terminated by a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590090,"byte_end":590153,"line_start":160,"line_end":160,"column_start":5,"column_end":68}},{"value":"/ given character or predicate, similar to `str::split_terminator`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590158,"byte_end":590227,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"/ It's equivalent to `par_split`, except it doesn't produce an empty","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590232,"byte_end":590302,"line_start":162,"line_end":162,"column_start":5,"column_end":75}},{"value":"/ substring after a trailing terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590307,"byte_end":590349,"line_start":163,"line_end":163,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590354,"byte_end":590357,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590362,"byte_end":590433,"line_start":165,"line_end":165,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590438,"byte_end":590510,"line_start":166,"line_end":166,"column_start":5,"column_end":77}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590515,"byte_end":590555,"line_start":167,"line_end":167,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590560,"byte_end":590563,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590568,"byte_end":590582,"line_start":169,"line_end":169,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590587,"byte_end":590590,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590595,"byte_end":590602,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590607,"byte_end":590633,"line_start":172,"line_end":172,"column_start":5,"column_end":31}},{"value":"/ let parts: Vec<_> = \"((1 + 3) * 2)\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590638,"byte_end":590677,"line_start":173,"line_end":173,"column_start":5,"column_end":44}},{"value":"/     .par_split_terminator(|c| c == '(' || c == ')')","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590682,"byte_end":590737,"line_start":174,"line_end":174,"column_start":5,"column_end":60}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590742,"byte_end":590761,"line_start":175,"line_end":175,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![\"\", \"\", \"1 + 3\", \" * 2\"], parts);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590766,"byte_end":590819,"line_start":176,"line_end":176,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":590824,"byte_end":590831,"line_start":177,"line_end":177,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6036},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591530,"byte_end":591539,"line_start":197,"line_end":197,"column_start":8,"column_end":17},"name":"par_lines","qualname":"::str::ParallelString::par_lines","value":"pub fn par_lines(&Self) -> Lines","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the lines of a string, ending with an\n optional carriage return and with a newline (`\\r\\n` or just `\\n`).\n The final line ending is optional, and line endings are not included in\n the output strings.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the lines of a string, ending with an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591001,"byte_end":591075,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ optional carriage return and with a newline (`\\r\\n` or just `\\n`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591080,"byte_end":591150,"line_start":183,"line_end":183,"column_start":5,"column_end":75}},{"value":"/ The final line ending is optional, and line endings are not included in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591155,"byte_end":591230,"line_start":184,"line_end":184,"column_start":5,"column_end":80}},{"value":"/ the output strings.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591235,"byte_end":591258,"line_start":185,"line_end":185,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591263,"byte_end":591266,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591271,"byte_end":591285,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591290,"byte_end":591293,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591298,"byte_end":591305,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591310,"byte_end":591336,"line_start":190,"line_end":190,"column_start":5,"column_end":31}},{"value":"/ let lengths: Vec<_> = \"hello world\\nfizbuzz\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591341,"byte_end":591389,"line_start":191,"line_end":191,"column_start":5,"column_end":53}},{"value":"/     .par_lines()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591394,"byte_end":591414,"line_start":192,"line_end":192,"column_start":5,"column_end":25}},{"value":"/     .map(|l| l.len())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591419,"byte_end":591444,"line_start":193,"line_end":193,"column_start":5,"column_end":30}},{"value":"/     .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591449,"byte_end":591468,"line_start":194,"line_end":194,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![11, 7], lengths);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591473,"byte_end":591510,"line_start":195,"line_end":195,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591515,"byte_end":591522,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6037},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592164,"byte_end":592184,"line_start":216,"line_end":216,"column_start":8,"column_end":28},"name":"par_split_whitespace","qualname":"::str::ParallelString::par_split_whitespace","value":"pub fn par_split_whitespace(&Self) -> SplitWhitespace","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the sub-slices of a string that are\n separated by any amount of whitespace.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the sub-slices of a string that are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591614,"byte_end":591686,"line_start":201,"line_end":201,"column_start":5,"column_end":77}},{"value":"/ separated by any amount of whitespace.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591691,"byte_end":591733,"line_start":202,"line_end":202,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591738,"byte_end":591741,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ As with `str::split_whitespace`, 'whitespace' is defined according to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591746,"byte_end":591819,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ the terms of the Unicode Derived Core Property `White_Space`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591824,"byte_end":591889,"line_start":205,"line_end":205,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591894,"byte_end":591897,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591902,"byte_end":591916,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591921,"byte_end":591924,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591929,"byte_end":591936,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591941,"byte_end":591967,"line_start":210,"line_end":210,"column_start":5,"column_end":31}},{"value":"/ let longest = \"which is the longest word?\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":591972,"byte_end":592018,"line_start":211,"line_end":211,"column_start":5,"column_end":51}},{"value":"/     .par_split_whitespace()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592023,"byte_end":592054,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/     .max_by_key(|word| word.len());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592059,"byte_end":592098,"line_start":213,"line_end":213,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(\"longest\"), longest);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592103,"byte_end":592144,"line_start":214,"line_end":214,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592149,"byte_end":592156,"line_start":215,"line_end":215,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6038},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592901,"byte_end":592912,"line_start":237,"line_end":237,"column_start":8,"column_end":19},"name":"par_matches","qualname":"::str::ParallelString::par_matches","value":"pub fn par_matches<P: Pattern>(&Self, P) -> Matches<, P>","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a\n given character or predicate, similar to `str::matches`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592279,"byte_end":592339,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/ given character or predicate, similar to `str::matches`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592344,"byte_end":592404,"line_start":221,"line_end":221,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592409,"byte_end":592412,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592417,"byte_end":592488,"line_start":223,"line_end":223,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592493,"byte_end":592565,"line_start":224,"line_end":224,"column_start":5,"column_end":77}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592570,"byte_end":592610,"line_start":225,"line_end":225,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592615,"byte_end":592618,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592623,"byte_end":592637,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592642,"byte_end":592645,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592650,"byte_end":592657,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592662,"byte_end":592688,"line_start":230,"line_end":230,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592693,"byte_end":592735,"line_start":231,"line_end":231,"column_start":5,"column_end":47}},{"value":"/    .par_matches(char::is_numeric)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592740,"byte_end":592777,"line_start":232,"line_end":232,"column_start":5,"column_end":42}},{"value":"/    .map(|s| s.parse::<i32>().expect(\"digit\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592782,"byte_end":592831,"line_start":233,"line_end":233,"column_start":5,"column_end":54}},{"value":"/    .sum();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592836,"byte_end":592850,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592855,"byte_end":592881,"line_start":235,"line_end":235,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":592886,"byte_end":592893,"line_start":236,"line_end":236,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6040},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593730,"byte_end":593747,"line_start":260,"line_end":260,"column_start":8,"column_end":25},"name":"par_match_indices","qualname":"::str::ParallelString::par_match_indices","value":"pub fn par_match_indices<P: Pattern>(&Self, P) -> MatchIndices<, P>","parent":{"krate":0,"index":6026},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a given character\n or predicate, with their positions, similar to `str::match_indices`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a given character","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593070,"byte_end":593146,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/ or predicate, with their positions, similar to `str::match_indices`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593151,"byte_end":593223,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593228,"byte_end":593231,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593236,"byte_end":593307,"line_start":247,"line_end":247,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593312,"byte_end":593384,"line_start":248,"line_end":248,"column_start":5,"column_end":77}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593389,"byte_end":593429,"line_start":249,"line_end":249,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593434,"byte_end":593437,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593442,"byte_end":593456,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593461,"byte_end":593464,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593469,"byte_end":593476,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593481,"byte_end":593507,"line_start":254,"line_end":254,"column_start":5,"column_end":31}},{"value":"/ let digits: Vec<_> = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593512,"byte_end":593563,"line_start":255,"line_end":255,"column_start":5,"column_end":56}},{"value":"/    .par_match_indices(char::is_numeric)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593568,"byte_end":593611,"line_start":256,"line_end":256,"column_start":5,"column_end":48}},{"value":"/    .collect();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593616,"byte_end":593634,"line_start":257,"line_end":257,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(digits, vec![(0, \"1\"), (3, \"2\"), (14, \"3\"), (17, \"4\")]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593639,"byte_end":593710,"line_start":258,"line_end":258,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":593715,"byte_end":593722,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":6048},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594644,"byte_end":594651,"line_start":288,"line_end":288,"column_start":15,"column_end":22},"name":"Pattern","qualname":"::str::private::Pattern","value":"Pattern: Sized + Sync + Send","parent":null,"children":[{"krate":0,"index":8920},{"krate":0,"index":6049},{"krate":0,"index":6050},{"krate":0,"index":6051},{"krate":0,"index":6052},{"krate":0,"index":6055},{"krate":0,"index":6058}],"decl_id":null,"docs":" Pattern-matching trait for `ParallelString`, somewhat like a mix of\n `std::str::pattern::{Pattern, Searcher}`.","sig":null,"attributes":[{"value":"/ Pattern-matching trait for `ParallelString`, somewhat like a mix of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594431,"byte_end":594502,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/ `std::str::pattern::{Pattern, Searcher}`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594507,"byte_end":594552,"line_start":285,"line_end":285,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594557,"byte_end":594560,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594565,"byte_end":594629,"line_start":287,"line_end":287,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":6049},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594711,"byte_end":594718,"line_start":290,"line_end":290,"column_start":12,"column_end":19},"name":"find_in","qualname":"::str::private::Pattern::find_in","value":"pub fn find_in(&Self, &str) -> Option<usize>","parent":{"krate":0,"index":6048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6050},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594771,"byte_end":594779,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"rfind_in","qualname":"::str::private::Pattern::rfind_in","value":"pub fn rfind_in(&Self, &str) -> Option<usize>","parent":{"krate":0,"index":6048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6051},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594832,"byte_end":594844,"line_start":292,"line_end":292,"column_start":12,"column_end":24},"name":"is_suffix_of","qualname":"::str::private::Pattern::is_suffix_of","value":"pub fn is_suffix_of(&Self, &str) -> bool","parent":{"krate":0,"index":6048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6052},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594888,"byte_end":594899,"line_start":293,"line_end":293,"column_start":12,"column_end":23},"name":"fold_splits","qualname":"::str::private::Pattern::fold_splits","value":"pub fn fold_splits<'ch, F>(&Self, &'ch str, F, bool) -> F where\nF: Folder<&'ch str>","parent":{"krate":0,"index":6048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6055},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":595026,"byte_end":595038,"line_start":296,"line_end":296,"column_start":12,"column_end":24},"name":"fold_matches","qualname":"::str::private::Pattern::fold_matches","value":"pub fn fold_matches<'ch, F>(&Self, &'ch str, F) -> F where F: Folder<&'ch str>","parent":{"krate":0,"index":6048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6058},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":595148,"byte_end":595166,"line_start":299,"line_end":299,"column_start":12,"column_end":30},"name":"fold_match_indices","qualname":"::str::private::Pattern::fold_match_indices","value":"pub fn fold_match_indices<'ch, F>(&Self, &'ch str, F, usize) -> F where\nF: Folder<(usize, &'ch str)>","parent":{"krate":0,"index":6048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8960},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":597063,"byte_end":597068,"line_start":373,"line_end":373,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":8962}],"decl_id":null,"docs":" Parallel iterator over the characters of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":596974,"byte_end":597027,"line_start":371,"line_end":371,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":8969},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":598110,"byte_end":598121,"line_start":417,"line_end":417,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::str::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":8971}],"decl_id":null,"docs":" Parallel iterator over the characters of a string, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string, with their positions","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":597999,"byte_end":598074,"line_start":415,"line_end":415,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":8978},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":599493,"byte_end":599498,"line_start":473,"line_end":473,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::str::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":8980}],"decl_id":null,"docs":" Parallel iterator over the bytes of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the bytes of a string","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":599409,"byte_end":599457,"line_start":471,"line_end":471,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":8987},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":600514,"byte_end":600525,"line_start":517,"line_end":517,"column_start":12,"column_end":23},"name":"EncodeUtf16","qualname":"::str::EncodeUtf16","value":"EncodeUtf16 {  }","parent":null,"children":[{"krate":0,"index":8989}],"decl_id":null,"docs":" Parallel iterator over a string encoded as UTF-16\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a string encoded as UTF-16","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":600425,"byte_end":600478,"line_start":515,"line_end":515,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":8996},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":601593,"byte_end":601598,"line_start":561,"line_end":561,"column_start":12,"column_end":17},"name":"Split","qualname":"::str::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":8999},{"krate":0,"index":9000}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a pattern","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":601497,"byte_end":601557,"line_start":559,"line_end":559,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":9009},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":603267,"byte_end":603282,"line_start":622,"line_end":622,"column_start":12,"column_end":27},"name":"SplitTerminator","qualname":"::str::SplitTerminator","value":"SplitTerminator {  }","parent":null,"children":[{"krate":0,"index":9012},{"krate":0,"index":9013}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a terminator pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a terminator pattern","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":603160,"byte_end":603231,"line_start":620,"line_end":620,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":9022},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":605140,"byte_end":605145,"line_start":688,"line_end":688,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over lines in a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over lines in a string","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":605060,"byte_end":605104,"line_start":686,"line_end":686,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":9032},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":605816,"byte_end":605831,"line_start":717,"line_end":717,"column_start":12,"column_end":27},"name":"SplitWhitespace","qualname":"::str::SplitWhitespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over substrings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by whitespace","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":605719,"byte_end":605780,"line_start":715,"line_end":715,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":9042},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":606420,"byte_end":606427,"line_start":742,"line_end":742,"column_start":12,"column_end":19},"name":"Matches","qualname":"::str::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":9045},{"krate":0,"index":9046}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":606326,"byte_end":606384,"line_start":740,"line_end":740,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":9055},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":607828,"byte_end":607840,"line_start":798,"line_end":798,"column_start":12,"column_end":24},"name":"MatchIndices","qualname":"::str::MatchIndices","value":"MatchIndices {  }","parent":null,"children":[{"krate":0,"index":9058},{"krate":0,"index":9059}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern, with their positions","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":607712,"byte_end":607792,"line_start":796,"line_end":796,"column_start":1,"column_end":81}}]},{"kind":"Mod","id":{"krate":0,"index":6233},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string","qualname":"::string","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","parent":null,"children":[{"krate":0,"index":6234},{"krate":0,"index":6235},{"krate":0,"index":6238},{"krate":0,"index":6239},{"krate":0,"index":6240},{"krate":0,"index":6243},{"krate":0,"index":6246},{"krate":0,"index":9068},{"krate":0,"index":9072},{"krate":0,"index":6252},{"krate":0,"index":6257}],"decl_id":null,"docs":" This module contains the parallel iterator types for owned strings\n (`String`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for owned strings","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":609218,"byte_end":609288,"line_start":1,"line_end":1,"column_start":1,"column_end":71}},{"value":"/ (`String`). You will rarely need to interact with it directly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":609289,"byte_end":609354,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":609355,"byte_end":609414,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":9068},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":609975,"byte_end":609980,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"Drain","qualname":"::string::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":9070},{"krate":0,"index":9071}],"decl_id":null,"docs":" Draining parallel iterator that moves a range of characters out of a string,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves a range of characters out of a string,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":609832,"byte_end":609912,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ but keeps the total capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":609913,"byte_end":609946,"line_start":23,"line_end":23,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":6260},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","parent":null,"children":[{"krate":0,"index":6261},{"krate":0,"index":6262},{"krate":0,"index":6263},{"krate":0,"index":6266},{"krate":0,"index":6267},{"krate":0,"index":6270},{"krate":0,"index":6273},{"krate":0,"index":6276},{"krate":0,"index":6279},{"krate":0,"index":6280},{"krate":0,"index":6283},{"krate":0,"index":6286},{"krate":0,"index":6289},{"krate":0,"index":6292},{"krate":0,"index":6298},{"krate":0,"index":9075},{"krate":0,"index":9078},{"krate":0,"index":9081},{"krate":0,"index":6304},{"krate":0,"index":6309},{"krate":0,"index":6315},{"krate":0,"index":6322},{"krate":0,"index":9084},{"krate":0,"index":9090},{"krate":0,"index":6329},{"krate":0,"index":6336},{"krate":0,"index":6344},{"krate":0,"index":6348},{"krate":0,"index":6352},{"krate":0,"index":6356},{"krate":0,"index":6363},{"krate":0,"index":6367},{"krate":0,"index":6371},{"krate":0,"index":6378},{"krate":0,"index":6382},{"krate":0,"index":6386},{"krate":0,"index":6389}],"decl_id":null,"docs":" Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","sig":null,"attributes":[{"value":"/ Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":610485,"byte_end":610547,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":610548,"byte_end":610551,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":610552,"byte_end":610630,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":610631,"byte_end":610669,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":610670,"byte_end":610673,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::vec]: https://doc.rust-lang.org/stable/std/vec/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":610674,"byte_end":610731,"line_start":6,"line_end":6,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":9075},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":611481,"byte_end":611489,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":9077}],"decl_id":null,"docs":" Parallel iterator that moves out of a vector.\n","sig":null,"attributes":[{"value":"/ Parallel iterator that moves out of a vector.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":611396,"byte_end":611445,"line_start":36,"line_end":36,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":9084},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":612981,"byte_end":612986,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":9087},{"krate":0,"index":9088},{"krate":0,"index":9089}],"decl_id":null,"docs":" Draining parallel iterator that moves a range out of a vector, but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves a range out of a vector, but keeps the total capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":612856,"byte_end":612952,"line_start":100,"line_end":100,"column_start":1,"column_end":97}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/split_producer.rs","byte_start":9594,"byte_end":9607,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/split_producer.rs","byte_start":11075,"byte_end":11088,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":14370,"byte_end":14378,"line_start":53,"line_end":53,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":14685,"byte_end":14693,"line_start":68,"line_end":68,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18418,"byte_end":18428,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18885,"byte_end":18889,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":19660,"byte_end":19665,"line_start":76,"line_end":76,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":19976,"byte_end":19981,"line_start":91,"line_end":91,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":20451,"byte_end":20456,"line_start":113,"line_end":113,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":21527,"byte_end":21531,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":23042,"byte_end":23046,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":24340,"byte_end":24344,"line_start":36,"line_end":36,"column_start":50,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":26727,"byte_end":26731,"line_start":36,"line_end":36,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":28486,"byte_end":28490,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":29655,"byte_end":29663,"line_start":21,"line_end":21,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":30213,"byte_end":30217,"line_start":43,"line_end":43,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":31890,"byte_end":31895,"line_start":113,"line_end":113,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":32200,"byte_end":32205,"line_start":128,"line_end":128,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":32767,"byte_end":32772,"line_start":151,"line_end":151,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16942,"byte_end":16952,"line_start":51,"line_end":51,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":17369,"byte_end":17379,"line_start":65,"line_end":65,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":153195,"byte_end":153203,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":154332,"byte_end":154346,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156705,"byte_end":156713,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161426,"byte_end":161431,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161660,"byte_end":161665,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":162768,"byte_end":162773,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":163708,"byte_end":163717,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":164395,"byte_end":164404,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":165073,"byte_end":165086,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":165269,"byte_end":165282,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":166894,"byte_end":166902,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":167116,"byte_end":167124,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":167420,"byte_end":167428,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":167549,"byte_end":167557,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168327,"byte_end":168333,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168533,"byte_end":168539,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168872,"byte_end":168878,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":169576,"byte_end":169584,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":170157,"byte_end":170170,"line_start":112,"line_end":112,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":171289,"byte_end":171297,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":171975,"byte_end":171983,"line_start":185,"line_end":185,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":172144,"byte_end":172152,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173283,"byte_end":173289,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173477,"byte_end":173483,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173931,"byte_end":173937,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":665},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":174582,"byte_end":174590,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":175147,"byte_end":175161,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":176057,"byte_end":176071,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":176183,"byte_end":176197,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":176845,"byte_end":176859,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":177179,"byte_end":177191,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":182337,"byte_end":182352,"line_start":14,"line_end":14,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":182931,"byte_end":182946,"line_start":27,"line_end":27,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":184126,"byte_end":184139,"line_start":57,"line_end":57,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":184177,"byte_end":184190,"line_start":59,"line_end":59,"column_start":13,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":184572,"byte_end":184585,"line_start":73,"line_end":73,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":184965,"byte_end":184980,"line_start":86,"line_end":86,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":186059,"byte_end":186072,"line_start":122,"line_end":122,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":187064,"byte_end":187079,"line_start":155,"line_end":155,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":187468,"byte_end":187482,"line_start":168,"line_end":168,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":202154,"byte_end":202160,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":202348,"byte_end":202354,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":202801,"byte_end":202807,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":203451,"byte_end":203459,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":204015,"byte_end":204029,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":204924,"byte_end":204938,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":205050,"byte_end":205064,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":205711,"byte_end":205725,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":206044,"byte_end":206056,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207338,"byte_end":207343,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207433,"byte_end":207438,"line_start":41,"line_end":41,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207574,"byte_end":207579,"line_start":47,"line_end":47,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207865,"byte_end":207870,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":208350,"byte_end":208363,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209343,"byte_end":209352,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209546,"byte_end":209555,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209899,"byte_end":209908,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":210414,"byte_end":210422,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":211006,"byte_end":211023,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":213227,"byte_end":213242,"line_start":33,"line_end":33,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":213646,"byte_end":213661,"line_start":51,"line_end":51,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":213818,"byte_end":213831,"line_start":61,"line_end":61,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":214657,"byte_end":214667,"line_start":101,"line_end":101,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":214965,"byte_end":214975,"line_start":114,"line_end":114,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":215473,"byte_end":215481,"line_start":136,"line_end":136,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":215824,"byte_end":215832,"line_start":150,"line_end":150,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":216352,"byte_end":216360,"line_start":173,"line_end":173,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":216662,"byte_end":216670,"line_start":186,"line_end":186,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":217247,"byte_end":217254,"line_start":211,"line_end":211,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":217715,"byte_end":217722,"line_start":227,"line_end":227,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":218351,"byte_end":218358,"line_start":254,"line_end":254,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":218696,"byte_end":218703,"line_start":268,"line_end":268,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":219049,"byte_end":219059,"line_start":282,"line_end":282,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":219416,"byte_end":219426,"line_start":296,"line_end":296,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":219770,"byte_end":219782,"line_start":316,"line_end":316,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":220204,"byte_end":220216,"line_start":336,"line_end":336,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":220373,"byte_end":220383,"line_start":346,"line_end":346,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":220827,"byte_end":220838,"line_start":371,"line_end":371,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":221234,"byte_end":221240,"line_start":384,"line_end":384,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1216}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":221739,"byte_end":221745,"line_start":397,"line_end":397,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":222028,"byte_end":222046,"line_start":412,"line_end":412,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":222474,"byte_end":222492,"line_start":432,"line_end":432,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1235}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":222649,"byte_end":222665,"line_start":442,"line_end":442,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":223597,"byte_end":223603,"line_start":484,"line_end":484,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":223865,"byte_end":223871,"line_start":494,"line_end":494,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":224148,"byte_end":224154,"line_start":504,"line_end":504,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":224623,"byte_end":224631,"line_start":524,"line_end":524,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":224918,"byte_end":224926,"line_start":537,"line_end":537,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":225383,"byte_end":225386,"line_start":557,"line_end":557,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1272}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":226398,"byte_end":226401,"line_start":584,"line_end":584,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227456,"byte_end":227462,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227622,"byte_end":227628,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227840,"byte_end":227846,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":228390,"byte_end":228404,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":228555,"byte_end":228569,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":229313,"byte_end":229327,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1333},{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":229710,"byte_end":229722,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230998,"byte_end":231007,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1363}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":231214,"byte_end":231223,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1367}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":231413,"byte_end":231422,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":231985,"byte_end":232002,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":232155,"byte_end":232172,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":232958,"byte_end":232975,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":233376,"byte_end":233391,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":234561,"byte_end":234573,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":234727,"byte_end":234739,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":235324,"byte_end":235336,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1459}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":235696,"byte_end":235706,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1479},{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":236733,"byte_end":236744,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1485}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":239266,"byte_end":239278,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1517},{"krate":0,"index":1518}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":239828,"byte_end":239840,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":240906,"byte_end":240918,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1534}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":242476,"byte_end":242486,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":244194,"byte_end":244205,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":245025,"byte_end":245032,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":245211,"byte_end":245218,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":245399,"byte_end":245406,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":245972,"byte_end":245987,"line_start":56,"line_end":56,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":246132,"byte_end":246147,"line_start":62,"line_end":62,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":246939,"byte_end":246954,"line_start":94,"line_end":94,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1612}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":247394,"byte_end":247407,"line_start":115,"line_end":115,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248999,"byte_end":249010,"line_start":18,"line_end":18,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":249219,"byte_end":249230,"line_start":26,"line_end":26,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":249419,"byte_end":249430,"line_start":33,"line_end":33,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1653},{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":250016,"byte_end":250035,"line_start":59,"line_end":59,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":250184,"byte_end":250203,"line_start":65,"line_end":65,"column_start":38,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1678}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":250986,"byte_end":251005,"line_start":96,"line_end":96,"column_start":47,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1685},{"krate":0,"index":1686}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":251417,"byte_end":251434,"line_start":116,"line_end":116,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1703},{"krate":0,"index":1704}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252651,"byte_end":252658,"line_start":15,"line_end":15,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1710}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252876,"byte_end":252883,"line_start":26,"line_end":26,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1713},{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":253395,"byte_end":253410,"line_start":49,"line_end":49,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":253515,"byte_end":253530,"line_start":55,"line_end":55,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":254213,"byte_end":254228,"line_start":85,"line_end":85,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1734},{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":254586,"byte_end":254599,"line_start":104,"line_end":104,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":256015,"byte_end":256026,"line_start":15,"line_end":15,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1753}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":256287,"byte_end":256298,"line_start":27,"line_end":27,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1757}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":256845,"byte_end":256864,"line_start":51,"line_end":51,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1764}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":256973,"byte_end":256992,"line_start":57,"line_end":57,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":257666,"byte_end":257685,"line_start":86,"line_end":86,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1777},{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":258015,"byte_end":258032,"line_start":104,"line_end":104,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1789},{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":258711,"byte_end":258715,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259512,"byte_end":259516,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1811}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259706,"byte_end":259710,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":260319,"byte_end":260331,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":261187,"byte_end":261199,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1848},{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":261668,"byte_end":261678,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1874},{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":262838,"byte_end":262846,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1880}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263635,"byte_end":263643,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1885}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263897,"byte_end":263905,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1890},{"krate":0,"index":1891}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":264473,"byte_end":264489,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":265407,"byte_end":265423,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1919},{"krate":0,"index":1920}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/for_each.rs","byte_start":266152,"byte_end":266167,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/for_each.rs","byte_start":266563,"byte_end":266578,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1953},{"krate":0,"index":1954}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/for_each.rs","byte_start":267002,"byte_end":267017,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":267903,"byte_end":267906,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2016}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":268176,"byte_end":268184,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":268541,"byte_end":268551,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2024}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":268861,"byte_end":268871,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":269335,"byte_end":269342,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2034}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":269877,"byte_end":269885,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2039}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":270185,"byte_end":270192,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":270515,"byte_end":270523,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2048}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":270802,"byte_end":270808,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2051}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":271070,"byte_end":271076,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2055}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":271344,"byte_end":271350,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2059}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":271614,"byte_end":271620,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2062}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":271891,"byte_end":271897,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2066}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":272341,"byte_end":272344,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2072}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273878,"byte_end":273885,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2093}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":274046,"byte_end":274053,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2097}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":274269,"byte_end":274276,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":274736,"byte_end":274743,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2110},{"krate":0,"index":2111}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":275485,"byte_end":275493,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2122},{"krate":0,"index":2123}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":276164,"byte_end":276179,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140},{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":277389,"byte_end":277404,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2153}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":277554,"byte_end":277569,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":278312,"byte_end":278327,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2170},{"krate":0,"index":2171}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":278706,"byte_end":278719,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2187},{"krate":0,"index":2188}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":280043,"byte_end":280053,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2201}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":280305,"byte_end":280315,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2208}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":280692,"byte_end":280702,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":281598,"byte_end":281607,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2228},{"krate":0,"index":2229}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":282417,"byte_end":282426,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2242},{"krate":0,"index":2243}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":283207,"byte_end":283225,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2256}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":283545,"byte_end":283563,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":286428,"byte_end":286441,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":287574,"byte_end":287587,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2282}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":288148,"byte_end":288161,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2286}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":289088,"byte_end":289106,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2293}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":289748,"byte_end":289766,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2297},{"krate":0,"index":2298},{"krate":0,"index":2300}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":290143,"byte_end":290161,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2304},{"krate":0,"index":2306},{"krate":0,"index":2307}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":291263,"byte_end":291274,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2324}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":291505,"byte_end":291516,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2330}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":292046,"byte_end":292057,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2333},{"krate":0,"index":2335},{"krate":0,"index":2336}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":292964,"byte_end":292972,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2347},{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":293539,"byte_end":293558,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":293799,"byte_end":293818,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":295993,"byte_end":296008,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2379}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":296780,"byte_end":296795,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":297443,"byte_end":297458,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2385}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":297806,"byte_end":297825,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2395}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":298050,"byte_end":298069,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2404}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":299147,"byte_end":299166,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2409}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":299706,"byte_end":299723,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2424},{"krate":0,"index":2425}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301461,"byte_end":301467,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2434}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301672,"byte_end":301678,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2440}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":302013,"byte_end":302019,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2443},{"krate":0,"index":2445},{"krate":0,"index":2446}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":302597,"byte_end":302605,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2455},{"krate":0,"index":2456}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":303240,"byte_end":303254,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304561,"byte_end":304567,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2474}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304772,"byte_end":304778,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2480}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":305113,"byte_end":305119,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2483},{"krate":0,"index":2485},{"krate":0,"index":2486}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":305697,"byte_end":305705,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2495},{"krate":0,"index":2496}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":306340,"byte_end":306354,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307721,"byte_end":307724,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2528}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307881,"byte_end":307884,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2532}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":308087,"byte_end":308090,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2537},{"krate":0,"index":2538},{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":308564,"byte_end":308567,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2548}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":309309,"byte_end":309317,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2560},{"krate":0,"index":2561}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":309996,"byte_end":310007,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":311179,"byte_end":311190,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2592}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":311331,"byte_end":311342,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":312081,"byte_end":312092,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2611},{"krate":0,"index":2612}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":312483,"byte_end":312492,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2625},{"krate":0,"index":2626},{"krate":0,"index":2627},{"krate":0,"index":2629},{"krate":0,"index":2630}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313729,"byte_end":313736,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2645}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313968,"byte_end":313975,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":314207,"byte_end":314214,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2656},{"krate":0,"index":2657},{"krate":0,"index":2659}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":314730,"byte_end":314737,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2665},{"krate":0,"index":2667},{"krate":0,"index":2668}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":315582,"byte_end":315590,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2683},{"krate":0,"index":2684}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":316373,"byte_end":316388,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2700},{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2703},{"krate":0,"index":2704},{"krate":0,"index":2705},{"krate":0,"index":2706}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":317721,"byte_end":317732,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":318113,"byte_end":318124,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2731}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":318415,"byte_end":318426,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":318740,"byte_end":318755,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2751}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":318921,"byte_end":318936,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2761},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2764}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":319780,"byte_end":319795,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2772},{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":320255,"byte_end":320268,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2801},{"krate":0,"index":2802}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321799,"byte_end":321806,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2807}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321979,"byte_end":321986,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2812}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":322230,"byte_end":322237,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2819},{"krate":0,"index":2820},{"krate":0,"index":2822}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":322777,"byte_end":322784,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2829},{"krate":0,"index":2831},{"krate":0,"index":2832}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":323659,"byte_end":323667,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2848},{"krate":0,"index":2849}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":324477,"byte_end":324492,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2872}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":325942,"byte_end":325957,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2887}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":326139,"byte_end":326154,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2901}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":327010,"byte_end":327025,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":2910},{"krate":0,"index":2911}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/noop.rs","byte_start":336403,"byte_end":336415,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2925},{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2929},{"krate":0,"index":2930}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/noop.rs","byte_start":336759,"byte_end":336771,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":2935},{"krate":0,"index":2937},{"krate":0,"index":2938}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/noop.rs","byte_start":337127,"byte_end":337139,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2941},{"krate":0,"index":2942}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/noop.rs","byte_start":337333,"byte_end":337344,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2946}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338312,"byte_end":338316,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2957}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338602,"byte_end":338606,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2960},{"krate":0,"index":2962},{"krate":0,"index":2963}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339793,"byte_end":339797,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2980}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339955,"byte_end":339959,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2983}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":340069,"byte_end":340078,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2986}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":340273,"byte_end":340282,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2992}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":340792,"byte_end":340801,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2995},{"krate":0,"index":2997},{"krate":0,"index":2998}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":341501,"byte_end":341509,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3006},{"krate":0,"index":3007}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":342218,"byte_end":342235,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3017},{"krate":0,"index":3018},{"krate":0,"index":3019},{"krate":0,"index":3020},{"krate":0,"index":3021},{"krate":0,"index":3022},{"krate":0,"index":3023}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":343333,"byte_end":343346,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3033},{"krate":0,"index":3034},{"krate":0,"index":3035}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":343693,"byte_end":343706,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3039}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":343957,"byte_end":343970,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3043}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":344281,"byte_end":344298,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3053},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":3056},{"krate":0,"index":3057},{"krate":0,"index":3058}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":345256,"byte_end":345273,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3063},{"krate":0,"index":3064}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":345752,"byte_end":345767,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3074},{"krate":0,"index":3075},{"krate":0,"index":3076},{"krate":0,"index":3083},{"krate":0,"index":3084}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":346616,"byte_end":346632,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3094}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348541,"byte_end":348542,"line_start":51,"line_end":51,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3149}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":349052,"byte_end":349062,"line_start":71,"line_end":71,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3152},{"krate":0,"index":3153}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":350060,"byte_end":350080,"line_start":107,"line_end":107,"column_start":41,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3165}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":350372,"byte_end":350392,"line_start":118,"line_end":118,"column_start":60,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":3169},{"krate":0,"index":3170},{"krate":0,"index":3171}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":355217,"byte_end":355226,"line_start":20,"line_end":20,"column_start":55,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":355415,"byte_end":355424,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3190}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":355648,"byte_end":355657,"line_start":38,"line_end":38,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3194},{"krate":0,"index":3195}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":356223,"byte_end":356240,"line_start":63,"line_end":63,"column_start":16,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3208}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":356458,"byte_end":356475,"line_start":73,"line_end":73,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3214},{"krate":0,"index":3215},{"krate":0,"index":3216},{"krate":0,"index":3217},{"krate":0,"index":3218},{"krate":0,"index":3219}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":357374,"byte_end":357389,"line_start":110,"line_end":110,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3231},{"krate":0,"index":3232},{"krate":0,"index":3233},{"krate":0,"index":3234}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":358533,"byte_end":358548,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":358570,"byte_end":358585,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3262}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":358734,"byte_end":358749,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3269},{"krate":0,"index":3270},{"krate":0,"index":3271}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":359299,"byte_end":359314,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3275},{"krate":0,"index":3276}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":359546,"byte_end":359561,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3279}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":359746,"byte_end":359759,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3286},{"krate":0,"index":3287},{"krate":0,"index":3288},{"krate":0,"index":3290},{"krate":0,"index":3291}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":360774,"byte_end":360788,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":360830,"byte_end":360844,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3316}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":360946,"byte_end":360960,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3322},{"krate":0,"index":3323},{"krate":0,"index":3324},{"krate":0,"index":3325},{"krate":0,"index":3326},{"krate":0,"index":3327}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":361487,"byte_end":361501,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3333},{"krate":0,"index":3334}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":361750,"byte_end":361764,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3340}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":362005,"byte_end":362017,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3351},{"krate":0,"index":3352},{"krate":0,"index":3353},{"krate":0,"index":3355},{"krate":0,"index":3356}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363419,"byte_end":363425,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3370},{"krate":0,"index":3371}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":364277,"byte_end":364283,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3375},{"krate":0,"index":3376}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":364733,"byte_end":364747,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365798,"byte_end":365805,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3391},{"krate":0,"index":3392},{"krate":0,"index":3394}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":366123,"byte_end":366130,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3397},{"krate":0,"index":3399},{"krate":0,"index":3401}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":366742,"byte_end":366757,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3408},{"krate":0,"index":3409},{"krate":0,"index":3410},{"krate":0,"index":3411}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":367554,"byte_end":367558,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3418},{"krate":0,"index":3419},{"krate":0,"index":3420}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":367936,"byte_end":367940,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3423}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":368069,"byte_end":368073,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3426}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368652,"byte_end":368655,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3435}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368837,"byte_end":368840,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3441}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":369175,"byte_end":369178,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3444},{"krate":0,"index":3446},{"krate":0,"index":3447}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":369748,"byte_end":369756,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3456},{"krate":0,"index":3457}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":370271,"byte_end":370282,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3465},{"krate":0,"index":3466},{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3470}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371487,"byte_end":371491,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3482}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371724,"byte_end":371728,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3485},{"krate":0,"index":3486},{"krate":0,"index":3488}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":372063,"byte_end":372067,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3491},{"krate":0,"index":3492},{"krate":0,"index":3494}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":372648,"byte_end":372656,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3503},{"krate":0,"index":3504}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377783,"byte_end":377788,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3524}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377968,"byte_end":377973,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3528},{"krate":0,"index":3529}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":378461,"byte_end":378474,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3541},{"krate":0,"index":3542},{"krate":0,"index":3544}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":379394,"byte_end":379405,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":379427,"byte_end":379438,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3573}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":379579,"byte_end":379590,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3577},{"krate":0,"index":3578},{"krate":0,"index":3579},{"krate":0,"index":3580},{"krate":0,"index":3581},{"krate":0,"index":3582}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":380057,"byte_end":380068,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3586},{"krate":0,"index":3587}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":380284,"byte_end":380295,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3590}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":380468,"byte_end":380477,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3597},{"krate":0,"index":3598},{"krate":0,"index":3599},{"krate":0,"index":3601},{"krate":0,"index":3602}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381462,"byte_end":381466,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3611}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381699,"byte_end":381703,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3617}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":382038,"byte_end":382042,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3620},{"krate":0,"index":3621},{"krate":0,"index":3623}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":382605,"byte_end":382613,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3632},{"krate":0,"index":3633}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383192,"byte_end":383199,"line_start":10,"line_end":10,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3668}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":384109,"byte_end":384116,"line_start":41,"line_end":41,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3674}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":384312,"byte_end":384319,"line_start":47,"line_end":47,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3680},{"krate":0,"index":3681}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":385023,"byte_end":385038,"line_start":77,"line_end":77,"column_start":42,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3700},{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3703},{"krate":0,"index":3704},{"krate":0,"index":3705}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":385944,"byte_end":385959,"line_start":113,"line_end":113,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3713},{"krate":0,"index":3714}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":386498,"byte_end":386511,"line_start":138,"line_end":138,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3729},{"krate":0,"index":3730},{"krate":0,"index":3731},{"krate":0,"index":3732}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":387307,"byte_end":387318,"line_start":172,"line_end":172,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3737}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":388175,"byte_end":388186,"line_start":201,"line_end":201,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3742}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":388471,"byte_end":388482,"line_start":213,"line_end":213,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3747},{"krate":0,"index":3748}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":389104,"byte_end":389123,"line_start":241,"line_end":241,"column_start":38,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3766},{"krate":0,"index":3767},{"krate":0,"index":3768},{"krate":0,"index":3769}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":390101,"byte_end":390120,"line_start":281,"line_end":281,"column_start":47,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3776},{"krate":0,"index":3777}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":391266,"byte_end":391283,"line_start":31,"line_end":31,"column_start":26,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":391325,"byte_end":391342,"line_start":33,"line_end":33,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3823}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":391444,"byte_end":391461,"line_start":39,"line_end":39,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3829},{"krate":0,"index":3830},{"krate":0,"index":3831},{"krate":0,"index":3832},{"krate":0,"index":3833},{"krate":0,"index":3834}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":392094,"byte_end":392111,"line_start":66,"line_end":66,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3840},{"krate":0,"index":3841}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":392390,"byte_end":392407,"line_start":81,"line_end":81,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3847}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":392913,"byte_end":392928,"line_start":100,"line_end":100,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3859},{"krate":0,"index":3860},{"krate":0,"index":3861},{"krate":0,"index":3862}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":394428,"byte_end":394449,"line_start":28,"line_end":28,"column_start":22,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":394483,"byte_end":394504,"line_start":30,"line_end":30,"column_start":23,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3903}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":394598,"byte_end":394619,"line_start":36,"line_end":36,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":395207,"byte_end":395228,"line_start":62,"line_end":62,"column_start":41,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3918},{"krate":0,"index":3919}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":395473,"byte_end":395494,"line_start":76,"line_end":76,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3924}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":396207,"byte_end":396226,"line_start":99,"line_end":99,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3936},{"krate":0,"index":3937},{"krate":0,"index":3938},{"krate":0,"index":3939}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":400149,"byte_end":400154,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3978},{"krate":0,"index":3979},{"krate":0,"index":3980},{"krate":0,"index":3983}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":401035,"byte_end":401044,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3995},{"krate":0,"index":3996},{"krate":0,"index":3997}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":402081,"byte_end":402093,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4015},{"krate":0,"index":4016},{"krate":0,"index":4017}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":402724,"byte_end":402730,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4033},{"krate":0,"index":4034},{"krate":0,"index":4036}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":404131,"byte_end":404137,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4051},{"krate":0,"index":4052},{"krate":0,"index":4054}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":405074,"byte_end":405087,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4069},{"krate":0,"index":4070},{"krate":0,"index":4071},{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4074}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":406350,"byte_end":406363,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4081},{"krate":0,"index":4082}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":407027,"byte_end":407038,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4097},{"krate":0,"index":4098},{"krate":0,"index":4099},{"krate":0,"index":4100}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":407779,"byte_end":407791,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4111}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":408875,"byte_end":408883,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4131},{"krate":0,"index":4132},{"krate":0,"index":4133}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":410365,"byte_end":410374,"line_start":507,"line_end":507,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4157}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":410492,"byte_end":410501,"line_start":513,"line_end":513,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4161}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411378,"byte_end":411384,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4176}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411544,"byte_end":411550,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4180}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411762,"byte_end":411768,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4184},{"krate":0,"index":4185},{"krate":0,"index":4187}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":412230,"byte_end":412236,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4191},{"krate":0,"index":4193},{"krate":0,"index":4194}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":412977,"byte_end":412985,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":4205},{"krate":0,"index":4206}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":413662,"byte_end":413676,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4218},{"krate":0,"index":4219},{"krate":0,"index":4220},{"krate":0,"index":4221},{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4224}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":414936,"byte_end":414950,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4236}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":415097,"byte_end":415111,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4242},{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4247}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":415857,"byte_end":415871,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4253},{"krate":0,"index":4254}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":416392,"byte_end":416404,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4271},{"krate":0,"index":4272},{"krate":0,"index":4273},{"krate":0,"index":4275},{"krate":0,"index":4276}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":417350,"byte_end":417359,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4280},{"krate":0,"index":4281},{"krate":0,"index":4282},{"krate":0,"index":4283},{"krate":0,"index":4286}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":418109,"byte_end":418118,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":418222,"byte_end":418231,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4294}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":419044,"byte_end":419053,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4307}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":419243,"byte_end":419252,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4311},{"krate":0,"index":4312}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":419882,"byte_end":419899,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4323},{"krate":0,"index":4324},{"krate":0,"index":4325},{"krate":0,"index":4326},{"krate":0,"index":4327},{"krate":0,"index":4328}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":420699,"byte_end":420716,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":4333},{"krate":0,"index":4334}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":421119,"byte_end":421134,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4344},{"krate":0,"index":4345},{"krate":0,"index":4346},{"krate":0,"index":4352},{"krate":0,"index":4353}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422788,"byte_end":422791,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4366}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":423014,"byte_end":423017,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4370},{"krate":0,"index":4371},{"krate":0,"index":4373}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":423401,"byte_end":423404,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4377},{"krate":0,"index":4379},{"krate":0,"index":4380}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":424064,"byte_end":424073,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4391},{"krate":0,"index":4392}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":424694,"byte_end":424703,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4403},{"krate":0,"index":4404}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":425360,"byte_end":425371,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":4414},{"krate":0,"index":4415},{"krate":0,"index":4416},{"krate":0,"index":4417},{"krate":0,"index":4418},{"krate":0,"index":4419}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426780,"byte_end":426785,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4426}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":427055,"byte_end":427060,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4430},{"krate":0,"index":4431},{"krate":0,"index":4433}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":427452,"byte_end":427457,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4437},{"krate":0,"index":4439},{"krate":0,"index":4440}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428562,"byte_end":428568,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4607}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428775,"byte_end":428781,"line_start":32,"line_end":32,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4610},{"krate":0,"index":4611},{"krate":0,"index":4613}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":429116,"byte_end":429122,"line_start":50,"line_end":50,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4616},{"krate":0,"index":4618},{"krate":0,"index":4619}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":429804,"byte_end":429812,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4629},{"krate":0,"index":4630}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":430493,"byte_end":430507,"line_start":108,"line_end":108,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4639},{"krate":0,"index":4640},{"krate":0,"index":4641},{"krate":0,"index":4642},{"krate":0,"index":4643},{"krate":0,"index":4644}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41880,"byte_end":41881,"line_start":275,"line_end":275,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4660},{"krate":0,"index":4661},{"krate":0,"index":4662}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43389,"byte_end":43390,"line_start":322,"line_end":322,"column_start":70,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":4671},{"krate":0,"index":4672},{"krate":0,"index":4673}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107674,"byte_end":107675,"line_start":2230,"line_end":2230,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4879},{"krate":0,"index":4880},{"krate":0,"index":4881}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":138393,"byte_end":138404,"line_start":3180,"line_end":3180,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":8351},{"krate":0,"index":4991},{"krate":0,"index":4992},{"krate":0,"index":4993},{"krate":0,"index":4994},{"krate":0,"index":4995}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":139048,"byte_end":139054,"line_start":3205,"line_end":3205,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":8352},{"krate":0,"index":4998},{"krate":0,"index":4999},{"krate":0,"index":5000},{"krate":0,"index":5001},{"krate":0,"index":5002}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":139662,"byte_end":139668,"line_start":3230,"line_end":3230,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":8353},{"krate":0,"index":5006},{"krate":0,"index":5007},{"krate":0,"index":5008},{"krate":0,"index":5009},{"krate":0,"index":5010}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":140284,"byte_end":140288,"line_start":3255,"line_end":3255,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8354},{"krate":0,"index":5014},{"krate":0,"index":5015},{"krate":0,"index":5016},{"krate":0,"index":5017},{"krate":0,"index":5018}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":141032,"byte_end":141036,"line_start":3281,"line_end":3281,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8355},{"krate":0,"index":5022},{"krate":0,"index":5023},{"krate":0,"index":5024},{"krate":0,"index":5025},{"krate":0,"index":5026}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432306,"byte_end":432312,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5039},{"krate":0,"index":5040},{"krate":0,"index":5041}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432485,"byte_end":432493,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5044},{"krate":0,"index":5045},{"krate":0,"index":5047}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432788,"byte_end":432796,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5050},{"krate":0,"index":5052},{"krate":0,"index":5053}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433953,"byte_end":433957,"line_start":91,"line_end":91,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5058}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":435433,"byte_end":435447,"line_start":150,"line_end":150,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5076},{"krate":0,"index":5077},{"krate":0,"index":5078},{"krate":0,"index":5079}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":436059,"byte_end":436065,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5083}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":439092,"byte_end":439097,"line_start":53,"line_end":53,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5146},{"krate":0,"index":5147},{"krate":0,"index":5148}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":439374,"byte_end":439386,"line_start":69,"line_end":69,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5154},{"krate":0,"index":5155},{"krate":0,"index":5156}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":441040,"byte_end":441044,"line_start":119,"line_end":119,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5178},{"krate":0,"index":5179},{"krate":0,"index":5181}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":441373,"byte_end":441377,"line_start":135,"line_end":135,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5184},{"krate":0,"index":5186},{"krate":0,"index":5187}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":447012,"byte_end":447016,"line_start":323,"line_end":323,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5196},{"krate":0,"index":5197},{"krate":0,"index":5199}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":447323,"byte_end":447327,"line_start":338,"line_end":338,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5201},{"krate":0,"index":5203},{"krate":0,"index":5204}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452472,"byte_end":452476,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":5217}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":453414,"byte_end":453428,"line_start":75,"line_end":75,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5220},{"krate":0,"index":5221},{"krate":0,"index":5222}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":455101,"byte_end":455105,"line_start":125,"line_end":125,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5244},{"krate":0,"index":5245},{"krate":0,"index":5247}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":455434,"byte_end":455438,"line_start":141,"line_end":141,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5250},{"krate":0,"index":5252},{"krate":0,"index":5253}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":458934,"byte_end":458938,"line_start":265,"line_end":265,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5260},{"krate":0,"index":5261},{"krate":0,"index":5263}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":459318,"byte_end":459322,"line_start":281,"line_end":281,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5265},{"krate":0,"index":5267},{"krate":0,"index":5268}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462946,"byte_end":462952,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5282},{"krate":0,"index":5283},{"krate":0,"index":5284}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":463386,"byte_end":463390,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5288}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":464643,"byte_end":464649,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5307}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":494530,"byte_end":494536,"line_start":13,"line_end":13,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5327}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":494694,"byte_end":494700,"line_start":19,"line_end":19,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5331}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":494829,"byte_end":494835,"line_start":25,"line_end":25,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5335},{"krate":0,"index":5336},{"krate":0,"index":5338}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":495163,"byte_end":495169,"line_start":40,"line_end":40,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":5342},{"krate":0,"index":5344},{"krate":0,"index":5345}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":495792,"byte_end":495806,"line_start":68,"line_end":68,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5355},{"krate":0,"index":5356},{"krate":0,"index":5357},{"krate":0,"index":5358}],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":496672,"byte_end":496683,"line_start":100,"line_end":100,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5362},{"krate":0,"index":5363}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497269,"byte_end":497280,"line_start":120,"line_end":120,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5367}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497414,"byte_end":497425,"line_start":126,"line_end":126,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5371},{"krate":0,"index":5372},{"krate":0,"index":5374}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497753,"byte_end":497764,"line_start":141,"line_end":141,"column_start":58,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":5378},{"krate":0,"index":5380},{"krate":0,"index":5381}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":498384,"byte_end":498403,"line_start":169,"line_end":169,"column_start":43,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5391},{"krate":0,"index":5392},{"krate":0,"index":5393},{"krate":0,"index":5394}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":499241,"byte_end":499250,"line_start":200,"line_end":200,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5398}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":499431,"byte_end":499440,"line_start":206,"line_end":206,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5402},{"krate":0,"index":5403},{"krate":0,"index":5405}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":499772,"byte_end":499781,"line_start":221,"line_end":221,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":5409},{"krate":0,"index":5411},{"krate":0,"index":5412}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":500414,"byte_end":500431,"line_start":249,"line_end":249,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5422},{"krate":0,"index":5423},{"krate":0,"index":5424},{"krate":0,"index":5425}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501327,"byte_end":501341,"line_start":281,"line_end":281,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5429},{"krate":0,"index":5430},{"krate":0,"index":5431},{"krate":0,"index":5432}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":503063,"byte_end":503077,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5436},{"krate":0,"index":5437},{"krate":0,"index":5439}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":503409,"byte_end":503423,"line_start":339,"line_end":339,"column_start":58,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":5443},{"krate":0,"index":5445},{"krate":0,"index":5446}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":504053,"byte_end":504075,"line_start":367,"line_end":367,"column_start":43,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5456},{"krate":0,"index":5457},{"krate":0,"index":5458},{"krate":0,"index":5459}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mergesort.rs","byte_start":505533,"byte_end":505543,"line_start":33,"line_end":33,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5491}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mergesort.rs","byte_start":508452,"byte_end":508465,"line_start":102,"line_end":102,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5501}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mergesort.rs","byte_start":512191,"byte_end":512200,"line_start":205,"line_end":205,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5512}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mergesort.rs","byte_start":523788,"byte_end":523793,"line_start":511,"line_end":511,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5536}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/quicksort.rs","byte_start":532810,"byte_end":532820,"line_start":17,"line_end":17,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5568}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":568967,"byte_end":568974,"line_start":12,"line_end":12,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5635}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":569132,"byte_end":569139,"line_start":18,"line_end":18,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5639}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":569269,"byte_end":569276,"line_start":24,"line_end":24,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5643},{"krate":0,"index":5644},{"krate":0,"index":5646}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":569604,"byte_end":569611,"line_start":39,"line_end":39,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5650},{"krate":0,"index":5652},{"krate":0,"index":5653}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":570236,"byte_end":570251,"line_start":67,"line_end":67,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5663},{"krate":0,"index":5664},{"krate":0,"index":5665},{"krate":0,"index":5666}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571149,"byte_end":571161,"line_start":99,"line_end":99,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5670},{"krate":0,"index":5671}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571710,"byte_end":571722,"line_start":118,"line_end":118,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5675}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571857,"byte_end":571869,"line_start":124,"line_end":124,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5679},{"krate":0,"index":5680},{"krate":0,"index":5682}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":572197,"byte_end":572209,"line_start":139,"line_end":139,"column_start":58,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":5686},{"krate":0,"index":5688},{"krate":0,"index":5689}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":572831,"byte_end":572851,"line_start":167,"line_end":167,"column_start":43,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5699},{"krate":0,"index":5700},{"krate":0,"index":5701},{"krate":0,"index":5702}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":573735,"byte_end":573745,"line_start":198,"line_end":198,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5706}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":573926,"byte_end":573936,"line_start":204,"line_end":204,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5710},{"krate":0,"index":5711},{"krate":0,"index":5713}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":574268,"byte_end":574278,"line_start":219,"line_end":219,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":5717},{"krate":0,"index":5719},{"krate":0,"index":5720}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":574913,"byte_end":574931,"line_start":247,"line_end":247,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5730},{"krate":0,"index":5731},{"krate":0,"index":5732},{"krate":0,"index":5733}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":575859,"byte_end":575874,"line_start":279,"line_end":279,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5737},{"krate":0,"index":5738},{"krate":0,"index":5739},{"krate":0,"index":5740}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577560,"byte_end":577575,"line_start":321,"line_end":321,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5744},{"krate":0,"index":5745},{"krate":0,"index":5747}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577907,"byte_end":577922,"line_start":336,"line_end":336,"column_start":58,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":5751},{"krate":0,"index":5753},{"krate":0,"index":5754}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":578554,"byte_end":578577,"line_start":364,"line_end":364,"column_start":43,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5764},{"krate":0,"index":5765},{"krate":0,"index":5766},{"krate":0,"index":5767}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":485762,"byte_end":485766,"line_start":549,"line_end":549,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5872}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":485893,"byte_end":485897,"line_start":555,"line_end":555,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5876},{"krate":0,"index":5877},{"krate":0,"index":5879}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":486223,"byte_end":486227,"line_start":570,"line_end":570,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5883},{"krate":0,"index":5885},{"krate":0,"index":5886}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":486730,"byte_end":486742,"line_start":594,"line_end":594,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5895},{"krate":0,"index":5896},{"krate":0,"index":5897},{"krate":0,"index":5898}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":487300,"byte_end":487307,"line_start":615,"line_end":615,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5902}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":487437,"byte_end":487444,"line_start":621,"line_end":621,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5906},{"krate":0,"index":5907},{"krate":0,"index":5909}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":487772,"byte_end":487779,"line_start":636,"line_end":636,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5913},{"krate":0,"index":5915},{"krate":0,"index":5916}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":488453,"byte_end":488468,"line_start":665,"line_end":665,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5926},{"krate":0,"index":5927},{"krate":0,"index":5928},{"krate":0,"index":5929}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":489343,"byte_end":489350,"line_start":696,"line_end":696,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5933},{"krate":0,"index":5934},{"krate":0,"index":5936}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":489680,"byte_end":489687,"line_start":711,"line_end":711,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5940},{"krate":0,"index":5942},{"krate":0,"index":5943}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":490200,"byte_end":490215,"line_start":735,"line_end":735,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5952},{"krate":0,"index":5953},{"krate":0,"index":5954},{"krate":0,"index":5955}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":490796,"byte_end":490801,"line_start":758,"line_end":758,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5966}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":490984,"byte_end":490989,"line_start":767,"line_end":767,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5971}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":491185,"byte_end":491190,"line_start":773,"line_end":773,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5976},{"krate":0,"index":5977}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":492677,"byte_end":492685,"line_start":834,"line_end":834,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6000}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":492910,"byte_end":492918,"line_start":842,"line_end":842,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6005},{"krate":0,"index":6006}],"docs":"","sig":null,"attributes":[]},{"id":571,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":596854,"byte_end":596856,"line_start":365,"line_end":365,"column_start":54,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":8959},{"krate":0,"index":8947},{"krate":0,"index":8948},{"krate":0,"index":8949},{"krate":0,"index":8950},{"krate":0,"index":8953},{"krate":0,"index":8956}],"docs":"","sig":null,"attributes":[]},{"id":572,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":597183,"byte_end":597188,"line_start":381,"line_end":381,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6078},{"krate":0,"index":6079}],"docs":"","sig":null,"attributes":[]},{"id":573,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":597448,"byte_end":597461,"line_start":392,"line_end":392,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6083},{"krate":0,"index":6084},{"krate":0,"index":6085}],"docs":"","sig":null,"attributes":[]},{"id":574,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":598260,"byte_end":598271,"line_start":426,"line_end":426,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6093},{"krate":0,"index":6094}],"docs":"","sig":null,"attributes":[]},{"id":575,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":598622,"byte_end":598641,"line_start":441,"line_end":441,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6098},{"krate":0,"index":6099},{"krate":0,"index":6100}],"docs":"","sig":null,"attributes":[]},{"id":576,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":599613,"byte_end":599618,"line_start":481,"line_end":481,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6107},{"krate":0,"index":6108}],"docs":"","sig":null,"attributes":[]},{"id":577,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":599876,"byte_end":599889,"line_start":492,"line_end":492,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6112},{"krate":0,"index":6113},{"krate":0,"index":6114}],"docs":"","sig":null,"attributes":[]},{"id":578,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":600646,"byte_end":600657,"line_start":525,"line_end":525,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6121},{"krate":0,"index":6122}],"docs":"","sig":null,"attributes":[]},{"id":579,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":600922,"byte_end":600941,"line_start":536,"line_end":536,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6126},{"krate":0,"index":6127},{"krate":0,"index":6128}],"docs":"","sig":null,"attributes":[]},{"id":580,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":601682,"byte_end":601687,"line_start":566,"line_end":566,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6133}],"docs":"","sig":null,"attributes":[]},{"id":581,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":601837,"byte_end":601842,"line_start":572,"line_end":572,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":6137},{"krate":0,"index":6138}],"docs":"","sig":null,"attributes":[]},{"id":582,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":603495,"byte_end":603510,"line_start":632,"line_end":632,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6159}],"docs":"","sig":null,"attributes":[]},{"id":583,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":603664,"byte_end":603687,"line_start":638,"line_end":638,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":6164}],"docs":"","sig":null,"attributes":[]},{"id":584,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":603995,"byte_end":604010,"line_start":647,"line_end":647,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":6168},{"krate":0,"index":6169}],"docs":"","sig":null,"attributes":[]},{"id":585,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":604358,"byte_end":604381,"line_start":659,"line_end":659,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":6175},{"krate":0,"index":6176},{"krate":0,"index":6178}],"docs":"","sig":null,"attributes":[]},{"id":586,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":605345,"byte_end":605350,"line_start":699,"line_end":699,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6183},{"krate":0,"index":6184}],"docs":"","sig":null,"attributes":[]},{"id":587,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":605944,"byte_end":605959,"line_start":724,"line_end":724,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6189},{"krate":0,"index":6190}],"docs":"","sig":null,"attributes":[]},{"id":588,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":606624,"byte_end":606631,"line_start":752,"line_end":752,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6201},{"krate":0,"index":6202}],"docs":"","sig":null,"attributes":[]},{"id":589,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":607008,"byte_end":607023,"line_start":767,"line_end":767,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":6208},{"krate":0,"index":6209},{"krate":0,"index":6210}],"docs":"","sig":null,"attributes":[]},{"id":590,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":608060,"byte_end":608072,"line_start":809,"line_end":809,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6222},{"krate":0,"index":6223}],"docs":"","sig":null,"attributes":[]},{"id":591,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":608485,"byte_end":608505,"line_start":825,"line_end":825,"column_start":51,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":6229},{"krate":0,"index":6230},{"krate":0,"index":6231}],"docs":"","sig":null,"attributes":[]},{"id":592,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":610073,"byte_end":610078,"line_start":30,"line_end":30,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6254},{"krate":0,"index":6255}],"docs":"","sig":null,"attributes":[]},{"id":593,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":610355,"byte_end":610360,"line_start":43,"line_end":43,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":6259}],"docs":"","sig":null,"attributes":[]},{"id":594,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":611560,"byte_end":611563,"line_start":42,"line_end":42,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6306},{"krate":0,"index":6307},{"krate":0,"index":6308}],"docs":"","sig":null,"attributes":[]},{"id":595,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":611736,"byte_end":611744,"line_start":51,"line_end":51,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6311},{"krate":0,"index":6312},{"krate":0,"index":6314}],"docs":"","sig":null,"attributes":[]},{"id":596,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":612041,"byte_end":612049,"line_start":66,"line_end":66,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6317},{"krate":0,"index":6319},{"krate":0,"index":6320}],"docs":"","sig":null,"attributes":[]},{"id":597,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":613124,"byte_end":613129,"line_start":108,"line_end":108,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6332},{"krate":0,"index":6333},{"krate":0,"index":6335}],"docs":"","sig":null,"attributes":[]},{"id":598,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":613440,"byte_end":613445,"line_start":123,"line_end":123,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6339},{"krate":0,"index":6341},{"krate":0,"index":6342}],"docs":"","sig":null,"attributes":[]},{"id":599,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":614263,"byte_end":614268,"line_start":152,"line_end":152,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6347}],"docs":"","sig":null,"attributes":[]},{"id":600,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":615394,"byte_end":615407,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6354},{"krate":0,"index":6355}],"docs":"","sig":null,"attributes":[]},{"id":601,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":616407,"byte_end":616420,"line_start":204,"line_end":204,"column_start":43,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6359},{"krate":0,"index":6360},{"krate":0,"index":6361},{"krate":0,"index":6362}],"docs":"","sig":null,"attributes":[]},{"id":602,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":617079,"byte_end":617092,"line_start":224,"line_end":224,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6366}],"docs":"","sig":null,"attributes":[]},{"id":603,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":617468,"byte_end":617478,"line_start":238,"line_end":238,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6374},{"krate":0,"index":6375},{"krate":0,"index":6376},{"krate":0,"index":6377}],"docs":"","sig":null,"attributes":[]},{"id":604,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":617952,"byte_end":617962,"line_start":257,"line_end":257,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6381}],"docs":"","sig":null,"attributes":[]},{"id":605,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":618283,"byte_end":618293,"line_start":266,"line_end":266,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6385}],"docs":"","sig":null,"attributes":[]},{"id":606,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":618414,"byte_end":618424,"line_start":272,"line_end":272,"column_start":47,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":607,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":618470,"byte_end":618480,"line_start":274,"line_end":274,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6392}],"docs":"","sig":null,"attributes":[]},{"id":608,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/par_either.rs","byte_start":620496,"byte_end":620502,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6420},{"krate":0,"index":6421},{"krate":0,"index":6423}],"docs":"","sig":null,"attributes":[]},{"id":609,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/par_either.rs","byte_start":621022,"byte_end":621028,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6427},{"krate":0,"index":6429},{"krate":0,"index":6430}],"docs":"","sig":null,"attributes":[]},{"id":610,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/par_either.rs","byte_start":621822,"byte_end":621828,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6436}],"docs":"","sig":null,"attributes":[]},{"id":611,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":5313,"byte_end":5320,"line_start":134,"line_end":134,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":612,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":5426,"byte_end":5433,"line_start":137,"line_end":137,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":613,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":5521,"byte_end":5528,"line_start":140,"line_end":140,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6518}],"docs":"","sig":null,"attributes":[]},{"id":614,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":5671,"byte_end":5678,"line_start":147,"line_end":147,"column_start":18,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3984,"byte_end":3989,"line_start":94,"line_end":94,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":3999,"byte_end":4010,"line_start":95,"line_end":95,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16092,"byte_end":16103,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":106}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16113,"byte_end":16122,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":149}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16132,"byte_end":16141,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":163}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16151,"byte_end":16159,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":176}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16169,"byte_end":16177,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":208}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16187,"byte_end":16198,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":238}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16208,"byte_end":16217,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":251}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4020,"byte_end":4024,"line_start":96,"line_end":96,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":357}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":36818,"byte_end":36826,"line_start":89,"line_end":89,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":386}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4034,"byte_end":4040,"line_start":97,"line_end":97,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":5027}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4050,"byte_end":4057,"line_start":98,"line_end":98,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":5089}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4067,"byte_end":4072,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":5129}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4082,"byte_end":4097,"line_start":100,"line_end":100,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":5206}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4107,"byte_end":4113,"line_start":101,"line_end":101,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":5270}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4123,"byte_end":4128,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":5314}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4138,"byte_end":4141,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6019}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4151,"byte_end":4157,"line_start":104,"line_end":104,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":6233}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":4167,"byte_end":4170,"line_start":105,"line_end":105,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6260}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/split_producer.rs","byte_start":9163,"byte_end":9168,"line_start":17,"line_end":17,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":26}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/split_producer.rs","byte_start":9594,"byte_end":9607,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/split_producer.rs","byte_start":11075,"byte_end":11088,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":19},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":14370,"byte_end":14378,"line_start":53,"line_end":53,"column_start":52,"column_end":60},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":6521},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/array.rs","byte_start":14685,"byte_end":14693,"line_start":68,"line_end":68,"column_start":59,"column_end":67},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":6521},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18418,"byte_end":18428,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":800},"to":{"krate":0,"index":4648}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":18885,"byte_end":18889,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":6559},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":19660,"byte_end":19665,"line_start":76,"line_end":76,"column_start":46,"column_end":51},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":6591},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":19976,"byte_end":19981,"line_start":91,"line_end":91,"column_start":53,"column_end":58},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":6591},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/binary_heap.rs","byte_start":20451,"byte_end":20456,"line_start":113,"line_end":113,"column_start":34,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":6591},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_map.rs","byte_start":21527,"byte_end":21531,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":6623},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/btree_set.rs","byte_start":23042,"byte_end":23046,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":6699},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_map.rs","byte_start":24340,"byte_end":24344,"line_start":36,"line_end":36,"column_start":50,"column_end":54},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":6748},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/hash_set.rs","byte_start":26727,"byte_end":26731,"line_start":36,"line_end":36,"column_start":41,"column_end":45},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":6845},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/linked_list.rs","byte_start":28486,"byte_end":28490,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":6908},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":29655,"byte_end":29663,"line_start":21,"line_end":21,"column_start":40,"column_end":48},"kind":{"Impl":{"id":38}},"from":{"krate":5,"index":4173},"to":{"krate":0,"index":4648}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":30213,"byte_end":30217,"line_start":43,"line_end":43,"column_start":29,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":6978},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":31890,"byte_end":31895,"line_start":113,"line_end":113,"column_start":40,"column_end":45},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":7024},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":32200,"byte_end":32205,"line_start":128,"line_end":128,"column_start":47,"column_end":52},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":7024},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/vec_deque.rs","byte_start":32767,"byte_end":32772,"line_start":151,"line_end":151,"column_start":28,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":7024},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":16942,"byte_end":16952,"line_start":51,"line_end":51,"column_start":20,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/collections/mod.rs","byte_start":17369,"byte_end":17379,"line_start":65,"line_end":65,"column_start":43,"column_end":53},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":333},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144728,"byte_end":144732,"line_start":59,"line_end":59,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":144735,"byte_end":144740,"line_start":59,"line_end":59,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147742,"byte_end":147746,"line_start":128,"line_end":128,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":147749,"byte_end":147754,"line_start":128,"line_end":128,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":149062,"byte_end":149067,"line_start":159,"line_end":159,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":151082,"byte_end":151090,"line_start":213,"line_end":213,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":413},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152195,"byte_end":152199,"line_start":236,"line_end":236,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":152202,"byte_end":152207,"line_start":236,"line_end":236,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":153195,"byte_end":153203,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":7034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":154332,"byte_end":154346,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":7039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/plumbing/mod.rs","byte_start":156705,"byte_end":156713,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":450},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161426,"byte_end":161431,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":7045},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":161660,"byte_end":161665,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":7045},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":162768,"byte_end":162773,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":7045},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":163708,"byte_end":163717,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":511},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":164395,"byte_end":164404,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":523},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":165073,"byte_end":165086,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":165269,"byte_end":165282,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":535},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":166894,"byte_end":166902,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":167116,"byte_end":167124,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":167420,"byte_end":167428,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chain.rs","byte_start":167549,"byte_end":167557,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168327,"byte_end":168333,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":7058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168533,"byte_end":168539,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":7058},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":168872,"byte_end":168878,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":7058},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":169576,"byte_end":169584,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":602},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":170157,"byte_end":170170,"line_start":112,"line_end":112,"column_start":22,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":613},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":171289,"byte_end":171297,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":626},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":171975,"byte_end":171983,"line_start":185,"line_end":185,"column_start":31,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":626},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/chunks.rs","byte_start":172144,"byte_end":172152,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":626},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173283,"byte_end":173289,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":7068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173477,"byte_end":173483,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":7068},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":173931,"byte_end":173937,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":7068},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":174582,"byte_end":174590,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":668},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":175147,"byte_end":175161,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":678},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":176057,"byte_end":176071,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":176183,"byte_end":176197,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":693},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":176845,"byte_end":176859,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":693},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/cloned.rs","byte_start":177179,"byte_end":177191,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":715},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":182337,"byte_end":182352,"line_start":14,"line_end":14,"column_start":15,"column_end":30},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":182931,"byte_end":182946,"line_start":27,"line_end":27,"column_start":24,"column_end":39},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":184126,"byte_end":184139,"line_start":57,"line_end":57,"column_start":29,"column_end":42},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":763},"to":{"krate":2,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":184177,"byte_end":184190,"line_start":59,"line_end":59,"column_start":13,"column_end":26},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":184572,"byte_end":184585,"line_start":73,"line_end":73,"column_start":22,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":763},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":184965,"byte_end":184980,"line_start":86,"line_end":86,"column_start":40,"column_end":55},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":186059,"byte_end":186072,"line_start":122,"line_end":122,"column_start":38,"column_end":51},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":763},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":187064,"byte_end":187079,"line_start":155,"line_end":155,"column_start":49,"column_end":64},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/collect/consumer.rs","byte_start":187468,"byte_end":187482,"line_start":168,"line_end":168,"column_start":47,"column_end":61},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":803},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":202154,"byte_end":202160,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":7077},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":202348,"byte_end":202354,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":7077},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":202801,"byte_end":202807,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":7077},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":203451,"byte_end":203459,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":861},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":204015,"byte_end":204029,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":871},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":204924,"byte_end":204938,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":205050,"byte_end":205064,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":886},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":205711,"byte_end":205725,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":886},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/copied.rs","byte_start":206044,"byte_end":206056,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":908},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207338,"byte_end":207343,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":932},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207433,"byte_end":207438,"line_start":41,"line_end":41,"column_start":30,"column_end":35},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":932},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207574,"byte_end":207579,"line_start":47,"line_end":47,"column_start":36,"column_end":41},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":932},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":207865,"byte_end":207870,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":932},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/empty.rs","byte_start":208350,"byte_end":208363,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":954},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209343,"byte_end":209352,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":7086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209546,"byte_end":209555,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":7086},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":209899,"byte_end":209908,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":7086},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":210414,"byte_end":210422,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":994},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/enumerate.rs","byte_start":211006,"byte_end":211023,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1003},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":213227,"byte_end":213242,"line_start":33,"line_end":33,"column_start":31,"column_end":46},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1078},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":213646,"byte_end":213661,"line_start":51,"line_end":51,"column_start":40,"column_end":55},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1078},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":213818,"byte_end":213831,"line_start":61,"line_end":61,"column_start":23,"column_end":36},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1080},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":214657,"byte_end":214667,"line_start":101,"line_end":101,"column_start":31,"column_end":41},"kind":{"Impl":{"id":113}},"from":{"krate":5,"index":800},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":214965,"byte_end":214975,"line_start":114,"line_end":114,"column_start":39,"column_end":49},"kind":{"Impl":{"id":114}},"from":{"krate":5,"index":800},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":215473,"byte_end":215481,"line_start":136,"line_end":136,"column_start":39,"column_end":47},"kind":{"Impl":{"id":115}},"from":{"krate":5,"index":1392},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":215824,"byte_end":215832,"line_start":150,"line_end":150,"column_start":59,"column_end":67},"kind":{"Impl":{"id":116}},"from":{"krate":5,"index":1392},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":216352,"byte_end":216360,"line_start":173,"line_end":173,"column_start":31,"column_end":39},"kind":{"Impl":{"id":117}},"from":{"krate":5,"index":7463},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":216662,"byte_end":216670,"line_start":186,"line_end":186,"column_start":39,"column_end":47},"kind":{"Impl":{"id":118}},"from":{"krate":5,"index":7463},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":217247,"byte_end":217254,"line_start":211,"line_end":211,"column_start":42,"column_end":49},"kind":{"Impl":{"id":119}},"from":{"krate":1,"index":1200},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":217715,"byte_end":217722,"line_start":227,"line_end":227,"column_start":62,"column_end":69},"kind":{"Impl":{"id":120}},"from":{"krate":1,"index":1200},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":218351,"byte_end":218358,"line_start":254,"line_end":254,"column_start":34,"column_end":41},"kind":{"Impl":{"id":121}},"from":{"krate":1,"index":1917},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":218696,"byte_end":218703,"line_start":268,"line_end":268,"column_start":42,"column_end":49},"kind":{"Impl":{"id":122}},"from":{"krate":1,"index":1917},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":219049,"byte_end":219059,"line_start":282,"line_end":282,"column_start":31,"column_end":41},"kind":{"Impl":{"id":123}},"from":{"krate":5,"index":3366},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":219416,"byte_end":219426,"line_start":296,"line_end":296,"column_start":39,"column_end":49},"kind":{"Impl":{"id":124}},"from":{"krate":5,"index":3366},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":219770,"byte_end":219782,"line_start":316,"line_end":316,"column_start":31,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1184},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":220204,"byte_end":220216,"line_start":336,"line_end":336,"column_start":40,"column_end":52},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1184},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":220373,"byte_end":220383,"line_start":346,"line_end":346,"column_start":23,"column_end":33},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1186},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":220827,"byte_end":220838,"line_start":371,"line_end":371,"column_start":36,"column_end":47},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1189},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":221234,"byte_end":221240,"line_start":384,"line_end":384,"column_start":31,"column_end":37},"kind":{"Impl":{"id":129}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":221739,"byte_end":221745,"line_start":397,"line_end":397,"column_start":39,"column_end":45},"kind":{"Impl":{"id":130}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":222028,"byte_end":222046,"line_start":412,"line_end":412,"column_start":25,"column_end":43},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1222},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":222474,"byte_end":222492,"line_start":432,"line_end":432,"column_start":34,"column_end":52},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1222},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":222649,"byte_end":222665,"line_start":442,"line_end":442,"column_start":23,"column_end":39},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1224},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":223597,"byte_end":223603,"line_start":484,"line_end":484,"column_start":38,"column_end":44},"kind":{"Impl":{"id":134}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":223865,"byte_end":223871,"line_start":494,"line_end":494,"column_start":33,"column_end":39},"kind":{"Impl":{"id":135}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":224148,"byte_end":224154,"line_start":504,"line_end":504,"column_start":43,"column_end":49},"kind":{"Impl":{"id":136}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":224623,"byte_end":224631,"line_start":524,"line_end":524,"column_start":31,"column_end":39},"kind":{"Impl":{"id":137}},"from":{"krate":5,"index":4173},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":224918,"byte_end":224926,"line_start":537,"line_end":537,"column_start":39,"column_end":47},"kind":{"Impl":{"id":138}},"from":{"krate":5,"index":4173},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":225383,"byte_end":225386,"line_start":557,"line_end":557,"column_start":31,"column_end":34},"kind":{"Impl":{"id":139}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/extend.rs","byte_start":226398,"byte_end":226401,"line_start":584,"line_end":584,"column_start":39,"column_end":42},"kind":{"Impl":{"id":140}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227456,"byte_end":227462,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":7095},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227622,"byte_end":227628,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":7095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":227840,"byte_end":227846,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":7095},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":228390,"byte_end":228404,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":228555,"byte_end":228569,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1306},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":229313,"byte_end":229327,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1306},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter.rs","byte_start":229710,"byte_end":229722,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1335},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":230998,"byte_end":231007,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":7104},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":231214,"byte_end":231223,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":7104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":231413,"byte_end":231422,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":7104},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":231985,"byte_end":232002,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":232155,"byte_end":232172,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1375},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":232958,"byte_end":232975,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1375},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/filter_map.rs","byte_start":233376,"byte_end":233391,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1406},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":234561,"byte_end":234573,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":234727,"byte_end":234739,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1435},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":235324,"byte_end":235336,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1435},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":235696,"byte_end":235706,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1460},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find.rs","byte_start":236733,"byte_end":236744,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1481},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":239266,"byte_end":239278,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":239828,"byte_end":239840,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1506},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":240906,"byte_end":240918,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1506},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":242476,"byte_end":242486,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1535},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/find_first_last/mod.rs","byte_start":244194,"byte_end":244205,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1552},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":245025,"byte_end":245032,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":7121},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":245211,"byte_end":245218,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":7121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":245399,"byte_end":245406,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":7121},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":245972,"byte_end":245987,"line_start":56,"line_end":56,"column_start":16,"column_end":31},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":246132,"byte_end":246147,"line_start":62,"line_end":62,"column_start":38,"column_end":53},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1582},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":246939,"byte_end":246954,"line_start":94,"line_end":94,"column_start":47,"column_end":62},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1582},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map.rs","byte_start":247394,"byte_end":247407,"line_start":115,"line_end":115,"column_start":36,"column_end":49},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1613},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":248999,"byte_end":249010,"line_start":18,"line_end":18,"column_start":48,"column_end":59},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":7130},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":249219,"byte_end":249230,"line_start":26,"line_end":26,"column_start":30,"column_end":41},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":7130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":249419,"byte_end":249430,"line_start":33,"line_end":33,"column_start":37,"column_end":48},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":7130},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":250016,"byte_end":250035,"line_start":59,"line_end":59,"column_start":16,"column_end":35},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":250184,"byte_end":250203,"line_start":65,"line_end":65,"column_start":38,"column_end":57},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1656},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":250986,"byte_end":251005,"line_start":96,"line_end":96,"column_start":47,"column_end":66},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1656},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flat_map_iter.rs","byte_start":251417,"byte_end":251434,"line_start":116,"line_end":116,"column_start":36,"column_end":53},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1687},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252651,"byte_end":252658,"line_start":15,"line_end":15,"column_start":9,"column_end":16},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":7139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":252876,"byte_end":252883,"line_start":26,"line_end":26,"column_start":30,"column_end":37},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":7139},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":253395,"byte_end":253410,"line_start":49,"line_end":49,"column_start":9,"column_end":24},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":253515,"byte_end":253530,"line_start":55,"line_end":55,"column_start":28,"column_end":43},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1716},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":254213,"byte_end":254228,"line_start":85,"line_end":85,"column_start":37,"column_end":52},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1716},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten.rs","byte_start":254586,"byte_end":254599,"line_start":104,"line_end":104,"column_start":26,"column_end":39},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1736},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":256015,"byte_end":256026,"line_start":15,"line_end":15,"column_start":9,"column_end":20},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":7148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":256287,"byte_end":256298,"line_start":27,"line_end":27,"column_start":30,"column_end":41},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":7148},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":256845,"byte_end":256864,"line_start":51,"line_end":51,"column_start":9,"column_end":28},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":256973,"byte_end":256992,"line_start":57,"line_end":57,"column_start":28,"column_end":47},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1759},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":257666,"byte_end":257685,"line_start":86,"line_end":86,"column_start":37,"column_end":56},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1759},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/flatten_iter.rs","byte_start":258015,"byte_end":258032,"line_start":104,"line_end":104,"column_start":26,"column_end":43},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1779},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":258711,"byte_end":258715,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":7157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259512,"byte_end":259516,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":7157},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":259706,"byte_end":259710,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":7157},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":260319,"byte_end":260331,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1820},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":261187,"byte_end":261199,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1820},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":261668,"byte_end":261678,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1850},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":262838,"byte_end":262846,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":7169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263635,"byte_end":263643,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":7169},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":263897,"byte_end":263905,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":7169},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":264473,"byte_end":264489,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1893},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/fold.rs","byte_start":265407,"byte_end":265423,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1893},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/for_each.rs","byte_start":266152,"byte_end":266167,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1931},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/for_each.rs","byte_start":266563,"byte_end":266578,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1931},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/for_each.rs","byte_start":267002,"byte_end":267017,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1931},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":267903,"byte_end":267906,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"kind":{"Impl":{"id":205}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":268176,"byte_end":268184,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"kind":{"Impl":{"id":206}},"from":{"krate":5,"index":4173},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":268541,"byte_end":268551,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"kind":{"Impl":{"id":207}},"from":{"krate":5,"index":800},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":268861,"byte_end":268871,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"kind":{"Impl":{"id":208}},"from":{"krate":5,"index":3366},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":269335,"byte_end":269342,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"kind":{"Impl":{"id":209}},"from":{"krate":1,"index":1200},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":269877,"byte_end":269885,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"kind":{"Impl":{"id":210}},"from":{"krate":5,"index":1392},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":270185,"byte_end":270192,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"kind":{"Impl":{"id":211}},"from":{"krate":1,"index":1917},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":270515,"byte_end":270523,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"kind":{"Impl":{"id":212}},"from":{"krate":5,"index":7463},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":270802,"byte_end":270808,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"kind":{"Impl":{"id":213}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":271070,"byte_end":271076,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"kind":{"Impl":{"id":214}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":271344,"byte_end":271350,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"kind":{"Impl":{"id":215}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":271614,"byte_end":271620,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"kind":{"Impl":{"id":216}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":271891,"byte_end":271897,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"kind":{"Impl":{"id":217}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/from_par_iter.rs","byte_start":272341,"byte_end":272344,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"kind":{"Impl":{"id":218}},"from":{"krate":5,"index":672},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":273878,"byte_end":273885,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":7181},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":274046,"byte_end":274053,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":7181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":274269,"byte_end":274276,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":7181},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":274736,"byte_end":274743,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":7181},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":275485,"byte_end":275493,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2113},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":276164,"byte_end":276179,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2125},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":277389,"byte_end":277404,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":277554,"byte_end":277569,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2143},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":278312,"byte_end":278327,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2143},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/inspect.rs","byte_start":278706,"byte_end":278719,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2172},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":280043,"byte_end":280053,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":7190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":280305,"byte_end":280315,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":7190},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":280692,"byte_end":280702,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":7190},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":281598,"byte_end":281607,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":2217},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":282417,"byte_end":282426,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":2231},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":283207,"byte_end":283225,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":2245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":283545,"byte_end":283563,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":2245},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":286428,"byte_end":286441,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":2267},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":287574,"byte_end":287587,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":2267},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave.rs","byte_start":288148,"byte_end":288161,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":2267},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":289088,"byte_end":289106,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":7203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":289748,"byte_end":289766,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":7203},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/interleave_shortest.rs","byte_start":290143,"byte_end":290161,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":7203},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":291263,"byte_end":291274,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":7215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":291505,"byte_end":291516,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":7215},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":292046,"byte_end":292057,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":7215},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":292964,"byte_end":292972,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2338},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":293539,"byte_end":293558,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":293799,"byte_end":293818,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2350},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":295993,"byte_end":296008,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2369},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":296780,"byte_end":296795,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":2369},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":297443,"byte_end":297458,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":2369},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":297806,"byte_end":297825,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":2386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":298050,"byte_end":298069,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":2386},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":299147,"byte_end":299166,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2386},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/intersperse.rs","byte_start":299706,"byte_end":299723,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":2410},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301461,"byte_end":301467,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":7225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":301672,"byte_end":301678,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":7225},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":302013,"byte_end":302019,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":7225},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":302597,"byte_end":302605,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2448},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":303240,"byte_end":303254,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":2458},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304561,"byte_end":304567,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":7235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":304772,"byte_end":304778,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":7235},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":305113,"byte_end":305119,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":7235},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":305697,"byte_end":305705,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":2488},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/len.rs","byte_start":306340,"byte_end":306354,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":2498},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307721,"byte_end":307724,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":7245},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":307881,"byte_end":307884,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":7245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":308087,"byte_end":308090,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":7245},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":308564,"byte_end":308567,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":7245},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":309309,"byte_end":309317,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2550},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":309996,"byte_end":310007,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2563},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":311179,"byte_end":311190,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":311331,"byte_end":311342,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2582},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":312081,"byte_end":312092,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2582},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map.rs","byte_start":312483,"byte_end":312492,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2613},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313729,"byte_end":313736,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":7254},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":313968,"byte_end":313975,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":7254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":314207,"byte_end":314214,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":7254},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":314730,"byte_end":314737,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":7254},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":315582,"byte_end":315590,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":2670},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":316373,"byte_end":316388,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":2686},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":317721,"byte_end":317732,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":318113,"byte_end":318124,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":318415,"byte_end":318426,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":318740,"byte_end":318755,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":318921,"byte_end":318936,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":319780,"byte_end":319795,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":320255,"byte_end":320268,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":2774},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321799,"byte_end":321806,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":7266},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":321979,"byte_end":321986,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":7266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":322230,"byte_end":322237,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":7266},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":322777,"byte_end":322784,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":7266},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":323659,"byte_end":323667,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":2834},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":324477,"byte_end":324492,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":2851},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":325942,"byte_end":325957,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":2874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":326139,"byte_end":326154,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":2874},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/map_with.rs","byte_start":327010,"byte_end":327025,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2874},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/noop.rs","byte_start":336403,"byte_end":336415,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":2921},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/noop.rs","byte_start":336759,"byte_end":336771,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":2921},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/noop.rs","byte_start":337127,"byte_end":337139,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":2921},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/noop.rs","byte_start":337333,"byte_end":337344,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":2943},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338312,"byte_end":338316,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":8157},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/once.rs","byte_start":338602,"byte_end":338606,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":8157},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339793,"byte_end":339797,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":8175},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":339955,"byte_end":339959,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":8175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":340069,"byte_end":340078,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":8166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":340273,"byte_end":340282,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":8166},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":340792,"byte_end":340801,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":8166},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":341501,"byte_end":341509,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":3000},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":342218,"byte_end":342235,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":3009},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":343333,"byte_end":343346,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":3025},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":343693,"byte_end":343706,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":3025},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":343957,"byte_end":343970,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":3025},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":344281,"byte_end":344298,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":3044},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":345256,"byte_end":345273,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":3044},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":345752,"byte_end":345767,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":3065},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/panic_fuse.rs","byte_start":346616,"byte_end":346632,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":3085},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348376,"byte_end":348381,"line_start":46,"line_end":46,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":3145}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":348541,"byte_end":348542,"line_start":51,"line_end":51,"column_start":45,"column_end":46},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":3148},"to":{"krate":0,"index":3145}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":349052,"byte_end":349062,"line_start":71,"line_end":71,"column_start":50,"column_end":60},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":350060,"byte_end":350080,"line_start":107,"line_end":107,"column_start":41,"column_end":61},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":3155},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/par_bridge.rs","byte_start":350372,"byte_end":350392,"line_start":118,"line_end":118,"column_start":60,"column_end":80},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":355217,"byte_end":355226,"line_start":20,"line_end":20,"column_start":55,"column_end":64},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":8191},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":355415,"byte_end":355424,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":8191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":355648,"byte_end":355657,"line_start":38,"line_end":38,"column_start":33,"column_end":42},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":8191},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":356223,"byte_end":356240,"line_start":63,"line_end":63,"column_start":16,"column_end":33},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":3197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":356458,"byte_end":356475,"line_start":73,"line_end":73,"column_start":35,"column_end":52},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":3197},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/positions.rs","byte_start":357374,"byte_end":357389,"line_start":110,"line_end":110,"column_start":29,"column_end":44},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":3220},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":358533,"byte_end":358548,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":3255},"to":{"krate":2,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":358570,"byte_end":358585,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":3255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":358734,"byte_end":358749,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":3255},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":359299,"byte_end":359314,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":3255},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":359546,"byte_end":359561,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":3255},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/product.rs","byte_start":359746,"byte_end":359759,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":3280},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":360774,"byte_end":360788,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":3302},"to":{"krate":2,"index":3034}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":360830,"byte_end":360844,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":3302},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":360946,"byte_end":360960,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":361487,"byte_end":361501,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":361750,"byte_end":361764,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/reduce.rs","byte_start":362005,"byte_end":362017,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":3341},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":363419,"byte_end":363425,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":8200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":364277,"byte_end":364283,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":8200},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":364733,"byte_end":364747,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":3378},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":365798,"byte_end":365805,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":8209},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":366123,"byte_end":366130,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":8209},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":366742,"byte_end":366757,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":3402},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":367554,"byte_end":367558,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":3412},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":367936,"byte_end":367940,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":3412},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/repeat.rs","byte_start":368069,"byte_end":368073,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":3412},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368652,"byte_end":368655,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":8219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":368837,"byte_end":368840,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":8219},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":369175,"byte_end":369178,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":8219},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":369748,"byte_end":369756,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":3449},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/rev.rs","byte_start":370271,"byte_end":370282,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371487,"byte_end":371491,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":8228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":371724,"byte_end":371728,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":8228},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":372063,"byte_end":372067,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":8228},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/skip.rs","byte_start":372648,"byte_end":372656,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":3496},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377783,"byte_end":377788,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":8238},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":377968,"byte_end":377973,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":8238},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/splitter.rs","byte_start":378461,"byte_end":378474,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":3531},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":379394,"byte_end":379405,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":3566},"to":{"krate":2,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":379427,"byte_end":379438,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":3566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":379579,"byte_end":379590,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":3566},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":380057,"byte_end":380068,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":3566},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":380284,"byte_end":380295,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":3566},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/sum.rs","byte_start":380468,"byte_end":380477,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":3591},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381462,"byte_end":381466,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":8247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":381699,"byte_end":381703,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":8247},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":382038,"byte_end":382042,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":8247},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/take.rs","byte_start":382605,"byte_end":382613,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":3625},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":383192,"byte_end":383199,"line_start":10,"line_end":10,"column_start":19,"column_end":26},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":8257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":384109,"byte_end":384116,"line_start":41,"line_end":41,"column_start":55,"column_end":62},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":8257},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":384312,"byte_end":384319,"line_start":47,"line_end":47,"column_start":40,"column_end":47},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":8257},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":385023,"byte_end":385038,"line_start":77,"line_end":77,"column_start":42,"column_end":57},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":3683},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":385944,"byte_end":385959,"line_start":113,"line_end":113,"column_start":51,"column_end":66},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":3683},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":386498,"byte_end":386511,"line_start":138,"line_end":138,"column_start":36,"column_end":49},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":3715},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":387307,"byte_end":387318,"line_start":172,"line_end":172,"column_start":15,"column_end":26},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":8272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":388175,"byte_end":388186,"line_start":201,"line_end":201,"column_start":56,"column_end":67},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":8272},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":388471,"byte_end":388482,"line_start":213,"line_end":213,"column_start":36,"column_end":47},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":8272},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":389104,"byte_end":389123,"line_start":241,"line_end":241,"column_start":38,"column_end":57},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":3750},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_fold.rs","byte_start":390101,"byte_end":390120,"line_start":281,"line_end":281,"column_start":47,"column_end":66},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":3750},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":391266,"byte_end":391283,"line_start":31,"line_end":31,"column_start":26,"column_end":43},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":3808},"to":{"krate":2,"index":3034}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":391325,"byte_end":391342,"line_start":33,"line_end":33,"column_start":27,"column_end":44},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":3808},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":391444,"byte_end":391461,"line_start":39,"line_end":39,"column_start":36,"column_end":53},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":3808},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":392094,"byte_end":392111,"line_start":66,"line_end":66,"column_start":45,"column_end":62},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":3808},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":392390,"byte_end":392407,"line_start":81,"line_end":81,"column_start":35,"column_end":52},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":3808},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce.rs","byte_start":392913,"byte_end":392928,"line_start":100,"line_end":100,"column_start":30,"column_end":45},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":3848},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":394428,"byte_end":394449,"line_start":28,"line_end":28,"column_start":22,"column_end":43},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":3892},"to":{"krate":2,"index":3034}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":394483,"byte_end":394504,"line_start":30,"line_end":30,"column_start":23,"column_end":44},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":3892},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":394598,"byte_end":394619,"line_start":36,"line_end":36,"column_start":32,"column_end":53},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":3892},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":395207,"byte_end":395228,"line_start":62,"line_end":62,"column_start":41,"column_end":62},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":3892},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":395473,"byte_end":395494,"line_start":76,"line_end":76,"column_start":39,"column_end":60},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":3892},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/try_reduce_with.rs","byte_start":396207,"byte_end":396226,"line_start":99,"line_end":99,"column_start":30,"column_end":49},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":3925},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":397461,"byte_end":397465,"line_start":7,"line_end":7,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3036},"to":{"krate":0,"index":3943}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":397468,"byte_end":397472,"line_start":7,"line_end":7,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":3943}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":400149,"byte_end":400154,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":3973},"to":{"krate":0,"index":3943}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":401035,"byte_end":401044,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":3989},"to":{"krate":0,"index":3943}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":402081,"byte_end":402093,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":4007},"to":{"krate":0,"index":3943}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":402724,"byte_end":402730,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":4020},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":404131,"byte_end":404137,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":4037},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":405074,"byte_end":405087,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":4055},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":406350,"byte_end":406363,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":4055},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":407027,"byte_end":407038,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":4083},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":407779,"byte_end":407791,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":4101},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":408875,"byte_end":408883,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":4126},"to":{"krate":0,"index":3943}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":410365,"byte_end":410374,"line_start":507,"line_end":507,"column_start":25,"column_end":34},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":4152},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/unzip.rs","byte_start":410492,"byte_end":410501,"line_start":513,"line_end":513,"column_start":38,"column_end":47},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":4152},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411378,"byte_end":411384,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":8284},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411544,"byte_end":411550,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":8284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":411762,"byte_end":411768,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":8284},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":412230,"byte_end":412236,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":8284},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":412977,"byte_end":412985,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":4196},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":413662,"byte_end":413676,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":4208},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":414936,"byte_end":414950,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":4226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":415097,"byte_end":415111,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":4226},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":415857,"byte_end":415871,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":4226},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":416392,"byte_end":416404,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":4255},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":417350,"byte_end":417359,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":8293},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":418109,"byte_end":418118,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":8293},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/update.rs","byte_start":418222,"byte_end":418231,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":8293},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":419044,"byte_end":419053,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":8306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":419243,"byte_end":419252,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":8306},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":419882,"byte_end":419899,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":4314},"to":{"krate":0,"index":413}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":420699,"byte_end":420716,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":4314},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/while_some.rs","byte_start":421119,"byte_end":421134,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":4335},"to":{"krate":0,"index":421}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":422788,"byte_end":422791,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":8315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":423014,"byte_end":423017,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":8315},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":423401,"byte_end":423404,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":8315},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":424064,"byte_end":424073,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":4382},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":424694,"byte_end":424703,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":4394},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip.rs","byte_start":425360,"byte_end":425371,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":4406},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":426780,"byte_end":426785,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":8328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":427055,"byte_end":427060,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":8328},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/zip_eq.rs","byte_start":427452,"byte_end":427457,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":8328},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428562,"byte_end":428568,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":8340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":428775,"byte_end":428781,"line_start":32,"line_end":32,"column_start":30,"column_end":36},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":8340},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":429116,"byte_end":429122,"line_start":50,"line_end":50,"column_start":37,"column_end":43},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":8340},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":429804,"byte_end":429812,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":4621},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/step_by.rs","byte_start":430493,"byte_end":430507,"line_start":108,"line_end":108,"column_start":22,"column_end":36},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":4632},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":41880,"byte_end":41881,"line_start":275,"line_end":275,"column_start":67,"column_end":68},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":4659},"to":{"krate":0,"index":4652}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":43389,"byte_end":43390,"line_start":322,"line_end":322,"column_start":70,"column_end":71},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":4670},"to":{"krate":0,"index":4663}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44279,"byte_end":44284,"line_start":348,"line_end":348,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":44287,"byte_end":44291,"line_start":348,"line_end":348,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":107674,"byte_end":107675,"line_start":2230,"line_end":2230,"column_start":52,"column_end":53},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":4878},"to":{"krate":0,"index":4648}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":108042,"byte_end":108058,"line_start":2244,"line_end":2244,"column_start":36,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":4674},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":138393,"byte_end":138404,"line_start":3180,"line_end":3180,"column_start":24,"column_end":35},"kind":{"Impl":{"id":440}},"from":{"krate":2,"index":44383},"to":{"krate":0,"index":4982}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":139048,"byte_end":139054,"line_start":3205,"line_end":3205,"column_start":21,"column_end":27},"kind":{"Impl":{"id":441}},"from":{"krate":2,"index":45974},"to":{"krate":0,"index":4982}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":139662,"byte_end":139668,"line_start":3230,"line_end":3230,"column_start":24,"column_end":30},"kind":{"Impl":{"id":442}},"from":{"krate":2,"index":46101},"to":{"krate":0,"index":4982}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":140284,"byte_end":140288,"line_start":3255,"line_end":3255,"column_start":24,"column_end":28},"kind":{"Impl":{"id":443}},"from":{"krate":2,"index":48743},"to":{"krate":0,"index":4982}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/iter/mod.rs","byte_start":141032,"byte_end":141036,"line_start":3281,"line_end":3281,"column_start":24,"column_end":28},"kind":{"Impl":{"id":444}},"from":{"krate":2,"index":48743},"to":{"krate":0,"index":4982}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432306,"byte_end":432312,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"kind":{"Impl":{"id":445}},"from":{"krate":2,"index":45974},"to":{"krate":0,"index":4648}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432485,"byte_end":432493,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":8356},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":432788,"byte_end":432796,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":8356},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":433953,"byte_end":433957,"line_start":91,"line_end":91,"column_start":29,"column_end":33},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":8365},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":435433,"byte_end":435447,"line_start":150,"line_end":150,"column_start":28,"column_end":42},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":5071},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/option.rs","byte_start":436059,"byte_end":436065,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"kind":{"Impl":{"id":454}},"from":{"krate":2,"index":45974},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":439092,"byte_end":439097,"line_start":53,"line_end":53,"column_start":34,"column_end":39},"kind":{"Impl":{"id":455}},"from":{"krate":2,"index":44475},"to":{"krate":0,"index":4648}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":439374,"byte_end":439386,"line_start":69,"line_end":69,"column_start":26,"column_end":38},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":5149},"to":{"krate":2,"index":7715}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440270,"byte_end":440275,"line_start":92,"line_end":92,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":5159}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440278,"byte_end":440282,"line_start":92,"line_end":92,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":5159}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":440613,"byte_end":440625,"line_start":103,"line_end":103,"column_start":36,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":5159},"to":{"krate":0,"index":5163}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":441040,"byte_end":441044,"line_start":119,"line_end":119,"column_start":44,"column_end":48},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":8411},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":441373,"byte_end":441377,"line_start":135,"line_end":135,"column_start":58,"column_end":62},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":8411},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":447012,"byte_end":447016,"line_start":323,"line_end":323,"column_start":27,"column_end":31},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":8411},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range.rs","byte_start":447323,"byte_end":447327,"line_start":338,"line_end":338,"column_start":34,"column_end":38},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":8411},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":452472,"byte_end":452476,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":8624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":453414,"byte_end":453428,"line_start":75,"line_end":75,"column_start":34,"column_end":48},"kind":{"Impl":{"id":482}},"from":{"krate":2,"index":44544},"to":{"krate":0,"index":4648}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454331,"byte_end":454336,"line_start":98,"line_end":98,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":5225}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454339,"byte_end":454343,"line_start":98,"line_end":98,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":5225}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":454674,"byte_end":454686,"line_start":109,"line_end":109,"column_start":36,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":5225},"to":{"krate":0,"index":5229}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":455101,"byte_end":455105,"line_start":125,"line_end":125,"column_start":44,"column_end":48},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":8624},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":455434,"byte_end":455438,"line_start":141,"line_end":141,"column_start":58,"column_end":62},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":8624},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":458934,"byte_end":458938,"line_start":265,"line_end":265,"column_start":27,"column_end":31},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":8624},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/range_inclusive.rs","byte_start":459318,"byte_end":459322,"line_start":281,"line_end":281,"column_start":34,"column_end":38},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":8624},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":462946,"byte_end":462952,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"kind":{"Impl":{"id":503}},"from":{"krate":2,"index":46101},"to":{"krate":0,"index":4648}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":463386,"byte_end":463390,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":8751},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/result.rs","byte_start":464643,"byte_end":464649,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"kind":{"Impl":{"id":511}},"from":{"krate":2,"index":46101},"to":{"krate":0,"index":4947}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":494530,"byte_end":494536,"line_start":13,"line_end":13,"column_start":22,"column_end":28},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":8797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":494694,"byte_end":494700,"line_start":19,"line_end":19,"column_start":32,"column_end":38},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":8797},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":494829,"byte_end":494835,"line_start":25,"line_end":25,"column_start":51,"column_end":57},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":8797},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":495163,"byte_end":495169,"line_start":40,"line_end":40,"column_start":58,"column_end":64},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":8797},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":495792,"byte_end":495806,"line_start":68,"line_end":68,"column_start":43,"column_end":57},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":5347},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":496672,"byte_end":496683,"line_start":100,"line_end":100,"column_start":22,"column_end":33},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":8806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497269,"byte_end":497280,"line_start":120,"line_end":120,"column_start":32,"column_end":43},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":8806},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497414,"byte_end":497425,"line_start":126,"line_end":126,"column_start":51,"column_end":62},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":8806},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":497753,"byte_end":497764,"line_start":141,"line_end":141,"column_start":58,"column_end":69},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":8806},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":498384,"byte_end":498403,"line_start":169,"line_end":169,"column_start":43,"column_end":62},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":5383},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":499241,"byte_end":499250,"line_start":200,"line_end":200,"column_start":22,"column_end":31},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":8816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":499431,"byte_end":499440,"line_start":206,"line_end":206,"column_start":51,"column_end":60},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":8816},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":499772,"byte_end":499781,"line_start":221,"line_end":221,"column_start":58,"column_end":67},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":8816},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":500414,"byte_end":500431,"line_start":249,"line_end":249,"column_start":43,"column_end":60},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":5414},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":501327,"byte_end":501341,"line_start":281,"line_end":281,"column_start":22,"column_end":36},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":8825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":503063,"byte_end":503077,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":8825},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":503409,"byte_end":503423,"line_start":339,"line_end":339,"column_start":58,"column_end":72},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":8825},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/chunks.rs","byte_start":504053,"byte_end":504075,"line_start":367,"line_end":367,"column_start":43,"column_end":65},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":5448},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mergesort.rs","byte_start":505533,"byte_end":505543,"line_start":33,"line_end":33,"column_start":18,"column_end":28},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":5484},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mergesort.rs","byte_start":508452,"byte_end":508465,"line_start":102,"line_end":102,"column_start":22,"column_end":35},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":5495},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mergesort.rs","byte_start":512191,"byte_end":512200,"line_start":205,"line_end":205,"column_start":22,"column_end":31},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":5505},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mergesort.rs","byte_start":523788,"byte_end":523793,"line_start":511,"line_end":511,"column_start":22,"column_end":27},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":5527},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/quicksort.rs","byte_start":532810,"byte_end":532820,"line_start":17,"line_end":17,"column_start":18,"column_end":28},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":5562},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":568967,"byte_end":568974,"line_start":12,"line_end":12,"column_start":22,"column_end":29},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":8857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":569132,"byte_end":569139,"line_start":18,"line_end":18,"column_start":32,"column_end":39},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":8857},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":569269,"byte_end":569276,"line_start":24,"line_end":24,"column_start":51,"column_end":58},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":8857},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":569604,"byte_end":569611,"line_start":39,"line_end":39,"column_start":58,"column_end":65},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":8857},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":570236,"byte_end":570251,"line_start":67,"line_end":67,"column_start":43,"column_end":58},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":5655},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571149,"byte_end":571161,"line_start":99,"line_end":99,"column_start":22,"column_end":34},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":8866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571710,"byte_end":571722,"line_start":118,"line_end":118,"column_start":32,"column_end":44},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":8866},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":571857,"byte_end":571869,"line_start":124,"line_end":124,"column_start":51,"column_end":63},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":8866},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":572197,"byte_end":572209,"line_start":139,"line_end":139,"column_start":58,"column_end":70},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":8866},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":572831,"byte_end":572851,"line_start":167,"line_end":167,"column_start":43,"column_end":63},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":5691},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":573735,"byte_end":573745,"line_start":198,"line_end":198,"column_start":22,"column_end":32},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":8876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":573926,"byte_end":573936,"line_start":204,"line_end":204,"column_start":51,"column_end":61},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":8876},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":574268,"byte_end":574278,"line_start":219,"line_end":219,"column_start":58,"column_end":68},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":8876},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":574913,"byte_end":574931,"line_start":247,"line_end":247,"column_start":43,"column_end":61},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":5722},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":575859,"byte_end":575874,"line_start":279,"line_end":279,"column_start":22,"column_end":37},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":8885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577560,"byte_end":577575,"line_start":321,"line_end":321,"column_start":51,"column_end":66},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":8885},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":577907,"byte_end":577922,"line_start":336,"line_end":336,"column_start":58,"column_end":73},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":8885},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/rchunks.rs","byte_start":578554,"byte_end":578577,"line_start":364,"line_end":364,"column_start":43,"column_end":66},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":5756},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":485762,"byte_end":485766,"line_start":549,"line_end":549,"column_start":32,"column_end":36},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":8895},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":485893,"byte_end":485897,"line_start":555,"line_end":555,"column_start":51,"column_end":55},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":8895},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":486223,"byte_end":486227,"line_start":570,"line_end":570,"column_start":58,"column_end":62},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":8895},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":486730,"byte_end":486742,"line_start":594,"line_end":594,"column_start":43,"column_end":55},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":487300,"byte_end":487307,"line_start":615,"line_end":615,"column_start":32,"column_end":39},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":8903},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":487437,"byte_end":487444,"line_start":621,"line_end":621,"column_start":51,"column_end":58},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":8903},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":487772,"byte_end":487779,"line_start":636,"line_end":636,"column_start":58,"column_end":65},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":8903},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":488453,"byte_end":488468,"line_start":665,"line_end":665,"column_start":43,"column_end":58},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":489343,"byte_end":489350,"line_start":696,"line_end":696,"column_start":51,"column_end":58},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":8912},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":489680,"byte_end":489687,"line_start":711,"line_end":711,"column_start":58,"column_end":65},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":8912},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":490200,"byte_end":490215,"line_start":735,"line_end":735,"column_start":43,"column_end":58},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":5945},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":490796,"byte_end":490801,"line_start":758,"line_end":758,"column_start":36,"column_end":41},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":5956},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":490984,"byte_end":490989,"line_start":767,"line_end":767,"column_start":36,"column_end":41},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":5956},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":491185,"byte_end":491190,"line_start":773,"line_end":773,"column_start":40,"column_end":45},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":5956},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":492677,"byte_end":492685,"line_start":834,"line_end":834,"column_start":36,"column_end":44},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":5990},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/slice/mod.rs","byte_start":492910,"byte_end":492918,"line_start":842,"line_end":842,"column_start":40,"column_end":48},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":5990},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594653,"byte_end":594658,"line_start":288,"line_end":288,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":6048}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594661,"byte_end":594665,"line_start":288,"line_end":288,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3036},"to":{"krate":0,"index":6048}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":594668,"byte_end":594672,"line_start":288,"line_end":288,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":6048}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":596854,"byte_end":596856,"line_start":365,"line_end":365,"column_start":54,"column_end":56},"kind":{"Impl":{"id":571}},"from":{"krate":0,"index":6072},"to":{"krate":0,"index":6048}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":597183,"byte_end":597188,"line_start":381,"line_end":381,"column_start":32,"column_end":37},"kind":{"Impl":{"id":572}},"from":{"krate":0,"index":8960},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":597448,"byte_end":597461,"line_start":392,"line_end":392,"column_start":33,"column_end":46},"kind":{"Impl":{"id":573}},"from":{"krate":0,"index":6073},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":598260,"byte_end":598271,"line_start":426,"line_end":426,"column_start":32,"column_end":43},"kind":{"Impl":{"id":574}},"from":{"krate":0,"index":8969},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":598622,"byte_end":598641,"line_start":441,"line_end":441,"column_start":33,"column_end":52},"kind":{"Impl":{"id":575}},"from":{"krate":0,"index":6087},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":599613,"byte_end":599618,"line_start":481,"line_end":481,"column_start":32,"column_end":37},"kind":{"Impl":{"id":576}},"from":{"krate":0,"index":8978},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":599876,"byte_end":599889,"line_start":492,"line_end":492,"column_start":33,"column_end":46},"kind":{"Impl":{"id":577}},"from":{"krate":0,"index":6102},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":600646,"byte_end":600657,"line_start":525,"line_end":525,"column_start":32,"column_end":43},"kind":{"Impl":{"id":578}},"from":{"krate":0,"index":8987},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":600922,"byte_end":600941,"line_start":536,"line_end":536,"column_start":33,"column_end":52},"kind":{"Impl":{"id":579}},"from":{"krate":0,"index":6116},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":601682,"byte_end":601687,"line_start":566,"line_end":566,"column_start":23,"column_end":28},"kind":{"Impl":{"id":580}},"from":{"krate":0,"index":8996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":601837,"byte_end":601842,"line_start":572,"line_end":572,"column_start":44,"column_end":49},"kind":{"Impl":{"id":581}},"from":{"krate":0,"index":8996},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":603495,"byte_end":603510,"line_start":632,"line_end":632,"column_start":23,"column_end":38},"kind":{"Impl":{"id":582}},"from":{"krate":0,"index":9009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":603664,"byte_end":603687,"line_start":638,"line_end":638,"column_start":36,"column_end":59},"kind":{"Impl":{"id":583}},"from":{"krate":0,"index":6150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":603995,"byte_end":604010,"line_start":647,"line_end":647,"column_start":44,"column_end":59},"kind":{"Impl":{"id":584}},"from":{"krate":0,"index":9009},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":604358,"byte_end":604381,"line_start":659,"line_end":659,"column_start":58,"column_end":81},"kind":{"Impl":{"id":585}},"from":{"krate":0,"index":6150},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":605345,"byte_end":605350,"line_start":699,"line_end":699,"column_start":32,"column_end":37},"kind":{"Impl":{"id":586}},"from":{"krate":0,"index":9022},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":605944,"byte_end":605959,"line_start":724,"line_end":724,"column_start":32,"column_end":47},"kind":{"Impl":{"id":587}},"from":{"krate":0,"index":9032},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":606624,"byte_end":606631,"line_start":752,"line_end":752,"column_start":44,"column_end":51},"kind":{"Impl":{"id":588}},"from":{"krate":0,"index":9042},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":607008,"byte_end":607023,"line_start":767,"line_end":767,"column_start":51,"column_end":66},"kind":{"Impl":{"id":589}},"from":{"krate":0,"index":6192},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":608060,"byte_end":608072,"line_start":809,"line_end":809,"column_start":44,"column_end":56},"kind":{"Impl":{"id":590}},"from":{"krate":0,"index":9055},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/str.rs","byte_start":608485,"byte_end":608505,"line_start":825,"line_end":825,"column_start":51,"column_end":71},"kind":{"Impl":{"id":591}},"from":{"krate":0,"index":6212},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":610073,"byte_end":610078,"line_start":30,"line_end":30,"column_start":31,"column_end":36},"kind":{"Impl":{"id":592}},"from":{"krate":0,"index":9068},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/string.rs","byte_start":610355,"byte_end":610360,"line_start":43,"line_end":43,"column_start":19,"column_end":24},"kind":{"Impl":{"id":593}},"from":{"krate":0,"index":9068},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":611560,"byte_end":611563,"line_start":42,"line_end":42,"column_start":40,"column_end":43},"kind":{"Impl":{"id":594}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":4648}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":611736,"byte_end":611744,"line_start":51,"line_end":51,"column_start":36,"column_end":44},"kind":{"Impl":{"id":595}},"from":{"krate":0,"index":9075},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":612041,"byte_end":612049,"line_start":66,"line_end":66,"column_start":43,"column_end":51},"kind":{"Impl":{"id":596}},"from":{"krate":0,"index":9075},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":613124,"byte_end":613129,"line_start":108,"line_end":108,"column_start":43,"column_end":48},"kind":{"Impl":{"id":597}},"from":{"krate":0,"index":9084},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":613440,"byte_end":613445,"line_start":123,"line_end":123,"column_start":50,"column_end":55},"kind":{"Impl":{"id":598}},"from":{"krate":0,"index":9084},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":614263,"byte_end":614268,"line_start":152,"line_end":152,"column_start":31,"column_end":36},"kind":{"Impl":{"id":599}},"from":{"krate":0,"index":9084},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":615394,"byte_end":615407,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"kind":{"Impl":{"id":600}},"from":{"krate":0,"index":6348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":616407,"byte_end":616420,"line_start":204,"line_end":204,"column_start":43,"column_end":56},"kind":{"Impl":{"id":601}},"from":{"krate":0,"index":6348},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":617079,"byte_end":617092,"line_start":224,"line_end":224,"column_start":39,"column_end":52},"kind":{"Impl":{"id":602}},"from":{"krate":0,"index":6348},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":617468,"byte_end":617478,"line_start":238,"line_end":238,"column_start":36,"column_end":46},"kind":{"Impl":{"id":603}},"from":{"krate":0,"index":6367},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":617952,"byte_end":617962,"line_start":257,"line_end":257,"column_start":47,"column_end":57},"kind":{"Impl":{"id":604}},"from":{"krate":0,"index":6367},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":618283,"byte_end":618293,"line_start":266,"line_end":266,"column_start":45,"column_end":55},"kind":{"Impl":{"id":605}},"from":{"krate":0,"index":6367},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":618414,"byte_end":618424,"line_start":272,"line_end":272,"column_start":47,"column_end":57},"kind":{"Impl":{"id":606}},"from":{"krate":0,"index":6367},"to":{"krate":2,"index":8180}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/vec.rs","byte_start":618470,"byte_end":618480,"line_start":274,"line_end":274,"column_start":32,"column_end":42},"kind":{"Impl":{"id":607}},"from":{"krate":0,"index":6367},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/par_either.rs","byte_start":620496,"byte_end":620502,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"kind":{"Impl":{"id":608}},"from":{"krate":20,"index":181},"to":{"krate":0,"index":4674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/par_either.rs","byte_start":621022,"byte_end":621028,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"kind":{"Impl":{"id":609}},"from":{"krate":20,"index":181},"to":{"krate":0,"index":4882}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/par_either.rs","byte_start":621822,"byte_end":621828,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"kind":{"Impl":{"id":610}},"from":{"krate":20,"index":181},"to":{"krate":0,"index":4951}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":5313,"byte_end":5320,"line_start":134,"line_end":134,"column_start":31,"column_end":38},"kind":{"Impl":{"id":611}},"from":{"krate":0,"index":6508},"to":{"krate":2,"index":3024}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":5426,"byte_end":5433,"line_start":137,"line_end":137,"column_start":31,"column_end":38},"kind":{"Impl":{"id":612}},"from":{"krate":0,"index":6508},"to":{"krate":2,"index":3036}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":5521,"byte_end":5528,"line_start":140,"line_end":140,"column_start":19,"column_end":26},"kind":{"Impl":{"id":613}},"from":{"krate":0,"index":6508},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.5.2/src/lib.rs","byte_start":5671,"byte_end":5678,"line_start":147,"line_end":147,"column_start":18,"column_end":25},"kind":{"Impl":{"id":614}},"from":{"krate":0,"index":6508},"to":{"krate":2,"index":3034}}]}