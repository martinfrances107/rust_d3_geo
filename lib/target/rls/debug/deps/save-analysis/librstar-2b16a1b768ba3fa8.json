{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4","program":"/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rstar","--edition=2018","/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=2b16a1b768ba3fa8","-C","extra-filename=-2b16a1b768ba3fa8","--out-dir","/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","-L","dependency=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","--extern","heapless=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libheapless-ed5b37592e2b588e.rmeta","--extern","num_traits=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libnum_traits-0123c3a8ba9a4e3c.rmeta","--extern","pdqselect=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libpdqselect-99dd6ecc4498b8e2.rmeta","--extern","smallvec=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libsmallvec-21a1773e9a5f9569.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/librstar-2b16a1b768ba3fa8.rmeta"},"prelude":{"crate_id":{"name":"rstar","disambiguator":[1700724607097736238,0]},"crate_root":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src","external_crates":[{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","num":20,"id":{"name":"num_traits","disambiguator":[14098284124660598696,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","num":21,"id":{"name":"smallvec","disambiguator":[10927382968747842108,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":22,"id":{"name":"heapless","disambiguator":[10161764277912654536,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":23,"id":{"name":"generic_array","disambiguator":[3507872413113695977,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":24,"id":{"name":"typenum","disambiguator":[2930080192617149959,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":25,"id":{"name":"hash32","disambiguator":[11898166922023924527,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":26,"id":{"name":"byteorder","disambiguator":[10928633988161422107,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":27,"id":{"name":"as_slice","disambiguator":[18004214840561597517,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":28,"id":{"name":"generic_array","disambiguator":[4483899168197973923,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":29,"id":{"name":"generic_array","disambiguator":[8759127326726776456,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","num":30,"id":{"name":"stable_deref_trait","disambiguator":[1528126608907949036,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","num":31,"id":{"name":"pdqselect","disambiguator":[311865596127757181,0]}}],"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":0,"byte_end":1483,"line_start":1,"line_end":47,"column_start":1,"column_end":29}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1204},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/mod.rs","byte_start":94385,"byte_end":94389,"line_start":7,"line_end":7,"column_start":21,"column_end":25},"alias_span":null,"name":"Line","value":"","parent":{"krate":0,"index":758}},{"kind":"Use","ref_id":{"krate":0,"index":1233},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/mod.rs","byte_start":94422,"byte_end":94435,"line_start":8,"line_end":8,"column_start":32,"column_end":45},"alias_span":null,"name":"PointWithData","value":"","parent":{"krate":0,"index":758}},{"kind":"Use","ref_id":{"krate":0,"index":1281},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/mod.rs","byte_start":94462,"byte_end":94471,"line_start":9,"line_end":9,"column_start":26,"column_end":35},"alias_span":null,"name":"Rectangle","value":"","parent":{"krate":0,"index":758}},{"kind":"Use","ref_id":{"krate":0,"index":1068},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1079,"byte_end":1083,"line_start":39,"line_end":39,"column_start":22,"column_end":26},"alias_span":null,"name":"AABB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1118,"byte_end":1140,"line_start":40,"line_end":40,"column_start":34,"column_end":56},"alias_span":null,"name":"RStarInsertionStrategy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1189,"byte_end":1206,"line_start":41,"line_end":41,"column_start":48,"column_end":65},"alias_span":null,"name":"SelectionFunction","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":586},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1233,"byte_end":1241,"line_start":42,"line_end":42,"column_start":26,"column_end":34},"alias_span":null,"name":"Envelope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1111},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1265,"byte_end":1275,"line_start":43,"line_end":43,"column_start":23,"column_end":33},"alias_span":null,"name":"ParentNode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1097},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1277,"byte_end":1286,"line_start":43,"line_end":43,"column_start":35,"column_end":44},"alias_span":null,"name":"RTreeNode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":647},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1313,"byte_end":1326,"line_start":44,"line_end":44,"column_start":25,"column_end":38},"alias_span":null,"name":"PointDistance","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":644},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1328,"byte_end":1339,"line_start":44,"line_end":44,"column_start":40,"column_end":51},"alias_span":null,"name":"RTreeObject","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1121},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1366,"byte_end":1379,"line_start":45,"line_end":45,"column_start":25,"column_end":38},"alias_span":null,"name":"DefaultParams","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1122},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1366,"byte_end":1379,"line_start":45,"line_end":45,"column_start":25,"column_end":38},"alias_span":null,"name":"DefaultParams","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":687},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1381,"byte_end":1398,"line_start":45,"line_end":45,"column_start":40,"column_end":57},"alias_span":null,"name":"InsertionStrategy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1400,"byte_end":1411,"line_start":45,"line_end":45,"column_start":59,"column_end":70},"alias_span":null,"name":"RTreeParams","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":714},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1437,"byte_end":1442,"line_start":46,"line_end":46,"column_start":24,"column_end":29},"alias_span":null,"name":"Point","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":711},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1444,"byte_end":1452,"line_start":46,"line_end":46,"column_start":31,"column_end":39},"alias_span":null,"name":"RTreeNum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1309},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1477,"byte_end":1482,"line_start":47,"line_end":47,"column_start":23,"column_end":28},"alias_span":null,"name":"RTree","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":0,"byte_end":1483,"line_start":1,"line_end":47,"column_start":1,"column_end":29},"name":"","qualname":"::","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":76},{"krate":0,"index":578},{"krate":0,"index":604},{"krate":0,"index":630},{"krate":0,"index":660},{"krate":0,"index":694},{"krate":0,"index":758},{"krate":0,"index":881},{"krate":0,"index":1022},{"krate":0,"index":1025},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1062},{"krate":0,"index":1065}],"decl_id":null,"docs":" An n-dimensional r*-tree implementation.","sig":null,"attributes":[{"value":"/ An n-dimensional r*-tree implementation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":0,"byte_end":44,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":45,"byte_end":48,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate implements a flexible, n-dimensional r-tree implementation with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":49,"byte_end":127,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ the r* (r star) insertion strategy.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":128,"byte_end":167,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":168,"byte_end":171,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # R-Tree","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":172,"byte_end":184,"line_start":6,"line_end":6,"column_start":1,"column_end":13}},{"value":"/ An r-tree is a data structure containing _spatial data_ and is optimized for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":185,"byte_end":265,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ nearest neighbor search.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":266,"byte_end":294,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"/ _Spatial data_ refers to an object that has the notion of a position and extent,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":295,"byte_end":379,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/ for example points, lines and rectangles in any dimension.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":380,"byte_end":442,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":443,"byte_end":446,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":447,"byte_end":450,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Further documentation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":451,"byte_end":478,"line_start":13,"line_end":13,"column_start":1,"column_end":28}},{"value":"/ The crate's main data structure and documentation is struct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":479,"byte_end":542,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ [RTree](struct.RTree.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":543,"byte_end":574,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":575,"byte_end":578,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Also, the pre-defined primitives like lines and rectangles contained in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":579,"byte_end":654,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ the [primitives module](primitives/index.html) may be of interest for a quick start.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":655,"byte_end":743,"line_start":18,"line_end":18,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":744,"byte_end":747,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # (De)Serialization","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":748,"byte_end":771,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/ Enable the `serde` feature for [Serde](https://crates.io/crates/serde) support.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":772,"byte_end":855,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":856,"byte_end":859,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"deny(missing_docs)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":860,"byte_end":882,"line_start":23,"line_end":23,"column_start":1,"column_end":23}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":883,"byte_end":906,"line_start":24,"line_end":24,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1068},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2410,"byte_end":2414,"line_start":23,"line_end":23,"column_start":12,"column_end":16},"name":"AABB","qualname":"::aabb::AABB","value":"AABB {  }","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1071}],"decl_id":null,"docs":" An n-dimensional axis aligned bounding box (AABB).","sig":null,"attributes":[{"value":"/ An n-dimensional axis aligned bounding box (AABB).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":1673,"byte_end":1727,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":1728,"byte_end":1731,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ An object's AABB is the smallest box totally encompassing an object","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":1732,"byte_end":1803,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ while being aligned to the current coordinate system.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":1804,"byte_end":1861,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/ Although these structures are commonly called bounding _boxes_, they exist in any","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":1862,"byte_end":1947,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"/ dimension.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":1948,"byte_end":1962,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":1963,"byte_end":1966,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Note that AABBs cannot be inserted into r-trees. Use the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":1967,"byte_end":2027,"line_start":15,"line_end":15,"column_start":1,"column_end":61}},{"value":"/ [Rectangle](primitives/struct.Rectangle.html) struct for this purpose.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2028,"byte_end":2102,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2103,"byte_end":2106,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Type arguments","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2107,"byte_end":2127,"line_start":18,"line_end":18,"column_start":1,"column_end":21}},{"value":"/ `P`: The struct is generic over which point type is used. Using an n-dimensional point","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2128,"byte_end":2218,"line_start":19,"line_end":19,"column_start":1,"column_end":91}},{"value":"/ type will result in an n-dimensional bounding box.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2219,"byte_end":2273,"line_start":20,"line_end":20,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2574,"byte_end":2584,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"from_point","qualname":"<AABB<P>>::from_point","value":"pub fn from_point(P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the AABB encompassing a single point.\n","sig":null,"attributes":[{"value":"/ Returns the AABB encompassing a single point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2513,"byte_end":2562,"line_start":35,"line_end":35,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2818,"byte_end":2823,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"lower","qualname":"<AABB<P>>::lower","value":"pub fn lower(&Self) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the AABB's lower corner.","sig":null,"attributes":[{"value":"/ Returns the AABB's lower corner.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2648,"byte_end":2684,"line_start":40,"line_end":40,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2689,"byte_end":2692,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ This is the point contained within the AABB with the smallest coordinate value in each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2697,"byte_end":2787,"line_start":42,"line_end":42,"column_start":5,"column_end":95}},{"value":"/ dimension.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2792,"byte_end":2806,"line_start":43,"line_end":43,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3037,"byte_end":3042,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"upper","qualname":"<AABB<P>>::upper","value":"pub fn upper(&Self) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the AABB's upper corner.","sig":null,"attributes":[{"value":"/ Returns the AABB's upper corner.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2868,"byte_end":2904,"line_start":48,"line_end":48,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2909,"byte_end":2912,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ This is the point contained within the AABB with the largest coordinate value in each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2917,"byte_end":3006,"line_start":50,"line_end":50,"column_start":5,"column_end":94}},{"value":"/ dimension.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3011,"byte_end":3025,"line_start":51,"line_end":51,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3146,"byte_end":3158,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"from_corners","qualname":"<AABB<P>>::from_corners","value":"pub fn from_corners(P, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new AABB encompassing two points.\n","sig":null,"attributes":[{"value":"/ Creates a new AABB encompassing two points.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3087,"byte_end":3134,"line_start":56,"line_end":56,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3366,"byte_end":3377,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"from_points","qualname":"<AABB<P>>::from_points","value":"pub fn from_points<'a, I>(I) -> Self where I: IntoIterator<Item = &'a P> + 'a,\nP: 'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new AABB encompassing a collection of points.\n","sig":null,"attributes":[{"value":"/ Creates a new AABB encompassing a collection of points.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3295,"byte_end":3354,"line_start":64,"line_end":64,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3970,"byte_end":3979,"line_start":85,"line_end":85,"column_start":12,"column_end":21},"name":"min_point","qualname":"<AABB<P>>::min_point","value":"pub fn min_point(&Self, &P) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the point within this AABB closest to a given point.","sig":null,"attributes":[{"value":"/ Returns the point within this AABB closest to a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3811,"byte_end":3875,"line_start":82,"line_end":82,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3880,"byte_end":3883,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ If `point` is contained within the AABB, `point` will be returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":3888,"byte_end":3958,"line_start":84,"line_end":84,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":4165,"byte_end":4175,"line_start":90,"line_end":90,"column_start":12,"column_end":22},"name":"distance_2","qualname":"<AABB<P>>::distance_2","value":"pub fn distance_2(&Self, &P) -> P::Scalar","parent":null,"children":[],"decl_id":null,"docs":" Returns the squared distance to the AABB's [min_point](#method.min_point).\n","sig":null,"attributes":[{"value":"/ Returns the squared distance to the AABB's [min_point](#method.min_point).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":4075,"byte_end":4153,"line_start":89,"line_end":89,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":175},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/intersection_iterator.rs","byte_start":16928,"byte_end":16948,"line_start":7,"line_end":7,"column_start":12,"column_end":32},"name":"IntersectionIterator","qualname":"::algorithm::intersection_iterator::IntersectionIterator","value":"IntersectionIterator {  }","parent":null,"children":[{"krate":0,"index":179}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":239},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":22068,"byte_end":22085,"line_start":20,"line_end":20,"column_start":12,"column_end":29},"name":"SelectionIterator","qualname":"::algorithm::iterators::SelectionIterator","value":"SelectionIterator {  }","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":22356,"byte_end":22359,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectionIterator>::new","value":"pub fn new(&'a ParentNode<T>, Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":257},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":23413,"byte_end":23433,"line_start":74,"line_end":74,"column_start":12,"column_end":32},"name":"SelectionIteratorMut","qualname":"::algorithm::iterators::SelectionIteratorMut","value":"SelectionIteratorMut {  }","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":23711,"byte_end":23714,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectionIteratorMut>::new","value":"pub fn new(&'a mut ParentNode<T>, Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":440},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45946,"byte_end":45968,"line_start":17,"line_end":17,"column_start":10,"column_end":32},"name":"RStarInsertionStrategy","qualname":"::algorithm::rstar::RStarInsertionStrategy","value":"pub enum RStarInsertionStrategy { }","parent":null,"children":[],"decl_id":null,"docs":" Inserts points according to the r-star heuristic.","sig":null,"attributes":[{"value":"/ Inserts points according to the r-star heuristic.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45505,"byte_end":45558,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45559,"byte_end":45562,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The r*-heuristic focusses on good insertion quality at the costs of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45563,"byte_end":45634,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ insertion performance. This strategy is best for use cases with few","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45635,"byte_end":45706,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ insertions and many nearest neighbor queries.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45707,"byte_end":45756,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45757,"byte_end":45760,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ `RStarInsertionStrategy` is used as the default insertion strategy.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45761,"byte_end":45832,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ See [InsertionStrategy](trait.InsertionStrategy.html) for more information on insertion strategies.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":45833,"byte_end":45936,"line_start":16,"line_end":16,"column_start":1,"column_end":104}}]},{"kind":"Trait","id":{"krate":0,"index":504},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59199,"byte_end":59216,"line_start":24,"line_end":24,"column_start":11,"column_end":28},"name":"SelectionFunction","qualname":"::algorithm::selection_functions::SelectionFunction","value":"SelectionFunction<T>","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"decl_id":null,"docs":" Advanced trait to iterate through an r-tree. Usually it should no be required to be implemented.","sig":null,"attributes":[{"value":"/ Advanced trait to iterate through an r-tree. Usually it should no be required to be implemented.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":57947,"byte_end":58047,"line_start":6,"line_end":6,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58048,"byte_end":58051,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ It is important to know some details about the inner structure of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58052,"byte_end":58121,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ r-trees to comprehend this trait. Any node in an r-tree is either a *leaf* (containing exactly one `T: RTreeObject`) or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58122,"byte_end":58245,"line_start":9,"line_end":9,"column_start":1,"column_end":124}},{"value":"/ a *parent* (containing multiple nodes).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58246,"byte_end":58289,"line_start":10,"line_end":10,"column_start":1,"column_end":44}},{"value":"/ The main benefit of r-trees lies in their ability to efficiently guide searches through","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58290,"byte_end":58381,"line_start":11,"line_end":11,"column_start":1,"column_end":92}},{"value":"/ the tree. This is done by *pruning*: Knowing the envelopes of parent nodes","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58382,"byte_end":58460,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ often allows to completely skip them and all contained children during a search instead having","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58461,"byte_end":58559,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ to iterate through them, e.g. when searching for elements in a non-intersecting envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58560,"byte_end":58653,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ This often reduces the expected time from `O(n)` to `O(log(n))`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58654,"byte_end":58722,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58723,"byte_end":58726,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This trait can be used to define searches through the r-tree by defining if a node","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58727,"byte_end":58813,"line_start":17,"line_end":17,"column_start":1,"column_end":87}},{"value":"/ should be further investigated (\"unpacked\") or pruned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58814,"byte_end":58872,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58873,"byte_end":58876,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Usually, the various `locate_[...]` methods of [`RTree`](struct.RTree.html) should cover most","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58877,"byte_end":58974,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ common searches. Otherwise, implementing `SelectionFunction` and using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":58975,"byte_end":59049,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ [`locate_with_selection_function`](struct.RTree.html#method.locate_with_selection_function)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59050,"byte_end":59145,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"/ can be used to tailor a custom search.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59146,"byte_end":59188,"line_start":23,"line_end":23,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59405,"byte_end":59425,"line_start":31,"line_end":31,"column_start":8,"column_end":28},"name":"should_unpack_parent","qualname":"::algorithm::selection_functions::SelectionFunction::should_unpack_parent","value":"pub fn should_unpack_parent(&Self, &T::Envelope) -> bool","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Return `true` if a parent node should be unpacked during a search.","sig":null,"attributes":[{"value":"/ Return `true` if a parent node should be unpacked during a search.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59252,"byte_end":59322,"line_start":28,"line_end":28,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59327,"byte_end":59330,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ The parent node's envelope is given to guide the decision.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59335,"byte_end":59397,"line_start":30,"line_end":30,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59617,"byte_end":59635,"line_start":35,"line_end":35,"column_start":8,"column_end":26},"name":"should_unpack_leaf","qualname":"::algorithm::selection_functions::SelectionFunction::should_unpack_leaf","value":"pub fn should_unpack_leaf(&Self, &T) -> bool","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Returns `true` if a given child node should be returned during a search.\n The default implementation will always return `true`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if a given child node should be returned during a search.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59471,"byte_end":59547,"line_start":33,"line_end":33,"column_start":5,"column_end":81}},{"value":"/ The default implementation will always return `true`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59552,"byte_end":59609,"line_start":34,"line_end":34,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":508},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59697,"byte_end":59721,"line_start":40,"line_end":40,"column_start":12,"column_end":36},"name":"SelectInEnvelopeFunction","qualname":"::algorithm::selection_functions::SelectInEnvelopeFunction","value":"SelectInEnvelopeFunction {  }","parent":null,"children":[{"krate":0,"index":510}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59858,"byte_end":59861,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectInEnvelopeFunction<T>>::new","value":"pub fn new(T::Envelope) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":518},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60303,"byte_end":60335,"line_start":69,"line_end":69,"column_start":12,"column_end":44},"name":"SelectInEnvelopeFuncIntersecting","qualname":"::algorithm::selection_functions::SelectInEnvelopeFuncIntersecting","value":"SelectInEnvelopeFuncIntersecting {  }","parent":null,"children":[{"krate":0,"index":520}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60480,"byte_end":60483,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectInEnvelopeFuncIntersecting<T>>::new","value":"pub fn new(T::Envelope) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":528},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60921,"byte_end":60934,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"SelectAllFunc","qualname":"::algorithm::selection_functions::SelectAllFunc","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":533},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":61212,"byte_end":61233,"line_start":111,"line_end":111,"column_start":12,"column_end":33},"name":"SelectAtPointFunction","qualname":"::algorithm::selection_functions::SelectAtPointFunction","value":"SelectAtPointFunction {  }","parent":null,"children":[{"krate":0,"index":535}],"decl_id":null,"docs":" A [trait.SelectionFunction] that only selects elements whose envelope\n contains a specific point.\n","sig":null,"attributes":[{"value":"/ A [trait.SelectionFunction] that only selects elements whose envelope","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":61096,"byte_end":61169,"line_start":109,"line_end":109,"column_start":1,"column_end":74}},{"value":"/ contains a specific point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":61170,"byte_end":61200,"line_start":110,"line_end":110,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":61387,"byte_end":61390,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectAtPointFunction<T>>::new","value":"pub fn new(<T::Envelope as Envelope>::Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":556},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":62632,"byte_end":62660,"line_start":172,"line_end":172,"column_start":12,"column_end":40},"name":"SelectWithinDistanceFunction","qualname":"::algorithm::selection_functions::SelectWithinDistanceFunction","value":"SelectWithinDistanceFunction {  }","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":62938,"byte_end":62941,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectWithinDistanceFunction<T>>::new","value":"pub fn new(<T::Envelope as Envelope>::Point,\n<<T::Envelope as Envelope>::Point as Point>::Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":586},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64809,"byte_end":64817,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"Envelope","qualname":"::envelope::Envelope","value":"Envelope: Clone + Copy + PartialEq + ::std::fmt::Debug","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":602}],"decl_id":null,"docs":" An envelope type that encompasses some child nodes.","sig":null,"attributes":[{"value":"/ An envelope type that encompasses some child nodes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64438,"byte_end":64493,"line_start":3,"line_end":3,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64494,"byte_end":64497,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ An envelope defines how different bounding boxes of inserted children in an r-tree can interact,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64498,"byte_end":64598,"line_start":5,"line_end":5,"column_start":1,"column_end":101}},{"value":"/ e.g. how they can be merged or intersected.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64599,"byte_end":64646,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"/ This trait is not meant to be implemented by the user. Currently, only one implementation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64647,"byte_end":64740,"line_start":7,"line_end":7,"column_start":1,"column_end":94}},{"value":"/ exists ([AABB](struct.AABB.html)) and should be used.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64741,"byte_end":64798,"line_start":8,"line_end":8,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":587},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64910,"byte_end":64915,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Point","qualname":"::envelope::Envelope::Point","value":"type Point: Point;","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" The envelope's point type.\n","sig":null,"attributes":[{"value":"/ The envelope's point type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64870,"byte_end":64900,"line_start":10,"line_end":10,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65005,"byte_end":65014,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"new_empty","qualname":"::envelope::Envelope::new_empty","value":"pub fn new_empty() -> Self","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Creates a new, empty envelope that does not encompass any child.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty envelope that does not encompass any child.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64929,"byte_end":64997,"line_start":13,"line_end":13,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65101,"byte_end":65115,"line_start":17,"line_end":17,"column_start":8,"column_end":22},"name":"contains_point","qualname":"::envelope::Envelope::contains_point","value":"pub fn contains_point(&Self, &Self::Point) -> bool","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns true if a point is contained within this envelope.\n","sig":null,"attributes":[{"value":"/ Returns true if a point is contained within this envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65031,"byte_end":65093,"line_start":16,"line_end":16,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65238,"byte_end":65255,"line_start":20,"line_end":20,"column_start":8,"column_end":25},"name":"contains_envelope","qualname":"::envelope::Envelope::contains_envelope","value":"pub fn contains_envelope(&Self, &Self) -> bool","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns true if another envelope is _fully contained_ within `self`.\n","sig":null,"attributes":[{"value":"/ Returns true if another envelope is _fully contained_ within `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65158,"byte_end":65230,"line_start":19,"line_end":19,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65345,"byte_end":65350,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"merge","qualname":"::envelope::Envelope::merge","value":"pub fn merge(&mut Self, &Self)","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Extends `self` to contain another envelope.\n","sig":null,"attributes":[{"value":"/ Extends `self` to contain another envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65290,"byte_end":65337,"line_start":22,"line_end":22,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65461,"byte_end":65467,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"name":"merged","qualname":"::envelope::Envelope::merged","value":"pub fn merged(&Self, &Self) -> Self","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns the minimal envelope containing `self` and another envelope.\n","sig":null,"attributes":[{"value":"/ Returns the minimal envelope containing `self` and another envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65381,"byte_end":65453,"line_start":24,"line_end":24,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65578,"byte_end":65588,"line_start":28,"line_end":28,"column_start":8,"column_end":18},"name":"intersects","qualname":"::envelope::Envelope::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Sets `self` to the intersection of `self` and another envelope.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the intersection of `self` and another envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65503,"byte_end":65570,"line_start":27,"line_end":27,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65703,"byte_end":65720,"line_start":30,"line_end":30,"column_start":8,"column_end":25},"name":"intersection_area","qualname":"::envelope::Envelope::intersection_area","value":"pub fn intersection_area(&Self, &Self) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns the area of the intersection of `self` and another envelope.\n","sig":null,"attributes":[{"value":"/ Returns the area of the intersection of `self` and another envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65623,"byte_end":65695,"line_start":29,"line_end":29,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65843,"byte_end":65847,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"area","qualname":"::envelope::Envelope::area","value":"pub fn area(&Self) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns this envelope's area. Must be at least 0.\n","sig":null,"attributes":[{"value":"/ Returns this envelope's area. Must be at least 0.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65782,"byte_end":65835,"line_start":32,"line_end":32,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65963,"byte_end":65973,"line_start":36,"line_end":36,"column_start":8,"column_end":18},"name":"distance_2","qualname":"::envelope::Envelope::distance_2","value":"pub fn distance_2(&Self, &Self::Point) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns the euclidean distance to the envelope's border.\n","sig":null,"attributes":[{"value":"/ Returns the euclidean distance to the envelope's border.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":65895,"byte_end":65955,"line_start":35,"line_end":35,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66546,"byte_end":66560,"line_start":45,"line_end":45,"column_start":8,"column_end":22},"name":"min_max_dist_2","qualname":"::envelope::Envelope::min_max_dist_2","value":"pub fn min_max_dist_2(&Self, &Self::Point) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns the squared min-max distance, a concept that helps to find nearest neighbors efficiently.","sig":null,"attributes":[{"value":"/ Returns the squared min-max distance, a concept that helps to find nearest neighbors efficiently.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66042,"byte_end":66143,"line_start":38,"line_end":38,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66148,"byte_end":66151,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Visually, if an AABB and a point are given, the min-max distance returns the distance at which we","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66156,"byte_end":66257,"line_start":40,"line_end":40,"column_start":5,"column_end":106}},{"value":"/ surely know an element must be present. This serves as an upper bound during nearest neighbor search.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66262,"byte_end":66367,"line_start":41,"line_end":41,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66372,"byte_end":66375,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ # References","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66380,"byte_end":66396,"line_start":43,"line_end":43,"column_start":5,"column_end":21}},{"value":"/ Roussopoulos, Nick, Stephen Kelley, and Frédéric Vincent. \"Nearest neighbor queries.\" ACM sigmod record. Vol. 24. No. 2. ACM, 1995.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66401,"byte_end":66538,"line_start":44,"line_end":44,"column_start":5,"column_end":140}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66677,"byte_end":66683,"line_start":48,"line_end":48,"column_start":8,"column_end":14},"name":"center","qualname":"::envelope::Envelope::center","value":"pub fn center(&Self) -> Self::Point","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns the envelope's center point.\n","sig":null,"attributes":[{"value":"/ Returns the envelope's center point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66629,"byte_end":66669,"line_start":47,"line_end":47,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66781,"byte_end":66796,"line_start":51,"line_end":51,"column_start":8,"column_end":23},"name":"perimeter_value","qualname":"::envelope::Envelope::perimeter_value","value":"pub fn perimeter_value(&Self) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Returns a value proportional to the envelope's perimeter.\n","sig":null,"attributes":[{"value":"/ Returns a value proportional to the envelope's perimeter.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66712,"byte_end":66773,"line_start":50,"line_end":50,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66924,"byte_end":66938,"line_start":54,"line_end":54,"column_start":8,"column_end":22},"name":"sort_envelopes","qualname":"::envelope::Envelope::sort_envelopes","value":"pub fn sort_envelopes<T: RTreeObject<Envelope = Self>>(usize, &mut [T])","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Sorts a given set of objects with envelopes along one of their axis.\n","sig":null,"attributes":[{"value":"/ Sorts a given set of objects with envelopes along one of their axis.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":66844,"byte_end":66916,"line_start":53,"line_end":53,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":67209,"byte_end":67228,"line_start":60,"line_end":60,"column_start":8,"column_end":27},"name":"partition_envelopes","qualname":"::envelope::Envelope::partition_envelopes","value":"pub fn partition_envelopes<T: RTreeObject<Envelope =\nSelf>>(usize, &mut [T], usize)","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Partitions objects with an envelopes along a certain axis.","sig":null,"attributes":[{"value":"/ Partitions objects with an envelopes along a certain axis.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":67012,"byte_end":67074,"line_start":56,"line_end":56,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":67079,"byte_end":67082,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ After calling this, envelopes[0..selection_size] are all smaller","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":67087,"byte_end":67155,"line_start":58,"line_end":58,"column_start":5,"column_end":73}},{"value":"/ than envelopes[selection_size + 1..].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":67160,"byte_end":67201,"line_start":59,"line_end":59,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1099},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68020,"byte_end":68024,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"name":"Leaf","qualname":"::node::RTreeNode::Leaf","value":"RTreeNode::Leaf(T)","parent":{"krate":0,"index":1097},"children":[],"decl_id":null,"docs":" A leaf node, only containing the r-tree object\n","sig":null,"attributes":[{"value":"/ A leaf node, only containing the r-tree object","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":67965,"byte_end":68015,"line_start":25,"line_end":25,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1102},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68086,"byte_end":68092,"line_start":28,"line_end":28,"column_start":5,"column_end":11},"name":"Parent","qualname":"::node::RTreeNode::Parent","value":"RTreeNode::Parent(ParentNode<T>)","parent":{"krate":0,"index":1097},"children":[],"decl_id":null,"docs":" A parent node containing several child nodes\n","sig":null,"attributes":[{"value":"/ A parent node containing several child nodes","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68033,"byte_end":68081,"line_start":27,"line_end":27,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":1097},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":67920,"byte_end":67929,"line_start":21,"line_end":21,"column_start":10,"column_end":19},"name":"RTreeNode","qualname":"::node::RTreeNode","value":"pub enum RTreeNode<T> where T: RTreeObject { Leaf(T), Parent(ParentNode<T>), }","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1102}],"decl_id":null,"docs":" An internal tree node.","sig":null,"attributes":[{"value":"/ An internal tree node.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":67813,"byte_end":67839,"line_start":18,"line_end":18,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":67840,"byte_end":67843,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ For most applications, using this type should not be required.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":67844,"byte_end":67910,"line_start":20,"line_end":20,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1111},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68400,"byte_end":68410,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"ParentNode","qualname":"::node::ParentNode","value":"ParentNode {  }","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114}],"decl_id":null,"docs":" Represents an internal parent node.","sig":null,"attributes":[{"value":"/ Represents an internal parent node.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68112,"byte_end":68151,"line_start":31,"line_end":31,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68152,"byte_end":68155,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ For most applications, using this type should not be required. Allows read access to this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68156,"byte_end":68249,"line_start":33,"line_end":33,"column_start":1,"column_end":94}},{"value":"/ node's envelope and its children.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68250,"byte_end":68287,"line_start":34,"line_end":34,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68894,"byte_end":68901,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"is_leaf","qualname":"<RTreeNode<T>>::is_leaf","value":"pub fn is_leaf(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":69142,"byte_end":69150,"line_start":77,"line_end":77,"column_start":12,"column_end":20},"name":"children","qualname":"<ParentNode<T>>::children","value":"pub fn children(&Self) -> &[RTreeNode<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns this node's children\n","sig":null,"attributes":[{"value":"/ Returns this node's children","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":69098,"byte_end":69130,"line_start":76,"line_end":76,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":69289,"byte_end":69297,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"envelope","qualname":"<ParentNode<T>>::envelope","value":"pub fn envelope(&Self) -> T::Envelope","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest envelope that encompasses all children.\n","sig":null,"attributes":[{"value":"/ Returns the smallest envelope that encompasses all children.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":69213,"byte_end":69277,"line_start":81,"line_end":81,"column_start":5,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":644},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74090,"byte_end":74101,"line_start":79,"line_end":79,"column_start":11,"column_end":22},"name":"RTreeObject","qualname":"::object::RTreeObject","value":"RTreeObject","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646}],"decl_id":null,"docs":" An object that can be inserted into an r-tree.","sig":null,"attributes":[{"value":"/ An object that can be inserted into an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":71687,"byte_end":71737,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":71738,"byte_end":71741,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This trait must be implemented for any object that should be inserted into an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":71742,"byte_end":71831,"line_start":7,"line_end":7,"column_start":1,"column_end":90}},{"value":"/ Some simple objects that already implement this trait can be found in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":71832,"byte_end":71909,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ [primitives](primitives/index.html) module.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":71910,"byte_end":71957,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":71958,"byte_end":71961,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The only property required of such an object is its [envelope](traits.Envelope.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":71962,"byte_end":72051,"line_start":11,"line_end":11,"column_start":1,"column_end":90}},{"value":"/ Most simply, this method should return the [axis aligned bounding box](struct.AABB.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72052,"byte_end":72144,"line_start":12,"line_end":12,"column_start":1,"column_end":93}},{"value":"/ of the object, other envelope types may be supported in the future.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72145,"byte_end":72216,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72217,"byte_end":72220,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ *Note*: It is a logic error if an objects envelope changes after insertion into","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72221,"byte_end":72304,"line_start":15,"line_end":15,"column_start":1,"column_end":84}},{"value":"/ an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72305,"byte_end":72319,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72320,"byte_end":72323,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Type parameters","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72324,"byte_end":72345,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/ `Envelope`: The objects envelope type. At the moment, only [AABB](struct.AABB.html) is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72346,"byte_end":72436,"line_start":19,"line_end":19,"column_start":1,"column_end":91}},{"value":"/ feasible.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72437,"byte_end":72450,"line_start":20,"line_end":20,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72451,"byte_end":72454,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example implementation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72455,"byte_end":72483,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72484,"byte_end":72491,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rstar::{RTreeObject, AABB};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72492,"byte_end":72527,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72528,"byte_end":72531,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ struct Player","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72532,"byte_end":72549,"line_start":26,"line_end":26,"column_start":1,"column_end":18}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72550,"byte_end":72555,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/     name: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72556,"byte_end":72577,"line_start":28,"line_end":28,"column_start":1,"column_end":22}},{"value":"/     x_coordinate: f64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72578,"byte_end":72604,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/     y_coordinate: f64","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72605,"byte_end":72630,"line_start":30,"line_end":30,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72631,"byte_end":72636,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72637,"byte_end":72640,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ impl RTreeObject for Player","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72641,"byte_end":72672,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72673,"byte_end":72678,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/     type Envelope = AABB<[f64; 2]>;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72679,"byte_end":72718,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72719,"byte_end":72722,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     fn envelope(&self) -> Self::Envelope","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72723,"byte_end":72767,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72768,"byte_end":72777,"line_start":38,"line_end":38,"column_start":1,"column_end":10}},{"value":"/         AABB::from_point([self.x_coordinate, self.y_coordinate])","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72778,"byte_end":72846,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72847,"byte_end":72856,"line_start":40,"line_end":40,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72857,"byte_end":72862,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72863,"byte_end":72866,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ fn main()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72867,"byte_end":72880,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72881,"byte_end":72886,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/     use rstar::{RTree, AABB};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72887,"byte_end":72920,"line_start":45,"line_end":45,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72921,"byte_end":72924,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/     let mut tree = RTree::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72925,"byte_end":72961,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72962,"byte_end":72965,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     // Insert a few players...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":72966,"byte_end":73000,"line_start":49,"line_end":49,"column_start":1,"column_end":35}},{"value":"/     tree.insert(Player {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73001,"byte_end":73029,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/         name: \"Forlorn Freeman\".into(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73030,"byte_end":73073,"line_start":51,"line_end":51,"column_start":1,"column_end":44}},{"value":"/         x_coordinate: 1.,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73074,"byte_end":73103,"line_start":52,"line_end":52,"column_start":1,"column_end":30}},{"value":"/         y_coordinate: 0.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73104,"byte_end":73132,"line_start":53,"line_end":53,"column_start":1,"column_end":29}},{"value":"/     });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73133,"byte_end":73144,"line_start":54,"line_end":54,"column_start":1,"column_end":12}},{"value":"/     tree.insert(Player {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73145,"byte_end":73173,"line_start":55,"line_end":55,"column_start":1,"column_end":29}},{"value":"/         name: \"Sarah Croft\".into(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73174,"byte_end":73213,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/         x_coordinate: 0.5,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73214,"byte_end":73244,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/         y_coordinate: 0.5,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73245,"byte_end":73275,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73276,"byte_end":73287,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/     tree.insert(Player {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73288,"byte_end":73316,"line_start":60,"line_end":60,"column_start":1,"column_end":29}},{"value":"/         name: \"Geralt of Trivia\".into(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73317,"byte_end":73361,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"/         x_coordinate: 0.,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73362,"byte_end":73391,"line_start":62,"line_end":62,"column_start":1,"column_end":30}},{"value":"/         y_coordinate: 2.,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73392,"byte_end":73421,"line_start":63,"line_end":63,"column_start":1,"column_end":30}},{"value":"/     });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73422,"byte_end":73433,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73434,"byte_end":73437,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/     // Now we are ready to ask some questions!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73438,"byte_end":73488,"line_start":66,"line_end":66,"column_start":1,"column_end":51}},{"value":"/     let envelope = AABB::from_point([0.5, 0.5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73489,"byte_end":73541,"line_start":67,"line_end":67,"column_start":1,"column_end":53}},{"value":"/     let likely_sarah_croft = tree.locate_in_envelope(&envelope).next();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73542,"byte_end":73617,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/     println!(\"Found {:?} lurking around at (0.5, 0.5)!\", likely_sarah_croft.unwrap().name);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73618,"byte_end":73713,"line_start":69,"line_end":69,"column_start":1,"column_end":96}},{"value":"/     # assert!(likely_sarah_croft.is_some());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73714,"byte_end":73762,"line_start":70,"line_end":70,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73763,"byte_end":73766,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/     let unit_square = AABB::from_corners([-1.0, -1.0], [1., 1.]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73767,"byte_end":73836,"line_start":72,"line_end":72,"column_start":1,"column_end":70}},{"value":"/     for player in tree.locate_in_envelope(&unit_square) {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73837,"byte_end":73898,"line_start":73,"line_end":73,"column_start":1,"column_end":62}},{"value":"/        println!(\"And here is {:?} spelunking in the unit square.\", player.name);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73899,"byte_end":73983,"line_start":74,"line_end":74,"column_start":1,"column_end":85}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73984,"byte_end":73993,"line_start":75,"line_end":75,"column_start":1,"column_end":10}},{"value":"/     # assert_eq!(tree.locate_in_envelope(&unit_square).count(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":73994,"byte_end":74065,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74066,"byte_end":74071,"line_start":77,"line_end":77,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74072,"byte_end":74079,"line_start":78,"line_end":78,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":645},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74268,"byte_end":74276,"line_start":82,"line_end":82,"column_start":10,"column_end":18},"name":"Envelope","qualname":"::object::RTreeObject::Envelope","value":"type Envelope: Envelope;","parent":{"krate":0,"index":644},"children":[],"decl_id":null,"docs":" The object's envelope type. Usually, [AABB](struct.AABB.html) will be the right choice.\n This type also defines the objects dimensionality.\n","sig":null,"attributes":[{"value":"/ The object's envelope type. Usually, [AABB](struct.AABB.html) will be the right choice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74108,"byte_end":74199,"line_start":80,"line_end":80,"column_start":5,"column_end":96}},{"value":"/ This type also defines the objects dimensionality.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74204,"byte_end":74258,"line_start":81,"line_end":81,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74437,"byte_end":74445,"line_start":87,"line_end":87,"column_start":8,"column_end":16},"name":"envelope","qualname":"::object::RTreeObject::envelope","value":"pub fn envelope(&Self) -> Self::Envelope","parent":{"krate":0,"index":644},"children":[],"decl_id":null,"docs":" Returns the object's envelope.","sig":null,"attributes":[{"value":"/ Returns the object's envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74293,"byte_end":74327,"line_start":84,"line_end":84,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74332,"byte_end":74335,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Usually, this will return the object's [axis aligned bounding box](struct.AABB.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74340,"byte_end":74429,"line_start":86,"line_end":86,"column_start":5,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":647},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76534,"byte_end":76547,"line_start":152,"line_end":152,"column_start":11,"column_end":24},"name":"PointDistance","qualname":"::object::PointDistance","value":"PointDistance: RTreeObject","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650}],"decl_id":null,"docs":" Defines objects which can calculate their minimal distance to a point.","sig":null,"attributes":[{"value":"/ Defines objects which can calculate their minimal distance to a point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74475,"byte_end":74549,"line_start":90,"line_end":90,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74550,"byte_end":74553,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This trait is most notably necessary for support of [nearest_neighbor](struct.RTree#method.nearest_neighbor)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74554,"byte_end":74666,"line_start":92,"line_end":92,"column_start":1,"column_end":113}},{"value":"/ queries.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74667,"byte_end":74679,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74680,"byte_end":74683,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74684,"byte_end":74697,"line_start":95,"line_end":95,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74698,"byte_end":74705,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ use rstar::{RTreeObject, PointDistance, AABB};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74706,"byte_end":74756,"line_start":97,"line_end":97,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74757,"byte_end":74760,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ struct Circle","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74761,"byte_end":74778,"line_start":99,"line_end":99,"column_start":1,"column_end":18}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74779,"byte_end":74784,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/     origin: [f32; 2],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74785,"byte_end":74810,"line_start":101,"line_end":101,"column_start":1,"column_end":26}},{"value":"/     radius: f32,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74811,"byte_end":74831,"line_start":102,"line_end":102,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74832,"byte_end":74837,"line_start":103,"line_end":103,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74838,"byte_end":74841,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ impl RTreeObject for Circle {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74842,"byte_end":74875,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/     type Envelope = AABB<[f32; 2]>;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74876,"byte_end":74915,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74916,"byte_end":74919,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/     fn envelope(&self) -> Self::Envelope {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74920,"byte_end":74966,"line_start":108,"line_end":108,"column_start":1,"column_end":47}},{"value":"/         let corner_1 = [self.origin[0] - self.radius, self.origin[1] - self.radius];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":74967,"byte_end":75055,"line_start":109,"line_end":109,"column_start":1,"column_end":89}},{"value":"/         let corner_2 = [self.origin[0] + self.radius, self.origin[1] + self.radius];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75056,"byte_end":75144,"line_start":110,"line_end":110,"column_start":1,"column_end":89}},{"value":"/         AABB::from_corners(corner_1, corner_2)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75145,"byte_end":75195,"line_start":111,"line_end":111,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75196,"byte_end":75205,"line_start":112,"line_end":112,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75206,"byte_end":75211,"line_start":113,"line_end":113,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75212,"byte_end":75215,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ impl PointDistance for Circle","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75216,"byte_end":75249,"line_start":115,"line_end":115,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75250,"byte_end":75255,"line_start":116,"line_end":116,"column_start":1,"column_end":6}},{"value":"/     fn distance_2(&self, point: &[f32; 2]) -> f32","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75256,"byte_end":75309,"line_start":117,"line_end":117,"column_start":1,"column_end":54}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75310,"byte_end":75319,"line_start":118,"line_end":118,"column_start":1,"column_end":10}},{"value":"/         let d_x = self.origin[0] - point[0];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75320,"byte_end":75368,"line_start":119,"line_end":119,"column_start":1,"column_end":49}},{"value":"/         let d_y = self.origin[1] - point[1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75369,"byte_end":75417,"line_start":120,"line_end":120,"column_start":1,"column_end":49}},{"value":"/         let distance_to_origin = (d_x * d_x + d_y * d_y).sqrt();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75418,"byte_end":75486,"line_start":121,"line_end":121,"column_start":1,"column_end":69}},{"value":"/         let distance_to_ring = distance_to_origin - self.radius;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75487,"byte_end":75555,"line_start":122,"line_end":122,"column_start":1,"column_end":69}},{"value":"/         let distance_to_circle = f32::max(0.0, distance_to_ring);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75556,"byte_end":75625,"line_start":123,"line_end":123,"column_start":1,"column_end":70}},{"value":"/         // We must return the squared distance!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75626,"byte_end":75677,"line_start":124,"line_end":124,"column_start":1,"column_end":52}},{"value":"/         distance_to_circle * distance_to_circle","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75678,"byte_end":75729,"line_start":125,"line_end":125,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75730,"byte_end":75739,"line_start":126,"line_end":126,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75740,"byte_end":75743,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/     // This implementation is not required but more efficient since it","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75744,"byte_end":75818,"line_start":128,"line_end":128,"column_start":1,"column_end":75}},{"value":"/     // omits the calculation of a square root","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75819,"byte_end":75868,"line_start":129,"line_end":129,"column_start":1,"column_end":50}},{"value":"/     fn contains_point(&self, point: &[f32; 2]) -> bool","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75869,"byte_end":75927,"line_start":130,"line_end":130,"column_start":1,"column_end":59}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75928,"byte_end":75937,"line_start":131,"line_end":131,"column_start":1,"column_end":10}},{"value":"/         let d_x = self.origin[0] - point[0];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75938,"byte_end":75986,"line_start":132,"line_end":132,"column_start":1,"column_end":49}},{"value":"/         let d_y = self.origin[1] - point[1];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":75987,"byte_end":76035,"line_start":133,"line_end":133,"column_start":1,"column_end":49}},{"value":"/         let distance_to_origin_2 = (d_x * d_x + d_y * d_y);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76036,"byte_end":76099,"line_start":134,"line_end":134,"column_start":1,"column_end":64}},{"value":"/         let radius_2 = self.radius * self.radius;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76100,"byte_end":76153,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/         distance_to_origin_2 <= radius_2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76154,"byte_end":76198,"line_start":136,"line_end":136,"column_start":1,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76199,"byte_end":76208,"line_start":137,"line_end":137,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76209,"byte_end":76214,"line_start":138,"line_end":138,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76215,"byte_end":76218,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76219,"byte_end":76222,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76223,"byte_end":76238,"line_start":141,"line_end":141,"column_start":1,"column_end":16}},{"value":"/     let circle = Circle {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76239,"byte_end":76268,"line_start":142,"line_end":142,"column_start":1,"column_end":30}},{"value":"/         origin: [1.0, 0.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76269,"byte_end":76300,"line_start":143,"line_end":143,"column_start":1,"column_end":32}},{"value":"/         radius: 1.0,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76301,"byte_end":76325,"line_start":144,"line_end":144,"column_start":1,"column_end":25}},{"value":"/     };","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76326,"byte_end":76336,"line_start":145,"line_end":145,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76337,"byte_end":76340,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(circle.distance_2(&[-1.0, 0.0]), 1.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76341,"byte_end":76398,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/     assert_eq!(circle.distance_2(&[-2.0, 0.0]), 4.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76399,"byte_end":76456,"line_start":148,"line_end":148,"column_start":1,"column_end":58}},{"value":"/     assert!(circle.contains_point(&[1.0, 0.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76457,"byte_end":76509,"line_start":149,"line_end":149,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76510,"byte_end":76515,"line_start":150,"line_end":150,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76516,"byte_end":76523,"line_start":151,"line_end":151,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76642,"byte_end":76652,"line_start":154,"line_end":154,"column_start":8,"column_end":18},"name":"distance_2","qualname":"::object::PointDistance::distance_2","value":"pub fn distance_2(&Self, &<Self::Envelope as Envelope>::Point)\n-> <<Self::Envelope as Envelope>::Point as Point>::Scalar","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" Returns the squared euclidean distance of an object to a point.\n","sig":null,"attributes":[{"value":"/ Returns the squared euclidean distance of an object to a point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76567,"byte_end":76634,"line_start":153,"line_end":153,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77148,"byte_end":77162,"line_start":164,"line_end":164,"column_start":8,"column_end":22},"name":"contains_point","qualname":"::object::PointDistance::contains_point","value":"pub fn contains_point(&Self, &<Self::Envelope as Envelope>::Point) -> bool","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" Returns true if a point is contained within this object.","sig":null,"attributes":[{"value":"/ Returns true if a point is contained within this object.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76792,"byte_end":76852,"line_start":159,"line_end":159,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76857,"byte_end":76860,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ By default, any point returning a `distance_2` less than or equal to zero is considered to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76865,"byte_end":76962,"line_start":161,"line_end":161,"column_start":5,"column_end":102}},{"value":"/ contained within `self`. Changing this default behavior is advised if calculating the squared distance","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76967,"byte_end":77073,"line_start":162,"line_end":162,"column_start":5,"column_end":111}},{"value":"/ is more computational expensive a point containment check.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77078,"byte_end":77140,"line_start":163,"line_end":163,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77997,"byte_end":78024,"line_start":181,"line_end":181,"column_start":8,"column_end":35},"name":"distance_2_if_less_or_equal","qualname":"::object::PointDistance::distance_2_if_less_or_equal","value":"pub fn distance_2_if_less_or_equal(&Self,\n&<Self::Envelope as Envelope>::Point,\n<<Self::Envelope as Envelope>::Point as Point>::Scalar)\n-> Option<<<Self::Envelope as Envelope>::Point as Point>::Scalar>","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" Returns the squared distance to this object or `None` if the distance\n is larger than a given maximum value.","sig":null,"attributes":[{"value":"/ Returns the squared distance to this object or `None` if the distance","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77289,"byte_end":77362,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ is larger than a given maximum value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77367,"byte_end":77408,"line_start":169,"line_end":169,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77413,"byte_end":77416,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Some algorithms do need to know an object's distance only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77421,"byte_end":77482,"line_start":171,"line_end":171,"column_start":5,"column_end":66}},{"value":"/ if it is less than or equal to a maximum value. In these cases, it may be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77487,"byte_end":77564,"line_start":172,"line_end":172,"column_start":5,"column_end":82}},{"value":"/ faster to calculate a lower bound of the distance first and returning","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77569,"byte_end":77642,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ early if the object cannot be closer than the given maximum.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77647,"byte_end":77711,"line_start":174,"line_end":174,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77716,"byte_end":77719,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The provided default implementation will use the distance to the object's","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77724,"byte_end":77801,"line_start":176,"line_end":176,"column_start":5,"column_end":82}},{"value":"/ envelope as a lower bound.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77806,"byte_end":77836,"line_start":177,"line_end":177,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77841,"byte_end":77844,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ If performance is critical and the object's distance calculation is fast,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77849,"byte_end":77926,"line_start":179,"line_end":179,"column_start":5,"column_end":82}},{"value":"/ it may be beneficial to overwrite this implementation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":77931,"byte_end":77989,"line_start":180,"line_end":180,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":677},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80775,"byte_end":80786,"line_start":37,"line_end":37,"column_start":11,"column_end":22},"name":"RTreeParams","qualname":"::params::RTreeParams","value":"RTreeParams: Send + Sync","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681}],"decl_id":null,"docs":" Defines static parameters for an r-tree.","sig":null,"attributes":[{"value":"/ Defines static parameters for an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79489,"byte_end":79533,"line_start":4,"line_end":4,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79534,"byte_end":79537,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Internally, an r-tree contains several nodes, similar to a b-tree. These parameters change","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79538,"byte_end":79632,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ the size of these nodes and can be used to fine tune the tree's performance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79633,"byte_end":79713,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79714,"byte_end":79717,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79718,"byte_end":79731,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79732,"byte_end":79739,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use rstar::{RTreeParams, RTree, RStarInsertionStrategy};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79740,"byte_end":79800,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79801,"byte_end":79804,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ // This example uses an rtree with larger internal nodes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79805,"byte_end":79866,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/ struct LargeNodeParameters;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79867,"byte_end":79898,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79899,"byte_end":79902,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ impl RTreeParams for LargeNodeParameters","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79903,"byte_end":79947,"line_start":16,"line_end":16,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79948,"byte_end":79953,"line_start":17,"line_end":17,"column_start":1,"column_end":6}},{"value":"/     const MIN_SIZE: usize = 10;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79954,"byte_end":79989,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/     const MAX_SIZE: usize = 30;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":79990,"byte_end":80025,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/     const REINSERTION_COUNT: usize = 5;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80026,"byte_end":80069,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/     type DefaultInsertionStrategy = RStarInsertionStrategy;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80070,"byte_end":80133,"line_start":21,"line_end":21,"column_start":1,"column_end":64}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80134,"byte_end":80139,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80140,"byte_end":80143,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Optional but helpful: Define a type alias for the new r-tree","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80144,"byte_end":80211,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ type LargeNodeRTree<T> = RTree<T, LargeNodeParameters>;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80212,"byte_end":80271,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80272,"byte_end":80275,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80276,"byte_end":80293,"line_start":27,"line_end":27,"column_start":1,"column_end":18}},{"value":"/ // The only difference from now on is the usage of \"new_with_params\" instead of \"new\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80294,"byte_end":80383,"line_start":28,"line_end":28,"column_start":1,"column_end":90}},{"value":"/ let mut large_node_tree: LargeNodeRTree<_> = RTree::new_with_params();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80384,"byte_end":80458,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ // Using the r-tree should allow inference for the point type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80459,"byte_end":80524,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/ large_node_tree.insert([1.0, -1.0f32]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80525,"byte_end":80568,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/ // There is also a bulk load method with parameters:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80569,"byte_end":80625,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/ # let some_elements = vec![[0.0, 0.0]];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80626,"byte_end":80669,"line_start":33,"line_end":33,"column_start":1,"column_end":44}},{"value":"/ let tree: LargeNodeRTree<_> = RTree::bulk_load_with_params(some_elements);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80670,"byte_end":80748,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80749,"byte_end":80756,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80757,"byte_end":80764,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":678},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81113,"byte_end":81121,"line_start":42,"line_end":42,"column_start":11,"column_end":19},"name":"MIN_SIZE","qualname":"::params::RTreeParams::MIN_SIZE","value":"usize","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" The minimum size of an internal node. Must be at most half as large as `MAX_SIZE`.\n Choosing a value around one half or one third of `MAX_SIZE` is recommended. Higher\n values should yield slightly better tree quality while lower values may benefit\n insertion performance.\n","sig":null,"attributes":[{"value":"/ The minimum size of an internal node. Must be at most half as large as `MAX_SIZE`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80806,"byte_end":80892,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ Choosing a value around one half or one third of `MAX_SIZE` is recommended. Higher","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80897,"byte_end":80983,"line_start":39,"line_end":39,"column_start":5,"column_end":91}},{"value":"/ values should yield slightly better tree quality while lower values may benefit","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80988,"byte_end":81071,"line_start":40,"line_end":40,"column_start":5,"column_end":88}},{"value":"/ insertion performance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81076,"byte_end":81102,"line_start":41,"line_end":41,"column_start":5,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":679},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81281,"byte_end":81289,"line_start":46,"line_end":46,"column_start":11,"column_end":19},"name":"MAX_SIZE","qualname":"::params::RTreeParams::MAX_SIZE","value":"usize","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" The maximum size of an internal node. Larger values will improve insertion performance\n but increase the average query time.\n","sig":null,"attributes":[{"value":"/ The maximum size of an internal node. Larger values will improve insertion performance","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81135,"byte_end":81225,"line_start":44,"line_end":44,"column_start":5,"column_end":95}},{"value":"/ but increase the average query time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81230,"byte_end":81270,"line_start":45,"line_end":45,"column_start":5,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":680},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81556,"byte_end":81573,"line_start":51,"line_end":51,"column_start":11,"column_end":28},"name":"REINSERTION_COUNT","qualname":"::params::RTreeParams::REINSERTION_COUNT","value":"usize","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" The number of nodes that the insertion strategy tries to reinsert sometimes to\n maintain a good tree quality. Must be smaller than `MAX_SIZE` - `MIN_SIZE`.\n Larger values will improve query times but increase insertion time.\n","sig":null,"attributes":[{"value":"/ The number of nodes that the insertion strategy tries to reinsert sometimes to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81303,"byte_end":81385,"line_start":48,"line_end":48,"column_start":5,"column_end":87}},{"value":"/ maintain a good tree quality. Must be smaller than `MAX_SIZE` - `MIN_SIZE`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81390,"byte_end":81469,"line_start":49,"line_end":49,"column_start":5,"column_end":84}},{"value":"/ Larger values will improve query times but increase insertion time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81474,"byte_end":81545,"line_start":50,"line_end":50,"column_start":5,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":681},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81693,"byte_end":81717,"line_start":54,"line_end":54,"column_start":10,"column_end":34},"name":"DefaultInsertionStrategy","qualname":"::params::RTreeParams::DefaultInsertionStrategy","value":"type DefaultInsertionStrategy: InsertionStrategy;","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" The insertion strategy which is used when calling [insert](struct.RTree.html#method.insert).\n","sig":null,"attributes":[{"value":"/ The insertion strategy which is used when calling [insert](struct.RTree.html#method.insert).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81587,"byte_end":81683,"line_start":53,"line_end":53,"column_start":5,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":1121},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81875,"byte_end":81888,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"DefaultParams","qualname":"::params::DefaultParams","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default parameters used when creating an r-tree without specific parameters.\n","sig":null,"attributes":[{"value":"/ The default parameters used when creating an r-tree without specific parameters.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81741,"byte_end":81825,"line_start":57,"line_end":57,"column_start":1,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":687},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82796,"byte_end":82813,"line_start":80,"line_end":80,"column_start":11,"column_end":28},"name":"InsertionStrategy","qualname":"::params::InsertionStrategy","value":"InsertionStrategy","parent":null,"children":[{"krate":0,"index":688}],"decl_id":null,"docs":" Defines how points are inserted into an r-tree.","sig":null,"attributes":[{"value":"/ Defines how points are inserted into an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82093,"byte_end":82144,"line_start":68,"line_end":68,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82145,"byte_end":82148,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Different strategies try to minimize both _insertion time_ (how long does it take to add a new","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82149,"byte_end":82247,"line_start":70,"line_end":70,"column_start":1,"column_end":99}},{"value":"/ object into the tree?) and _querying time_ (how long does an average nearest neighbor query","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82248,"byte_end":82343,"line_start":71,"line_end":71,"column_start":1,"column_end":96}},{"value":"/ take?).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82344,"byte_end":82355,"line_start":72,"line_end":72,"column_start":1,"column_end":12}},{"value":"/ Currently, only one insertion strategy is implemented: R* (R-star) insertion. R* insertion","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82356,"byte_end":82450,"line_start":73,"line_end":73,"column_start":1,"column_end":95}},{"value":"/ tries to minimize querying performance while yielding reasonable insertion times, making it a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82451,"byte_end":82548,"line_start":74,"line_end":74,"column_start":1,"column_end":98}},{"value":"/ good default strategy. More strategies might be implemented in the future.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82549,"byte_end":82627,"line_start":75,"line_end":75,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82628,"byte_end":82631,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Only calls to [insert](struct.RTree.html#method.insert) are affected by this strategy.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82632,"byte_end":82722,"line_start":77,"line_end":77,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82723,"byte_end":82726,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ This trait is not meant to be implemented by the user.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82727,"byte_end":82785,"line_start":79,"line_end":79,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":82842,"byte_end":82848,"line_start":82,"line_end":82,"column_start":8,"column_end":14},"name":"insert","qualname":"::params::InsertionStrategy::insert","value":"pub fn insert<T, Params>(&mut RTree<T, Params>, T) where Params: RTreeParams,\nT: RTreeObject","parent":{"krate":0,"index":687},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":711},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86743,"byte_end":86751,"line_start":99,"line_end":99,"column_start":11,"column_end":19},"name":"RTreeNum","qualname":"::point::RTreeNum","value":"RTreeNum: Bounded + Num + Clone + Copy + Signed + PartialOrd + Debug","parent":null,"children":[],"decl_id":null,"docs":" Defines a number type that is compatible with rstar.","sig":null,"attributes":[{"value":"/ Defines a number type that is compatible with rstar.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83775,"byte_end":83831,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83832,"byte_end":83835,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ rstar works out of the box with the following standard library types:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83836,"byte_end":83909,"line_start":6,"line_end":6,"column_start":1,"column_end":74}},{"value":"/  - i32","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83910,"byte_end":83920,"line_start":7,"line_end":7,"column_start":1,"column_end":11}},{"value":"/  - i64","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83921,"byte_end":83931,"line_start":8,"line_end":8,"column_start":1,"column_end":11}},{"value":"/  - f32","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83932,"byte_end":83942,"line_start":9,"line_end":9,"column_start":1,"column_end":11}},{"value":"/  - f64","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83943,"byte_end":83953,"line_start":10,"line_end":10,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83954,"byte_end":83957,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type cannot be implemented directly. Instead, it is just required to implement","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":83958,"byte_end":84045,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/ all required traits from the `num_traits` crate.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84046,"byte_end":84098,"line_start":13,"line_end":13,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84099,"byte_end":84102,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84103,"byte_end":84116,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84117,"byte_end":84124,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # extern crate num_traits;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84125,"byte_end":84155,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"/ use num_traits::{Bounded, Num, Signed};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84156,"byte_end":84199,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84200,"byte_end":84203,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, Copy, PartialEq, PartialOrd, Debug)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84204,"byte_end":84260,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/ struct MyFancyNumberType(f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84261,"byte_end":84295,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84296,"byte_end":84299,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ impl Bounded for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84300,"byte_end":84340,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/   // ... details hidden ...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84341,"byte_end":84372,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/ # fn min_value() -> Self { MyFancyNumberType(Bounded::min_value()) }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84373,"byte_end":84445,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84446,"byte_end":84451,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/ # fn max_value() -> Self { MyFancyNumberType(Bounded::max_value()) }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84452,"byte_end":84524,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84525,"byte_end":84530,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84531,"byte_end":84534,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ impl Signed for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84535,"byte_end":84574,"line_start":30,"line_end":30,"column_start":1,"column_end":40}},{"value":"/   // ... details hidden ...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84575,"byte_end":84606,"line_start":31,"line_end":31,"column_start":1,"column_end":32}},{"value":"/ # fn abs(&self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84607,"byte_end":84655,"line_start":32,"line_end":32,"column_start":1,"column_end":49}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84656,"byte_end":84661,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ # fn abs_sub(&self, other: &Self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84662,"byte_end":84728,"line_start":34,"line_end":34,"column_start":1,"column_end":67}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84729,"byte_end":84734,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ # fn signum(&self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84735,"byte_end":84786,"line_start":36,"line_end":36,"column_start":1,"column_end":52}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84787,"byte_end":84792,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ # fn is_positive(&self) -> bool { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84793,"byte_end":84849,"line_start":38,"line_end":38,"column_start":1,"column_end":57}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84850,"byte_end":84855,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ # fn is_negative(&self) -> bool { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84856,"byte_end":84912,"line_start":40,"line_end":40,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84913,"byte_end":84918,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84919,"byte_end":84922,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ impl Num for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84923,"byte_end":84959,"line_start":43,"line_end":43,"column_start":1,"column_end":37}},{"value":"/   // ... details hidden ...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84960,"byte_end":84991,"line_start":44,"line_end":44,"column_start":1,"column_end":32}},{"value":"/ # type FromStrRadixErr = num_traits::ParseFloatError;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":84992,"byte_end":85049,"line_start":45,"line_end":45,"column_start":1,"column_end":58}},{"value":"/ # fn from_str_radix(str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr> { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85050,"byte_end":85156,"line_start":46,"line_end":46,"column_start":1,"column_end":107}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85157,"byte_end":85162,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85163,"byte_end":85166,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ // There's a lot of traits that are still missing to make the above code compile,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85167,"byte_end":85252,"line_start":49,"line_end":49,"column_start":1,"column_end":86}},{"value":"/ // let's assume they are implemented. MyFancyNumberType type now readily implements","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85253,"byte_end":85340,"line_start":50,"line_end":50,"column_start":1,"column_end":88}},{"value":"/ // RTreeNum and can be used with r-trees:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85341,"byte_end":85386,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ # fn main() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85387,"byte_end":85404,"line_start":52,"line_end":52,"column_start":1,"column_end":18}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85405,"byte_end":85426,"line_start":53,"line_end":53,"column_start":1,"column_end":22}},{"value":"/ let mut rtree = RTree::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85427,"byte_end":85460,"line_start":54,"line_end":54,"column_start":1,"column_end":34}},{"value":"/ rtree.insert([MyFancyNumberType(0.0), MyFancyNumberType(0.0)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85461,"byte_end":85528,"line_start":55,"line_end":55,"column_start":1,"column_end":68}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85529,"byte_end":85536,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85537,"byte_end":85540,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # impl num_traits::Zero for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85541,"byte_end":85592,"line_start":58,"line_end":58,"column_start":1,"column_end":52}},{"value":"/ #   fn zero() -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85593,"byte_end":85639,"line_start":59,"line_end":59,"column_start":1,"column_end":47}},{"value":"/ #   fn is_zero(&self) -> bool { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85640,"byte_end":85694,"line_start":60,"line_end":60,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85695,"byte_end":85702,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85703,"byte_end":85708,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/ # impl num_traits::One for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85709,"byte_end":85759,"line_start":63,"line_end":63,"column_start":1,"column_end":51}},{"value":"/ #   fn one() -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85760,"byte_end":85805,"line_start":64,"line_end":64,"column_start":1,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85806,"byte_end":85813,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85814,"byte_end":85819,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ # impl std::ops::Mul for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85820,"byte_end":85868,"line_start":67,"line_end":67,"column_start":1,"column_end":49}},{"value":"/ #   type Output = Self;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85869,"byte_end":85896,"line_start":68,"line_end":68,"column_start":1,"column_end":28}},{"value":"/ #   fn mul(self, rhs: Self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85897,"byte_end":85957,"line_start":69,"line_end":69,"column_start":1,"column_end":61}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85958,"byte_end":85965,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85966,"byte_end":85971,"line_start":71,"line_end":71,"column_start":1,"column_end":6}},{"value":"/ # impl std::ops::Add for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":85972,"byte_end":86020,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ #   type Output = Self;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86021,"byte_end":86048,"line_start":73,"line_end":73,"column_start":1,"column_end":28}},{"value":"/ #   fn add(self, rhs: Self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86049,"byte_end":86109,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86110,"byte_end":86117,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86118,"byte_end":86123,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/ # impl std::ops::Sub for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86124,"byte_end":86172,"line_start":77,"line_end":77,"column_start":1,"column_end":49}},{"value":"/ #   type Output = Self;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86173,"byte_end":86200,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/ #   fn sub(self, rhs: Self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86201,"byte_end":86261,"line_start":79,"line_end":79,"column_start":1,"column_end":61}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86262,"byte_end":86269,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86270,"byte_end":86275,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/ # impl std::ops::Div for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86276,"byte_end":86324,"line_start":82,"line_end":82,"column_start":1,"column_end":49}},{"value":"/ #   type Output = Self;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86325,"byte_end":86352,"line_start":83,"line_end":83,"column_start":1,"column_end":28}},{"value":"/ #   fn div(self, rhs: Self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86353,"byte_end":86413,"line_start":84,"line_end":84,"column_start":1,"column_end":61}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86414,"byte_end":86421,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86422,"byte_end":86427,"line_start":86,"line_end":86,"column_start":1,"column_end":6}},{"value":"/ # impl std::ops::Rem for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86428,"byte_end":86476,"line_start":87,"line_end":87,"column_start":1,"column_end":49}},{"value":"/ #   type Output = Self;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86477,"byte_end":86504,"line_start":88,"line_end":88,"column_start":1,"column_end":28}},{"value":"/ #   fn rem(self, rhs: Self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86505,"byte_end":86565,"line_start":89,"line_end":89,"column_start":1,"column_end":61}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86566,"byte_end":86573,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86574,"byte_end":86579,"line_start":91,"line_end":91,"column_start":1,"column_end":6}},{"value":"/ # impl std::ops::Neg for MyFancyNumberType {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86580,"byte_end":86628,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"/ #   type Output = Self;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86629,"byte_end":86656,"line_start":93,"line_end":93,"column_start":1,"column_end":28}},{"value":"/ #   fn neg(self) -> Self { unimplemented!() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86657,"byte_end":86706,"line_start":94,"line_end":94,"column_start":1,"column_end":50}},{"value":"/ # }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86707,"byte_end":86714,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86715,"byte_end":86720,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86721,"byte_end":86728,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86729,"byte_end":86732,"line_start":98,"line_end":98,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":714},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88315,"byte_end":88320,"line_start":157,"line_end":157,"column_start":11,"column_end":16},"name":"Point","qualname":"::point::Point","value":"Point: Copy + Clone + PartialEq + Debug","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":720}],"decl_id":null,"docs":" Defines a point type that is compatible with rstar.","sig":null,"attributes":[{"value":"/ Defines a point type that is compatible with rstar.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86911,"byte_end":86966,"line_start":103,"line_end":103,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86967,"byte_end":86970,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This trait should be used for interoperability with other point types, not to define custom objects","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86971,"byte_end":87074,"line_start":105,"line_end":105,"column_start":1,"column_end":104}},{"value":"/ that can be inserted into r-trees. Use [`RTreeObject`](trait.RTreeObject.html) or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87075,"byte_end":87160,"line_start":106,"line_end":106,"column_start":1,"column_end":86}},{"value":"/ [`PointWithData`](primitives/struct.PointWithData.html) instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87161,"byte_end":87229,"line_start":107,"line_end":107,"column_start":1,"column_end":69}},{"value":"/ This trait defines points, not points with metadata.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87230,"byte_end":87286,"line_start":108,"line_end":108,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87287,"byte_end":87290,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ `Point` is implemented out of the box for arrays like `[f32; 2]` or `[f64; 7]` (up to dimension 9).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87291,"byte_end":87394,"line_start":110,"line_end":110,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87395,"byte_end":87398,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ # Implementation example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87399,"byte_end":87427,"line_start":112,"line_end":112,"column_start":1,"column_end":29}},{"value":"/ Supporting a custom point type might look like this:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87428,"byte_end":87484,"line_start":113,"line_end":113,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87485,"byte_end":87488,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87489,"byte_end":87496,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ use rstar::Point;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87497,"byte_end":87518,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87519,"byte_end":87522,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ #[derive(Copy, Clone, PartialEq, Debug)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87523,"byte_end":87567,"line_start":118,"line_end":118,"column_start":1,"column_end":45}},{"value":"/ struct IntegerPoint","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87568,"byte_end":87591,"line_start":119,"line_end":119,"column_start":1,"column_end":24}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87592,"byte_end":87597,"line_start":120,"line_end":120,"column_start":1,"column_end":6}},{"value":"/     x: i32,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87598,"byte_end":87613,"line_start":121,"line_end":121,"column_start":1,"column_end":16}},{"value":"/     y: i32","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87614,"byte_end":87628,"line_start":122,"line_end":122,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87629,"byte_end":87634,"line_start":123,"line_end":123,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87635,"byte_end":87638,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ impl Point for IntegerPoint","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87639,"byte_end":87670,"line_start":125,"line_end":125,"column_start":1,"column_end":32}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87671,"byte_end":87676,"line_start":126,"line_end":126,"column_start":1,"column_end":6}},{"value":"/   type Scalar = i32;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87677,"byte_end":87701,"line_start":127,"line_end":127,"column_start":1,"column_end":25}},{"value":"/   const DIMENSIONS: usize = 2;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87702,"byte_end":87736,"line_start":128,"line_end":128,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87737,"byte_end":87740,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/   fn generate(generator: impl Fn(usize) -> Self::Scalar) -> Self","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87741,"byte_end":87809,"line_start":130,"line_end":130,"column_start":1,"column_end":69}},{"value":"/   {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87810,"byte_end":87817,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/     IntegerPoint {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87818,"byte_end":87840,"line_start":132,"line_end":132,"column_start":1,"column_end":23}},{"value":"/       x: generator(0),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87841,"byte_end":87867,"line_start":133,"line_end":133,"column_start":1,"column_end":27}},{"value":"/       y: generator(1)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87868,"byte_end":87893,"line_start":134,"line_end":134,"column_start":1,"column_end":26}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87894,"byte_end":87903,"line_start":135,"line_end":135,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87904,"byte_end":87911,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87912,"byte_end":87915,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/   fn nth(&self, index: usize) -> Self::Scalar","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87916,"byte_end":87965,"line_start":138,"line_end":138,"column_start":1,"column_end":50}},{"value":"/   {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87966,"byte_end":87973,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/     match index {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87974,"byte_end":87995,"line_start":140,"line_end":140,"column_start":1,"column_end":22}},{"value":"/       0 => self.x,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":87996,"byte_end":88018,"line_start":141,"line_end":141,"column_start":1,"column_end":23}},{"value":"/       1 => self.y,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88019,"byte_end":88041,"line_start":142,"line_end":142,"column_start":1,"column_end":23}},{"value":"/       _ => unreachable!()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88042,"byte_end":88071,"line_start":143,"line_end":143,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88072,"byte_end":88081,"line_start":144,"line_end":144,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88082,"byte_end":88089,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88090,"byte_end":88093,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/   fn nth_mut(&mut self, index: usize) -> &mut Self::Scalar","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88094,"byte_end":88156,"line_start":147,"line_end":147,"column_start":1,"column_end":63}},{"value":"/   {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88157,"byte_end":88164,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/     match index {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88165,"byte_end":88186,"line_start":149,"line_end":149,"column_start":1,"column_end":22}},{"value":"/       0 => &mut self.x,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88187,"byte_end":88214,"line_start":150,"line_end":150,"column_start":1,"column_end":28}},{"value":"/       1 => &mut self.y,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88215,"byte_end":88242,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/       _ => unreachable!()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88243,"byte_end":88272,"line_start":152,"line_end":152,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88273,"byte_end":88282,"line_start":153,"line_end":153,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88283,"byte_end":88290,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88291,"byte_end":88296,"line_start":155,"line_end":155,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88297,"byte_end":88304,"line_start":156,"line_end":156,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":715},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88415,"byte_end":88421,"line_start":159,"line_end":159,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::point::Point::Scalar","value":"type Scalar: RTreeNum;","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" The number type used by this point type.\n","sig":null,"attributes":[{"value":"/ The number type used by this point type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88361,"byte_end":88405,"line_start":158,"line_end":158,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":716},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88497,"byte_end":88507,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"DIMENSIONS","qualname":"::point::Point::DIMENSIONS","value":"usize","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" The number of dimensions of this point type.\n","sig":null,"attributes":[{"value":"/ The number of dimensions of this point type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88438,"byte_end":88486,"line_start":161,"line_end":161,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88825,"byte_end":88833,"line_start":168,"line_end":168,"column_start":8,"column_end":16},"name":"generate","qualname":"::point::Point::generate","value":"pub fn generate<impl Fn(usize) -> Self::Scalar: Fn(usize) ->\nSelf::Scalar>(impl Fn(usize) -> Self::Scalar) -> Self","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Creates a new point value with given values for each dimension.","sig":null,"attributes":[{"value":"/ Creates a new point value with given values for each dimension.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88521,"byte_end":88588,"line_start":164,"line_end":164,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88593,"byte_end":88596,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The value that each dimension should be initialized with is given by the parameter `generator`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88601,"byte_end":88700,"line_start":166,"line_end":166,"column_start":5,"column_end":104}},{"value":"/ Calling `generator(n)` returns the value of dimension `n`, `n` will be in the range `0 .. Self::DIMENSIONS`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88705,"byte_end":88817,"line_start":167,"line_end":167,"column_start":5,"column_end":117}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":89057,"byte_end":89060,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"nth","qualname":"::point::Point::nth","value":"pub fn nth(&Self, usize) -> Self::Scalar","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Returns a single coordinate of this point.","sig":null,"attributes":[{"value":"/ Returns a single coordinate of this point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88891,"byte_end":88937,"line_start":170,"line_end":170,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88942,"byte_end":88945,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Returns the coordinate indicated by `index`. `index` is always smaller than `Self::DIMENSIONS`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88950,"byte_end":89049,"line_start":172,"line_end":172,"column_start":5,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":89155,"byte_end":89162,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"nth_mut","qualname":"::point::Point::nth_mut","value":"pub fn nth_mut(&mut Self, usize) -> &mut Self::Scalar","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Mutable variant of [nth](#methods.nth).\n","sig":null,"attributes":[{"value":"/ Mutable variant of [nth](#methods.nth).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":89104,"byte_end":89147,"line_start":175,"line_end":175,"column_start":5,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":758},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"primitives","qualname":"::primitives","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/mod.rs","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":801},{"krate":0,"index":830},{"krate":0,"index":872},{"krate":0,"index":875},{"krate":0,"index":878}],"decl_id":null,"docs":" Contains primitives ready for insertion into an r-tree.\n","sig":null,"attributes":[{"value":"/ Contains primitives ready for insertion into an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/mod.rs","byte_start":94257,"byte_end":94316,"line_start":1,"line_end":1,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1204},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95307,"byte_end":95311,"line_start":27,"line_end":27,"column_start":12,"column_end":16},"name":"Line","qualname":"::primitives::line::Line","value":"Line { from, to }","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1207}],"decl_id":null,"docs":" A line defined by a start and and end point.","sig":null,"attributes":[{"value":"/ A line defined by a start and and end point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94661,"byte_end":94709,"line_start":8,"line_end":8,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94710,"byte_end":94713,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This struct can be inserted directly into an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94714,"byte_end":94770,"line_start":10,"line_end":10,"column_start":1,"column_end":57}},{"value":"/ # Type parameters","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94771,"byte_end":94792,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"/ `P`: The line's [Point](../trait.Point.html) type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94793,"byte_end":94847,"line_start":12,"line_end":12,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94848,"byte_end":94851,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94852,"byte_end":94865,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94866,"byte_end":94873,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rstar::primitives::Line;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94874,"byte_end":94906,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ use rstar::{RTree, RTreeObject};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94907,"byte_end":94943,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94944,"byte_end":94947,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let line_1 = Line::new([0.0, 0.0], [1.0, 1.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":94948,"byte_end":94999,"line_start":19,"line_end":19,"column_start":1,"column_end":52}},{"value":"/ let line_2 = Line::new([0.0, 0.0], [-1.0, 1.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95000,"byte_end":95052,"line_start":20,"line_end":20,"column_start":1,"column_end":53}},{"value":"/ let tree = RTree::bulk_load(vec![line_1, line_2]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95053,"byte_end":95107,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95108,"byte_end":95111,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ assert!(tree.contains(&line_1));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95112,"byte_end":95148,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95149,"byte_end":95156,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":1206},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95376,"byte_end":95380,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"from","qualname":"::primitives::line::Line::from","value":"P","parent":{"krate":0,"index":1204},"children":[],"decl_id":null,"docs":" The line's start point\n","sig":null,"attributes":[{"value":"/ The line's start point","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95341,"byte_end":95367,"line_start":31,"line_end":31,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1207},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95423,"byte_end":95425,"line_start":34,"line_end":34,"column_start":9,"column_end":11},"name":"to","qualname":"::primitives::line::Line::to","value":"P","parent":{"krate":0,"index":1204},"children":[],"decl_id":null,"docs":" The line's end point.\n","sig":null,"attributes":[{"value":"/ The line's end point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95389,"byte_end":95414,"line_start":33,"line_end":33,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95529,"byte_end":95532,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Line<P>>::new","value":"pub fn new(P, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new line between two points.\n","sig":null,"attributes":[{"value":"/ Creates a new line between two points.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95475,"byte_end":95517,"line_start":41,"line_end":41,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96057,"byte_end":96065,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"length_2","qualname":"<Line<P>>::length_2","value":"pub fn length_2(&Self) -> P::Scalar","parent":null,"children":[],"decl_id":null,"docs":" Returns the squared length of this line.","sig":null,"attributes":[{"value":"/ Returns the squared length of this line.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95819,"byte_end":95863,"line_start":62,"line_end":62,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95868,"byte_end":95871,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95876,"byte_end":95889,"line_start":64,"line_end":64,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95894,"byte_end":95901,"line_start":65,"line_end":65,"column_start":5,"column_end":12}},{"value":"/ use rstar::primitives::Line;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95906,"byte_end":95938,"line_start":66,"line_end":66,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95943,"byte_end":95946,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ let line = Line::new([3, 3], [7, 6]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95951,"byte_end":95992,"line_start":68,"line_end":68,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(line.length_2(), 25);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95997,"byte_end":96033,"line_start":69,"line_end":69,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96038,"byte_end":96045,"line_start":70,"line_end":70,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96770,"byte_end":96783,"line_start":92,"line_end":92,"column_start":12,"column_end":25},"name":"nearest_point","qualname":"<Line<P>>::nearest_point","value":"pub fn nearest_point(&Self, &P) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest point on this line relative to a given point.","sig":null,"attributes":[{"value":"/ Returns the nearest point on this line relative to a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96347,"byte_end":96416,"line_start":81,"line_end":81,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96421,"byte_end":96424,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96429,"byte_end":96442,"line_start":83,"line_end":83,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96447,"byte_end":96454,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"/ use rstar::primitives::Line;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96459,"byte_end":96491,"line_start":85,"line_end":85,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96496,"byte_end":96499,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let line = Line::new([0.0, 0.0], [1., 1.]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96504,"byte_end":96551,"line_start":87,"line_end":87,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(line.nearest_point(&[0.0, 0.0]), [0.0, 0.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96556,"byte_end":96616,"line_start":88,"line_end":88,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(line.nearest_point(&[1.0, 0.0]), [0.5, 0.5]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96621,"byte_end":96681,"line_start":89,"line_end":89,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(line.nearest_point(&[10., 12.]), [1.0, 1.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96686,"byte_end":96746,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":96751,"byte_end":96758,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1233},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99448,"byte_end":99461,"line_start":29,"line_end":29,"column_start":12,"column_end":25},"name":"PointWithData","qualname":"::primitives::point_with_data::PointWithData","value":"PointWithData { data }","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237}],"decl_id":null,"docs":" A point with some associated data that can be inserted into an r-tree.","sig":null,"attributes":[{"value":"/ A point with some associated data that can be inserted into an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98277,"byte_end":98351,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98352,"byte_end":98355,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Often, adding metadata (like a database index) to a point is required before adding them","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98356,"byte_end":98448,"line_start":5,"line_end":5,"column_start":1,"column_end":93}},{"value":"/ into an r-tree. This struct removes some of the boilerplate required to do so.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98449,"byte_end":98531,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98532,"byte_end":98535,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98536,"byte_end":98549,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98550,"byte_end":98557,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ use rstar::{RTree, PointDistance};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98558,"byte_end":98596,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ use rstar::primitives::PointWithData;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98597,"byte_end":98638,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98639,"byte_end":98642,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ type RestaurantLocation = PointWithData<&'static str, [f64; 2]>;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98643,"byte_end":98711,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98712,"byte_end":98715,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let mut restaurants = RTree::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98716,"byte_end":98755,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"/ restaurants.insert(RestaurantLocation::new(\"Pete's Pizza Place\", [0.3, 0.2]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98756,"byte_end":98838,"line_start":16,"line_end":16,"column_start":1,"column_end":83}},{"value":"/ restaurants.insert(RestaurantLocation::new(\"The Great Steak\", [-0.8, 0.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98839,"byte_end":98919,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ restaurants.insert(RestaurantLocation::new(\"Fishy Fortune\", [0.2, -0.2]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98920,"byte_end":98998,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":98999,"byte_end":99002,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let my_location = [0.0, 0.0];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99003,"byte_end":99036,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99037,"byte_end":99040,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Now find the closest restaurant!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99041,"byte_end":99080,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/ let place = restaurants.nearest_neighbor(&my_location).unwrap();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99081,"byte_end":99149,"line_start":23,"line_end":23,"column_start":1,"column_end":69}},{"value":"/ println!(\"Let's go to {}\", place.data);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99150,"byte_end":99193,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"/ println!(\"It's really close, only {} miles\", place.distance_2(&my_location))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99194,"byte_end":99274,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99275,"byte_end":99282,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":1236},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99520,"byte_end":99524,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"name":"data","qualname":"::primitives::point_with_data::PointWithData::data","value":"T","parent":{"krate":0,"index":1233},"children":[],"decl_id":null,"docs":" Any data associated with a point.\n","sig":null,"attributes":[{"value":"/ Any data associated with a point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99474,"byte_end":99511,"line_start":30,"line_end":30,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99688,"byte_end":99691,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<PointWithData<T, P>>::new","value":"pub fn new(T, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `PointWithData` with the provided data.\n","sig":null,"attributes":[{"value":"/ Creates a new `PointWithData` with the provided data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99619,"byte_end":99676,"line_start":36,"line_end":36,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99816,"byte_end":99824,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"position","qualname":"<PointWithData<T, P>>::position","value":"pub fn position(&Self) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Returns this point's position.\n","sig":null,"attributes":[{"value":"/ Returns this point's position.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99770,"byte_end":99804,"line_start":41,"line_end":41,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1281},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100969,"byte_end":100978,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"Rectangle","qualname":"::primitives::rectangle::Rectangle","value":"Rectangle {  }","parent":null,"children":[{"krate":0,"index":1283}],"decl_id":null,"docs":" An n-dimensional rectangle defined by its two corners.","sig":null,"attributes":[{"value":"/ An n-dimensional rectangle defined by its two corners.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100468,"byte_end":100526,"line_start":6,"line_end":6,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100527,"byte_end":100530,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This rectangle can be directly inserted into an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100531,"byte_end":100590,"line_start":8,"line_end":8,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100591,"byte_end":100594,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ *Note*: Despite being called rectangle, this struct can be used","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100595,"byte_end":100662,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ with more than two dimensions by using an appropriate point type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100663,"byte_end":100732,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100733,"byte_end":100736,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Type parameters","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100737,"byte_end":100758,"line_start":13,"line_end":13,"column_start":1,"column_end":22}},{"value":"/ `P`: The rectangle's [Point](../trait.Point.html) type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":100759,"byte_end":100818,"line_start":14,"line_end":14,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101136,"byte_end":101148,"line_start":29,"line_end":29,"column_start":12,"column_end":24},"name":"from_corners","qualname":"<Rectangle<P>>::from_corners","value":"pub fn from_corners(P, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rectangle defined by two corners.\n","sig":null,"attributes":[{"value":"/ Creates a new rectangle defined by two corners.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101073,"byte_end":101124,"line_start":28,"line_end":28,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101355,"byte_end":101364,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"from_aabb","qualname":"<Rectangle<P>>::from_aabb","value":"pub fn from_aabb(AABB<P>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rectangle defined by it's [axis aligned bounding box](../struct.AABB.html).\n","sig":null,"attributes":[{"value":"/ Creates a new rectangle defined by it's [axis aligned bounding box](../struct.AABB.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101250,"byte_end":101343,"line_start":33,"line_end":33,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101608,"byte_end":101613,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"lower","qualname":"<Rectangle<P>>::lower","value":"pub fn lower(&Self) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the rectangle's lower corner.","sig":null,"attributes":[{"value":"/ Returns the rectangle's lower corner.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101428,"byte_end":101469,"line_start":38,"line_end":38,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101474,"byte_end":101477,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ This is the point contained within the rectangle with the smallest coordinate value in each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101482,"byte_end":101577,"line_start":40,"line_end":40,"column_start":5,"column_end":100}},{"value":"/ dimension.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101582,"byte_end":101596,"line_start":41,"line_end":41,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101839,"byte_end":101844,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"upper","qualname":"<Rectangle<P>>::upper","value":"pub fn upper(&Self) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the rectangle's upper corner.","sig":null,"attributes":[{"value":"/ Returns the rectangle's upper corner.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101665,"byte_end":101706,"line_start":46,"line_end":46,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101711,"byte_end":101714,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This is the point contained within the AABB with the largest coordinate value in each","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101719,"byte_end":101808,"line_start":48,"line_end":48,"column_start":5,"column_end":94}},{"value":"/ dimension.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101813,"byte_end":101827,"line_start":49,"line_end":49,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102414,"byte_end":102427,"line_start":82,"line_end":82,"column_start":12,"column_end":25},"name":"nearest_point","qualname":"<Rectangle<P>>::nearest_point","value":"pub fn nearest_point(&Self, &P) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest point within this rectangle to a given point.","sig":null,"attributes":[{"value":"/ Returns the nearest point within this rectangle to a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102237,"byte_end":102306,"line_start":79,"line_end":79,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102311,"byte_end":102314,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ If `query_point` is contained within this rectangle, `query_point` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102319,"byte_end":102402,"line_start":81,"line_end":81,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":1309},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109873,"byte_end":109878,"line_start":141,"line_end":141,"column_start":12,"column_end":17},"name":"RTree","qualname":"::rtree::RTree","value":"RTree {  }","parent":null,"children":[{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314}],"decl_id":null,"docs":" An n-dimensional r-tree data structure.","sig":null,"attributes":[{"value":"/ An n-dimensional r-tree data structure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":104774,"byte_end":104817,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":104818,"byte_end":104821,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # R-Trees","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":104822,"byte_end":104835,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/ R-Trees are data structures containing multi-dimensional objects like points, rectangles","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":104836,"byte_end":104928,"line_start":29,"line_end":29,"column_start":1,"column_end":93}},{"value":"/ or polygons. They are optimized for retrieving the nearest neighbor at any point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":104929,"byte_end":105014,"line_start":30,"line_end":30,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105015,"byte_end":105018,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ R-trees can efficiently find answers to queries like \"Find the nearest point of a polygon\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105019,"byte_end":105114,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ \"Find all police stations within a rectangle\" or \"Find the 10 nearest restaurants, sorted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105115,"byte_end":105208,"line_start":33,"line_end":33,"column_start":1,"column_end":94}},{"value":"/ by their distances\". Compared to a naive implementation for these scenarios that runs","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105209,"byte_end":105298,"line_start":34,"line_end":34,"column_start":1,"column_end":90}},{"value":"/ in `O(n)` for `n` inserted elements, r-trees reduce this time to `O(log(n))`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105299,"byte_end":105380,"line_start":35,"line_end":35,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105381,"byte_end":105384,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ However, creating an r-tree is time consuming","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105385,"byte_end":105434,"line_start":37,"line_end":37,"column_start":1,"column_end":50}},{"value":"/ and runs in `O(n * log(n))`. Thus, r-trees are suited best if many queries and only few","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105435,"byte_end":105526,"line_start":38,"line_end":38,"column_start":1,"column_end":92}},{"value":"/ insertions are made. Also, rstar supports [bulk loading](struct.RTree.html#method.bulk_load),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105527,"byte_end":105624,"line_start":39,"line_end":39,"column_start":1,"column_end":98}},{"value":"/ which cuts down the constant factors when creating an r-tree significantly compared to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105625,"byte_end":105715,"line_start":40,"line_end":40,"column_start":1,"column_end":91}},{"value":"/ sequential insertions.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105716,"byte_end":105742,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105743,"byte_end":105746,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ R-trees are also _dynamic_, thus, points can be inserted and removed even if the tree","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105747,"byte_end":105836,"line_start":43,"line_end":43,"column_start":1,"column_end":90}},{"value":"/ has been created before.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105837,"byte_end":105865,"line_start":44,"line_end":44,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105866,"byte_end":105869,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ## Partitioning heuristics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105870,"byte_end":105900,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/ The inserted objects are internally partitioned into several boxes which should have small","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105901,"byte_end":105995,"line_start":47,"line_end":47,"column_start":1,"column_end":95}},{"value":"/ overlap and volume. This is done heuristically. While the originally proposed heuristic focused","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":105996,"byte_end":106095,"line_start":48,"line_end":48,"column_start":1,"column_end":100}},{"value":"/ on fast insertion operations, the resulting r-trees were often suboptimally structured. Another","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106096,"byte_end":106195,"line_start":49,"line_end":49,"column_start":1,"column_end":100}},{"value":"/ heuristic, called `R*-tree` (r-star-tree), was proposed to improve the tree structure at the cost of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106196,"byte_end":106300,"line_start":50,"line_end":50,"column_start":1,"column_end":105}},{"value":"/ longer insertion operations and is currently the crate's only implemented","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106301,"byte_end":106378,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ [insertion strategy](trait.InsertionStrategy.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106379,"byte_end":106434,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106435,"byte_end":106438,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Further reading","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106439,"byte_end":106461,"line_start":54,"line_end":54,"column_start":1,"column_end":23}},{"value":"/ For more information refer to the [wikipedia article](https://en.wikipedia.org/wiki/R-tree).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106462,"byte_end":106558,"line_start":55,"line_end":55,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106559,"byte_end":106562,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106563,"byte_end":106574,"line_start":57,"line_end":57,"column_start":1,"column_end":12}},{"value":"/ The items inserted into an r-tree must implement the [RTreeObject](trait.RTreeObject.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106575,"byte_end":106669,"line_start":58,"line_end":58,"column_start":1,"column_end":95}},{"value":"/ trait. To support nearest neighbor queries, implement the [PointDistance](trait.PointDistance.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106670,"byte_end":106773,"line_start":59,"line_end":59,"column_start":1,"column_end":104}},{"value":"/ trait. Some useful geometric primitives that implement the above traits can be found in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106774,"byte_end":106869,"line_start":60,"line_end":60,"column_start":1,"column_end":96}},{"value":"/ [primitives](primitives/index.html) module.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106870,"byte_end":106917,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106918,"byte_end":106921,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106922,"byte_end":106936,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106937,"byte_end":106944,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106945,"byte_end":106966,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106967,"byte_end":106970,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let mut tree = RTree::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":106971,"byte_end":107003,"line_start":67,"line_end":67,"column_start":1,"column_end":33}},{"value":"/ tree.insert([0.1, 0.0f32]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107004,"byte_end":107035,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"/ tree.insert([0.2, 0.1]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107036,"byte_end":107064,"line_start":69,"line_end":69,"column_start":1,"column_end":29}},{"value":"/ tree.insert([0.3, 0.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107065,"byte_end":107093,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107094,"byte_end":107097,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tree.nearest_neighbor(&[0.4, -0.1]), Some(&[0.3, 0.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107098,"byte_end":107169,"line_start":72,"line_end":72,"column_start":1,"column_end":72}},{"value":"/ tree.remove(&[0.3, 0.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107170,"byte_end":107199,"line_start":73,"line_end":73,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(tree.nearest_neighbor(&[0.4, 0.3]), Some(&[0.2, 0.1]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107200,"byte_end":107270,"line_start":74,"line_end":74,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107271,"byte_end":107274,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tree.size(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107275,"byte_end":107306,"line_start":76,"line_end":76,"column_start":1,"column_end":32}},{"value":"/ // &RTree implements IntoIterator!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107307,"byte_end":107345,"line_start":77,"line_end":77,"column_start":1,"column_end":39}},{"value":"/ for point in &tree {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107346,"byte_end":107370,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/     println!(\"Tree contains a point {:?}\", point);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107371,"byte_end":107425,"line_start":79,"line_end":79,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107426,"byte_end":107431,"line_start":80,"line_end":80,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107432,"byte_end":107439,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107440,"byte_end":107443,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ## Supported point types","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107444,"byte_end":107472,"line_start":83,"line_end":83,"column_start":1,"column_end":29}},{"value":"/ All types implementing the [Point](trait.Point.html) trait can be used as underlying point type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107473,"byte_end":107573,"line_start":84,"line_end":84,"column_start":1,"column_end":101}},{"value":"/ By default, fixed size arrays can be used as points.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107574,"byte_end":107630,"line_start":85,"line_end":85,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107631,"byte_end":107634,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ## Type Parameters","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107635,"byte_end":107657,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"/ * `T`: The type of objects stored in the r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107658,"byte_end":107710,"line_start":88,"line_end":88,"column_start":1,"column_end":53}},{"value":"/ * `Params`: Compile time parameters that change the r-trees internal layout. Refer to the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107711,"byte_end":107804,"line_start":89,"line_end":89,"column_start":1,"column_end":94}},{"value":"/ [RTreeParams](trait.RTreeParams.html) trait for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107805,"byte_end":107874,"line_start":90,"line_end":90,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107875,"byte_end":107878,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ## Defining methods generic over r-trees","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107879,"byte_end":107923,"line_start":92,"line_end":92,"column_start":1,"column_end":45}},{"value":"/ If a library defines a method that should be generic over the r-tree type signature, make","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":107924,"byte_end":108017,"line_start":93,"line_end":93,"column_start":1,"column_end":94}},{"value":"/ sure to include both type parameters like this:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108018,"byte_end":108069,"line_start":94,"line_end":94,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108070,"byte_end":108077,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ # use rstar::{RTree,RTreeObject, RTreeParams};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108078,"byte_end":108128,"line_start":96,"line_end":96,"column_start":1,"column_end":51}},{"value":"/ pub fn generic_rtree_function<T, Params>(tree: &mut RTree<T, Params>)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108129,"byte_end":108202,"line_start":97,"line_end":97,"column_start":1,"column_end":74}},{"value":"/ where","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108203,"byte_end":108212,"line_start":98,"line_end":98,"column_start":1,"column_end":10}},{"value":"/   T: RTreeObject,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108213,"byte_end":108234,"line_start":99,"line_end":99,"column_start":1,"column_end":22}},{"value":"/   Params: RTreeParams","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108235,"byte_end":108260,"line_start":100,"line_end":100,"column_start":1,"column_end":26}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108261,"byte_end":108266,"line_start":101,"line_end":101,"column_start":1,"column_end":6}},{"value":"/   // ...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108267,"byte_end":108279,"line_start":102,"line_end":102,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108280,"byte_end":108285,"line_start":103,"line_end":103,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108286,"byte_end":108293,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/ Otherwise, any user of `generic_rtree_function` would be forced to use","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108294,"byte_end":108368,"line_start":105,"line_end":105,"column_start":1,"column_end":75}},{"value":"/ a tree with default parameters.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108369,"byte_end":108404,"line_start":106,"line_end":106,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108405,"byte_end":108408,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ # Runtime and Performance","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108409,"byte_end":108438,"line_start":108,"line_end":108,"column_start":1,"column_end":30}},{"value":"/ The runtime of query operations (e.g. `nearest neighbor` or `contains`) is usually","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108439,"byte_end":108525,"line_start":109,"line_end":109,"column_start":1,"column_end":87}},{"value":"/ `O(log(n))`, where `n` refers to the number of elements contained in the r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108526,"byte_end":108610,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/ A naive sequential algorithm would take `O(n)` time. However, r-trees incur higher","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108611,"byte_end":108697,"line_start":111,"line_end":111,"column_start":1,"column_end":87}},{"value":"/ build up times: inserting an element into an r-tree costs `O(log(n))` time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108698,"byte_end":108777,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108778,"byte_end":108781,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ## Bulk loading","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108782,"byte_end":108801,"line_start":114,"line_end":114,"column_start":1,"column_end":20}},{"value":"/ In many scenarios, insertion is only done once for many points. In this case,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108802,"byte_end":108883,"line_start":115,"line_end":115,"column_start":1,"column_end":82}},{"value":"/ [bulk_load](#method.bulk_load) will be considerably faster. Its total run time","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108884,"byte_end":108966,"line_start":116,"line_end":116,"column_start":1,"column_end":83}},{"value":"/ is still `O(log(n))`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108967,"byte_end":108992,"line_start":117,"line_end":117,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108993,"byte_end":108996,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ ## Element distribution","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":108997,"byte_end":109024,"line_start":119,"line_end":119,"column_start":1,"column_end":28}},{"value":"/ The tree's performance heavily relies on the spatial distribution of its elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109025,"byte_end":109111,"line_start":120,"line_end":120,"column_start":1,"column_end":87}},{"value":"/ Best performance is achieved if:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109112,"byte_end":109148,"line_start":121,"line_end":121,"column_start":1,"column_end":37}},{"value":"/  * No element is inserted more than once","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109149,"byte_end":109193,"line_start":122,"line_end":122,"column_start":1,"column_end":45}},{"value":"/  * The overlapping area of elements should be as small a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109194,"byte_end":109254,"line_start":123,"line_end":123,"column_start":1,"column_end":61}},{"value":"/    possible.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109255,"byte_end":109271,"line_start":124,"line_end":124,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109272,"byte_end":109275,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ For the edge case that all elements are overlapping (e.g, one and the same element","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109276,"byte_end":109362,"line_start":126,"line_end":126,"column_start":1,"column_end":87}},{"value":"/ is contained `n` times), the performance of most operations usually degrades to `O(n)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109363,"byte_end":109454,"line_start":127,"line_end":127,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109455,"byte_end":109458,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ # (De)Serialization","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109459,"byte_end":109482,"line_start":129,"line_end":129,"column_start":1,"column_end":24}},{"value":"/ Enable the `serde` feature for [Serde](https://crates.io/crates/serde) support.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109483,"byte_end":109566,"line_start":130,"line_end":130,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":109567,"byte_end":109570,"line_start":131,"line_end":131,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111091,"byte_end":111094,"line_start":190,"line_end":190,"column_start":12,"column_end":15},"name":"new","qualname":"<RTree<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty r-tree.","sig":null,"attributes":[{"value":"/ Creates a new, empty r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110944,"byte_end":110976,"line_start":187,"line_end":187,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110981,"byte_end":110984,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ The created r-tree is configured with [default parameters](struct.DefaultParams.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110989,"byte_end":111079,"line_start":189,"line_end":189,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111724,"byte_end":111733,"line_start":206,"line_end":206,"column_start":12,"column_end":21},"name":"bulk_load","qualname":"<RTree<T>>::bulk_load","value":"pub fn bulk_load(Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new r-tree with some elements already inserted.","sig":null,"attributes":[{"value":"/ Creates a new r-tree with some elements already inserted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111150,"byte_end":111211,"line_start":194,"line_end":194,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111216,"byte_end":111219,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ This method should be the preferred way for creating r-trees. It both","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111224,"byte_end":111297,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/ runs faster and yields an r-tree with better internal structure that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111302,"byte_end":111374,"line_start":197,"line_end":197,"column_start":5,"column_end":77}},{"value":"/ improves query performance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111379,"byte_end":111410,"line_start":198,"line_end":198,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111415,"byte_end":111418,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ This method implements the overlap minimizing top down bulk loading algorithm","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111423,"byte_end":111504,"line_start":200,"line_end":200,"column_start":5,"column_end":86}},{"value":"/ as described in [this paper](http://ceur-ws.org/Vol-74/files/FORUM_18.pdf).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111509,"byte_end":111588,"line_start":201,"line_end":201,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111593,"byte_end":111596,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Runtime","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111601,"byte_end":111614,"line_start":203,"line_end":203,"column_start":5,"column_end":18}},{"value":"/ Bulk loading runs in `O(n * log(n))`, where `n` is the number of loaded","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111619,"byte_end":111694,"line_start":204,"line_end":204,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111699,"byte_end":111712,"line_start":205,"line_end":205,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112128,"byte_end":112143,"line_start":220,"line_end":220,"column_start":12,"column_end":27},"name":"new_with_params","qualname":"<RTree<T, Params>>::new_with_params","value":"pub fn new_with_params() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty r-tree.","sig":null,"attributes":[{"value":"/ Creates a new, empty r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111907,"byte_end":111939,"line_start":216,"line_end":216,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111944,"byte_end":111947,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The tree's compile time parameters must be specified. Refer to the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111952,"byte_end":112022,"line_start":218,"line_end":218,"column_start":5,"column_end":75}},{"value":"/ [RTreeParams](trait.RTreeParams.html) trait for more information and a usage example.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112027,"byte_end":112116,"line_start":219,"line_end":219,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112576,"byte_end":112597,"line_start":233,"line_end":233,"column_start":12,"column_end":33},"name":"bulk_load_with_params","qualname":"<RTree<T, Params>>::bulk_load_with_params","value":"pub fn bulk_load_with_params(Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new r-tree with some given elements and configurable parameters.","sig":null,"attributes":[{"value":"/ Creates a new r-tree with some given elements and configurable parameters.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112349,"byte_end":112427,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112432,"byte_end":112435,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ For more information refer to [bulk_load](#method.bulk_load)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112440,"byte_end":112504,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"/ and [RTreeParameters](traits.RTreeParameters.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112509,"byte_end":112564,"line_start":232,"line_end":232,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113094,"byte_end":113098,"line_start":250,"line_end":250,"column_start":12,"column_end":16},"name":"size","qualname":"<RTree<T, Params>>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of objects in an r-tree.","sig":null,"attributes":[{"value":"/ Returns the number of objects in an r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112729,"byte_end":112776,"line_start":237,"line_end":237,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112781,"byte_end":112784,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112789,"byte_end":112802,"line_start":239,"line_end":239,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112807,"byte_end":112814,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112819,"byte_end":112840,"line_start":241,"line_end":241,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112845,"byte_end":112848,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ let mut tree = RTree::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112853,"byte_end":112885,"line_start":243,"line_end":243,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(tree.size(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112890,"byte_end":112921,"line_start":244,"line_end":244,"column_start":5,"column_end":36}},{"value":"/ tree.insert([0.0, 1.0, 2.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112926,"byte_end":112959,"line_start":245,"line_end":245,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(tree.size(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":112964,"byte_end":112995,"line_start":246,"line_end":246,"column_start":5,"column_end":36}},{"value":"/ tree.remove(&[0.0, 1.0, 2.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113000,"byte_end":113034,"line_start":247,"line_end":247,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(tree.size(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113039,"byte_end":113070,"line_start":248,"line_end":248,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113075,"byte_end":113082,"line_start":249,"line_end":249,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113563,"byte_end":113567,"line_start":266,"line_end":266,"column_start":12,"column_end":16},"name":"iter","qualname":"<RTree<T, Params>>::iter","value":"pub fn iter(&Self) -> RTreeIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all elements contained in the tree.","sig":null,"attributes":[{"value":"/ Returns an iterator over all elements contained in the tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113146,"byte_end":113210,"line_start":254,"line_end":254,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113215,"byte_end":113218,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ The order in which the elements are returned is not specified.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113223,"byte_end":113289,"line_start":256,"line_end":256,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113294,"byte_end":113297,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113302,"byte_end":113315,"line_start":258,"line_end":258,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113320,"byte_end":113327,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113332,"byte_end":113353,"line_start":260,"line_end":260,"column_start":5,"column_end":26}},{"value":"/ let tree = RTree::bulk_load(vec![[0.0, 0.1], [0.3, 0.2], [0.4, 0.2]]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113358,"byte_end":113432,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/ for point in tree.iter() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113437,"byte_end":113467,"line_start":262,"line_end":262,"column_start":5,"column_end":35}},{"value":"/     println!(\"This tree contains point {:?}\", point);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113472,"byte_end":113529,"line_start":263,"line_end":263,"column_start":5,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113534,"byte_end":113539,"line_start":264,"line_end":264,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113544,"byte_end":113551,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114212,"byte_end":114220,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<RTree<T, Params>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> RTreeIteratorMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all mutable elements contained in the tree.","sig":null,"attributes":[{"value":"/ Returns an iterator over all mutable elements contained in the tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113662,"byte_end":113734,"line_start":270,"line_end":270,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113739,"byte_end":113742,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ The order in which the elements are returned is not specified.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113747,"byte_end":113813,"line_start":272,"line_end":272,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113818,"byte_end":113821,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ *Note*: It is a logic error to change an inserted item's position or dimensions. This","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113826,"byte_end":113915,"line_start":274,"line_end":274,"column_start":5,"column_end":94}},{"value":"/ method is primarily meant for own implementations of [RTreeObject](trait.RTreeObject.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":113920,"byte_end":114014,"line_start":275,"line_end":275,"column_start":5,"column_end":99}},{"value":"/ which can contain arbitrary additional data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114019,"byte_end":114067,"line_start":276,"line_end":276,"column_start":5,"column_end":53}},{"value":"/ If the position or location of an inserted object need to change, you will need to [remove]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114072,"byte_end":114167,"line_start":277,"line_end":277,"column_start":5,"column_end":100}},{"value":"/ and reinsert it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114172,"byte_end":114192,"line_start":278,"line_end":278,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114197,"byte_end":114200,"line_start":279,"line_end":279,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115234,"byte_end":115252,"line_start":304,"line_end":304,"column_start":12,"column_end":30},"name":"locate_in_envelope","qualname":"<RTree<T, Params>>::locate_in_envelope","value":"pub fn locate_in_envelope(&Self, &T::Envelope) -> LocateInEnvelope<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns all elements contained in an [Envelope](trait.Envelope.html).","sig":null,"attributes":[{"value":"/ Returns all elements contained in an [Envelope](trait.Envelope.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114329,"byte_end":114402,"line_start":284,"line_end":284,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114407,"byte_end":114410,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Usually, an envelope is an [axis aligned bounding box](struct.AABB.html). This","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114415,"byte_end":114497,"line_start":286,"line_end":286,"column_start":5,"column_end":87}},{"value":"/ method can be used to get all elements that are fully contained within an envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114502,"byte_end":114589,"line_start":287,"line_end":287,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114594,"byte_end":114597,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114602,"byte_end":114615,"line_start":289,"line_end":289,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114620,"byte_end":114627,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"/ use rstar::{RTree, AABB};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114632,"byte_end":114661,"line_start":291,"line_end":291,"column_start":5,"column_end":34}},{"value":"/ let mut tree = RTree::bulk_load(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114666,"byte_end":114707,"line_start":292,"line_end":292,"column_start":5,"column_end":46}},{"value":"/   [0.0, 0.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114712,"byte_end":114729,"line_start":293,"line_end":293,"column_start":5,"column_end":22}},{"value":"/   [0.0, 1.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114734,"byte_end":114751,"line_start":294,"line_end":294,"column_start":5,"column_end":22}},{"value":"/   [1.0, 1.0]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114756,"byte_end":114772,"line_start":295,"line_end":295,"column_start":5,"column_end":21}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114777,"byte_end":114784,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/ let half_unit_square = AABB::from_corners([0.0, 0.0], [0.5, 1.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114789,"byte_end":114859,"line_start":297,"line_end":297,"column_start":5,"column_end":75}},{"value":"/ let unit_square = AABB::from_corners([0.0, 0.0], [1.0, 1.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114864,"byte_end":114929,"line_start":298,"line_end":298,"column_start":5,"column_end":70}},{"value":"/ let elements_in_half_unit_square = tree.locate_in_envelope(&half_unit_square);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":114934,"byte_end":115016,"line_start":299,"line_end":299,"column_start":5,"column_end":87}},{"value":"/ let elements_in_unit_square = tree.locate_in_envelope(&unit_square);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115021,"byte_end":115093,"line_start":300,"line_end":300,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(elements_in_half_unit_square.count(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115098,"byte_end":115154,"line_start":301,"line_end":301,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(elements_in_unit_square.count(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115159,"byte_end":115210,"line_start":302,"line_end":302,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115215,"byte_end":115222,"line_start":303,"line_end":303,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115488,"byte_end":115510,"line_start":309,"line_end":309,"column_start":12,"column_end":34},"name":"locate_in_envelope_mut","qualname":"<RTree<T, Params>>::locate_in_envelope_mut","value":"pub fn locate_in_envelope_mut(&mut Self, &T::Envelope)\n-> LocateInEnvelopeMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [locate_in_envelope](#method.locate_in_envelope).\n","sig":null,"attributes":[{"value":"/ Mutable variant of [locate_in_envelope](#method.locate_in_envelope).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115404,"byte_end":115476,"line_start":308,"line_end":308,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117448,"byte_end":117479,"line_start":347,"line_end":347,"column_start":12,"column_end":43},"name":"locate_in_envelope_intersecting","qualname":"<RTree<T, Params>>::locate_in_envelope_intersecting","value":"pub fn locate_in_envelope_intersecting(&Self, &T::Envelope)\n-> LocateInEnvelopeIntersecting<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns all elements whose envelope intersects a given envelope.","sig":null,"attributes":[{"value":"/ Returns all elements whose envelope intersects a given envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115676,"byte_end":115744,"line_start":313,"line_end":313,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115749,"byte_end":115752,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Any element fully contained within an envelope is also returned by this method. Two","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115757,"byte_end":115844,"line_start":315,"line_end":315,"column_start":5,"column_end":92}},{"value":"/ envelopes that \"touch\" each other (e.g. by sharing only a common corner) are also","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115849,"byte_end":115934,"line_start":316,"line_end":316,"column_start":5,"column_end":90}},{"value":"/ considered to intersect. Usually, an envelope is an [axis aligned bounding box](struct.AABB.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":115939,"byte_end":116041,"line_start":317,"line_end":317,"column_start":5,"column_end":107}},{"value":"/ This method will return all elements whose AABB has some common area with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116046,"byte_end":116123,"line_start":318,"line_end":318,"column_start":5,"column_end":82}},{"value":"/ a given AABB.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116128,"byte_end":116145,"line_start":319,"line_end":319,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116150,"byte_end":116153,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116158,"byte_end":116171,"line_start":321,"line_end":321,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116176,"byte_end":116183,"line_start":322,"line_end":322,"column_start":5,"column_end":12}},{"value":"/ use rstar::{RTree, AABB};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116188,"byte_end":116217,"line_start":323,"line_end":323,"column_start":5,"column_end":34}},{"value":"/ use rstar::primitives::Rectangle;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116222,"byte_end":116259,"line_start":324,"line_end":324,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116264,"byte_end":116267,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ let left_piece = AABB::from_corners([0.0, 0.0], [0.4, 1.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116272,"byte_end":116336,"line_start":326,"line_end":326,"column_start":5,"column_end":69}},{"value":"/ let right_piece = AABB::from_corners([0.6, 0.0], [1.0, 1.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116341,"byte_end":116406,"line_start":327,"line_end":327,"column_start":5,"column_end":70}},{"value":"/ let middle_piece = AABB::from_corners([0.25, 0.0], [0.75, 1.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116411,"byte_end":116479,"line_start":328,"line_end":328,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116484,"byte_end":116487,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ let mut tree = RTree::<Rectangle<_>>::bulk_load(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116492,"byte_end":116549,"line_start":330,"line_end":330,"column_start":5,"column_end":62}},{"value":"/   left_piece.into(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116554,"byte_end":116578,"line_start":331,"line_end":331,"column_start":5,"column_end":29}},{"value":"/   right_piece.into(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116583,"byte_end":116608,"line_start":332,"line_end":332,"column_start":5,"column_end":30}},{"value":"/   middle_piece.into(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116613,"byte_end":116639,"line_start":333,"line_end":333,"column_start":5,"column_end":31}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116644,"byte_end":116651,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116656,"byte_end":116659,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let elements_intersecting_left_piece = tree.locate_in_envelope_intersecting(&left_piece);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116664,"byte_end":116757,"line_start":336,"line_end":336,"column_start":5,"column_end":98}},{"value":"/ // The left piece should not intersect the right piece!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116762,"byte_end":116821,"line_start":337,"line_end":337,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(elements_intersecting_left_piece.count(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116826,"byte_end":116886,"line_start":338,"line_end":338,"column_start":5,"column_end":65}},{"value":"/ let elements_intersecting_middle = tree.locate_in_envelope_intersecting(&middle_piece);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116891,"byte_end":116982,"line_start":339,"line_end":339,"column_start":5,"column_end":96}},{"value":"/ // Only the middle piece intersects all pieces within the tree","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":116987,"byte_end":117053,"line_start":340,"line_end":340,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(elements_intersecting_middle.count(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117058,"byte_end":117114,"line_start":341,"line_end":341,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117119,"byte_end":117122,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let large_piece = AABB::from_corners([-100., -100.], [100., 100.]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117127,"byte_end":117198,"line_start":343,"line_end":343,"column_start":5,"column_end":76}},{"value":"/ let elements_intersecting_large_piece = tree.locate_in_envelope_intersecting(&large_piece);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117203,"byte_end":117298,"line_start":344,"line_end":344,"column_start":5,"column_end":100}},{"value":"/ // Any element that is fully contained should also be returned:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117303,"byte_end":117370,"line_start":345,"line_end":345,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(elements_intersecting_large_piece.count(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117375,"byte_end":117436,"line_start":346,"line_end":346,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117830,"byte_end":117865,"line_start":358,"line_end":358,"column_start":12,"column_end":47},"name":"locate_in_envelope_intersecting_mut","qualname":"<RTree<T, Params>>::locate_in_envelope_intersecting_mut","value":"pub fn locate_in_envelope_intersecting_mut(&mut Self, &T::Envelope)\n-> LocateInEnvelopeIntersectingMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [locate_in_envelope_intersecting](#method.locate_in_envelope_intersecting)\n","sig":null,"attributes":[{"value":"/ Mutable variant of [locate_in_envelope_intersecting](#method.locate_in_envelope_intersecting)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":117721,"byte_end":117818,"line_start":357,"line_end":357,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118478,"byte_end":118508,"line_start":375,"line_end":375,"column_start":12,"column_end":42},"name":"locate_with_selection_function","qualname":"<RTree<T, Params>>::locate_with_selection_function","value":"pub fn locate_with_selection_function<S: SelectionFunction<T>>(&Self, S)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Locates elements in the r-tree defined by a selection function.","sig":null,"attributes":[{"value":"/ Locates elements in the r-tree defined by a selection function.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118121,"byte_end":118188,"line_start":368,"line_end":368,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118193,"byte_end":118196,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Refer to the documentation of [`SelectionFunction`](trait.SelectionFunction.html) for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118201,"byte_end":118290,"line_start":370,"line_end":370,"column_start":5,"column_end":94}},{"value":"/ more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118295,"byte_end":118316,"line_start":371,"line_end":371,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118321,"byte_end":118324,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Usually, other `locate` methods should cover most common use cases. This method is only required","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118329,"byte_end":118429,"line_start":373,"line_end":373,"column_start":5,"column_end":105}},{"value":"/ in more specific situations.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118434,"byte_end":118466,"line_start":374,"line_end":374,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118801,"byte_end":118835,"line_start":383,"line_end":383,"column_start":12,"column_end":46},"name":"locate_with_selection_function_mut","qualname":"<RTree<T, Params>>::locate_with_selection_function_mut","value":"pub fn locate_with_selection_function_mut<S: SelectionFunction<T>>(&mut Self,\nS) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [`locate_with_selection_function`](#method.locate_with_selection_function).\n","sig":null,"attributes":[{"value":"/ Mutable variant of [`locate_with_selection_function`](#method.locate_with_selection_function).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":118691,"byte_end":118789,"line_start":382,"line_end":382,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119244,"byte_end":119283,"line_start":394,"line_end":394,"column_start":12,"column_end":51},"name":"intersection_candidates_with_other_tree","qualname":"<RTree<T, Params>>::intersection_candidates_with_other_tree","value":"pub fn intersection_candidates_with_other_tree<'a, U>(&'a Self, &'a RTree<U>)\n-> IntersectionIterator<, T, U> where U: RTreeObject<Envelope = T::Envelope>","parent":null,"children":[],"decl_id":null,"docs":" Gets all possible intersecting objects of this and another tree.","sig":null,"attributes":[{"value":"/ Gets all possible intersecting objects of this and another tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119033,"byte_end":119101,"line_start":390,"line_end":390,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119106,"byte_end":119109,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ This will return all objects whose _envelopes_ intersect. No geometric intersection","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119114,"byte_end":119201,"line_start":392,"line_end":392,"column_start":5,"column_end":92}},{"value":"/ checking is performed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119206,"byte_end":119232,"line_start":393,"line_end":393,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119817,"byte_end":119821,"line_start":409,"line_end":409,"column_start":12,"column_end":16},"name":"root","qualname":"<RTree<T, Params>>::root","value":"pub fn root(&Self) -> &ParentNode<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the tree's root node.","sig":null,"attributes":[{"value":"/ Returns the tree's root node.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119511,"byte_end":119544,"line_start":404,"line_end":404,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119549,"byte_end":119552,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ Usually, you will not require to call this method. However, for debugging purposes or for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119557,"byte_end":119650,"line_start":406,"line_end":406,"column_start":5,"column_end":98}},{"value":"/ advanced algorithms, knowledge about the tree's internal structure may be required.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119655,"byte_end":119742,"line_start":407,"line_end":407,"column_start":5,"column_end":92}},{"value":"/ For these cases, this method serves as an entry point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":119747,"byte_end":119805,"line_start":408,"line_end":408,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":120701,"byte_end":120731,"line_start":440,"line_end":440,"column_start":12,"column_end":42},"name":"remove_with_selection_function","qualname":"<RTree<T, Params>>::remove_with_selection_function","value":"pub fn remove_with_selection_function<F>(&mut Self, F) -> Option<T> where\nF: SelectionFunction<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns a single element from the tree. The element to remove is specified\n by a [`SelectionFunction`](trait.SelectionFunction.html).","sig":null,"attributes":[{"value":"/ Removes and returns a single element from the tree. The element to remove is specified","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":120426,"byte_end":120516,"line_start":435,"line_end":435,"column_start":5,"column_end":95}},{"value":"/ by a [`SelectionFunction`](trait.SelectionFunction.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":120521,"byte_end":120582,"line_start":436,"line_end":436,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":120587,"byte_end":120590,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ See also: [`remove`](#method.remove), [`remove_at_point`](#method.remove_at_point)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":120595,"byte_end":120681,"line_start":438,"line_end":438,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":120686,"byte_end":120689,"line_start":439,"line_end":439,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121400,"byte_end":121415,"line_start":463,"line_end":463,"column_start":12,"column_end":27},"name":"locate_at_point","qualname":"<RTree<T, Params>>::locate_at_point","value":"pub fn locate_at_point(&Self, &<T::Envelope as Envelope>::Point) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a single object that covers a given point.","sig":null,"attributes":[{"value":"/ Returns a single object that covers a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121086,"byte_end":121140,"line_start":457,"line_end":457,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121145,"byte_end":121148,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ Method [contains_point](trait.PointDistance.html#method.contains_point)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121153,"byte_end":121228,"line_start":459,"line_end":459,"column_start":5,"column_end":80}},{"value":"/ is used to determine if a tree element contains the given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121233,"byte_end":121301,"line_start":460,"line_end":460,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121306,"byte_end":121309,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ If multiple elements contain the given point, any of them is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121314,"byte_end":121388,"line_start":462,"line_end":462,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121617,"byte_end":121636,"line_start":468,"line_end":468,"column_start":12,"column_end":31},"name":"locate_at_point_mut","qualname":"<RTree<T, Params>>::locate_at_point_mut","value":"pub fn locate_at_point_mut(&mut Self, &<T::Envelope as Envelope>::Point)\n-> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [locate_at_point](#method.locate_at_point).\n","sig":null,"attributes":[{"value":"/ Mutable variant of [locate_at_point](#method.locate_at_point).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121539,"byte_end":121605,"line_start":467,"line_end":467,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122524,"byte_end":122543,"line_start":493,"line_end":493,"column_start":12,"column_end":31},"name":"locate_all_at_point","qualname":"<RTree<T, Params>>::locate_all_at_point","value":"pub fn locate_all_at_point(&Self, &<T::Envelope as Envelope>::Point)\n-> LocateAllAtPoint<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locate all elements containing a given point.","sig":null,"attributes":[{"value":"/ Locate all elements containing a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121795,"byte_end":121844,"line_start":475,"line_end":475,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121849,"byte_end":121852,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Method [contains_point](trait.PointDistance.html#method.contains_point) is used","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121857,"byte_end":121940,"line_start":477,"line_end":477,"column_start":5,"column_end":88}},{"value":"/ to determine if a tree element contains the given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121945,"byte_end":122005,"line_start":478,"line_end":478,"column_start":5,"column_end":65}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122010,"byte_end":122023,"line_start":479,"line_end":479,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122028,"byte_end":122035,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122040,"byte_end":122061,"line_start":481,"line_end":481,"column_start":5,"column_end":26}},{"value":"/ use rstar::primitives::Rectangle;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122066,"byte_end":122103,"line_start":482,"line_end":482,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122108,"byte_end":122111,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ let tree = RTree::bulk_load(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122116,"byte_end":122153,"line_start":484,"line_end":484,"column_start":5,"column_end":42}},{"value":"/   Rectangle::from_corners([0.0, 0.0], [2.0, 2.0]),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122158,"byte_end":122212,"line_start":485,"line_end":485,"column_start":5,"column_end":59}},{"value":"/   Rectangle::from_corners([1.0, 1.0], [3.0, 3.0])","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122217,"byte_end":122270,"line_start":486,"line_end":486,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122275,"byte_end":122282,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122287,"byte_end":122290,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(tree.locate_all_at_point(&[1.5, 1.5]).count(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122295,"byte_end":122360,"line_start":489,"line_end":489,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(tree.locate_all_at_point(&[0.0, 0.0]).count(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122365,"byte_end":122430,"line_start":490,"line_end":490,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(tree.locate_all_at_point(&[-1., 0.0]).count(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122435,"byte_end":122500,"line_start":491,"line_end":491,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122505,"byte_end":122512,"line_start":492,"line_end":492,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122816,"byte_end":122839,"line_start":501,"line_end":501,"column_start":12,"column_end":35},"name":"locate_all_at_point_mut","qualname":"<RTree<T, Params>>::locate_all_at_point_mut","value":"pub fn locate_all_at_point_mut(&mut Self, &<T::Envelope as Envelope>::Point)\n-> LocateAllAtPointMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [locate_all_at_point](#method.locate_all_at_point).\n","sig":null,"attributes":[{"value":"/ Mutable variant of [locate_all_at_point](#method.locate_all_at_point).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":122730,"byte_end":122804,"line_start":500,"line_end":500,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123746,"byte_end":123761,"line_start":527,"line_end":527,"column_start":12,"column_end":27},"name":"remove_at_point","qualname":"<RTree<T, Params>>::remove_at_point","value":"pub fn remove_at_point(&mut Self, &<T::Envelope as Envelope>::Point)\n-> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes an element containing a given point.","sig":null,"attributes":[{"value":"/ Removes an element containing a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123040,"byte_end":123088,"line_start":508,"line_end":508,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123093,"byte_end":123096,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ The removed element, if any, is returned. If multiple elements cover the given point,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123101,"byte_end":123190,"line_start":510,"line_end":510,"column_start":5,"column_end":94}},{"value":"/ only one of them is removed and returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123195,"byte_end":123240,"line_start":511,"line_end":511,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123245,"byte_end":123248,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123253,"byte_end":123266,"line_start":513,"line_end":513,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123271,"byte_end":123278,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123283,"byte_end":123304,"line_start":515,"line_end":515,"column_start":5,"column_end":26}},{"value":"/ use rstar::primitives::Rectangle;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123309,"byte_end":123346,"line_start":516,"line_end":516,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123351,"byte_end":123354,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let mut tree = RTree::bulk_load(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123359,"byte_end":123400,"line_start":518,"line_end":518,"column_start":5,"column_end":46}},{"value":"/   Rectangle::from_corners([0.0, 0.0], [2.0, 2.0]),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123405,"byte_end":123459,"line_start":519,"line_end":519,"column_start":5,"column_end":59}},{"value":"/   Rectangle::from_corners([1.0, 1.0], [3.0, 3.0])","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123464,"byte_end":123517,"line_start":520,"line_end":520,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123522,"byte_end":123529,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123534,"byte_end":123537,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ assert!(tree.remove_at_point(&[1.5, 1.5]).is_some());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123542,"byte_end":123599,"line_start":523,"line_end":523,"column_start":5,"column_end":62}},{"value":"/ assert!(tree.remove_at_point(&[1.5, 1.5]).is_some());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123604,"byte_end":123661,"line_start":524,"line_end":524,"column_start":5,"column_end":62}},{"value":"/ assert!(tree.remove_at_point(&[1.5, 1.5]).is_none());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123666,"byte_end":123723,"line_start":525,"line_end":525,"column_start":5,"column_end":62}},{"value":"/```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123728,"byte_end":123734,"line_start":526,"line_end":526,"column_start":5,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124529,"byte_end":124537,"line_start":553,"line_end":553,"column_start":12,"column_end":20},"name":"contains","qualname":"<RTree<T, Params>>::contains","value":"pub fn contains(&Self, &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if a given element is equal (`==`) to an element in the\n r-tree.","sig":null,"attributes":[{"value":"/ Returns `true` if a given element is equal (`==`) to an element in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124070,"byte_end":124144,"line_start":538,"line_end":538,"column_start":5,"column_end":79}},{"value":"/ r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124149,"byte_end":124160,"line_start":539,"line_end":539,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124165,"byte_end":124168,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ This method will only work correctly if two equal elements also have the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124173,"byte_end":124249,"line_start":541,"line_end":541,"column_start":5,"column_end":81}},{"value":"/ same envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124254,"byte_end":124272,"line_start":542,"line_end":542,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124277,"byte_end":124280,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124285,"byte_end":124298,"line_start":544,"line_end":544,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124303,"byte_end":124310,"line_start":545,"line_end":545,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124315,"byte_end":124336,"line_start":546,"line_end":546,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124341,"byte_end":124344,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ let mut tree = RTree::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124349,"byte_end":124381,"line_start":548,"line_end":548,"column_start":5,"column_end":37}},{"value":"/ assert!(!tree.contains(&[0.0, 2.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124386,"byte_end":124427,"line_start":549,"line_end":549,"column_start":5,"column_end":46}},{"value":"/ tree.insert([0.0, 2.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124432,"byte_end":124460,"line_start":550,"line_end":550,"column_start":5,"column_end":33}},{"value":"/ assert!(tree.contains(&[0.0, 2.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124465,"byte_end":124505,"line_start":551,"line_end":551,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124510,"byte_end":124517,"line_start":552,"line_end":552,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125384,"byte_end":125390,"line_start":577,"line_end":577,"column_start":12,"column_end":18},"name":"remove","qualname":"<RTree<T, Params>>::remove","value":"pub fn remove(&mut Self, &T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns an element of the r-tree equal (`==`) to a given element.","sig":null,"attributes":[{"value":"/ Removes and returns an element of the r-tree equal (`==`) to a given element.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124636,"byte_end":124717,"line_start":557,"line_end":557,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124722,"byte_end":124725,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ If multiple elements equal to the given elements are contained in the tree, only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124730,"byte_end":124814,"line_start":559,"line_end":559,"column_start":5,"column_end":89}},{"value":"/ one of them is removed and returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124819,"byte_end":124859,"line_start":560,"line_end":560,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124864,"byte_end":124867,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ This method will only work correctly if two equal elements also have the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124872,"byte_end":124948,"line_start":562,"line_end":562,"column_start":5,"column_end":81}},{"value":"/ same envelope.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124953,"byte_end":124971,"line_start":563,"line_end":563,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124976,"byte_end":124979,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":124984,"byte_end":124997,"line_start":565,"line_end":565,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125002,"byte_end":125009,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125014,"byte_end":125035,"line_start":567,"line_end":567,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125040,"byte_end":125043,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ let mut tree = RTree::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125048,"byte_end":125080,"line_start":569,"line_end":569,"column_start":5,"column_end":37}},{"value":"/ tree.insert([0.0, 2.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125085,"byte_end":125113,"line_start":570,"line_end":570,"column_start":5,"column_end":33}},{"value":"/ // The element can be inserted twice just fine","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125118,"byte_end":125168,"line_start":571,"line_end":571,"column_start":5,"column_end":55}},{"value":"/ tree.insert([0.0, 2.0]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125173,"byte_end":125201,"line_start":572,"line_end":572,"column_start":5,"column_end":33}},{"value":"/ assert!(tree.remove(&[0.0, 2.0]).is_some());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125206,"byte_end":125254,"line_start":573,"line_end":573,"column_start":5,"column_end":53}},{"value":"/ assert!(tree.remove(&[0.0, 2.0]).is_some());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125259,"byte_end":125307,"line_start":574,"line_end":574,"column_start":5,"column_end":53}},{"value":"/ assert!(tree.remove(&[0.0, 2.0]).is_none());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125312,"byte_end":125360,"line_start":575,"line_end":575,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125365,"byte_end":125372,"line_start":576,"line_end":576,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126170,"byte_end":126186,"line_start":603,"line_end":603,"column_start":12,"column_end":28},"name":"nearest_neighbor","qualname":"<RTree<T, Params>>::nearest_neighbor","value":"pub fn nearest_neighbor(&Self, &<T::Envelope as Envelope>::Point)\n-> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest neighbor for a given point.","sig":null,"attributes":[{"value":"/ Returns the nearest neighbor for a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125648,"byte_end":125699,"line_start":588,"line_end":588,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125704,"byte_end":125707,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ The distance is calculated by calling","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125712,"byte_end":125753,"line_start":590,"line_end":590,"column_start":5,"column_end":46}},{"value":"/ [PointDistance::distance_2](traits.PointDistance.html#method.distance_2)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125758,"byte_end":125834,"line_start":591,"line_end":591,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125839,"byte_end":125842,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125847,"byte_end":125860,"line_start":593,"line_end":593,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125865,"byte_end":125872,"line_start":594,"line_end":594,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125877,"byte_end":125898,"line_start":595,"line_end":595,"column_start":5,"column_end":26}},{"value":"/ let tree = RTree::bulk_load(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125903,"byte_end":125940,"line_start":596,"line_end":596,"column_start":5,"column_end":42}},{"value":"/   [0.0, 0.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125945,"byte_end":125962,"line_start":597,"line_end":597,"column_start":5,"column_end":22}},{"value":"/   [0.0, 1.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125967,"byte_end":125984,"line_start":598,"line_end":598,"column_start":5,"column_end":22}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125989,"byte_end":125996,"line_start":599,"line_end":599,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(tree.nearest_neighbor(&[-1., 0.0]), Some(&[0.0, 0.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126001,"byte_end":126071,"line_start":600,"line_end":600,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(tree.nearest_neighbor(&[0.0, 2.0]), Some(&[0.0, 1.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126076,"byte_end":126146,"line_start":601,"line_end":601,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126151,"byte_end":126158,"line_start":602,"line_end":602,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127160,"byte_end":127182,"line_start":622,"line_end":622,"column_start":12,"column_end":34},"name":"locate_within_distance","qualname":"<RTree<T, Params>>::locate_within_distance","value":"pub fn locate_within_distance(&Self, <T::Envelope as Envelope>::Point,\n<<T::Envelope as Envelope>::Point as Point>::Scalar)\n-> LocateWithinDistanceIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns all elements of the tree within a certain distance.","sig":null,"attributes":[{"value":"/ Returns all elements of the tree within a certain distance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126649,"byte_end":126712,"line_start":614,"line_end":614,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126717,"byte_end":126720,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ The elements may be returned in any order. Each returned element","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126725,"byte_end":126793,"line_start":616,"line_end":616,"column_start":5,"column_end":73}},{"value":"/ will have a squared distance less or equal to the given squared distance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126798,"byte_end":126875,"line_start":617,"line_end":617,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126880,"byte_end":126883,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ This method makes use of [distance_2_if_less_or_equal](trait.PointDistance.html#method.distance_2_if_less_or_equal).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":126888,"byte_end":127008,"line_start":619,"line_end":619,"column_start":5,"column_end":125}},{"value":"/ If performance is critical and the distance calculation to the object is fast,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127013,"byte_end":127095,"line_start":620,"line_end":620,"column_start":5,"column_end":87}},{"value":"/ overwriting this function may be beneficial.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127100,"byte_end":127148,"line_start":621,"line_end":621,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128242,"byte_end":128263,"line_start":650,"line_end":650,"column_start":12,"column_end":33},"name":"nearest_neighbor_iter","qualname":"<RTree<T, Params>>::nearest_neighbor_iter","value":"pub fn nearest_neighbor_iter(&Self, &<T::Envelope as Envelope>::Point)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns all elements of the tree sorted by their distance to a given point.","sig":null,"attributes":[{"value":"/ Returns all elements of the tree sorted by their distance to a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127565,"byte_end":127644,"line_start":631,"line_end":631,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127649,"byte_end":127652,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ # Runtime","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127657,"byte_end":127670,"line_start":633,"line_end":633,"column_start":5,"column_end":18}},{"value":"/ Every `next()` call runs in `O(log(n))`. Creating the iterator runs in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127675,"byte_end":127749,"line_start":634,"line_end":634,"column_start":5,"column_end":79}},{"value":"/ `O(log(n))`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127754,"byte_end":127770,"line_start":635,"line_end":635,"column_start":5,"column_end":21}},{"value":"/ The [r-tree documentation](struct.RTree.html) contains more information about","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127775,"byte_end":127856,"line_start":636,"line_end":636,"column_start":5,"column_end":86}},{"value":"/ r-tree performance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127861,"byte_end":127884,"line_start":637,"line_end":637,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127889,"byte_end":127892,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127897,"byte_end":127910,"line_start":639,"line_end":639,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127915,"byte_end":127922,"line_start":640,"line_end":640,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127927,"byte_end":127948,"line_start":641,"line_end":641,"column_start":5,"column_end":26}},{"value":"/ let tree = RTree::bulk_load(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127953,"byte_end":127990,"line_start":642,"line_end":642,"column_start":5,"column_end":42}},{"value":"/   [0.0, 0.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":127995,"byte_end":128012,"line_start":643,"line_end":643,"column_start":5,"column_end":22}},{"value":"/   [0.0, 1.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128017,"byte_end":128034,"line_start":644,"line_end":644,"column_start":5,"column_end":22}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128039,"byte_end":128046,"line_start":645,"line_end":645,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128051,"byte_end":128054,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ let nearest_neighbors = tree.nearest_neighbor_iter(&[0.5, 0.0]).collect::<Vec<_>>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128059,"byte_end":128147,"line_start":647,"line_end":647,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(nearest_neighbors, vec![&[0.0, 0.0], &[0.0, 1.0]]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128152,"byte_end":128218,"line_start":648,"line_end":648,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128223,"byte_end":128230,"line_start":649,"line_end":649,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128794,"byte_end":128829,"line_start":662,"line_end":662,"column_start":12,"column_end":47},"name":"nearest_neighbor_iter_with_distance","qualname":"<RTree<T, Params>>::nearest_neighbor_iter_with_distance","value":"pub fn nearest_neighbor_iter_with_distance(&Self,\n&<T::Envelope as Envelope>::Point) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns `(element, distance^2)` tuples of the tree sorted by their distance to a given point.","sig":null,"attributes":[{"value":"/ Returns `(element, distance^2)` tuples of the tree sorted by their distance to a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128464,"byte_end":128561,"line_start":657,"line_end":657,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128566,"byte_end":128569,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ The distance is calculated by calling","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128574,"byte_end":128615,"line_start":659,"line_end":659,"column_start":5,"column_end":46}},{"value":"/ [PointDistance::distance_2](traits.PointDistance.html#method.distance_2).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128620,"byte_end":128697,"line_start":660,"line_end":660,"column_start":5,"column_end":82}},{"value":"deprecated(note =\n\"Please use nearest_neighbor_iter_with_distance_2 instead\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":128702,"byte_end":128782,"line_start":661,"line_end":661,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129339,"byte_end":129376,"line_start":673,"line_end":673,"column_start":12,"column_end":49},"name":"nearest_neighbor_iter_with_distance_2","qualname":"<RTree<T, Params>>::nearest_neighbor_iter_with_distance_2","value":"pub fn nearest_neighbor_iter_with_distance_2(&Self,\n&<T::Envelope as Envelope>::Point) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns `(element, distance^2)` tuples of the tree sorted by their distance to a given point.","sig":null,"attributes":[{"value":"/ Returns `(element, distance^2)` tuples of the tree sorted by their distance to a given point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129094,"byte_end":129191,"line_start":669,"line_end":669,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129196,"byte_end":129199,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ The distance is calculated by calling","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129204,"byte_end":129245,"line_start":671,"line_end":671,"column_start":5,"column_end":46}},{"value":"/ [PointDistance::distance_2](traits.PointDistance.html#method.distance_2).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129250,"byte_end":129327,"line_start":672,"line_end":672,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130255,"byte_end":130275,"line_start":696,"line_end":696,"column_start":12,"column_end":32},"name":"pop_nearest_neighbor","qualname":"<RTree<T, Params>>::pop_nearest_neighbor","value":"pub fn pop_nearest_neighbor(&mut Self, &<T::Envelope as Envelope>::Point)\n-> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the nearest neighbor for a given point and returns it.","sig":null,"attributes":[{"value":"/ Removes the nearest neighbor for a given point and returns it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129641,"byte_end":129707,"line_start":680,"line_end":680,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129712,"byte_end":129715,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ The distance is calculated by calling","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129720,"byte_end":129761,"line_start":682,"line_end":682,"column_start":5,"column_end":46}},{"value":"/ [PointDistance::distance_2](traits.PointDistance.html#method.distance_2).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129766,"byte_end":129843,"line_start":683,"line_end":683,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129848,"byte_end":129851,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129856,"byte_end":129869,"line_start":685,"line_end":685,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129874,"byte_end":129881,"line_start":686,"line_end":686,"column_start":5,"column_end":12}},{"value":"/ use rstar::RTree;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129886,"byte_end":129907,"line_start":687,"line_end":687,"column_start":5,"column_end":26}},{"value":"/ let mut tree = RTree::bulk_load(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129912,"byte_end":129953,"line_start":688,"line_end":688,"column_start":5,"column_end":46}},{"value":"/   [0.0, 0.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129958,"byte_end":129975,"line_start":689,"line_end":689,"column_start":5,"column_end":22}},{"value":"/   [0.0, 1.0],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":129980,"byte_end":129997,"line_start":690,"line_end":690,"column_start":5,"column_end":22}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130002,"byte_end":130009,"line_start":691,"line_end":691,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(tree.pop_nearest_neighbor(&[0.0, 0.0]), Some([0.0, 0.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130014,"byte_end":130087,"line_start":692,"line_end":692,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(tree.pop_nearest_neighbor(&[0.0, 0.0]), Some([0.0, 1.0]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130092,"byte_end":130165,"line_start":693,"line_end":693,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(tree.pop_nearest_neighbor(&[0.0, 0.0]), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130170,"byte_end":130231,"line_start":694,"line_end":694,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130236,"byte_end":130243,"line_start":695,"line_end":695,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":131081,"byte_end":131087,"line_start":722,"line_end":722,"column_start":12,"column_end":18},"name":"insert","qualname":"<RTree<T, Params>>::insert","value":"pub fn insert(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the r-tree.","sig":null,"attributes":[{"value":"/ Inserts a new element into the r-tree.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130747,"byte_end":130789,"line_start":714,"line_end":714,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130794,"byte_end":130797,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ If the element has already been present in the tree, it will now be present twice.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130802,"byte_end":130888,"line_start":716,"line_end":716,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130893,"byte_end":130896,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Runtime","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130901,"byte_end":130914,"line_start":718,"line_end":718,"column_start":5,"column_end":18}},{"value":"/ This method runs in `O(log(n))`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130919,"byte_end":130955,"line_start":719,"line_end":719,"column_start":5,"column_end":41}},{"value":"/ The [r-tree documentation](struct.RTree.html) contains more information about","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130960,"byte_end":131041,"line_start":720,"line_end":720,"column_start":5,"column_end":86}},{"value":"/ r-tree performance.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":131046,"byte_end":131069,"line_start":721,"line_end":721,"column_start":5,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2479,"byte_end":2483,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":4387,"byte_end":4391,"line_start":99,"line_end":99,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/bulk_load/bulk_load_sequential.rs","byte_start":10051,"byte_end":10067,"line_start":53,"line_end":53,"column_start":56,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/bulk_load/cluster_group_iterator.rs","byte_start":13635,"byte_end":13655,"line_start":10,"line_end":10,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/bulk_load/cluster_group_iterator.rs","byte_start":14043,"byte_end":14063,"line_start":25,"line_end":25,"column_start":35,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/intersection_iterator.rs","byte_start":17087,"byte_end":17107,"line_start":15,"line_end":15,"column_start":16,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/intersection_iterator.rs","byte_start":18420,"byte_end":18440,"line_start":60,"line_end":60,"column_start":29,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":22254,"byte_end":22271,"line_start":29,"line_end":29,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":22707,"byte_end":22724,"line_start":48,"line_end":48,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":23606,"byte_end":23626,"line_start":83,"line_end":83,"column_start":19,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":24073,"byte_end":24093,"line_start":102,"line_end":102,"column_start":32,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":30477,"byte_end":30501,"line_start":16,"line_end":16,"column_start":27,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":30656,"byte_end":30680,"line_start":25,"line_end":25,"column_start":28,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":30920,"byte_end":30944,"line_start":35,"line_end":35,"column_start":20,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":30999,"byte_end":31023,"line_start":37,"line_end":37,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":31181,"byte_end":31213,"line_start":46,"line_end":46,"column_start":13,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":32166,"byte_end":32198,"line_start":78,"line_end":78,"column_start":26,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":33125,"byte_end":33148,"line_start":113,"line_end":113,"column_start":13,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":33437,"byte_end":33460,"line_start":124,"line_end":124,"column_start":26,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":33904,"byte_end":33913,"line_start":147,"line_end":147,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":46134,"byte_end":46156,"line_start":28,"line_end":28,"column_start":28,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59791,"byte_end":59815,"line_start":47,"line_end":47,"column_start":9,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59983,"byte_end":60007,"line_start":56,"line_end":56,"column_start":34,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60405,"byte_end":60437,"line_start":76,"line_end":76,"column_start":9,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60613,"byte_end":60645,"line_start":85,"line_end":85,"column_start":34,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60970,"byte_end":60983,"line_start":100,"line_end":100,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":61321,"byte_end":61342,"line_start":118,"line_end":118,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":61524,"byte_end":61545,"line_start":127,"line_end":127,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":62079,"byte_end":62099,"line_start":150,"line_end":150,"column_start":13,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":62293,"byte_end":62313,"line_start":159,"line_end":159,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":62851,"byte_end":62879,"line_start":180,"line_end":180,"column_start":9,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":63251,"byte_end":63279,"line_start":195,"line_end":195,"column_start":34,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":63855,"byte_end":63878,"line_start":218,"line_end":218,"column_start":9,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":64097,"byte_end":64120,"line_start":230,"line_end":230,"column_start":34,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68551,"byte_end":68560,"line_start":45,"line_end":45,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68842,"byte_end":68851,"line_start":60,"line_end":60,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":69052,"byte_end":69062,"line_start":72,"line_end":72,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":78574,"byte_end":78575,"line_start":197,"line_end":197,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":78731,"byte_end":78732,"line_start":208,"line_end":208,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81912,"byte_end":81925,"line_start":61,"line_end":61,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86837,"byte_end":86838,"line_start":101,"line_end":101,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":89234,"byte_end":89235,"line_start":179,"line_end":179,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95441,"byte_end":95445,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95618,"byte_end":95622,"line_start":47,"line_end":47,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95785,"byte_end":95789,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":97160,"byte_end":97164,"line_start":106,"line_end":106,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99593,"byte_end":99606,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99896,"byte_end":99909,"line_start":47,"line_end":47,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":100079,"byte_end":100092,"line_start":58,"line_end":58,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101034,"byte_end":101043,"line_start":24,"line_end":24,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101920,"byte_end":101929,"line_start":55,"line_end":55,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102055,"byte_end":102064,"line_start":64,"line_end":64,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102198,"byte_end":102207,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102535,"byte_end":102544,"line_start":87,"line_end":87,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":104636,"byte_end":104641,"line_start":16,"line_end":16,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110248,"byte_end":110259,"line_start":159,"line_end":159,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110542,"byte_end":110547,"line_start":169,"line_end":169,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110903,"byte_end":110908,"line_start":183,"line_end":183,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":945},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111833,"byte_end":111838,"line_start":211,"line_end":211,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121010,"byte_end":121015,"line_start":452,"line_end":452,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123984,"byte_end":123989,"line_start":533,"line_end":533,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125572,"byte_end":125577,"line_start":583,"line_end":583,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130673,"byte_end":130678,"line_start":709,"line_end":709,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":131215,"byte_end":131220,"line_start":728,"line_end":728,"column_start":17,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/lib.rs","byte_start":1000,"byte_end":1010,"line_start":33,"line_end":33,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":758}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":2479,"byte_end":2483,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/aabb.rs","byte_start":4387,"byte_end":4391,"line_start":99,"line_end":99,"column_start":22,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1068},"to":{"krate":0,"index":586}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/bulk_load/bulk_load_sequential.rs","byte_start":10051,"byte_end":10067,"line_start":53,"line_end":53,"column_start":56,"column_end":72},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":112},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/bulk_load/cluster_group_iterator.rs","byte_start":13635,"byte_end":13655,"line_start":10,"line_end":10,"column_start":22,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/bulk_load/cluster_group_iterator.rs","byte_start":14043,"byte_end":14063,"line_start":25,"line_end":25,"column_start":35,"column_end":55},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/intersection_iterator.rs","byte_start":17087,"byte_end":17107,"line_start":15,"line_end":15,"column_start":16,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/intersection_iterator.rs","byte_start":18420,"byte_end":18440,"line_start":60,"line_end":60,"column_start":29,"column_end":49},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":22254,"byte_end":22271,"line_start":29,"line_end":29,"column_start":19,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":22707,"byte_end":22724,"line_start":48,"line_end":48,"column_start":32,"column_end":49},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":239},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":23606,"byte_end":23626,"line_start":83,"line_end":83,"column_start":19,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/iterators.rs","byte_start":24073,"byte_end":24093,"line_start":102,"line_end":102,"column_start":32,"column_end":52},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":257},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":30477,"byte_end":30501,"line_start":16,"line_end":16,"column_start":27,"column_end":51},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":309},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":30656,"byte_end":30680,"line_start":25,"line_end":25,"column_start":28,"column_end":52},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":309},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":30920,"byte_end":30944,"line_start":35,"line_end":35,"column_start":20,"column_end":44},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":309},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":30999,"byte_end":31023,"line_start":37,"line_end":37,"column_start":21,"column_end":45},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":309},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":31181,"byte_end":31213,"line_start":46,"line_end":46,"column_start":13,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":32166,"byte_end":32198,"line_start":78,"line_end":78,"column_start":26,"column_end":58},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":340},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":33125,"byte_end":33148,"line_start":113,"line_end":113,"column_start":13,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":33437,"byte_end":33460,"line_start":124,"line_end":124,"column_start":26,"column_end":49},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/nearest_neighbor.rs","byte_start":33904,"byte_end":33913,"line_start":147,"line_end":147,"column_start":14,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/rstar.rs","byte_start":46134,"byte_end":46156,"line_start":28,"line_end":28,"column_start":28,"column_end":50},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":440},"to":{"krate":0,"index":687}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59791,"byte_end":59815,"line_start":47,"line_end":47,"column_start":9,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":59983,"byte_end":60007,"line_start":56,"line_end":56,"column_start":34,"column_end":58},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":508},"to":{"krate":0,"index":504}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60405,"byte_end":60437,"line_start":76,"line_end":76,"column_start":9,"column_end":41},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60613,"byte_end":60645,"line_start":85,"line_end":85,"column_start":34,"column_end":66},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":518},"to":{"krate":0,"index":504}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":60970,"byte_end":60983,"line_start":100,"line_end":100,"column_start":34,"column_end":47},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":528},"to":{"krate":0,"index":504}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":61321,"byte_end":61342,"line_start":118,"line_end":118,"column_start":9,"column_end":30},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":61524,"byte_end":61545,"line_start":127,"line_end":127,"column_start":34,"column_end":55},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":533},"to":{"krate":0,"index":504}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":62079,"byte_end":62099,"line_start":150,"line_end":150,"column_start":13,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":62293,"byte_end":62313,"line_start":159,"line_end":159,"column_start":38,"column_end":58},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":543},"to":{"krate":0,"index":504}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":62851,"byte_end":62879,"line_start":180,"line_end":180,"column_start":9,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":63251,"byte_end":63279,"line_start":195,"line_end":195,"column_start":34,"column_end":62},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":556},"to":{"krate":0,"index":504}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":63855,"byte_end":63878,"line_start":218,"line_end":218,"column_start":9,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/algorithm/selection_functions.rs","byte_start":64097,"byte_end":64120,"line_start":230,"line_end":230,"column_start":34,"column_end":57},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":567},"to":{"krate":0,"index":504}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64819,"byte_end":64824,"line_start":9,"line_end":9,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2645},"to":{"krate":0,"index":586}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64827,"byte_end":64831,"line_start":9,"line_end":9,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":586}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64834,"byte_end":64843,"line_start":9,"line_end":9,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":2675},"to":{"krate":0,"index":586}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/envelope.rs","byte_start":64858,"byte_end":64863,"line_start":9,"line_end":9,"column_start":60,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":9595},"to":{"krate":0,"index":586}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68551,"byte_end":68560,"line_start":45,"line_end":45,"column_start":25,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1097},"to":{"krate":0,"index":644}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":68842,"byte_end":68851,"line_start":60,"line_end":60,"column_start":9,"column_end":18},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/node.rs","byte_start":69052,"byte_end":69062,"line_start":72,"line_end":72,"column_start":9,"column_end":19},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":76549,"byte_end":76560,"line_start":152,"line_end":152,"column_start":26,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":644},"to":{"krate":0,"index":647}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":78574,"byte_end":78575,"line_start":197,"line_end":197,"column_start":25,"column_end":26},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":652},"to":{"krate":0,"index":644}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/object.rs","byte_start":78731,"byte_end":78732,"line_start":208,"line_end":208,"column_start":27,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":656},"to":{"krate":0,"index":647}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80788,"byte_end":80792,"line_start":37,"line_end":37,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":677}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":80795,"byte_end":80799,"line_start":37,"line_end":37,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3036},"to":{"krate":0,"index":677}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/params.rs","byte_start":81912,"byte_end":81925,"line_start":61,"line_end":61,"column_start":22,"column_end":35},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1121},"to":{"krate":0,"index":677}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86753,"byte_end":86760,"line_start":99,"line_end":99,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":20,"index":230},"to":{"krate":0,"index":711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86763,"byte_end":86766,"line_start":99,"line_end":99,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":20,"index":923},"to":{"krate":0,"index":711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86769,"byte_end":86774,"line_start":99,"line_end":99,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2645},"to":{"krate":0,"index":711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86777,"byte_end":86781,"line_start":99,"line_end":99,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86784,"byte_end":86790,"line_start":99,"line_end":99,"column_start":52,"column_end":58},"kind":"SuperTrait","from":{"krate":20,"index":898},"to":{"krate":0,"index":711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86793,"byte_end":86803,"line_start":99,"line_end":99,"column_start":61,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":2722},"to":{"krate":0,"index":711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86806,"byte_end":86811,"line_start":99,"line_end":99,"column_start":74,"column_end":79},"kind":"SuperTrait","from":{"krate":2,"index":9595},"to":{"krate":0,"index":711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":86837,"byte_end":86838,"line_start":101,"line_end":101,"column_start":22,"column_end":23},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":713},"to":{"krate":0,"index":711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88322,"byte_end":88326,"line_start":157,"line_end":157,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":714}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88329,"byte_end":88334,"line_start":157,"line_end":157,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2645},"to":{"krate":0,"index":714}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88337,"byte_end":88346,"line_start":157,"line_end":157,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2675},"to":{"krate":0,"index":714}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":88349,"byte_end":88354,"line_start":157,"line_end":157,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":9595},"to":{"krate":0,"index":714}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":89234,"byte_end":89235,"line_start":179,"line_end":179,"column_start":22,"column_end":23},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":722},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/point.rs","byte_start":89307,"byte_end":89312,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":714},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95441,"byte_end":95445,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95618,"byte_end":95622,"line_start":47,"line_end":47,"column_start":25,"column_end":29},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1204},"to":{"krate":0,"index":644}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":95785,"byte_end":95789,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/line.rs","byte_start":97160,"byte_end":97164,"line_start":106,"line_end":106,"column_start":27,"column_end":31},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1204},"to":{"krate":0,"index":647}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99593,"byte_end":99606,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":99896,"byte_end":99909,"line_start":47,"line_end":47,"column_start":28,"column_end":41},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1233},"to":{"krate":0,"index":644}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/point_with_data.rs","byte_start":100079,"byte_end":100092,"line_start":58,"line_end":58,"column_start":30,"column_end":43},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1233},"to":{"krate":0,"index":647}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101034,"byte_end":101043,"line_start":24,"line_end":24,"column_start":9,"column_end":18},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":101920,"byte_end":101929,"line_start":55,"line_end":55,"column_start":27,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1281},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102055,"byte_end":102064,"line_start":64,"line_end":64,"column_start":25,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1281},"to":{"krate":0,"index":644}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102198,"byte_end":102207,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/primitives/rectangle.rs","byte_start":102535,"byte_end":102544,"line_start":87,"line_end":87,"column_start":27,"column_end":36},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1281},"to":{"krate":0,"index":647}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":104636,"byte_end":104641,"line_start":16,"line_end":16,"column_start":29,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1309},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110248,"byte_end":110259,"line_start":159,"line_end":159,"column_start":43,"column_end":54},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":929},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110542,"byte_end":110547,"line_start":169,"line_end":169,"column_start":39,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1309},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":110903,"byte_end":110908,"line_start":183,"line_end":183,"column_start":9,"column_end":14},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":111833,"byte_end":111838,"line_start":211,"line_end":211,"column_start":17,"column_end":22},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":121010,"byte_end":121015,"line_start":452,"line_end":452,"column_start":17,"column_end":22},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":123984,"byte_end":123989,"line_start":533,"line_end":533,"column_start":17,"column_end":22},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":125572,"byte_end":125577,"line_start":583,"line_end":583,"column_start":17,"column_end":22},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":130673,"byte_end":130678,"line_start":709,"line_end":709,"column_start":17,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.8.4/src/rtree.rs","byte_start":131215,"byte_end":131220,"line_start":728,"line_end":728,"column_start":17,"column_end":22},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}}]}