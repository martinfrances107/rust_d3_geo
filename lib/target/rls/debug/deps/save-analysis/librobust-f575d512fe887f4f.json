{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3","program":"/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","robust","--edition=2018","/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=f575d512fe887f4f","-C","extra-filename=-f575d512fe887f4f","--out-dir","/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","-L","dependency=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/librobust-f575d512fe887f4f.rmeta"},"prelude":{"crate_id":{"name":"robust","disambiguator":[18352132745156671957,0]},"crate_root":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src","external_crates":[{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}}],"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":0,"byte_end":45974,"line_start":1,"line_end":1279,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":0,"byte_end":45974,"line_start":1,"line_end":1279,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":111},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":" This is a direct transcript of the sourcecode and algorithms provided by\n Jonathan Richard Shewchuk ([https://www.cs.cmu.edu/~quake/robust.html](https://www.cs.cmu.edu/~quake/robust.html))\n See the paper and the source code for more information.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":531,"byte_end":556,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/ This is a direct transcript of the sourcecode and algorithms provided by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":558,"byte_end":634,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ Jonathan Richard Shewchuk ([https://www.cs.cmu.edu/~quake/robust.html](https://www.cs.cmu.edu/~quake/robust.html))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":635,"byte_end":753,"line_start":16,"line_end":16,"column_start":1,"column_end":119}},{"value":"/ See the paper and the source code for more information.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":754,"byte_end":813,"line_start":17,"line_end":17,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":814,"byte_end":817,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The module offers adaptive and precise calculations for orientation queries","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":818,"byte_end":897,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ (on which side of a line does a point lie?) and in-circle queries","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":898,"byte_end":967,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ (is a given point contained in the circumference of a triangle?)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":968,"byte_end":1036,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ The \"adaptive\" nature will increase performance only if a simpler calculation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1037,"byte_end":1118,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/ cannot be guaranteed to be accurate enough, yielding higher performance on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1119,"byte_end":1197,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ average.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1198,"byte_end":1210,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1211,"byte_end":1214,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The public API will accept both `f32` and `f64` input points for predicate checking, with input being converted to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1215,"byte_end":1333,"line_start":26,"line_end":26,"column_start":1,"column_end":119}},{"value":"/ `f64` values for internal use.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1334,"byte_end":1368,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/ This has no effect on precision, as the [IEEE-754 standard](https://drive.google.com/file/d/0B3O3Ys97VjtxYXBCY08wanNoZ1U/view) (section 5.3)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1369,"byte_end":1513,"line_start":28,"line_end":28,"column_start":1,"column_end":145}},{"value":"/ guarantees that conversion from `f32` to `f64` must be exact.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1514,"byte_end":1579,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1580,"byte_end":1583,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1584,"byte_end":1598,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1599,"byte_end":1602,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - `no_std`: Build without the Rust standard library","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1603,"byte_end":1658,"line_start":33,"line_end":33,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":111},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1746,"byte_end":1751,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"Coord","qualname":"::Coord","value":"Coord { x, y }","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"decl_id":null,"docs":" A two dimensional coordinate.\n","sig":null,"attributes":[{"value":"/ A two dimensional coordinate.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1660,"byte_end":1693,"line_start":35,"line_end":35,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":113},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1776,"byte_end":1777,"line_start":38,"line_end":38,"column_start":9,"column_end":10},"name":"x","qualname":"::Coord::x","value":"T","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":114},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":1790,"byte_end":1791,"line_start":39,"line_end":39,"column_start":9,"column_end":10},"name":"y","qualname":"::Coord::y","value":"T","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":2878,"byte_end":2886,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"orient2d","qualname":"::orient2d","value":"pub fn orient2d<T: Into<f64>>(Coord<T>, Coord<T>, Coord<T>) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns a positive value if the coordinates `pa`, `pb`, and `pc` occur in counterclockwise order\n (pc lies to the **left** of the directed line defined by coordinates pa and pb).  \n Returns a negative value if they occur in clockwise order (`pc` lies to the **right** of the directed line `pa, pb`).  \n Returns `0` if they are **collinear**.  \n","sig":null,"attributes":[{"value":"/ Returns a positive value if the coordinates `pa`, `pb`, and `pc` occur in counterclockwise order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":2514,"byte_end":2614,"line_start":54,"line_end":54,"column_start":1,"column_end":101}},{"value":"/ (pc lies to the **left** of the directed line defined by coordinates pa and pb).  ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":2615,"byte_end":2701,"line_start":55,"line_end":55,"column_start":1,"column_end":87}},{"value":"/ Returns a negative value if they occur in clockwise order (`pc` lies to the **right** of the directed line `pa, pb`).  ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":2702,"byte_end":2825,"line_start":56,"line_end":56,"column_start":1,"column_end":124}},{"value":"/ Returns `0` if they are **collinear**.  ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":2826,"byte_end":2870,"line_start":57,"line_end":57,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":6042,"byte_end":6050,"line_start":161,"line_end":161,"column_start":8,"column_end":16},"name":"incircle","qualname":"::incircle","value":"pub fn incircle<T: Into<f64>>(Coord<T>, Coord<T>, Coord<T>, Coord<T>) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns a positive value if the coordinate `pd` lies **outside** the circle passing through `pa`, `pb`, and `pc`.  \n Returns a negative value if it lies **inside** the circle.  \n Returns `0` if the four points are **cocircular**.\n","sig":null,"attributes":[{"value":"/ Returns a positive value if the coordinate `pd` lies **outside** the circle passing through `pa`, `pb`, and `pc`.  ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":5795,"byte_end":5914,"line_start":158,"line_end":158,"column_start":1,"column_end":120}},{"value":"/ Returns a negative value if it lies **inside** the circle.  ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":5915,"byte_end":5979,"line_start":159,"line_end":159,"column_start":1,"column_end":65}},{"value":"/ Returns `0` if the four points are **cocircular**.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/robust-0.2.3/src/lib.rs","byte_start":5980,"byte_end":6034,"line_start":160,"line_end":160,"column_start":1,"column_end":55}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}