{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3","program":"/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","oorandom","--edition=2018","/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=aea1f8f04a249a3d","-C","extra-filename=-aea1f8f04a249a3d","--out-dir","/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","-L","dependency=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/liboorandom-aea1f8f04a249a3d.rmeta"},"prelude":{"crate_id":{"name":"oorandom","disambiguator":[13548551830700916057,0]},"crate_root":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src","external_crates":[{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}}],"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":0,"byte_end":20759,"line_start":1,"line_end":586,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":0,"byte_end":20759,"line_start":1,"line_end":586,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":7},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":21}],"decl_id":null,"docs":" A tiny, robust PRNG implementation.","sig":null,"attributes":[{"value":"/ A tiny, robust PRNG implementation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":0,"byte_end":39,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":40,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ More specifically, it implements a single GOOD PRNG algorithm,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":44,"byte_end":110,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ which is currently a permuted congruential generator.  It has two","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":111,"byte_end":180,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"/ implementations, one that returns `u32` and one that returns","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":181,"byte_end":245,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ `u64`.  It also has functions that return floats or integer","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":246,"byte_end":309,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ ranges.  And that's it.  What more do you need?","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":310,"byte_end":361,"line_start":7,"line_end":7,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":362,"byte_end":365,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ For more info on PCG generators, see http://www.pcg-random.org/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":366,"byte_end":433,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":434,"byte_end":437,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This was designed as a minimalist utility for video games.  No","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":438,"byte_end":504,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ promises are made about its quality, and if you use it for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":505,"byte_end":567,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/ cryptography you will get what you deserve.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":568,"byte_end":615,"line_start":13,"line_end":13,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":616,"byte_end":619,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Works with `#![no_std]`, has no global state, no dependencies","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":620,"byte_end":685,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/ apart from some in the unit tests, and is generally neato.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":686,"byte_end":748,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":750,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"forbid(missing_docs)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":774,"byte_end":798,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"forbid(missing_debug_implementations)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":799,"byte_end":840,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"forbid(unused_results)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":841,"byte_end":867,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":868,"byte_end":878,"line_start":22,"line_end":22,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":35},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1044,"byte_end":1050,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Rand32","qualname":"::Rand32","value":"Rand32 {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":" A PRNG producing a 32-bit output.","sig":null,"attributes":[{"value":"/ A PRNG producing a 32-bit output.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":902,"byte_end":939,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":940,"byte_end":943,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The current implementation is `PCG-XSH-RR`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":944,"byte_end":991,"line_start":27,"line_end":27,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":8},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1332,"byte_end":1343,"line_start":39,"line_end":39,"column_start":15,"column_end":26},"name":"DEFAULT_INC","qualname":"::Rand32::DEFAULT_INC","value":"u64","parent":{"krate":0,"index":7},"children":[],"decl_id":null,"docs":" The default value for `increment`.\n This is basically arbitrary, it comes from the\n PCG reference C implementation:\n https://github.com/imneme/pcg-c/blob/master/include/pcg_variants.h#L284\n","sig":null,"attributes":[{"value":"/ The default value for `increment`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1104,"byte_end":1142,"line_start":35,"line_end":35,"column_start":5,"column_end":43}},{"value":"/ This is basically arbitrary, it comes from the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1147,"byte_end":1197,"line_start":36,"line_end":36,"column_start":5,"column_end":55}},{"value":"/ PCG reference C implementation:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1202,"byte_end":1237,"line_start":37,"line_end":37,"column_start":5,"column_end":40}},{"value":"/ https://github.com/imneme/pcg-c/blob/master/include/pcg_variants.h#L284","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1242,"byte_end":1317,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1729,"byte_end":1732,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Rand32>::new","value":"pub fn new(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG with the given seed and a default increment.\n","sig":null,"attributes":[{"value":"/ Creates a new PRNG with the given seed and a default increment.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1650,"byte_end":1717,"line_start":47,"line_end":47,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2189,"byte_end":2196,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"new_inc","qualname":"<Rand32>::new_inc","value":"pub fn new_inc(u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG.  The two inputs, `seed` and `increment`,\n determine what you get; `increment` basically selects which\n sequence of all those possible the PRNG will produce, and the\n `seed` selects where in that sequence you start.","sig":null,"attributes":[{"value":"/ Creates a new PRNG.  The two inputs, `seed` and `increment`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1812,"byte_end":1876,"line_start":52,"line_end":52,"column_start":5,"column_end":69}},{"value":"/ determine what you get; `increment` basically selects which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1881,"byte_end":1944,"line_start":53,"line_end":53,"column_start":5,"column_end":68}},{"value":"/ sequence of all those possible the PRNG will produce, and the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1949,"byte_end":2014,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ `seed` selects where in that sequence you start.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2019,"byte_end":2071,"line_start":55,"line_end":55,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2076,"byte_end":2079,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Both are arbitrary; increment must be an odd number but this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2084,"byte_end":2148,"line_start":57,"line_end":57,"column_start":5,"column_end":69}},{"value":"/ handles that for you","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2153,"byte_end":2177,"line_start":58,"line_end":58,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2768,"byte_end":2773,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"state","qualname":"<Rand32>::state","value":"pub fn state(&Self) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Returns the internal state of the PRNG.  This allows\n you to save a PRNG and create a new one that will resume\n from the same spot in the sequence.\n","sig":null,"attributes":[{"value":"/ Returns the internal state of the PRNG.  This allows","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2591,"byte_end":2647,"line_start":72,"line_end":72,"column_start":5,"column_end":61}},{"value":"/ you to save a PRNG and create a new one that will resume","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2652,"byte_end":2712,"line_start":73,"line_end":73,"column_start":5,"column_end":65}},{"value":"/ from the same spot in the sequence.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2717,"byte_end":2756,"line_start":74,"line_end":74,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":3050,"byte_end":3060,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"from_state","qualname":"<Rand32>::from_state","value":"pub fn from_state((u64, u64)) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG from a saved state from `Rand32::state()`.\n This is NOT quite the same as `new_inc()` because `new_inc()` does\n a little extra setup work to initialize the state.\n","sig":null,"attributes":[{"value":"/ Creates a new PRNG from a saved state from `Rand32::state()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2839,"byte_end":2904,"line_start":79,"line_end":79,"column_start":5,"column_end":70}},{"value":"/ This is NOT quite the same as `new_inc()` because `new_inc()` does","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2909,"byte_end":2979,"line_start":80,"line_end":80,"column_start":5,"column_end":75}},{"value":"/ a little extra setup work to initialize the state.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":2984,"byte_end":3038,"line_start":81,"line_end":81,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":3232,"byte_end":3240,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"rand_u32","qualname":"<Rand32>::rand_u32","value":"pub fn rand_u32(&mut Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `u32` in the range `[0, u32::MAX]`.\n","sig":null,"attributes":[{"value":"/ Produces a random `u32` in the range `[0, u32::MAX]`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":3163,"byte_end":3220,"line_start":87,"line_end":87,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":3660,"byte_end":3668,"line_start":99,"line_end":99,"column_start":12,"column_end":20},"name":"rand_i32","qualname":"<Rand32>::rand_i32","value":"pub fn rand_i32(&mut Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `i32` in the range `[i32::MIN, i32::MAX]`.\n","sig":null,"attributes":[{"value":"/ Produces a random `i32` in the range `[i32::MIN, i32::MAX]`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":3584,"byte_end":3648,"line_start":98,"line_end":98,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":3797,"byte_end":3807,"line_start":104,"line_end":104,"column_start":12,"column_end":22},"name":"rand_float","qualname":"<Rand32>::rand_float","value":"pub fn rand_float(&mut Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `f32` in the range `[0.0, 1.0)`.\n","sig":null,"attributes":[{"value":"/ Produces a random `f32` in the range `[0.0, 1.0)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":3731,"byte_end":3785,"line_start":103,"line_end":103,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":4835,"byte_end":4845,"line_start":125,"line_end":125,"column_start":12,"column_end":22},"name":"rand_range","qualname":"<Rand32>::rand_range","value":"pub fn rand_range(&mut Self, Range<u32>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Produces a random within the given bounds.  Like any `Range`,\n it includes the lower bound and excludes the upper one.","sig":null,"attributes":[{"value":"/ Produces a random within the given bounds.  Like any `Range`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":4514,"byte_end":4579,"line_start":119,"line_end":119,"column_start":5,"column_end":70}},{"value":"/ it includes the lower bound and excludes the upper one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":4584,"byte_end":4643,"line_start":120,"line_end":120,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":4648,"byte_end":4651,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This should be faster than `Self::rand() % end + start`, but the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":4656,"byte_end":4724,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ real advantage is it's more convenient.  Requires that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":4729,"byte_end":4787,"line_start":123,"line_end":123,"column_start":5,"column_end":63}},{"value":"/ `range.end <= range.start`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":4792,"byte_end":4823,"line_start":124,"line_end":124,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6350,"byte_end":6356,"line_start":161,"line_end":161,"column_start":12,"column_end":18},"name":"Rand64","qualname":"::Rand64","value":"Rand64 {  }","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" A PRNG producing a 64-bit output.","sig":null,"attributes":[{"value":"/ A PRNG producing a 64-bit output.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6050,"byte_end":6087,"line_start":154,"line_end":154,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6088,"byte_end":6091,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ The current implementation is `PCG-XSH-RR`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6092,"byte_end":6139,"line_start":156,"line_end":156,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":22},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6583,"byte_end":6594,"line_start":170,"line_end":170,"column_start":15,"column_end":26},"name":"DEFAULT_INC","qualname":"::Rand64::DEFAULT_INC","value":"u128","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" The default value for `increment`.","sig":null,"attributes":[{"value":"/ The default value for `increment`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6412,"byte_end":6450,"line_start":167,"line_end":167,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6455,"byte_end":6458,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ The value used here is from the PCG default C implementation: http://www.pcg-random.org/download.html","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6463,"byte_end":6568,"line_start":169,"line_end":169,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7019,"byte_end":7022,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"new","qualname":"<Rand64>::new","value":"pub fn new(u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG with the given seed and a default increment.\n","sig":null,"attributes":[{"value":"/ Creates a new PRNG with the given seed and a default increment.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6940,"byte_end":7007,"line_start":178,"line_end":178,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7146,"byte_end":7153,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"new_inc","qualname":"<Rand64>::new_inc","value":"pub fn new_inc(u128, u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Same as `Rand32::new_inc()`\n","sig":null,"attributes":[{"value":"/ Same as `Rand32::new_inc()`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7103,"byte_end":7134,"line_start":183,"line_end":183,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7617,"byte_end":7622,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"state","qualname":"<Rand64>::state","value":"pub fn state(&Self) -> (u128, u128)","parent":null,"children":[],"decl_id":null,"docs":" Returns the internal state of the PRNG.  This allows\n you to save a PRNG and create a new one that will resume\n from the same spot in the sequence.\n","sig":null,"attributes":[{"value":"/ Returns the internal state of the PRNG.  This allows","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7440,"byte_end":7496,"line_start":195,"line_end":195,"column_start":5,"column_end":61}},{"value":"/ you to save a PRNG and create a new one that will resume","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7501,"byte_end":7561,"line_start":196,"line_end":196,"column_start":5,"column_end":65}},{"value":"/ from the same spot in the sequence.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7566,"byte_end":7605,"line_start":197,"line_end":197,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7901,"byte_end":7911,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"from_state","qualname":"<Rand64>::from_state","value":"pub fn from_state((u128, u128)) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG from a saved state from `Rand32::state()`.\n This is NOT quite the same as `new_inc()` because `new_inc()` does\n a little extra setup work to initialize the state.\n","sig":null,"attributes":[{"value":"/ Creates a new PRNG from a saved state from `Rand32::state()`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7690,"byte_end":7755,"line_start":202,"line_end":202,"column_start":5,"column_end":70}},{"value":"/ This is NOT quite the same as `new_inc()` because `new_inc()` does","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7760,"byte_end":7830,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/ a little extra setup work to initialize the state.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":7835,"byte_end":7889,"line_start":204,"line_end":204,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":8084,"byte_end":8092,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"rand_u64","qualname":"<Rand64>::rand_u64","value":"pub fn rand_u64(&mut Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `u64` in the range`[0, u64::MAX]`.\n","sig":null,"attributes":[{"value":"/ Produces a random `u64` in the range`[0, u64::MAX]`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":8016,"byte_end":8072,"line_start":210,"line_end":210,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":8514,"byte_end":8522,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"rand_i64","qualname":"<Rand64>::rand_i64","value":"pub fn rand_i64(&mut Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `i64` in the range `[i64::MIN, i64::MAX]`.\n","sig":null,"attributes":[{"value":"/ Produces a random `i64` in the range `[i64::MIN, i64::MAX]`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":8438,"byte_end":8502,"line_start":221,"line_end":221,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":8651,"byte_end":8661,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"rand_float","qualname":"<Rand64>::rand_float","value":"pub fn rand_float(&mut Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `f64` in the range `[0.0, 1.0)`.\n","sig":null,"attributes":[{"value":"/ Produces a random `f64` in the range `[0.0, 1.0)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":8585,"byte_end":8639,"line_start":226,"line_end":226,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":9294,"byte_end":9304,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"rand_range","qualname":"<Rand64>::rand_range","value":"pub fn rand_range(&mut Self, Range<u64>) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Produces a random within the given bounds.  Like any `Range`,\n it includes the lower bound and excludes the upper one.","sig":null,"attributes":[{"value":"/ Produces a random within the given bounds.  Like any `Range`,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":8973,"byte_end":9038,"line_start":236,"line_end":236,"column_start":5,"column_end":70}},{"value":"/ it includes the lower bound and excludes the upper one.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":9043,"byte_end":9102,"line_start":237,"line_end":237,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":9107,"byte_end":9110,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This should be faster than `Self::rand() % end + start`, but the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":9115,"byte_end":9183,"line_start":239,"line_end":239,"column_start":5,"column_end":73}},{"value":"/ real advantage is it's more convenient.  Requires that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":9188,"byte_end":9246,"line_start":240,"line_end":240,"column_start":5,"column_end":63}},{"value":"/ `range.end <= range.start`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":9251,"byte_end":9282,"line_start":241,"line_end":241,"column_start":5,"column_end":36}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1091,"byte_end":1097,"line_start":34,"line_end":34,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6399,"byte_end":6405,"line_start":166,"line_end":166,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":1091,"byte_end":1097,"line_start":34,"line_end":34,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/oorandom-11.1.3/src/lib.rs","byte_start":6399,"byte_end":6405,"line_start":166,"line_end":166,"column_start":6,"column_end":12},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}}]}