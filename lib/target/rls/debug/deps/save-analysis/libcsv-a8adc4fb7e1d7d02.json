{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6","program":"/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","csv","--edition=2018","/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=a8adc4fb7e1d7d02","-C","extra-filename=-a8adc4fb7e1d7d02","--out-dir","/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","-L","dependency=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","--extern","bstr=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libbstr-0a80a90b6748a134.rmeta","--extern","csv_core=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libcsv_core-5207aef5d141a482.rmeta","--extern","itoa=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libitoa-d15bf2b143b83c3f.rmeta","--extern","ryu=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libryu-fbfbfcefd0c59b0a.rmeta","--extern","serde=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libserde-c947d780458f0fbc.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libcsv-a8adc4fb7e1d7d02.rmeta"},"prelude":{"crate_id":{"name":"csv","disambiguator":[7908308369217213226,0]},"crate_root":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src","external_crates":[{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","num":20,"id":{"name":"serde","disambiguator":[6983298613914056521,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","num":21,"id":{"name":"bstr","disambiguator":[12262820947345411304,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","num":22,"id":{"name":"memchr","disambiguator":[1148382120240393898,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","num":23,"id":{"name":"regex_automata","disambiguator":[13604218936308557644,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","num":24,"id":{"name":"lazy_static","disambiguator":[18045484163755490912,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","num":25,"id":{"name":"csv_core","disambiguator":[11494791239656073217,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/serializer.rs","num":26,"id":{"name":"itoa","disambiguator":[8139755905014119654,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/serializer.rs","num":27,"id":{"name":"ryu","disambiguator":[9495708289465993403,0]}}],"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":0,"byte_end":10434,"line_start":1,"line_end":359,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1399},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3806,"byte_end":3816,"line_start":156,"line_end":156,"column_start":30,"column_end":40},"alias_span":null,"name":"ByteRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1451},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3818,"byte_end":3832,"line_start":156,"line_end":156,"column_start":42,"column_end":56},"alias_span":null,"name":"ByteRecordIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1422},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3834,"byte_end":3842,"line_start":156,"line_end":156,"column_start":58,"column_end":66},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1491},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3875,"byte_end":3891,"line_start":157,"line_end":157,"column_start":31,"column_end":47},"alias_span":null,"name":"DeserializeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3893,"byte_end":3913,"line_start":157,"line_end":157,"column_start":49,"column_end":69},"alias_span":null,"name":"DeserializeErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1543},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3944,"byte_end":3949,"line_start":159,"line_end":159,"column_start":5,"column_end":10},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1548},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3951,"byte_end":3960,"line_start":159,"line_end":159,"column_start":12,"column_end":21},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1571},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3962,"byte_end":3975,"line_start":159,"line_end":159,"column_start":23,"column_end":36},"alias_span":null,"name":"FromUtf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":576},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3977,"byte_end":3991,"line_start":159,"line_end":159,"column_start":38,"column_end":52},"alias_span":null,"name":"IntoInnerError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":543},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3993,"byte_end":3999,"line_start":159,"line_end":159,"column_start":54,"column_end":60},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1585},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4001,"byte_end":4010,"line_start":159,"line_end":159,"column_start":62,"column_end":71},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":784},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4044,"byte_end":4063,"line_start":162,"line_end":162,"column_start":5,"column_end":24},"alias_span":null,"name":"ByteRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":798},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4065,"byte_end":4080,"line_start":162,"line_end":162,"column_start":26,"column_end":41},"alias_span":null,"name":"ByteRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":714},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4082,"byte_end":4108,"line_start":162,"line_end":162,"column_start":43,"column_end":69},"alias_span":null,"name":"DeserializeRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":733},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4114,"byte_end":4136,"line_start":163,"line_end":163,"column_start":5,"column_end":27},"alias_span":null,"name":"DeserializeRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1607},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4138,"byte_end":4144,"line_start":163,"line_end":163,"column_start":29,"column_end":35},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1599},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4146,"byte_end":4159,"line_start":163,"line_end":163,"column_start":37,"column_end":50},"alias_span":null,"name":"ReaderBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":754},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4161,"byte_end":4182,"line_start":163,"line_end":163,"column_start":52,"column_end":73},"alias_span":null,"name":"StringRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":768},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4188,"byte_end":4205,"line_start":164,"line_end":164,"column_start":5,"column_end":22},"alias_span":null,"name":"StringRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1654},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4241,"byte_end":4253,"line_start":166,"line_end":166,"column_start":32,"column_end":44},"alias_span":null,"name":"StringRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1662},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4255,"byte_end":4271,"line_start":166,"line_end":166,"column_start":46,"column_end":62},"alias_span":null,"name":"StringRecordIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1676},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4298,"byte_end":4304,"line_start":167,"line_end":167,"column_start":25,"column_end":31},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1669},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4306,"byte_end":4319,"line_start":167,"line_end":167,"column_start":33,"column_end":46},"alias_span":null,"name":"WriterBuilder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":0,"byte_end":10434,"line_start":1,"line_end":359,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":520},{"krate":0,"index":594},{"krate":0,"index":814},{"krate":0,"index":1137},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1709},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1381},{"krate":0,"index":1383},{"krate":0,"index":1725},{"krate":0,"index":1733},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1385},{"krate":0,"index":1387},{"krate":0,"index":1738},{"krate":0,"index":1749},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1394}],"decl_id":null,"docs":"The `csv` crate provides a fast and flexible CSV reader and writer, with\nsupport for Serde.","sig":null,"attributes":[{"value":"*\nThe `csv` crate provides a fast and flexible CSV reader and writer, with\nsupport for Serde.\n\nThe [tutorial](tutorial/index.html) is a good place to start if you're new to\nRust.\n\nThe [cookbook](cookbook/index.html) will give you a variety of complete Rust\nprograms that do CSV reading and writing.\n\n# Brief overview\n\n**If you're new to Rust**, you might find the\n[tutorial](tutorial/index.html)\nto be a good place to start.\n\nThe primary types in this crate are\n[`Reader`](struct.Reader.html)\nand\n[`Writer`](struct.Writer.html),\nfor reading and writing CSV data respectively.\nCorrespondingly, to support CSV data with custom field or record delimiters\n(among many other things), you should use either a\n[`ReaderBuilder`](struct.ReaderBuilder.html)\nor a\n[`WriterBuilder`](struct.WriterBuilder.html),\ndepending on whether you're reading or writing CSV data.\n\nUnless you're using Serde, the standard CSV record types are\n[`StringRecord`](struct.StringRecord.html)\nand\n[`ByteRecord`](struct.ByteRecord.html).\n`StringRecord` should be used when you know your data to be valid UTF-8.\nFor data that may be invalid UTF-8, `ByteRecord` is suitable.\n\nFinally, the set of errors is described by the\n[`Error`](struct.Error.html)\ntype.\n\nThe rest of the types in this crate mostly correspond to more detailed errors,\nposition information, configuration knobs or iterator types.\n\n# Setup\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\ncsv = \"1.1\"\n```\n\nIf you want to use Serde's custom derive functionality on your custom structs,\nthen add this to your `[dependencies]` section of `Cargo.toml`:\n\n```toml\n[dependencies]\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n# Example\n\nThis example shows how to read CSV data from stdin and print each record to\nstdout.\n\nThere are more examples in the [cookbook](cookbook/index.html).\n\n```no_run\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    // Build the CSV reader and iterate over each record.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // The iterator yields Result<StringRecord, Error>, so we check the\n        // error here.\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-basic < examples/data/smallpop.csv\n```\n\n# Example with Serde\n\nThis example shows how to read CSV data from stdin into your own custom struct.\nBy default, the member names of the struct are matched with the values in the\nheader record of your CSV data.\n\n```no_run\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\nstruct Record {\n    city: String,\n    region: String,\n    country: String,\n    population: Option<u64>,\n}\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        // Notice that we need to provide a type hint for automatic\n        // deserialization.\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-serde < examples/data/smallpop.csv\n```\n\n*/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":0,"byte_end":3692,"line_start":1,"line_end":148,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":3694,"byte_end":3716,"line_start":150,"line_end":150,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1399},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11840,"byte_end":11850,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"ByteRecord","qualname":"::byte_record::ByteRecord","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single CSV record stored as raw bytes.","sig":null,"attributes":[{"value":"/ A single CSV record stored as raw bytes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":10747,"byte_end":10791,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":10792,"byte_end":10795,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ A byte record permits reading or writing CSV rows that are not UTF-8.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":10796,"byte_end":10869,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ In general, you should prefer using a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":10870,"byte_end":10911,"line_start":17,"line_end":17,"column_start":1,"column_end":42}},{"value":"/ [`StringRecord`](struct.StringRecord.html)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":10912,"byte_end":10958,"line_start":18,"line_end":18,"column_start":1,"column_end":47}},{"value":"/ since it is more ergonomic, but a `ByteRecord` is provided in case you need","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":10959,"byte_end":11038,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11039,"byte_end":11046,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11047,"byte_end":11050,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ If you are using the Serde (de)serialization APIs, then you probably never","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11051,"byte_end":11129,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ need to interact with a `ByteRecord` or a `StringRecord`. However, there","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11130,"byte_end":11206,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ are some circumstances in which you might need to use a raw record type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11207,"byte_end":11282,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ while still using Serde. For example, if you need to deserialize possibly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11283,"byte_end":11360,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ invalid UTF-8 fields, then you'll need to first read your record into a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11361,"byte_end":11436,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ `ByteRecord`, and then use `ByteRecord::deserialize` to run Serde. Another","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11437,"byte_end":11515,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ reason for using the raw record deserialization APIs is if you're using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11516,"byte_end":11591,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ Serde to read into borrowed data such as a `&'a str` or a `&'a [u8]`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11592,"byte_end":11665,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11666,"byte_end":11669,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Two `ByteRecord`s are compared on the basis of their field data. Any","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11670,"byte_end":11742,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/ position information associated with the records is ignored.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11743,"byte_end":11807,"line_start":32,"line_end":32,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14308,"byte_end":14311,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<ByteRecord>::new","value":"pub fn new() -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ByteRecord`.","sig":null,"attributes":[{"value":"/ Create a new empty `ByteRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13675,"byte_end":13711,"line_start":103,"line_end":103,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13716,"byte_end":13719,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Note that you may find the `ByteRecord::from` constructor more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13724,"byte_end":13790,"line_start":105,"line_end":105,"column_start":5,"column_end":71}},{"value":"/ convenient, which is provided by an impl on the `From` trait.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13795,"byte_end":13860,"line_start":106,"line_end":106,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13865,"byte_end":13868,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example: create an empty record","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13873,"byte_end":13910,"line_start":108,"line_end":108,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13915,"byte_end":13918,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13923,"byte_end":13930,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13935,"byte_end":13959,"line_start":111,"line_end":111,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13964,"byte_end":13967,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13972,"byte_end":14007,"line_start":113,"line_end":113,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(record.len(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14012,"byte_end":14044,"line_start":114,"line_end":114,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14049,"byte_end":14056,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14061,"byte_end":14064,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Example: initialize a record from a `Vec`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14069,"byte_end":14116,"line_start":117,"line_end":117,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14121,"byte_end":14124,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14129,"byte_end":14136,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14141,"byte_end":14165,"line_start":120,"line_end":120,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14170,"byte_end":14173,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14178,"byte_end":14233,"line_start":122,"line_end":122,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14238,"byte_end":14270,"line_start":123,"line_end":123,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14275,"byte_end":14282,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14287,"byte_end":14296,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14660,"byte_end":14673,"line_start":136,"line_end":136,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<ByteRecord>::with_capacity","value":"pub fn with_capacity(usize, usize) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ByteRecord` with the given capacity settings.","sig":null,"attributes":[{"value":"/ Create a new empty `ByteRecord` with the given capacity settings.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14381,"byte_end":14450,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14455,"byte_end":14458,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ `buffer` refers to the capacity of the buffer used to store the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14463,"byte_end":14530,"line_start":132,"line_end":132,"column_start":5,"column_end":72}},{"value":"/ actual row contents. `fields` refers to the number of fields one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14535,"byte_end":14603,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/ might expect to store.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14608,"byte_end":14634,"line_start":134,"line_end":134,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14639,"byte_end":14648,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17864,"byte_end":17875,"line_start":229,"line_end":229,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<ByteRecord>::deserialize","value":"pub fn deserialize<'de, D: Deserialize>(&'de Self, Option<&'de ByteRecord>)\n-> Result<D>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize this record.","sig":null,"attributes":[{"value":"/ Deserialize this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14900,"byte_end":14928,"line_start":144,"line_end":144,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14933,"byte_end":14936,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ The `D` type parameter refers to the type that this record should be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":14941,"byte_end":15013,"line_start":146,"line_end":146,"column_start":5,"column_end":77}},{"value":"/ deserialized into. The `'de` lifetime refers to the lifetime of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15018,"byte_end":15089,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/ `ByteRecord`. The `'de` lifetime permits deserializing into structs","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15094,"byte_end":15165,"line_start":148,"line_end":148,"column_start":5,"column_end":76}},{"value":"/ that borrow field data from this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15170,"byte_end":15214,"line_start":149,"line_end":149,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15219,"byte_end":15222,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ An optional `headers` parameter permits deserializing into a struct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15227,"byte_end":15298,"line_start":151,"line_end":151,"column_start":5,"column_end":76}},{"value":"/ based on its field names (corresponding to header values) rather than","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15303,"byte_end":15376,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ the order in which the fields are defined.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15381,"byte_end":15427,"line_start":153,"line_end":153,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15432,"byte_end":15435,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ # Example: without headers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15440,"byte_end":15470,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15475,"byte_end":15478,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This shows how to deserialize a single row into a struct based on the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15483,"byte_end":15556,"line_start":157,"line_end":157,"column_start":5,"column_end":78}},{"value":"/ order in which fields occur. This example also shows how to borrow","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15561,"byte_end":15631,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/ fields from the `ByteRecord`, which results in zero allocation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15636,"byte_end":15702,"line_start":159,"line_end":159,"column_start":5,"column_end":71}},{"value":"/ deserialization.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15707,"byte_end":15727,"line_start":160,"line_end":160,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15732,"byte_end":15735,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15740,"byte_end":15747,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15752,"byte_end":15778,"line_start":163,"line_end":163,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15783,"byte_end":15786,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15791,"byte_end":15815,"line_start":165,"line_end":165,"column_start":5,"column_end":29}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15820,"byte_end":15847,"line_start":166,"line_end":166,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15852,"byte_end":15855,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15860,"byte_end":15886,"line_start":168,"line_end":168,"column_start":5,"column_end":31}},{"value":"/ struct Row<'a> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15891,"byte_end":15911,"line_start":169,"line_end":169,"column_start":5,"column_end":25}},{"value":"/     city: &'a str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15916,"byte_end":15938,"line_start":170,"line_end":170,"column_start":5,"column_end":27}},{"value":"/     country: &'a str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15943,"byte_end":15968,"line_start":171,"line_end":171,"column_start":5,"column_end":30}},{"value":"/     population: u64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":15973,"byte_end":15997,"line_start":172,"line_end":172,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16002,"byte_end":16007,"line_start":173,"line_end":173,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16012,"byte_end":16015,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16020,"byte_end":16058,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16063,"byte_end":16111,"line_start":176,"line_end":176,"column_start":5,"column_end":53}},{"value":"/     let record = ByteRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16116,"byte_end":16159,"line_start":177,"line_end":177,"column_start":5,"column_end":48}},{"value":"/         \"Boston\", \"United States\", \"4628910\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16164,"byte_end":16213,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/     ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16218,"byte_end":16229,"line_start":179,"line_end":179,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16234,"byte_end":16237,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/     let row: Row = record.deserialize(None)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16242,"byte_end":16291,"line_start":181,"line_end":181,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.city, \"Boston\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16296,"byte_end":16335,"line_start":182,"line_end":182,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(row.country, \"United States\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16340,"byte_end":16389,"line_start":183,"line_end":183,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.population, 4628910);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16394,"byte_end":16438,"line_start":184,"line_end":184,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16443,"byte_end":16457,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16462,"byte_end":16467,"line_start":186,"line_end":186,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16472,"byte_end":16479,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16484,"byte_end":16487,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Example: with headers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16492,"byte_end":16519,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16524,"byte_end":16527,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This example is like the previous one, but shows how to deserialize","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16532,"byte_end":16603,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/ into a struct based on the struct's field names. For this to work,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16608,"byte_end":16678,"line_start":192,"line_end":192,"column_start":5,"column_end":75}},{"value":"/ you must provide a header row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16683,"byte_end":16717,"line_start":193,"line_end":193,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16722,"byte_end":16725,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This example also shows that you can deserialize into owned data","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16730,"byte_end":16798,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/ types (e.g., `String`) instead of borrowed data types (e.g., `&str`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16803,"byte_end":16876,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16881,"byte_end":16884,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16889,"byte_end":16896,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16901,"byte_end":16927,"line_start":199,"line_end":199,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16932,"byte_end":16935,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16940,"byte_end":16964,"line_start":201,"line_end":201,"column_start":5,"column_end":29}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":16969,"byte_end":16996,"line_start":202,"line_end":202,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17001,"byte_end":17004,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17009,"byte_end":17035,"line_start":204,"line_end":204,"column_start":5,"column_end":31}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17040,"byte_end":17056,"line_start":205,"line_end":205,"column_start":5,"column_end":21}},{"value":"/     city: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17061,"byte_end":17082,"line_start":206,"line_end":206,"column_start":5,"column_end":26}},{"value":"/     country: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17087,"byte_end":17111,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/     population: u64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17116,"byte_end":17140,"line_start":208,"line_end":208,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17145,"byte_end":17150,"line_start":209,"line_end":209,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17155,"byte_end":17158,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17163,"byte_end":17201,"line_start":211,"line_end":211,"column_start":5,"column_end":43}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17206,"byte_end":17254,"line_start":212,"line_end":212,"column_start":5,"column_end":53}},{"value":"/     // Notice that the fields are not in the same order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17259,"byte_end":17318,"line_start":213,"line_end":213,"column_start":5,"column_end":64}},{"value":"/     // as the fields in the struct!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17323,"byte_end":17362,"line_start":214,"line_end":214,"column_start":5,"column_end":44}},{"value":"/     let header = ByteRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17367,"byte_end":17410,"line_start":215,"line_end":215,"column_start":5,"column_end":48}},{"value":"/         \"country\", \"city\", \"population\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17415,"byte_end":17459,"line_start":216,"line_end":216,"column_start":5,"column_end":49}},{"value":"/     ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17464,"byte_end":17475,"line_start":217,"line_end":217,"column_start":5,"column_end":16}},{"value":"/     let record = ByteRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17480,"byte_end":17523,"line_start":218,"line_end":218,"column_start":5,"column_end":48}},{"value":"/         \"United States\", \"Boston\", \"4628910\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17528,"byte_end":17577,"line_start":219,"line_end":219,"column_start":5,"column_end":54}},{"value":"/     ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17582,"byte_end":17593,"line_start":220,"line_end":220,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17598,"byte_end":17601,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/     let row: Row = record.deserialize(Some(&header))?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17606,"byte_end":17664,"line_start":222,"line_end":222,"column_start":5,"column_end":63}},{"value":"/     assert_eq!(row.city, \"Boston\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17669,"byte_end":17708,"line_start":223,"line_end":223,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(row.country, \"United States\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17713,"byte_end":17762,"line_start":224,"line_end":224,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.population, 4628910);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17767,"byte_end":17811,"line_start":225,"line_end":225,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17816,"byte_end":17830,"line_start":226,"line_end":226,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17835,"byte_end":17840,"line_start":227,"line_end":227,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":17845,"byte_end":17852,"line_start":228,"line_end":228,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18481,"byte_end":18485,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"iter","qualname":"<ByteRecord>::iter","value":"pub fn iter(&Self) -> ByteRecordIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all fields in this record.","sig":null,"attributes":[{"value":"/ Returns an iterator over all fields in this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18043,"byte_end":18098,"line_start":236,"line_end":236,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18103,"byte_end":18106,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18111,"byte_end":18124,"line_start":238,"line_end":238,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18129,"byte_end":18132,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ This example shows how to iterate over each field in a `ByteRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18137,"byte_end":18209,"line_start":240,"line_end":240,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18214,"byte_end":18217,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18222,"byte_end":18229,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18234,"byte_end":18258,"line_start":243,"line_end":243,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18263,"byte_end":18266,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18271,"byte_end":18326,"line_start":245,"line_end":245,"column_start":5,"column_end":60}},{"value":"/ for field in record.iter() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18331,"byte_end":18363,"line_start":246,"line_end":246,"column_start":5,"column_end":37}},{"value":"/     assert!(field == b\"a\" || field == b\"b\" || field == b\"c\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18368,"byte_end":18433,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18438,"byte_end":18443,"line_start":248,"line_end":248,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18448,"byte_end":18455,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18460,"byte_end":18469,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18932,"byte_end":18935,"line_start":269,"line_end":269,"column_start":12,"column_end":15},"name":"get","qualname":"<ByteRecord>::get","value":"pub fn get(&Self, usize) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the field at index `i`.","sig":null,"attributes":[{"value":"/ Return the field at index `i`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18549,"byte_end":18583,"line_start":255,"line_end":255,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18588,"byte_end":18591,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ If no field at index `i` exists, then this returns `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18596,"byte_end":18658,"line_start":257,"line_end":257,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18663,"byte_end":18666,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18671,"byte_end":18684,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18689,"byte_end":18692,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18697,"byte_end":18704,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18709,"byte_end":18733,"line_start":262,"line_end":262,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18738,"byte_end":18741,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18746,"byte_end":18801,"line_start":264,"line_end":264,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(record.get(1), Some(&b\"b\"[..]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18806,"byte_end":18853,"line_start":265,"line_end":265,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(record.get(3), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18858,"byte_end":18894,"line_start":266,"line_end":266,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18899,"byte_end":18906,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":18911,"byte_end":18920,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19268,"byte_end":19276,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ByteRecord>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this record is empty.","sig":null,"attributes":[{"value":"/ Returns true if and only if this record is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19047,"byte_end":19100,"line_start":273,"line_end":273,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19105,"byte_end":19108,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19113,"byte_end":19126,"line_start":275,"line_end":275,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19131,"byte_end":19134,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19139,"byte_end":19146,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19151,"byte_end":19175,"line_start":278,"line_end":278,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19180,"byte_end":19183,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ assert!(ByteRecord::new().is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19188,"byte_end":19230,"line_start":280,"line_end":280,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19235,"byte_end":19242,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19247,"byte_end":19256,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19595,"byte_end":19598,"line_start":298,"line_end":298,"column_start":12,"column_end":15},"name":"len","qualname":"<ByteRecord>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields in this record.","sig":null,"attributes":[{"value":"/ Returns the number of fields in this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19329,"byte_end":19377,"line_start":287,"line_end":287,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19382,"byte_end":19385,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19390,"byte_end":19403,"line_start":289,"line_end":289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19408,"byte_end":19411,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19416,"byte_end":19423,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19428,"byte_end":19452,"line_start":292,"line_end":292,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19457,"byte_end":19460,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19465,"byte_end":19520,"line_start":294,"line_end":294,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19525,"byte_end":19557,"line_start":295,"line_end":295,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19562,"byte_end":19569,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19574,"byte_end":19583,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20130,"byte_end":20138,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"truncate","qualname":"<ByteRecord>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Truncate this record to `n` fields.","sig":null,"attributes":[{"value":"/ Truncate this record to `n` fields.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19656,"byte_end":19695,"line_start":302,"line_end":302,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19700,"byte_end":19703,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ If `n` is greater than the number of fields in this record, then this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19708,"byte_end":19781,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ has no effect.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19786,"byte_end":19804,"line_start":305,"line_end":305,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19809,"byte_end":19812,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19817,"byte_end":19830,"line_start":307,"line_end":307,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19835,"byte_end":19838,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19843,"byte_end":19850,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19855,"byte_end":19879,"line_start":310,"line_end":310,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19884,"byte_end":19887,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19892,"byte_end":19951,"line_start":312,"line_end":312,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19956,"byte_end":19988,"line_start":313,"line_end":313,"column_start":5,"column_end":37}},{"value":"/ record.truncate(1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":19993,"byte_end":20016,"line_start":314,"line_end":314,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(record.len(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20021,"byte_end":20053,"line_start":315,"line_end":315,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(record, vec![\"a\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20058,"byte_end":20092,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20097,"byte_end":20104,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20109,"byte_end":20118,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20747,"byte_end":20752,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"clear","qualname":"<ByteRecord>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear this record so that it has zero fields.","sig":null,"attributes":[{"value":"/ Clear this record so that it has zero fields.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20247,"byte_end":20296,"line_start":325,"line_end":325,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20301,"byte_end":20304,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to calling `truncate(0)`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20309,"byte_end":20357,"line_start":327,"line_end":327,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20362,"byte_end":20365,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Note that it is not necessary to clear the record to reuse it with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20370,"byte_end":20440,"line_start":329,"line_end":329,"column_start":5,"column_end":75}},{"value":"/ the CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20445,"byte_end":20464,"line_start":330,"line_end":330,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20469,"byte_end":20472,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20477,"byte_end":20490,"line_start":332,"line_end":332,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20495,"byte_end":20498,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20503,"byte_end":20510,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20515,"byte_end":20539,"line_start":335,"line_end":335,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20544,"byte_end":20547,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20552,"byte_end":20611,"line_start":337,"line_end":337,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20616,"byte_end":20648,"line_start":338,"line_end":338,"column_start":5,"column_end":37}},{"value":"/ record.clear();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20653,"byte_end":20672,"line_start":339,"line_end":339,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(record.len(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20677,"byte_end":20709,"line_start":340,"line_end":340,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20714,"byte_end":20721,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20726,"byte_end":20735,"line_start":342,"line_end":342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21332,"byte_end":21336,"line_start":364,"line_end":364,"column_start":12,"column_end":16},"name":"trim","qualname":"<ByteRecord>::trim","value":"pub fn trim(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Trim the fields of this record so that leading and trailing whitespace\n is removed.","sig":null,"attributes":[{"value":"/ Trim the fields of this record so that leading and trailing whitespace","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20803,"byte_end":20877,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ is removed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20882,"byte_end":20897,"line_start":348,"line_end":348,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20902,"byte_end":20905,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ This method uses the ASCII definition of whitespace. That is, only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20910,"byte_end":20980,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/ bytes in the class `[\\t\\n\\v\\f\\r ]` are trimmed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":20985,"byte_end":21036,"line_start":351,"line_end":351,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21041,"byte_end":21044,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21049,"byte_end":21062,"line_start":353,"line_end":353,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21067,"byte_end":21070,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21075,"byte_end":21082,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21087,"byte_end":21111,"line_start":356,"line_end":356,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21116,"byte_end":21119,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21124,"byte_end":21167,"line_start":358,"line_end":358,"column_start":5,"column_end":48}},{"value":"/     \"  \", \"\\tfoo\", \"bar  \", \"b a z\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21172,"byte_end":21212,"line_start":359,"line_end":359,"column_start":5,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21217,"byte_end":21224,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ record.trim();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21229,"byte_end":21247,"line_start":361,"line_end":361,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(record, vec![\"\", \"foo\", \"bar\", \"b a z\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21252,"byte_end":21308,"line_start":362,"line_end":362,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21313,"byte_end":21320,"line_start":363,"line_end":363,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22068,"byte_end":22078,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"push_field","qualname":"<ByteRecord>::push_field","value":"pub fn push_field(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Add a new field to this record.","sig":null,"attributes":[{"value":"/ Add a new field to this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21793,"byte_end":21828,"line_start":379,"line_end":379,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21833,"byte_end":21836,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21841,"byte_end":21854,"line_start":381,"line_end":381,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21859,"byte_end":21862,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21867,"byte_end":21874,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21879,"byte_end":21903,"line_start":384,"line_end":384,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21908,"byte_end":21911,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21916,"byte_end":21955,"line_start":386,"line_end":386,"column_start":5,"column_end":44}},{"value":"/ record.push_field(b\"foo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21960,"byte_end":21990,"line_start":387,"line_end":387,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(&record[0], b\"foo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":21995,"byte_end":22030,"line_start":388,"line_end":388,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22035,"byte_end":22042,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22047,"byte_end":22056,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23621,"byte_end":23629,"line_start":438,"line_end":438,"column_start":12,"column_end":20},"name":"position","qualname":"<ByteRecord>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position of this record, if available.","sig":null,"attributes":[{"value":"/ Return the position of this record, if available.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22362,"byte_end":22415,"line_start":400,"line_end":400,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22420,"byte_end":22423,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22428,"byte_end":22441,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22446,"byte_end":22449,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22454,"byte_end":22461,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22466,"byte_end":22492,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22497,"byte_end":22500,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ use csv::{ByteRecord, ReaderBuilder};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22505,"byte_end":22546,"line_start":407,"line_end":407,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22551,"byte_end":22554,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22559,"byte_end":22598,"line_start":409,"line_end":409,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22603,"byte_end":22651,"line_start":410,"line_end":410,"column_start":5,"column_end":53}},{"value":"/     let mut record = ByteRecord::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22656,"byte_end":22699,"line_start":411,"line_end":411,"column_start":5,"column_end":48}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22704,"byte_end":22746,"line_start":412,"line_end":412,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22751,"byte_end":22782,"line_start":413,"line_end":413,"column_start":5,"column_end":36}},{"value":"/         .from_reader(\"a,b,c\\nx,y,z\".as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22787,"byte_end":22839,"line_start":414,"line_end":414,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22844,"byte_end":22847,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/     assert!(rdr.read_byte_record(&mut record)?);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22852,"byte_end":22904,"line_start":416,"line_end":416,"column_start":5,"column_end":57}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22909,"byte_end":22918,"line_start":417,"line_end":417,"column_start":5,"column_end":14}},{"value":"/         let pos = record.position().expect(\"a record position\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22923,"byte_end":22991,"line_start":418,"line_end":418,"column_start":5,"column_end":73}},{"value":"/         assert_eq!(pos.byte(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":22996,"byte_end":23034,"line_start":419,"line_end":419,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.line(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23039,"byte_end":23077,"line_start":420,"line_end":420,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.record(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23082,"byte_end":23122,"line_start":421,"line_end":421,"column_start":5,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23127,"byte_end":23136,"line_start":422,"line_end":422,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23141,"byte_end":23144,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/     assert!(rdr.read_byte_record(&mut record)?);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23149,"byte_end":23201,"line_start":424,"line_end":424,"column_start":5,"column_end":57}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23206,"byte_end":23215,"line_start":425,"line_end":425,"column_start":5,"column_end":14}},{"value":"/         let pos = record.position().expect(\"a record position\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23220,"byte_end":23288,"line_start":426,"line_end":426,"column_start":5,"column_end":73}},{"value":"/         assert_eq!(pos.byte(), 6);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23293,"byte_end":23331,"line_start":427,"line_end":427,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.line(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23336,"byte_end":23374,"line_start":428,"line_end":428,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.record(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23379,"byte_end":23419,"line_start":429,"line_end":429,"column_start":5,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23424,"byte_end":23433,"line_start":430,"line_end":430,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23438,"byte_end":23441,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/     // Finish the CSV reader for good measure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23446,"byte_end":23496,"line_start":432,"line_end":432,"column_start":5,"column_end":55}},{"value":"/     assert!(!rdr.read_byte_record(&mut record)?);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23501,"byte_end":23554,"line_start":433,"line_end":433,"column_start":5,"column_end":58}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23559,"byte_end":23573,"line_start":434,"line_end":434,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23578,"byte_end":23583,"line_start":435,"line_end":435,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23588,"byte_end":23595,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23600,"byte_end":23609,"line_start":437,"line_end":437,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24157,"byte_end":24169,"line_start":459,"line_end":459,"column_start":12,"column_end":24},"name":"set_position","qualname":"<ByteRecord>::set_position","value":"pub fn set_position(&mut Self, Option<Position>)","parent":null,"children":[],"decl_id":null,"docs":" Set the position of this record.","sig":null,"attributes":[{"value":"/ Set the position of this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23699,"byte_end":23735,"line_start":442,"line_end":442,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23740,"byte_end":23743,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23748,"byte_end":23761,"line_start":444,"line_end":444,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23766,"byte_end":23769,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23774,"byte_end":23781,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, Position};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23786,"byte_end":23822,"line_start":447,"line_end":447,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23827,"byte_end":23830,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23835,"byte_end":23894,"line_start":449,"line_end":449,"column_start":5,"column_end":64}},{"value":"/ let mut pos = Position::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23899,"byte_end":23933,"line_start":450,"line_end":450,"column_start":5,"column_end":39}},{"value":"/ pos.set_byte(100);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23938,"byte_end":23960,"line_start":451,"line_end":451,"column_start":5,"column_end":27}},{"value":"/ pos.set_line(4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23965,"byte_end":23985,"line_start":452,"line_end":452,"column_start":5,"column_end":25}},{"value":"/ pos.set_record(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":23990,"byte_end":24012,"line_start":453,"line_end":453,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24017,"byte_end":24020,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ record.set_position(Some(pos.clone()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24025,"byte_end":24068,"line_start":455,"line_end":455,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(record.position(), Some(&pos));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24073,"byte_end":24119,"line_start":456,"line_end":456,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24124,"byte_end":24131,"line_start":457,"line_end":457,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24136,"byte_end":24145,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24782,"byte_end":24787,"line_start":479,"line_end":479,"column_start":12,"column_end":17},"name":"range","qualname":"<ByteRecord>::range","value":"pub fn range(&Self, usize) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return the start and end position of a field in this record.","sig":null,"attributes":[{"value":"/ Return the start and end position of a field in this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24243,"byte_end":24307,"line_start":463,"line_end":463,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24312,"byte_end":24315,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ If no such field exists at the given index, then return `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24320,"byte_end":24387,"line_start":465,"line_end":465,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24392,"byte_end":24395,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ The range returned can be used with the slice returned by `as_slice`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24400,"byte_end":24473,"line_start":467,"line_end":467,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24478,"byte_end":24481,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24486,"byte_end":24499,"line_start":469,"line_end":469,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24504,"byte_end":24507,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24512,"byte_end":24519,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24524,"byte_end":24548,"line_start":472,"line_end":472,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24553,"byte_end":24556,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"foo\", \"quux\", \"z\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24561,"byte_end":24621,"line_start":474,"line_end":474,"column_start":5,"column_end":65}},{"value":"/ let range = record.range(1).expect(\"a record range\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24626,"byte_end":24683,"line_start":475,"line_end":475,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(&record.as_slice()[range], &b\"quux\"[..]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24688,"byte_end":24744,"line_start":476,"line_end":476,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24749,"byte_end":24756,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24761,"byte_end":24770,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25301,"byte_end":25309,"line_start":496,"line_end":496,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<ByteRecord>::as_slice","value":"pub fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the entire row as a single byte slice. The slice returned stores\n all fields contiguously. The boundaries of each field can be determined\n via the `range` method.","sig":null,"attributes":[{"value":"/ Return the entire row as a single byte slice. The slice returned stores","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24871,"byte_end":24946,"line_start":483,"line_end":483,"column_start":5,"column_end":80}},{"value":"/ all fields contiguously. The boundaries of each field can be determined","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":24951,"byte_end":25026,"line_start":484,"line_end":484,"column_start":5,"column_end":80}},{"value":"/ via the `range` method.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25031,"byte_end":25058,"line_start":485,"line_end":485,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25063,"byte_end":25066,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25071,"byte_end":25084,"line_start":487,"line_end":487,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25089,"byte_end":25092,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25097,"byte_end":25104,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25109,"byte_end":25133,"line_start":490,"line_end":490,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25138,"byte_end":25141,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"foo\", \"quux\", \"z\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25146,"byte_end":25206,"line_start":492,"line_end":492,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(record.as_slice(), &b\"fooquuxz\"[..]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25211,"byte_end":25263,"line_start":493,"line_end":493,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25268,"byte_end":25275,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":25280,"byte_end":25289,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1422},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28389,"byte_end":28397,"line_start":588,"line_end":588,"column_start":12,"column_end":20},"name":"Position","qualname":"::byte_record::Position","value":"Position {  }","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425}],"decl_id":null,"docs":" A position in CSV data.","sig":null,"attributes":[{"value":"/ A position in CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":27996,"byte_end":28023,"line_start":579,"line_end":579,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28024,"byte_end":28027,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ A position is used to report errors in CSV data. All positions include the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28028,"byte_end":28106,"line_start":581,"line_end":581,"column_start":1,"column_end":79}},{"value":"/ byte offset, line number and record index at which the error occurred.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28107,"byte_end":28181,"line_start":582,"line_end":582,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28182,"byte_end":28185,"line_start":583,"line_end":583,"column_start":1,"column_end":4}},{"value":"/ Byte offsets and record indices start at `0`. Line numbers start at `1`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28186,"byte_end":28262,"line_start":584,"line_end":584,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28263,"byte_end":28266,"line_start":585,"line_end":585,"column_start":1,"column_end":4}},{"value":"/ A CSV reader will automatically assign the position of each record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28267,"byte_end":28338,"line_start":586,"line_end":586,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28554,"byte_end":28557,"line_start":597,"line_end":597,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"pub fn new() -> Position","parent":null,"children":[],"decl_id":null,"docs":" Returns a new position initialized to the start value.\n","sig":null,"attributes":[{"value":"/ Returns a new position initialized to the start value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28470,"byte_end":28528,"line_start":595,"line_end":595,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28533,"byte_end":28542,"line_start":596,"line_end":596,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28715,"byte_end":28719,"line_start":603,"line_end":603,"column_start":12,"column_end":16},"name":"byte","qualname":"<Position>::byte","value":"pub fn byte(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The byte offset, starting at `0`, of this position.\n","sig":null,"attributes":[{"value":"/ The byte offset, starting at `0`, of this position.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28634,"byte_end":28689,"line_start":601,"line_end":601,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28694,"byte_end":28703,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28845,"byte_end":28849,"line_start":608,"line_end":608,"column_start":12,"column_end":16},"name":"line","qualname":"<Position>::line","value":"pub fn line(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The line number, starting at `1`, of this position.\n","sig":null,"attributes":[{"value":"/ The line number, starting at `1`, of this position.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28764,"byte_end":28819,"line_start":606,"line_end":606,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28824,"byte_end":28833,"line_start":607,"line_end":607,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28980,"byte_end":28986,"line_start":613,"line_end":613,"column_start":12,"column_end":18},"name":"record","qualname":"<Position>::record","value":"pub fn record(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The record index, starting with the first record at `0`.\n","sig":null,"attributes":[{"value":"/ The record index, starting with the first record at `0`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28894,"byte_end":28954,"line_start":611,"line_end":611,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28959,"byte_end":28968,"line_start":612,"line_end":612,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29101,"byte_end":29109,"line_start":619,"line_end":619,"column_start":12,"column_end":20},"name":"set_byte","qualname":"<Position>::set_byte","value":"pub fn set_byte(&mut Self, u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the byte offset of this position.\n","sig":null,"attributes":[{"value":"/ Set the byte offset of this position.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29034,"byte_end":29075,"line_start":617,"line_end":617,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29080,"byte_end":29089,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29346,"byte_end":29354,"line_start":628,"line_end":628,"column_start":12,"column_end":20},"name":"set_line","qualname":"<Position>::set_line","value":"pub fn set_line(&mut Self, u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the line number of this position.","sig":null,"attributes":[{"value":"/ Set the line number of this position.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29201,"byte_end":29242,"line_start":624,"line_end":624,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29247,"byte_end":29250,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ If the line number is less than `1`, then this method panics.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29255,"byte_end":29320,"line_start":626,"line_end":626,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29325,"byte_end":29334,"line_start":627,"line_end":627,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29541,"byte_end":29551,"line_start":636,"line_end":636,"column_start":12,"column_end":22},"name":"set_record","qualname":"<Position>::set_record","value":"pub fn set_record(&mut Self, u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the record index of this position.\n","sig":null,"attributes":[{"value":"/ Set the record index of this position.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29473,"byte_end":29515,"line_start":634,"line_end":634,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":29520,"byte_end":29529,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1451},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":33161,"byte_end":33175,"line_start":777,"line_end":777,"column_start":12,"column_end":26},"name":"ByteRecordIter","qualname":"::byte_record::ByteRecordIter","value":"ByteRecordIter {  }","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457}],"decl_id":null,"docs":" A double-ended iterator over the fields in a byte record.","sig":null,"attributes":[{"value":"/ A double-ended iterator over the fields in a byte record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32960,"byte_end":33021,"line_start":772,"line_end":772,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":33022,"byte_end":33025,"line_start":773,"line_end":773,"column_start":1,"column_end":4}},{"value":"/ The `'r` lifetime variable refers to the lifetime of the `ByteRecord` that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":33026,"byte_end":33104,"line_start":774,"line_end":774,"column_start":1,"column_end":79}},{"value":"/ is being iterated over.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":33105,"byte_end":33132,"line_start":775,"line_end":775,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":240},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/cookbook.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cookbook","qualname":"::cookbook","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/cookbook.rs","parent":null,"children":[],"decl_id":null,"docs":"A cookbook of examples for CSV reading and writing.","sig":null,"attributes":[{"value":"*\nA cookbook of examples for CSV reading and writing.\n\n# List of examples\n\nThis is a list of examples that follow. Each of them can be found in the\n`examples` directory of the\n[`rust-csv`](https://github.com/BurntSushi/rust-csv)\nrepository.\n\nFor **reading** CSV:\n\n1. [Basic](#reading-basic)\n2. [With Serde](#reading-with-serde)\n3. [Setting a different delimiter](#reading-setting-a-different-delimiter)\n4. [Without headers](#reading-without-headers)\n\nFor **writing** CSV:\n\n5. [Basic](#writing-basic)\n6. [With Serde](#writing-with-serde)\n\nPlease\n[submit a pull request](https://github.com/BurntSushi/rust-csv/pulls)\nif you're interested in adding an example to this list!\n\n# Reading: basic\n\nThis example shows how to read CSV data from stdin and print each record to\nstdout.\n\n```no_run\n# //cookbook-read-basic.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    // Build the CSV reader and iterate over each record.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // The iterator yields Result<StringRecord, Error>, so we check the\n        // error here..\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-basic < examples/data/smallpop.csv\n```\n\n# Reading: with Serde\n\nThis is like the previous example, except it shows how to deserialize each\nrecord into a struct type that you define.\n\nFor more examples and details on how Serde deserialization works, see the\n[`Reader::deserialize`](../struct.Reader.html#method.deserialize)\nmethod.\n\n```no_run\n# //cookbook-read-serde.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Deserialize;\n\n// By default, struct field names are deserialized based on the position of\n// a corresponding field in the CSV data's header record.\n#[derive(Debug, Deserialize)]\nstruct Record {\n    city: String,\n    region: String,\n    country: String,\n    population: Option<u64>,\n}\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        // Notice that we need to provide a type hint for automatic\n        // deserialization.\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-serde < examples/data/smallpop.csv\n```\n\n# Reading: setting a different delimiter\n\nThis example shows how to read CSV data from stdin where fields are separated\nby `:` instead of `,`.\n\n```no_run\n# //cookbook-read-colon.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::ReaderBuilder::new()\n        .delimiter(b':')\n        .from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-colon < examples/data/smallpop-colon.csv\n```\n\n# Reading: without headers\n\nThe CSV reader in this crate assumes that CSV data has a header record by\ndefault, but the setting can be toggled. When enabled, the first record in\nCSV data in interpreted as the header record and is skipped. When disabled, the\nfirst record is not skipped. This example shows how to disable that setting.\n\n```no_run\n# //cookbook-read-no-headers.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::ReaderBuilder::new()\n        .has_headers(false)\n        .from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-no-headers < examples/data/smallpop-no-headers.csv\n```\n\n# Writing: basic\n\nThis example shows how to write CSV data to stdout.\n\n```no_run\n# //cookbook-write-basic.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // When writing records without Serde, the header record is written just\n    // like any other record.\n    wtr.write_record(&[\"city\", \"region\", \"country\", \"population\"])?;\n    wtr.write_record(&[\"Southborough\", \"MA\", \"United States\", \"9686\"])?;\n    wtr.write_record(&[\"Northbridge\", \"MA\", \"United States\", \"14061\"])?;\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-write-basic > /tmp/simplepop.csv\n```\n\n# Writing: with Serde\n\nThis example shows how to write CSV data to stdout with Serde. Namely, we\nrepresent each record using a custom struct that we define. In this example,\nheaders are written automatically.\n\n```no_run\n# //cookbook-write-serde.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Serialize;\n\n#[derive(Debug, Serialize)]\nstruct Record {\n    city: String,\n    region: String,\n    country: String,\n    population: Option<u64>,\n}\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // When writing records with Serde using structs, the header row is written\n    // automatically.\n    wtr.serialize(Record {\n        city: \"Southborough\".to_string(),\n        region: \"MA\".to_string(),\n        country: \"United States\".to_string(),\n        population: Some(9686),\n    })?;\n    wtr.serialize(Record {\n        city: \"Northbridge\".to_string(),\n        region: \"MA\".to_string(),\n        country: \"United States\".to_string(),\n        population: Some(14061),\n    })?;\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-write-serde > /tmp/simplepop.csv\n```\n*/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/cookbook.rs","byte_start":43972,"byte_end":51091,"line_start":1,"line_end":294,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1491},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70085,"byte_end":70101,"line_start":660,"line_end":660,"column_start":12,"column_end":28},"name":"DeserializeError","qualname":"::deserializer::DeserializeError","value":"DeserializeError {  }","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1493}],"decl_id":null,"docs":" An Serde deserialization error.\n","sig":null,"attributes":[{"value":"/ An Serde deserialization error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":69999,"byte_end":70034,"line_start":658,"line_end":658,"column_start":1,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1506},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70332,"byte_end":70339,"line_start":669,"line_end":669,"column_start":5,"column_end":12},"name":"Message","qualname":"::deserializer::DeserializeErrorKind::Message","value":"DeserializeErrorKind::Message(String)","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" A generic Serde deserialization error.\n","sig":null,"attributes":[{"value":"/ A generic Serde deserialization error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70285,"byte_end":70327,"line_start":668,"line_end":668,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1509},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70396,"byte_end":70407,"line_start":671,"line_end":671,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::deserializer::DeserializeErrorKind::Unsupported","value":"DeserializeErrorKind::Unsupported(String)","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" A generic Serde unsupported error.\n","sig":null,"attributes":[{"value":"/ A generic Serde unsupported error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70353,"byte_end":70391,"line_start":670,"line_end":670,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1512},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70542,"byte_end":70560,"line_start":674,"line_end":674,"column_start":5,"column_end":23},"name":"UnexpectedEndOfRow","qualname":"::deserializer::DeserializeErrorKind::UnexpectedEndOfRow","value":"DeserializeErrorKind::UnexpectedEndOfRow","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" This error occurs when a Rust type expects to decode another field\n from a row, but no more fields exist.\n","sig":null,"attributes":[{"value":"/ This error occurs when a Rust type expects to decode another field","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70421,"byte_end":70491,"line_start":672,"line_end":672,"column_start":5,"column_end":75}},{"value":"/ from a row, but no more fields exist.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70496,"byte_end":70537,"line_start":673,"line_end":673,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1514},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70749,"byte_end":70760,"line_start":678,"line_end":678,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::deserializer::DeserializeErrorKind::InvalidUtf8","value":"DeserializeErrorKind::InvalidUtf8(str::Utf8Error)","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" This error occurs when UTF-8 validation on a field fails. UTF-8\n validation is only performed when the Rust type requires it (e.g.,\n a `String` or `&str` type).\n","sig":null,"attributes":[{"value":"/ This error occurs when UTF-8 validation on a field fails. UTF-8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70566,"byte_end":70633,"line_start":675,"line_end":675,"column_start":5,"column_end":72}},{"value":"/ validation is only performed when the Rust type requires it (e.g.,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70638,"byte_end":70708,"line_start":676,"line_end":676,"column_start":5,"column_end":75}},{"value":"/ a `String` or `&str` type).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70713,"byte_end":70744,"line_start":677,"line_end":677,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1517},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70845,"byte_end":70854,"line_start":680,"line_end":680,"column_start":5,"column_end":14},"name":"ParseBool","qualname":"::deserializer::DeserializeErrorKind::ParseBool","value":"DeserializeErrorKind::ParseBool(str::ParseBoolError)","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" This error occurs when a boolean value fails to parse.\n","sig":null,"attributes":[{"value":"/ This error occurs when a boolean value fails to parse.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70782,"byte_end":70840,"line_start":679,"line_end":679,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1520},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70945,"byte_end":70953,"line_start":682,"line_end":682,"column_start":5,"column_end":13},"name":"ParseInt","qualname":"::deserializer::DeserializeErrorKind::ParseInt","value":"DeserializeErrorKind::ParseInt(num::ParseIntError)","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" This error occurs when an integer value fails to parse.\n","sig":null,"attributes":[{"value":"/ This error occurs when an integer value fails to parse.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70881,"byte_end":70940,"line_start":681,"line_end":681,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1523},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71040,"byte_end":71050,"line_start":684,"line_end":684,"column_start":5,"column_end":15},"name":"ParseFloat","qualname":"::deserializer::DeserializeErrorKind::ParseFloat","value":"DeserializeErrorKind::ParseFloat(num::ParseFloatError)","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" This error occurs when a float value fails to parse.\n","sig":null,"attributes":[{"value":"/ This error occurs when a float value fails to parse.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70979,"byte_end":71035,"line_start":683,"line_end":683,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":1505},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70258,"byte_end":70278,"line_start":667,"line_end":667,"column_start":10,"column_end":30},"name":"DeserializeErrorKind","qualname":"::deserializer::DeserializeErrorKind","value":"pub enum DeserializeErrorKind {\n    Message(String),\n    Unsupported(String),\n    UnexpectedEndOfRow,\n    InvalidUtf8(str::Utf8Error),\n    ParseBool(str::ParseBoolError),\n    ParseInt(num::ParseIntError),\n    ParseFloat(num::ParseFloatError),\n}","parent":null,"children":[{"krate":0,"index":1506},{"krate":0,"index":1509},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1517},{"krate":0,"index":1520},{"krate":0,"index":1523}],"decl_id":null,"docs":" The type of a Serde deserialization error.\n","sig":null,"attributes":[{"value":"/ The type of a Serde deserialization error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":70163,"byte_end":70209,"line_start":665,"line_end":665,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":72388,"byte_end":72393,"line_start":729,"line_end":729,"column_start":12,"column_end":17},"name":"field","qualname":"<DeserializeError>::field","value":"pub fn field(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the field index (starting at 0) of this error, if available.\n","sig":null,"attributes":[{"value":"/ Return the field index (starting at 0) of this error, if available.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":72305,"byte_end":72376,"line_start":728,"line_end":728,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":72497,"byte_end":72501,"line_start":734,"line_end":734,"column_start":12,"column_end":16},"name":"kind","qualname":"<DeserializeError>::kind","value":"pub fn kind(&Self) -> &DeserializeErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying error kind.\n","sig":null,"attributes":[{"value":"/ Return the underlying error kind.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":72448,"byte_end":72485,"line_start":733,"line_end":733,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":543},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86307,"byte_end":86313,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `Result<T, csv::Error>`.\n","sig":null,"attributes":[{"value":"/ A type alias for `Result<T, csv::Error>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86252,"byte_end":86297,"line_start":9,"line_end":9,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1543},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86754,"byte_end":86759,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that can occur when processing CSV data.","sig":null,"attributes":[{"value":"/ An error that can occur when processing CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86346,"byte_end":86399,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86400,"byte_end":86403,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This error can happen when writing or reading CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86404,"byte_end":86463,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86464,"byte_end":86467,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ There are some important scenarios where an error is impossible to occur.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86468,"byte_end":86545,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ For example, if a CSV reader is used on an in-memory buffer with the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86546,"byte_end":86618,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ `flexible` option enabled and one is reading records as raw byte strings,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86619,"byte_end":86696,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ then no error can occur.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86697,"byte_end":86725,"line_start":19,"line_end":19,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86986,"byte_end":86990,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"pub fn kind(&Self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the specific type of this error.\n","sig":null,"attributes":[{"value":"/ Return the specific type of this error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86931,"byte_end":86974,"line_start":29,"line_end":29,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87100,"byte_end":87109,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"into_kind","qualname":"<Error>::into_kind","value":"pub fn into_kind(Self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Unwrap this error into its underlying type.\n","sig":null,"attributes":[{"value":"/ Unwrap this error into its underlying type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87041,"byte_end":87088,"line_start":34,"line_end":34,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87316,"byte_end":87327,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"name":"is_io_error","qualname":"<Error>::is_io_error","value":"pub fn is_io_error(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this is an I/O error.","sig":null,"attributes":[{"value":"/ Returns true if this is an I/O error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87158,"byte_end":87199,"line_start":39,"line_end":39,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87204,"byte_end":87207,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ If this is true, the underlying `ErrorKind` is guaranteed to be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87212,"byte_end":87279,"line_start":41,"line_end":41,"column_start":5,"column_end":72}},{"value":"/ `ErrorKind::Io`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87284,"byte_end":87304,"line_start":42,"line_end":42,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87680,"byte_end":87688,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"position","qualname":"<Error>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position for this error, if one exists.","sig":null,"attributes":[{"value":"/ Return the position for this error, if one exists.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87452,"byte_end":87506,"line_start":50,"line_end":50,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87511,"byte_end":87514,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that permits callers to easily access","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87519,"byte_end":87591,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ the position on an error without doing case analysis on `ErrorKind`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87596,"byte_end":87668,"line_start":53,"line_end":53,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1549},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87890,"byte_end":87892,"line_start":63,"line_end":63,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":" An I/O error that occurred while reading CSV data.\n","sig":null,"attributes":[{"value":"/ An I/O error that occurred while reading CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87831,"byte_end":87885,"line_start":62,"line_end":62,"column_start":5,"column_end":59}}]},{"kind":"StructVariant","id":{"krate":0,"index":1552},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":88005,"byte_end":88009,"line_start":66,"line_end":66,"column_start":5,"column_end":9},"name":"Utf8","qualname":"::error::ErrorKind::Utf8","value":"ErrorKind::Utf8 { pos, err }","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":" A UTF-8 decoding error that occured while reading CSV data into Rust\n `String`s.\n","sig":null,"attributes":[{"value":"/ A UTF-8 decoding error that occured while reading CSV data into Rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87909,"byte_end":87981,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/ `String`s.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87986,"byte_end":88000,"line_start":65,"line_end":65,"column_start":5,"column_end":19}}]},{"kind":"StructVariant","id":{"krate":0,"index":1555},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":88405,"byte_end":88419,"line_start":76,"line_end":76,"column_start":5,"column_end":19},"name":"UnequalLengths","qualname":"::error::ErrorKind::UnequalLengths","value":"ErrorKind::UnequalLengths { pos, expected_len, len }","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":" This error occurs when two records with an unequal number of fields\n are found. This error only occurs when the `flexible` option in a\n CSV reader/writer is disabled.\n","sig":null,"attributes":[{"value":"/ This error occurs when two records with an unequal number of fields","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":88216,"byte_end":88287,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ are found. This error only occurs when the `flexible` option in a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":88292,"byte_end":88361,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/ CSV reader/writer is disabled.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":88366,"byte_end":88400,"line_start":75,"line_end":75,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1559},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89037,"byte_end":89041,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"Seek","qualname":"::error::ErrorKind::Seek","value":"ErrorKind::Seek","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":" This error occurs when either the `byte_headers` or `headers` methods\n are called on a CSV reader that was asked to `seek` before it parsed\n the first record.\n","sig":null,"attributes":[{"value":"/ This error occurs when either the `byte_headers` or `headers` methods","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":88856,"byte_end":88929,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/ are called on a CSV reader that was asked to `seek` before it parsed","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":88934,"byte_end":89006,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/ the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89011,"byte_end":89032,"line_start":89,"line_end":89,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1561},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89122,"byte_end":89131,"line_start":92,"line_end":92,"column_start":5,"column_end":14},"name":"Serialize","qualname":"::error::ErrorKind::Serialize","value":"ErrorKind::Serialize(String)","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":" An error of this kind occurs only when using the Serde serializer.\n","sig":null,"attributes":[{"value":"/ An error of this kind occurs only when using the Serde serializer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89047,"byte_end":89117,"line_start":91,"line_end":91,"column_start":5,"column_end":75}}]},{"kind":"StructVariant","id":{"krate":0,"index":1564},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89249,"byte_end":89260,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"Deserialize","qualname":"::error::ErrorKind::Deserialize","value":"ErrorKind::Deserialize { pos, err }","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":" An error of this kind occurs only when performing automatic\n deserialization with serde.\n","sig":null,"attributes":[{"value":"/ An error of this kind occurs only when performing automatic","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89145,"byte_end":89208,"line_start":93,"line_end":93,"column_start":5,"column_end":68}},{"value":"/ deserialization with serde.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89213,"byte_end":89244,"line_start":94,"line_end":94,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1567},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89703,"byte_end":89718,"line_start":107,"line_end":107,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89429,"byte_end":89483,"line_start":101,"line_end":101,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89488,"byte_end":89491,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89496,"byte_end":89566,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89571,"byte_end":89643,"line_start":104,"line_end":104,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89648,"byte_end":89679,"line_start":105,"line_end":105,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1548},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87815,"byte_end":87824,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n    Io(io::Error),\n    Utf8 {\n            pos: Option<Position>,\n            err: Utf8Error,\n        },\n    UnequalLengths {\n            pos: Option<Position>,\n            expected_len: u64,\n            len: u64,\n        },\n    Seek,\n    Serialize(String),\n    Deserialize {\n            pos: Option<Position>,\n            err: DeserializeError,\n        },\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1549},{"krate":0,"index":1552},{"krate":0,"index":1555},{"krate":0,"index":1559},{"krate":0,"index":1561},{"krate":0,"index":1564},{"krate":0,"index":1567}],"decl_id":null,"docs":" The specific type of an error.\n","sig":null,"attributes":[{"value":"/ The specific type of an error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":87754,"byte_end":87788,"line_start":59,"line_end":59,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89972,"byte_end":89980,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"position","qualname":"<ErrorKind>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position for this error, if one exists.","sig":null,"attributes":[{"value":"/ Return the position for this error, if one exists.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89744,"byte_end":89798,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89803,"byte_end":89806,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that permits callers to easily access","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89811,"byte_end":89883,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ the position on an error without doing case analysis on `ErrorKind`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89888,"byte_end":89960,"line_start":114,"line_end":114,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1571},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93526,"byte_end":93539,"line_start":223,"line_end":223,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::error::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573}],"decl_id":null,"docs":" A UTF-8 validation error during record conversion.","sig":null,"attributes":[{"value":"/ A UTF-8 validation error during record conversion.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93332,"byte_end":93386,"line_start":218,"line_end":218,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93387,"byte_end":93390,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This occurs when attempting to convert a `ByteRecord` into a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93391,"byte_end":93455,"line_start":220,"line_end":220,"column_start":1,"column_end":65}},{"value":"/ `StringRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93456,"byte_end":93475,"line_start":221,"line_end":221,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93859,"byte_end":93875,"line_start":235,"line_end":235,"column_start":12,"column_end":28},"name":"into_byte_record","qualname":"<FromUtf8Error>::into_byte_record","value":"pub fn into_byte_record(Self) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying `ByteRecord` that failed UTF-8 validation.\n","sig":null,"attributes":[{"value":"/ Access the underlying `ByteRecord` that failed UTF-8 validation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93779,"byte_end":93847,"line_start":234,"line_end":234,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93990,"byte_end":94000,"line_start":240,"line_end":240,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"pub fn utf8_error(&Self) -> &Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying UTF-8 validation error.\n","sig":null,"attributes":[{"value":"/ Access the underlying UTF-8 validation error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93929,"byte_end":93978,"line_start":239,"line_end":239,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1585},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94608,"byte_end":94617,"line_start":265,"line_end":265,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::error::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587}],"decl_id":null,"docs":" A UTF-8 validation error.","sig":null,"attributes":[{"value":"/ A UTF-8 validation error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94308,"byte_end":94337,"line_start":257,"line_end":257,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94338,"byte_end":94341,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ This occurs when attempting to convert a `ByteRecord` into a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94342,"byte_end":94406,"line_start":259,"line_end":259,"column_start":1,"column_end":65}},{"value":"/ `StringRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94407,"byte_end":94426,"line_start":260,"line_end":260,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94427,"byte_end":94430,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ The error includes the index of the field that failed validation, and the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94431,"byte_end":94508,"line_start":262,"line_end":262,"column_start":1,"column_end":78}},{"value":"/ last byte at which valid UTF-8 was verified.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94509,"byte_end":94557,"line_start":263,"line_end":263,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95081,"byte_end":95086,"line_start":279,"line_end":279,"column_start":12,"column_end":17},"name":"field","qualname":"<Utf8Error>::field","value":"pub fn field(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The field index of a byte record in which UTF-8 validation failed.\n","sig":null,"attributes":[{"value":"/ The field index of a byte record in which UTF-8 validation failed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94999,"byte_end":95069,"line_start":278,"line_end":278,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95218,"byte_end":95229,"line_start":283,"line_end":283,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"pub fn valid_up_to(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The index into the given field up to which valid UTF-8 was verified.\n","sig":null,"attributes":[{"value":"/ The index into the given field up to which valid UTF-8 was verified.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95134,"byte_end":95206,"line_start":282,"line_end":282,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":576},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95887,"byte_end":95901,"line_start":307,"line_end":307,"column_start":12,"column_end":26},"name":"IntoInnerError","qualname":"::error::IntoInnerError","value":"IntoInnerError {  }","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579}],"decl_id":null,"docs":" `IntoInnerError` occurs when consuming a `Writer` fails.","sig":null,"attributes":[{"value":"/ `IntoInnerError` occurs when consuming a `Writer` fails.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95573,"byte_end":95633,"line_start":300,"line_end":300,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95634,"byte_end":95637,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ Consuming the `Writer` causes a flush to happen. If the flush fails, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95638,"byte_end":95715,"line_start":302,"line_end":302,"column_start":1,"column_end":78}},{"value":"/ this error is returned, which contains both the original `Writer` and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95716,"byte_end":95789,"line_start":303,"line_end":303,"column_start":1,"column_end":74}},{"value":"/ the error that occurred.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95790,"byte_end":95818,"line_start":304,"line_end":304,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95819,"byte_end":95822,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ The type parameter `W` is the unconsumed writer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95823,"byte_end":95875,"line_start":306,"line_end":306,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96405,"byte_end":96410,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"error","qualname":"<IntoInnerError<W>>::error","value":"pub fn error(&Self) -> &io::Error","parent":null,"children":[],"decl_id":null,"docs":" Returns the error which caused the call to `into_inner` to fail.","sig":null,"attributes":[{"value":"/ Returns the error which caused the call to `into_inner` to fail.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96239,"byte_end":96307,"line_start":321,"line_end":321,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96312,"byte_end":96315,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This error was returned when attempting to flush the internal buffer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96320,"byte_end":96393,"line_start":323,"line_end":323,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96644,"byte_end":96654,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<IntoInnerError<W>>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying writer which generated the error.","sig":null,"attributes":[{"value":"/ Returns the underlying writer which generated the error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96463,"byte_end":96523,"line_start":328,"line_end":328,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96528,"byte_end":96531,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ The returned value can be used for error recovery, such as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96536,"byte_end":96598,"line_start":330,"line_end":330,"column_start":5,"column_end":67}},{"value":"/ re-inspecting the buffer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96603,"byte_end":96632,"line_start":331,"line_end":331,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1599},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":97778,"byte_end":97791,"line_start":21,"line_end":21,"column_start":12,"column_end":25},"name":"ReaderBuilder","qualname":"::reader::ReaderBuilder","value":"ReaderBuilder {  }","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604}],"decl_id":null,"docs":" Builds a CSV reader with various configuration knobs.","sig":null,"attributes":[{"value":"/ Builds a CSV reader with various configuration knobs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":97526,"byte_end":97583,"line_start":15,"line_end":15,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":97584,"byte_end":97587,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This builder can be used to tweak the field delimiter, record terminator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":97588,"byte_end":97664,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ and more. Once a CSV `Reader` is built, its configuration cannot be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":97665,"byte_end":97736,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/ changed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":97737,"byte_end":97749,"line_start":19,"line_end":19,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99458,"byte_end":99461,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<ReaderBuilder>::new","value":"pub fn new() -> ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV parsing.","sig":null,"attributes":[{"value":"/ Create a new builder for configuring CSV parsing.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98495,"byte_end":98548,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98553,"byte_end":98556,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ To convert a builder into a reader, call one of the methods starting","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98561,"byte_end":98633,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ with `from_`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98638,"byte_end":98655,"line_start":50,"line_end":50,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98660,"byte_end":98663,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98668,"byte_end":98681,"line_start":52,"line_end":52,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98686,"byte_end":98689,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98694,"byte_end":98701,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98706,"byte_end":98732,"line_start":55,"line_end":55,"column_start":5,"column_end":31}},{"value":"/ use csv::{ReaderBuilder, StringRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98737,"byte_end":98780,"line_start":56,"line_end":56,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98785,"byte_end":98788,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98793,"byte_end":98832,"line_start":58,"line_end":58,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98837,"byte_end":98885,"line_start":59,"line_end":59,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98890,"byte_end":98911,"line_start":60,"line_end":60,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98916,"byte_end":98936,"line_start":61,"line_end":61,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98941,"byte_end":98973,"line_start":62,"line_end":62,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98978,"byte_end":99009,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99014,"byte_end":99020,"line_start":64,"line_end":64,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new().from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99025,"byte_end":99097,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99102,"byte_end":99105,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/     let records = rdr","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99110,"byte_end":99135,"line_start":67,"line_end":67,"column_start":5,"column_end":30}},{"value":"/         .records()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99140,"byte_end":99162,"line_start":68,"line_end":68,"column_start":5,"column_end":27}},{"value":"/         .collect::<Result<Vec<StringRecord>, csv::Error>>()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99167,"byte_end":99232,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/     assert_eq!(records, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99237,"byte_end":99270,"line_start":70,"line_end":70,"column_start":5,"column_end":38}},{"value":"/         vec![\"Boston\", \"United States\", \"4628910\"],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99275,"byte_end":99330,"line_start":71,"line_end":71,"column_start":5,"column_end":60}},{"value":"/         vec![\"Concord\", \"United States\", \"42695\"],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99335,"byte_end":99389,"line_start":72,"line_end":72,"column_start":5,"column_end":59}},{"value":"/     ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99394,"byte_end":99405,"line_start":73,"line_end":73,"column_start":5,"column_end":16}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99410,"byte_end":99424,"line_start":74,"line_end":74,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99429,"byte_end":99434,"line_start":75,"line_end":75,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99439,"byte_end":99446,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100228,"byte_end":100237,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ReaderBuilder>::from_path","value":"pub fn from_path<P: AsRef<Path>>(&Self, P) -> Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV parser from this configuration that reads data from the\n given file path.","sig":null,"attributes":[{"value":"/ Build a CSV parser from this configuration that reads data from the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99527,"byte_end":99598,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/ given file path.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99603,"byte_end":99623,"line_start":82,"line_end":82,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99628,"byte_end":99631,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ If there was a problem opening the file at the given path, then this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99636,"byte_end":99708,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"/ returns the corresponding error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99713,"byte_end":99749,"line_start":85,"line_end":85,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99754,"byte_end":99757,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99762,"byte_end":99775,"line_start":87,"line_end":87,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99780,"byte_end":99783,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99788,"byte_end":99801,"line_start":89,"line_end":89,"column_start":5,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99806,"byte_end":99832,"line_start":90,"line_end":90,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99837,"byte_end":99864,"line_start":91,"line_end":91,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99869,"byte_end":99872,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99877,"byte_end":99916,"line_start":93,"line_end":93,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99921,"byte_end":99969,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/     let mut rdr = ReaderBuilder::new().from_path(\"foo.csv\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":99974,"byte_end":100039,"line_start":95,"line_end":95,"column_start":5,"column_end":70}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100044,"byte_end":100081,"line_start":96,"line_end":96,"column_start":5,"column_end":42}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100086,"byte_end":100119,"line_start":97,"line_end":97,"column_start":5,"column_end":38}},{"value":"/         println!(\"{:?}\", record);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100124,"byte_end":100161,"line_start":98,"line_end":98,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100166,"byte_end":100175,"line_start":99,"line_end":99,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100180,"byte_end":100194,"line_start":100,"line_end":100,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100199,"byte_end":100204,"line_start":101,"line_end":101,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100209,"byte_end":100216,"line_start":102,"line_end":102,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101193,"byte_end":101204,"line_start":133,"line_end":133,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<ReaderBuilder>::from_reader","value":"pub fn from_reader<R: io::Read>(&Self, R) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV parser from this configuration that reads data from `rdr`.","sig":null,"attributes":[{"value":"/ Build a CSV parser from this configuration that reads data from `rdr`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100356,"byte_end":100430,"line_start":107,"line_end":107,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100435,"byte_end":100438,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Note that the CSV reader is buffered automatically, so you should not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100443,"byte_end":100516,"line_start":109,"line_end":109,"column_start":5,"column_end":78}},{"value":"/ wrap `rdr` in a buffered reader like `io::BufReader`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100521,"byte_end":100578,"line_start":110,"line_end":110,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100583,"byte_end":100586,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100591,"byte_end":100604,"line_start":112,"line_end":112,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100609,"byte_end":100612,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100617,"byte_end":100624,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100629,"byte_end":100655,"line_start":115,"line_end":115,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100660,"byte_end":100687,"line_start":116,"line_end":116,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100692,"byte_end":100695,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100700,"byte_end":100739,"line_start":118,"line_end":118,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100744,"byte_end":100792,"line_start":119,"line_end":119,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100797,"byte_end":100818,"line_start":120,"line_end":120,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100823,"byte_end":100843,"line_start":121,"line_end":121,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100848,"byte_end":100880,"line_start":122,"line_end":122,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100885,"byte_end":100916,"line_start":123,"line_end":123,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100921,"byte_end":100927,"line_start":124,"line_end":124,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new().from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":100932,"byte_end":101004,"line_start":125,"line_end":125,"column_start":5,"column_end":77}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101009,"byte_end":101046,"line_start":126,"line_end":126,"column_start":5,"column_end":42}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101051,"byte_end":101084,"line_start":127,"line_end":127,"column_start":5,"column_end":38}},{"value":"/         println!(\"{:?}\", record);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101089,"byte_end":101126,"line_start":128,"line_end":128,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101131,"byte_end":101140,"line_start":129,"line_end":129,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101145,"byte_end":101159,"line_start":130,"line_end":130,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101164,"byte_end":101169,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101174,"byte_end":101181,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102169,"byte_end":102178,"line_start":166,"line_end":166,"column_start":12,"column_end":21},"name":"delimiter","qualname":"<ReaderBuilder>::delimiter","value":"pub fn delimiter(&mut Self, u8) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The field delimiter to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The field delimiter to use when parsing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101290,"byte_end":101338,"line_start":137,"line_end":137,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101343,"byte_end":101346,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The default is `b','`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101351,"byte_end":101377,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101382,"byte_end":101385,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101390,"byte_end":101403,"line_start":141,"line_end":141,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101408,"byte_end":101411,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101416,"byte_end":101423,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101428,"byte_end":101454,"line_start":144,"line_end":144,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101459,"byte_end":101486,"line_start":145,"line_end":145,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101491,"byte_end":101494,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101499,"byte_end":101538,"line_start":147,"line_end":147,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101543,"byte_end":101591,"line_start":148,"line_end":148,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101596,"byte_end":101617,"line_start":149,"line_end":149,"column_start":5,"column_end":26}},{"value":"/ city;country;pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101622,"byte_end":101642,"line_start":150,"line_end":150,"column_start":5,"column_end":25}},{"value":"/ Boston;United States;4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101647,"byte_end":101679,"line_start":151,"line_end":151,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101684,"byte_end":101690,"line_start":152,"line_end":152,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101695,"byte_end":101737,"line_start":153,"line_end":153,"column_start":5,"column_end":47}},{"value":"/         .delimiter(b';')","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101742,"byte_end":101770,"line_start":154,"line_end":154,"column_start":5,"column_end":33}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101775,"byte_end":101817,"line_start":155,"line_end":155,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101822,"byte_end":101825,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101830,"byte_end":101882,"line_start":157,"line_end":157,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101887,"byte_end":101920,"line_start":158,"line_end":158,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":101925,"byte_end":102000,"line_start":159,"line_end":159,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102005,"byte_end":102023,"line_start":160,"line_end":160,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102028,"byte_end":102044,"line_start":161,"line_end":161,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102049,"byte_end":102121,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102126,"byte_end":102135,"line_start":163,"line_end":163,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102140,"byte_end":102145,"line_start":164,"line_end":164,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102150,"byte_end":102157,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104174,"byte_end":104185,"line_start":221,"line_end":221,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<ReaderBuilder>::has_headers","value":"pub fn has_headers(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to treat the first row as a special header row.","sig":null,"attributes":[{"value":"/ Whether to treat the first row as a special header row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102296,"byte_end":102355,"line_start":171,"line_end":171,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102360,"byte_end":102363,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ By default, the first row is treated as a special header row, which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102368,"byte_end":102439,"line_start":173,"line_end":173,"column_start":5,"column_end":76}},{"value":"/ means the header is never returned by any of the record reading methods","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102444,"byte_end":102519,"line_start":174,"line_end":174,"column_start":5,"column_end":80}},{"value":"/ or iterators. When this is disabled (`yes` set to `false`), the first","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102524,"byte_end":102597,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ row is not treated specially.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102602,"byte_end":102635,"line_start":176,"line_end":176,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102640,"byte_end":102643,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ Note that the `headers` and `byte_headers` methods are unaffected by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102648,"byte_end":102720,"line_start":178,"line_end":178,"column_start":5,"column_end":77}},{"value":"/ whether this is set. Those methods always return the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102725,"byte_end":102795,"line_start":179,"line_end":179,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102800,"byte_end":102803,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102808,"byte_end":102821,"line_start":181,"line_end":181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102826,"byte_end":102829,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This example shows what happens when `has_headers` is disabled.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102834,"byte_end":102901,"line_start":183,"line_end":183,"column_start":5,"column_end":72}},{"value":"/ Namely, the first row is treated just like any other row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102906,"byte_end":102967,"line_start":184,"line_end":184,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102972,"byte_end":102975,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102980,"byte_end":102987,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":102992,"byte_end":103018,"line_start":187,"line_end":187,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103023,"byte_end":103050,"line_start":188,"line_end":188,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103055,"byte_end":103058,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103063,"byte_end":103102,"line_start":190,"line_end":190,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103107,"byte_end":103155,"line_start":191,"line_end":191,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103160,"byte_end":103181,"line_start":192,"line_end":192,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103186,"byte_end":103206,"line_start":193,"line_end":193,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103211,"byte_end":103243,"line_start":194,"line_end":194,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103248,"byte_end":103254,"line_start":195,"line_end":195,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103259,"byte_end":103301,"line_start":196,"line_end":196,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103306,"byte_end":103337,"line_start":197,"line_end":197,"column_start":5,"column_end":36}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103342,"byte_end":103384,"line_start":198,"line_end":198,"column_start":5,"column_end":47}},{"value":"/     let mut iter = rdr.records();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103389,"byte_end":103426,"line_start":199,"line_end":199,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103431,"byte_end":103434,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/     // Read the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103439,"byte_end":103472,"line_start":201,"line_end":201,"column_start":5,"column_end":38}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103477,"byte_end":103520,"line_start":202,"line_end":202,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103525,"byte_end":103558,"line_start":203,"line_end":203,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103563,"byte_end":103626,"line_start":204,"line_end":204,"column_start":5,"column_end":68}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103631,"byte_end":103647,"line_start":205,"line_end":205,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103652,"byte_end":103686,"line_start":206,"line_end":206,"column_start":5,"column_end":39}},{"value":"/             \"expected at least two records but got none\"));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103691,"byte_end":103754,"line_start":207,"line_end":207,"column_start":5,"column_end":68}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103759,"byte_end":103768,"line_start":208,"line_end":208,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103773,"byte_end":103776,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/     // Read the second record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103781,"byte_end":103815,"line_start":210,"line_end":210,"column_start":5,"column_end":39}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103820,"byte_end":103863,"line_start":211,"line_end":211,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103868,"byte_end":103901,"line_start":212,"line_end":212,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103906,"byte_end":103981,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":103986,"byte_end":104002,"line_start":214,"line_end":214,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104007,"byte_end":104041,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/             \"expected at least two records but got one\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104046,"byte_end":104107,"line_start":216,"line_end":216,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104112,"byte_end":104121,"line_start":217,"line_end":217,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104126,"byte_end":104140,"line_start":218,"line_end":218,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104145,"byte_end":104150,"line_start":219,"line_end":219,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104155,"byte_end":104162,"line_start":220,"line_end":220,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107078,"byte_end":107086,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"flexible","qualname":"<ReaderBuilder>::flexible","value":"pub fn flexible(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether the number of fields in records is allowed to change or not.","sig":null,"attributes":[{"value":"/ Whether the number of fields in records is allowed to change or not.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104288,"byte_end":104360,"line_start":226,"line_end":226,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104365,"byte_end":104368,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ When disabled (which is the default), parsing CSV data will return an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104373,"byte_end":104446,"line_start":228,"line_end":228,"column_start":5,"column_end":78}},{"value":"/ error if a record is found with a number of fields different from the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104451,"byte_end":104524,"line_start":229,"line_end":229,"column_start":5,"column_end":78}},{"value":"/ number of fields in a previous record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104529,"byte_end":104571,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104576,"byte_end":104579,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ When enabled, this error checking is turned off.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104584,"byte_end":104636,"line_start":232,"line_end":232,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104641,"byte_end":104644,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Example: flexible records enabled","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104649,"byte_end":104688,"line_start":234,"line_end":234,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104693,"byte_end":104696,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104701,"byte_end":104708,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104713,"byte_end":104739,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104744,"byte_end":104771,"line_start":238,"line_end":238,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104776,"byte_end":104779,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104784,"byte_end":104823,"line_start":240,"line_end":240,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104828,"byte_end":104876,"line_start":241,"line_end":241,"column_start":5,"column_end":53}},{"value":"/     // Notice that the first row is missing the population count.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104881,"byte_end":104950,"line_start":242,"line_end":242,"column_start":5,"column_end":74}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104955,"byte_end":104976,"line_start":243,"line_end":243,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":104981,"byte_end":105001,"line_start":244,"line_end":244,"column_start":5,"column_end":25}},{"value":"/ Boston,United States","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105006,"byte_end":105030,"line_start":245,"line_end":245,"column_start":5,"column_end":29}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105035,"byte_end":105041,"line_start":246,"line_end":246,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105046,"byte_end":105088,"line_start":247,"line_end":247,"column_start":5,"column_end":47}},{"value":"/         .flexible(true)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105093,"byte_end":105120,"line_start":248,"line_end":248,"column_start":5,"column_end":32}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105125,"byte_end":105167,"line_start":249,"line_end":249,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105172,"byte_end":105175,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105180,"byte_end":105232,"line_start":251,"line_end":251,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105237,"byte_end":105270,"line_start":252,"line_end":252,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105275,"byte_end":105339,"line_start":253,"line_end":253,"column_start":5,"column_end":69}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105344,"byte_end":105362,"line_start":254,"line_end":254,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105367,"byte_end":105383,"line_start":255,"line_end":255,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105388,"byte_end":105460,"line_start":256,"line_end":256,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105465,"byte_end":105474,"line_start":257,"line_end":257,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105479,"byte_end":105484,"line_start":258,"line_end":258,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105489,"byte_end":105496,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105501,"byte_end":105504,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Example: flexible records disabled","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105509,"byte_end":105549,"line_start":261,"line_end":261,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105554,"byte_end":105557,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ This shows the error that appears when records of unequal length","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105562,"byte_end":105630,"line_start":263,"line_end":263,"column_start":5,"column_end":73}},{"value":"/ are found and flexible records have been disabled (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105635,"byte_end":105702,"line_start":264,"line_end":264,"column_start":5,"column_end":72}},{"value":"/ default).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105707,"byte_end":105720,"line_start":265,"line_end":265,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105725,"byte_end":105728,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105733,"byte_end":105740,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105745,"byte_end":105771,"line_start":268,"line_end":268,"column_start":5,"column_end":31}},{"value":"/ use csv::{ErrorKind, ReaderBuilder};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105776,"byte_end":105816,"line_start":269,"line_end":269,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105821,"byte_end":105824,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105829,"byte_end":105868,"line_start":271,"line_end":271,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105873,"byte_end":105921,"line_start":272,"line_end":272,"column_start":5,"column_end":53}},{"value":"/     // Notice that the first row is missing the population count.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":105926,"byte_end":105995,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106000,"byte_end":106021,"line_start":274,"line_end":274,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106026,"byte_end":106046,"line_start":275,"line_end":275,"column_start":5,"column_end":25}},{"value":"/ Boston,United States","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106051,"byte_end":106075,"line_start":276,"line_end":276,"column_start":5,"column_end":29}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106080,"byte_end":106086,"line_start":277,"line_end":277,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106091,"byte_end":106133,"line_start":278,"line_end":278,"column_start":5,"column_end":47}},{"value":"/         .flexible(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106138,"byte_end":106166,"line_start":279,"line_end":279,"column_start":5,"column_end":33}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106171,"byte_end":106213,"line_start":280,"line_end":280,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106218,"byte_end":106221,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/     if let Some(Err(err)) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106226,"byte_end":106280,"line_start":282,"line_end":282,"column_start":5,"column_end":59}},{"value":"/         match *err.kind() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106285,"byte_end":106316,"line_start":283,"line_end":283,"column_start":5,"column_end":36}},{"value":"/             ErrorKind::UnequalLengths { expected_len, len, .. } => {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106321,"byte_end":106393,"line_start":284,"line_end":284,"column_start":5,"column_end":77}},{"value":"/                 // The header row has 3 fields...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106398,"byte_end":106451,"line_start":285,"line_end":285,"column_start":5,"column_end":58}},{"value":"/                 assert_eq!(expected_len, 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106456,"byte_end":106504,"line_start":286,"line_end":286,"column_start":5,"column_end":53}},{"value":"/                 // ... but the first row has only 2 fields.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106509,"byte_end":106572,"line_start":287,"line_end":287,"column_start":5,"column_end":68}},{"value":"/                 assert_eq!(len, 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106577,"byte_end":106616,"line_start":288,"line_end":288,"column_start":5,"column_end":44}},{"value":"/                 Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106621,"byte_end":106647,"line_start":289,"line_end":289,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106652,"byte_end":106669,"line_start":290,"line_end":290,"column_start":5,"column_end":22}},{"value":"/             ref wrong => {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106674,"byte_end":106704,"line_start":291,"line_end":291,"column_start":5,"column_end":35}},{"value":"/                 Err(From::from(format!(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106709,"byte_end":106752,"line_start":292,"line_end":292,"column_start":5,"column_end":48}},{"value":"/                     \"expected UnequalLengths error but got {:?}\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106757,"byte_end":106826,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/                     wrong)))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106831,"byte_end":106863,"line_start":294,"line_end":294,"column_start":5,"column_end":37}},{"value":"/             }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106868,"byte_end":106885,"line_start":295,"line_end":295,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106890,"byte_end":106903,"line_start":296,"line_end":296,"column_start":5,"column_end":18}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106908,"byte_end":106924,"line_start":297,"line_end":297,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106929,"byte_end":106956,"line_start":298,"line_end":298,"column_start":5,"column_end":32}},{"value":"/             \"expected at least one errored record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":106961,"byte_end":107030,"line_start":299,"line_end":299,"column_start":5,"column_end":74}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107035,"byte_end":107044,"line_start":300,"line_end":300,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107049,"byte_end":107054,"line_start":301,"line_end":301,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107059,"byte_end":107066,"line_start":302,"line_end":302,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109011,"byte_end":109015,"line_start":354,"line_end":354,"column_start":12,"column_end":16},"name":"trim","qualname":"<ReaderBuilder>::trim","value":"pub fn trim(&mut Self, Trim) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether fields are trimmed of leading and trailing whitespace or not.","sig":null,"attributes":[{"value":"/ Whether fields are trimmed of leading and trailing whitespace or not.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107186,"byte_end":107259,"line_start":308,"line_end":308,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107264,"byte_end":107267,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ By default, no trimming is performed. This method permits one to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107272,"byte_end":107340,"line_start":310,"line_end":310,"column_start":5,"column_end":73}},{"value":"/ override that behavior and choose one of the following options:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107345,"byte_end":107412,"line_start":311,"line_end":311,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107417,"byte_end":107420,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ 1. `Trim::Headers` trims only header values.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107425,"byte_end":107473,"line_start":313,"line_end":313,"column_start":5,"column_end":53}},{"value":"/ 2. `Trim::Fields` trims only non-header or \"field\" values.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107478,"byte_end":107540,"line_start":314,"line_end":314,"column_start":5,"column_end":67}},{"value":"/ 3. `Trim::All` trims both header and non-header values.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107545,"byte_end":107604,"line_start":315,"line_end":315,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107609,"byte_end":107612,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ A value is only interpreted as a header value if this CSV reader is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107617,"byte_end":107688,"line_start":317,"line_end":317,"column_start":5,"column_end":76}},{"value":"/ configured to read a header record (which is the default).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107693,"byte_end":107755,"line_start":318,"line_end":318,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107760,"byte_end":107763,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ When reading string records, characters meeting the definition of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107768,"byte_end":107837,"line_start":320,"line_end":320,"column_start":5,"column_end":74}},{"value":"/ Unicode whitespace are trimmed. When reading byte records, characters","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107842,"byte_end":107915,"line_start":321,"line_end":321,"column_start":5,"column_end":78}},{"value":"/ meeting the definition of ASCII whitespace are trimmed. ASCII","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107920,"byte_end":107985,"line_start":322,"line_end":322,"column_start":5,"column_end":70}},{"value":"/ whitespace characters correspond to the set `[\\t\\n\\v\\f\\r ]`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":107990,"byte_end":108054,"line_start":323,"line_end":323,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108059,"byte_end":108062,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108067,"byte_end":108080,"line_start":325,"line_end":325,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108085,"byte_end":108088,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This example shows what happens when all values are trimmed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108093,"byte_end":108157,"line_start":327,"line_end":327,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108162,"byte_end":108165,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108170,"byte_end":108177,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108182,"byte_end":108208,"line_start":330,"line_end":330,"column_start":5,"column_end":31}},{"value":"/ use csv::{ReaderBuilder, StringRecord, Trim};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108213,"byte_end":108262,"line_start":331,"line_end":331,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108267,"byte_end":108270,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108275,"byte_end":108314,"line_start":333,"line_end":333,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108319,"byte_end":108367,"line_start":334,"line_end":334,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108372,"byte_end":108393,"line_start":335,"line_end":335,"column_start":5,"column_end":26}},{"value":"/ city ,   country ,  pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108398,"byte_end":108425,"line_start":336,"line_end":336,"column_start":5,"column_end":32}},{"value":"/ Boston,\\\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108430,"byte_end":108443,"line_start":337,"line_end":337,"column_start":5,"column_end":18}},{"value":"/    United States\\\",4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108448,"byte_end":108478,"line_start":338,"line_end":338,"column_start":5,"column_end":35}},{"value":"/ Concord,   United States   ,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108483,"byte_end":108520,"line_start":339,"line_end":339,"column_start":5,"column_end":42}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108525,"byte_end":108531,"line_start":340,"line_end":340,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108536,"byte_end":108578,"line_start":341,"line_end":341,"column_start":5,"column_end":47}},{"value":"/         .trim(Trim::All)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108583,"byte_end":108611,"line_start":342,"line_end":342,"column_start":5,"column_end":33}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108616,"byte_end":108658,"line_start":343,"line_end":343,"column_start":5,"column_end":47}},{"value":"/     let records = rdr","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108663,"byte_end":108688,"line_start":344,"line_end":344,"column_start":5,"column_end":30}},{"value":"/         .records()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108693,"byte_end":108715,"line_start":345,"line_end":345,"column_start":5,"column_end":27}},{"value":"/         .collect::<Result<Vec<StringRecord>, csv::Error>>()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108720,"byte_end":108785,"line_start":346,"line_end":346,"column_start":5,"column_end":70}},{"value":"/     assert_eq!(records, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108790,"byte_end":108823,"line_start":347,"line_end":347,"column_start":5,"column_end":38}},{"value":"/         vec![\"Boston\", \"United States\", \"4628910\"],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108828,"byte_end":108883,"line_start":348,"line_end":348,"column_start":5,"column_end":60}},{"value":"/         vec![\"Concord\", \"United States\", \"42695\"],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108888,"byte_end":108942,"line_start":349,"line_end":349,"column_start":5,"column_end":59}},{"value":"/     ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108947,"byte_end":108958,"line_start":350,"line_end":350,"column_start":5,"column_end":16}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108963,"byte_end":108977,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108982,"byte_end":108987,"line_start":352,"line_end":352,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":108992,"byte_end":108999,"line_start":353,"line_end":353,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110199,"byte_end":110209,"line_start":387,"line_end":387,"column_start":12,"column_end":22},"name":"terminator","qualname":"<ReaderBuilder>::terminator","value":"pub fn terminator(&mut Self, Terminator) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The record terminator to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The record terminator to use when parsing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109113,"byte_end":109163,"line_start":359,"line_end":359,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109168,"byte_end":109171,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ A record terminator can be any single byte. The default is a special","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109176,"byte_end":109248,"line_start":361,"line_end":361,"column_start":5,"column_end":77}},{"value":"/ value, `Terminator::CRLF`, which treats any occurrence of `\\r`, `\\n`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109253,"byte_end":109325,"line_start":362,"line_end":362,"column_start":5,"column_end":77}},{"value":"/ or `\\r\\n` as a single record terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109330,"byte_end":109374,"line_start":363,"line_end":363,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109379,"byte_end":109382,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Example: `$` as a record terminator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109387,"byte_end":109428,"line_start":365,"line_end":365,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109433,"byte_end":109436,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109441,"byte_end":109448,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109453,"byte_end":109479,"line_start":368,"line_end":368,"column_start":5,"column_end":31}},{"value":"/ use csv::{ReaderBuilder, Terminator};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109484,"byte_end":109525,"line_start":369,"line_end":369,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109530,"byte_end":109533,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109538,"byte_end":109577,"line_start":371,"line_end":371,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109582,"byte_end":109630,"line_start":372,"line_end":372,"column_start":5,"column_end":53}},{"value":"/     let data = \"city,country,pop$Boston,United States,4628910\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109635,"byte_end":109702,"line_start":373,"line_end":373,"column_start":5,"column_end":72}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109707,"byte_end":109749,"line_start":374,"line_end":374,"column_start":5,"column_end":47}},{"value":"/         .terminator(Terminator::Any(b'$'))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109754,"byte_end":109800,"line_start":375,"line_end":375,"column_start":5,"column_end":51}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109805,"byte_end":109847,"line_start":376,"line_end":376,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109852,"byte_end":109855,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109860,"byte_end":109912,"line_start":378,"line_end":378,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109917,"byte_end":109950,"line_start":379,"line_end":379,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":109955,"byte_end":110030,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110035,"byte_end":110053,"line_start":381,"line_end":381,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110058,"byte_end":110074,"line_start":382,"line_end":382,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110079,"byte_end":110151,"line_start":383,"line_end":383,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110156,"byte_end":110165,"line_start":384,"line_end":384,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110170,"byte_end":110175,"line_start":385,"line_end":385,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110180,"byte_end":110187,"line_start":386,"line_end":386,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111254,"byte_end":111259,"line_start":421,"line_end":421,"column_start":12,"column_end":17},"name":"quote","qualname":"<ReaderBuilder>::quote","value":"pub fn quote(&mut Self, u8) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quote character to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The quote character to use when parsing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110336,"byte_end":110384,"line_start":392,"line_end":392,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110389,"byte_end":110392,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ The default is `b'\"'`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110397,"byte_end":110423,"line_start":394,"line_end":394,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110428,"byte_end":110431,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ # Example: single quotes instead of double quotes","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110436,"byte_end":110489,"line_start":396,"line_end":396,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110494,"byte_end":110497,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110502,"byte_end":110509,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110514,"byte_end":110540,"line_start":399,"line_end":399,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110545,"byte_end":110572,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110577,"byte_end":110580,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110585,"byte_end":110624,"line_start":402,"line_end":402,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110629,"byte_end":110677,"line_start":403,"line_end":403,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110682,"byte_end":110703,"line_start":404,"line_end":404,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110708,"byte_end":110728,"line_start":405,"line_end":405,"column_start":5,"column_end":25}},{"value":"/ Boston,'United States',4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110733,"byte_end":110767,"line_start":406,"line_end":406,"column_start":5,"column_end":39}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110772,"byte_end":110778,"line_start":407,"line_end":407,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110783,"byte_end":110825,"line_start":408,"line_end":408,"column_start":5,"column_end":47}},{"value":"/         .quote(b'\\'')","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110830,"byte_end":110855,"line_start":409,"line_end":409,"column_start":5,"column_end":30}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110860,"byte_end":110902,"line_start":410,"line_end":410,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110907,"byte_end":110910,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110915,"byte_end":110967,"line_start":412,"line_end":412,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":110972,"byte_end":111005,"line_start":413,"line_end":413,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111010,"byte_end":111085,"line_start":414,"line_end":414,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111090,"byte_end":111108,"line_start":415,"line_end":415,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111113,"byte_end":111129,"line_start":416,"line_end":416,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111134,"byte_end":111206,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111211,"byte_end":111220,"line_start":418,"line_end":418,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111225,"byte_end":111230,"line_start":419,"line_end":419,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111235,"byte_end":111242,"line_start":420,"line_end":420,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112511,"byte_end":112517,"line_start":460,"line_end":460,"column_start":12,"column_end":18},"name":"escape","qualname":"<ReaderBuilder>::escape","value":"pub fn escape(&mut Self, Option<u8>) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The escape character to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The escape character to use when parsing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111365,"byte_end":111414,"line_start":426,"line_end":426,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111419,"byte_end":111422,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ In some variants of CSV, quotes are escaped using a special escape","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111427,"byte_end":111497,"line_start":428,"line_end":428,"column_start":5,"column_end":75}},{"value":"/ character like `\\` (instead of escaping quotes by doubling them).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111502,"byte_end":111571,"line_start":429,"line_end":429,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111576,"byte_end":111579,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ By default, recognizing these idiosyncratic escapes is disabled.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111584,"byte_end":111652,"line_start":431,"line_end":431,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111657,"byte_end":111660,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111665,"byte_end":111678,"line_start":433,"line_end":433,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111683,"byte_end":111686,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111691,"byte_end":111698,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111703,"byte_end":111729,"line_start":436,"line_end":436,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111734,"byte_end":111761,"line_start":437,"line_end":437,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111766,"byte_end":111769,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111774,"byte_end":111813,"line_start":439,"line_end":439,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111818,"byte_end":111866,"line_start":440,"line_end":440,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111871,"byte_end":111892,"line_start":441,"line_end":441,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111897,"byte_end":111917,"line_start":442,"line_end":442,"column_start":5,"column_end":25}},{"value":"/ Boston,\\\"The \\\\\\\"United\\\\\\\" States\\\",4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111922,"byte_end":111970,"line_start":443,"line_end":443,"column_start":5,"column_end":53}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111975,"byte_end":111981,"line_start":444,"line_end":444,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":111986,"byte_end":112028,"line_start":445,"line_end":445,"column_start":5,"column_end":47}},{"value":"/         .escape(Some(b'\\\\'))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112033,"byte_end":112065,"line_start":446,"line_end":446,"column_start":5,"column_end":37}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112070,"byte_end":112112,"line_start":447,"line_end":447,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112117,"byte_end":112120,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112125,"byte_end":112177,"line_start":449,"line_end":449,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112182,"byte_end":112215,"line_start":450,"line_end":450,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112220,"byte_end":112256,"line_start":451,"line_end":451,"column_start":5,"column_end":41}},{"value":"/             \"Boston\", \"The \\\"United\\\" States\", \"4628910\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112261,"byte_end":112322,"line_start":452,"line_end":452,"column_start":5,"column_end":66}},{"value":"/         ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112327,"byte_end":112342,"line_start":453,"line_end":453,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112347,"byte_end":112365,"line_start":454,"line_end":454,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112370,"byte_end":112386,"line_start":455,"line_end":455,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112391,"byte_end":112463,"line_start":456,"line_end":456,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112468,"byte_end":112477,"line_start":457,"line_end":457,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112482,"byte_end":112487,"line_start":458,"line_end":458,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112492,"byte_end":112499,"line_start":459,"line_end":459,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113667,"byte_end":113679,"line_start":497,"line_end":497,"column_start":12,"column_end":24},"name":"double_quote","qualname":"<ReaderBuilder>::double_quote","value":"pub fn double_quote(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable double quote escapes.","sig":null,"attributes":[{"value":"/ Enable double quote escapes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112634,"byte_end":112666,"line_start":465,"line_end":465,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112671,"byte_end":112674,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default, but it may be disabled. When disabled,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112679,"byte_end":112749,"line_start":467,"line_end":467,"column_start":5,"column_end":75}},{"value":"/ doubled quotes are not interpreted as escapes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112754,"byte_end":112804,"line_start":468,"line_end":468,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112809,"byte_end":112812,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112817,"byte_end":112830,"line_start":470,"line_end":470,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112835,"byte_end":112838,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112843,"byte_end":112850,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112855,"byte_end":112881,"line_start":473,"line_end":473,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112886,"byte_end":112913,"line_start":474,"line_end":474,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112918,"byte_end":112921,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112926,"byte_end":112965,"line_start":476,"line_end":476,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":112970,"byte_end":113018,"line_start":477,"line_end":477,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113023,"byte_end":113044,"line_start":478,"line_end":478,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113049,"byte_end":113069,"line_start":479,"line_end":479,"column_start":5,"column_end":25}},{"value":"/ Boston,\\\"The \\\"\\\"United\\\"\\\" States\\\",4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113074,"byte_end":113122,"line_start":480,"line_end":480,"column_start":5,"column_end":53}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113127,"byte_end":113133,"line_start":481,"line_end":481,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113138,"byte_end":113180,"line_start":482,"line_end":482,"column_start":5,"column_end":47}},{"value":"/         .double_quote(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113185,"byte_end":113217,"line_start":483,"line_end":483,"column_start":5,"column_end":37}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113222,"byte_end":113264,"line_start":484,"line_end":484,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113269,"byte_end":113272,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113277,"byte_end":113329,"line_start":486,"line_end":486,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113334,"byte_end":113367,"line_start":487,"line_end":487,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113372,"byte_end":113408,"line_start":488,"line_end":488,"column_start":5,"column_end":41}},{"value":"/             \"Boston\", \"The \\\"United\\\"\\\" States\\\"\", \"4628910\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113413,"byte_end":113478,"line_start":489,"line_end":489,"column_start":5,"column_end":70}},{"value":"/         ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113483,"byte_end":113498,"line_start":490,"line_end":490,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113503,"byte_end":113521,"line_start":491,"line_end":491,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113526,"byte_end":113542,"line_start":492,"line_end":492,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113547,"byte_end":113619,"line_start":493,"line_end":493,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113624,"byte_end":113633,"line_start":494,"line_end":494,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113638,"byte_end":113643,"line_start":495,"line_end":495,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113648,"byte_end":113655,"line_start":496,"line_end":496,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114787,"byte_end":114794,"line_start":534,"line_end":534,"column_start":12,"column_end":19},"name":"quoting","qualname":"<ReaderBuilder>::quoting","value":"pub fn quoting(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable quoting.","sig":null,"attributes":[{"value":"/ Enable or disable quoting.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113790,"byte_end":113820,"line_start":502,"line_end":502,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113825,"byte_end":113828,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default, but it may be disabled. When disabled,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113833,"byte_end":113903,"line_start":504,"line_end":504,"column_start":5,"column_end":75}},{"value":"/ quotes are not treated specially.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113908,"byte_end":113945,"line_start":505,"line_end":505,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113950,"byte_end":113953,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113958,"byte_end":113971,"line_start":507,"line_end":507,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113976,"byte_end":113979,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113984,"byte_end":113991,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":113996,"byte_end":114022,"line_start":510,"line_end":510,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114027,"byte_end":114054,"line_start":511,"line_end":511,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114059,"byte_end":114062,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114067,"byte_end":114106,"line_start":513,"line_end":513,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114111,"byte_end":114159,"line_start":514,"line_end":514,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114164,"byte_end":114185,"line_start":515,"line_end":515,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114190,"byte_end":114210,"line_start":516,"line_end":516,"column_start":5,"column_end":25}},{"value":"/ Boston,\\\"The United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114215,"byte_end":114253,"line_start":517,"line_end":517,"column_start":5,"column_end":43}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114258,"byte_end":114264,"line_start":518,"line_end":518,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114269,"byte_end":114311,"line_start":519,"line_end":519,"column_start":5,"column_end":47}},{"value":"/         .quoting(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114316,"byte_end":114343,"line_start":520,"line_end":520,"column_start":5,"column_end":32}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114348,"byte_end":114390,"line_start":521,"line_end":521,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114395,"byte_end":114398,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114403,"byte_end":114455,"line_start":523,"line_end":523,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114460,"byte_end":114493,"line_start":524,"line_end":524,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114498,"byte_end":114534,"line_start":525,"line_end":525,"column_start":5,"column_end":41}},{"value":"/             \"Boston\", \"\\\"The United States\", \"4628910\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114539,"byte_end":114598,"line_start":526,"line_end":526,"column_start":5,"column_end":64}},{"value":"/         ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114603,"byte_end":114618,"line_start":527,"line_end":527,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114623,"byte_end":114641,"line_start":528,"line_end":528,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114646,"byte_end":114662,"line_start":529,"line_end":529,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114667,"byte_end":114739,"line_start":530,"line_end":530,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114744,"byte_end":114753,"line_start":531,"line_end":531,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114758,"byte_end":114763,"line_start":532,"line_end":532,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114768,"byte_end":114775,"line_start":533,"line_end":533,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115955,"byte_end":115962,"line_start":572,"line_end":572,"column_start":12,"column_end":19},"name":"comment","qualname":"<ReaderBuilder>::comment","value":"pub fn comment(&mut Self, Option<u8>) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The comment character to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The comment character to use when parsing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114900,"byte_end":114950,"line_start":539,"line_end":539,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114955,"byte_end":114958,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ If the start of a record begins with the byte given here, then that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":114963,"byte_end":115034,"line_start":541,"line_end":541,"column_start":5,"column_end":76}},{"value":"/ line is ignored by the CSV parser.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115039,"byte_end":115077,"line_start":542,"line_end":542,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115082,"byte_end":115085,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ This is disabled by default.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115090,"byte_end":115122,"line_start":544,"line_end":544,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115127,"byte_end":115130,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115135,"byte_end":115148,"line_start":546,"line_end":546,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115153,"byte_end":115156,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115161,"byte_end":115168,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115173,"byte_end":115199,"line_start":549,"line_end":549,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115204,"byte_end":115231,"line_start":550,"line_end":550,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115236,"byte_end":115239,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115244,"byte_end":115283,"line_start":552,"line_end":552,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115288,"byte_end":115336,"line_start":553,"line_end":553,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115341,"byte_end":115362,"line_start":554,"line_end":554,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115367,"byte_end":115387,"line_start":555,"line_end":555,"column_start":5,"column_end":25}},{"value":"/ #Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115392,"byte_end":115424,"line_start":556,"line_end":556,"column_start":5,"column_end":37}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115429,"byte_end":115461,"line_start":557,"line_end":557,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115466,"byte_end":115472,"line_start":558,"line_end":558,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115477,"byte_end":115519,"line_start":559,"line_end":559,"column_start":5,"column_end":47}},{"value":"/         .comment(Some(b'#'))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115524,"byte_end":115556,"line_start":560,"line_end":560,"column_start":5,"column_end":37}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115561,"byte_end":115603,"line_start":561,"line_end":561,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115608,"byte_end":115611,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115616,"byte_end":115668,"line_start":563,"line_end":563,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115673,"byte_end":115706,"line_start":564,"line_end":564,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115711,"byte_end":115786,"line_start":565,"line_end":565,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115791,"byte_end":115809,"line_start":566,"line_end":566,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115814,"byte_end":115830,"line_start":567,"line_end":567,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115835,"byte_end":115907,"line_start":568,"line_end":568,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115912,"byte_end":115921,"line_start":569,"line_end":569,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115926,"byte_end":115931,"line_start":570,"line_end":570,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":115936,"byte_end":115943,"line_start":571,"line_end":571,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117109,"byte_end":117114,"line_start":606,"line_end":606,"column_start":12,"column_end":17},"name":"ascii","qualname":"<ReaderBuilder>::ascii","value":"pub fn ascii(&mut Self) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" A convenience method for specifying a configuration to read ASCII\n delimited text.","sig":null,"attributes":[{"value":"/ A convenience method for specifying a configuration to read ASCII","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116082,"byte_end":116151,"line_start":577,"line_end":577,"column_start":5,"column_end":74}},{"value":"/ delimited text.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116156,"byte_end":116175,"line_start":578,"line_end":578,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116180,"byte_end":116183,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ This sets the delimiter and record terminator to the ASCII unit","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116188,"byte_end":116255,"line_start":580,"line_end":580,"column_start":5,"column_end":72}},{"value":"/ separator (`\\x1F`) and record separator (`\\x1E`), respectively.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116260,"byte_end":116327,"line_start":581,"line_end":581,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116332,"byte_end":116335,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116340,"byte_end":116353,"line_start":583,"line_end":583,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116358,"byte_end":116361,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116366,"byte_end":116373,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116378,"byte_end":116404,"line_start":586,"line_end":586,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116409,"byte_end":116436,"line_start":587,"line_end":587,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116441,"byte_end":116444,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116449,"byte_end":116488,"line_start":589,"line_end":589,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116493,"byte_end":116541,"line_start":590,"line_end":590,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116546,"byte_end":116567,"line_start":591,"line_end":591,"column_start":5,"column_end":26}},{"value":"/ city\\x1Fcountry\\x1Fpop\\x1EBoston\\x1FUnited States\\x1F4628910\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116572,"byte_end":116638,"line_start":592,"line_end":592,"column_start":5,"column_end":71}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116643,"byte_end":116685,"line_start":593,"line_end":593,"column_start":5,"column_end":47}},{"value":"/         .ascii()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116690,"byte_end":116710,"line_start":594,"line_end":594,"column_start":5,"column_end":25}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116715,"byte_end":116757,"line_start":595,"line_end":595,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116762,"byte_end":116765,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116770,"byte_end":116822,"line_start":597,"line_end":597,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116827,"byte_end":116860,"line_start":598,"line_end":598,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116865,"byte_end":116940,"line_start":599,"line_end":599,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116945,"byte_end":116963,"line_start":600,"line_end":600,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116968,"byte_end":116984,"line_start":601,"line_end":601,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":116989,"byte_end":117061,"line_start":602,"line_end":602,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117066,"byte_end":117075,"line_start":603,"line_end":603,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117080,"byte_end":117085,"line_start":604,"line_end":604,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117090,"byte_end":117097,"line_start":605,"line_end":605,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117332,"byte_end":117347,"line_start":613,"line_end":613,"column_start":12,"column_end":27},"name":"buffer_capacity","qualname":"<ReaderBuilder>::buffer_capacity","value":"pub fn buffer_capacity(&mut Self, usize) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the capacity (in bytes) of the buffer used in the CSV reader.\n This defaults to a reasonable setting.\n","sig":null,"attributes":[{"value":"/ Set the capacity (in bytes) of the buffer used in the CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117204,"byte_end":117273,"line_start":611,"line_end":611,"column_start":5,"column_end":74}},{"value":"/ This defaults to a reasonable setting.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117278,"byte_end":117320,"line_start":612,"line_end":612,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117637,"byte_end":117640,"line_start":623,"line_end":623,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ReaderBuilder>::nfa","value":"pub fn nfa(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the NFA for parsing CSV.","sig":null,"attributes":[{"value":"/ Enable or disable the NFA for parsing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117458,"byte_end":117504,"line_start":618,"line_end":618,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117509,"byte_end":117512,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ This is intended to be a debug option. The NFA is always slower than","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117517,"byte_end":117589,"line_start":620,"line_end":620,"column_start":5,"column_end":77}},{"value":"/ the DFA.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117594,"byte_end":117606,"line_start":621,"line_end":621,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1607},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121530,"byte_end":121536,"line_start":707,"line_end":707,"column_start":12,"column_end":18},"name":"Reader","qualname":"::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611}],"decl_id":null,"docs":" A already configured CSV reader.","sig":null,"attributes":[{"value":"/ A already configured CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117740,"byte_end":117776,"line_start":629,"line_end":629,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117777,"byte_end":117780,"line_start":630,"line_end":630,"column_start":1,"column_end":4}},{"value":"/ A CSV reader takes as input CSV data and transforms that into standard Rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117781,"byte_end":117860,"line_start":631,"line_end":631,"column_start":1,"column_end":80}},{"value":"/ values. The most flexible way to read CSV data is as a sequence of records,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117861,"byte_end":117940,"line_start":632,"line_end":632,"column_start":1,"column_end":80}},{"value":"/ where a record is a sequence of fields and each field is a string. However,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":117941,"byte_end":118020,"line_start":633,"line_end":633,"column_start":1,"column_end":80}},{"value":"/ a reader can also deserialize CSV data into Rust types like `i64` or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118021,"byte_end":118093,"line_start":634,"line_end":634,"column_start":1,"column_end":73}},{"value":"/ `(String, f64, f64, f64)` or even a custom struct automatically using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118094,"byte_end":118167,"line_start":635,"line_end":635,"column_start":1,"column_end":74}},{"value":"/ Serde.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118168,"byte_end":118178,"line_start":636,"line_end":636,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118179,"byte_end":118182,"line_start":637,"line_end":637,"column_start":1,"column_end":4}},{"value":"/ # Configuration","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118183,"byte_end":118202,"line_start":638,"line_end":638,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118203,"byte_end":118206,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ A CSV reader has a couple convenient constructor methods like `from_path`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118207,"byte_end":118284,"line_start":640,"line_end":640,"column_start":1,"column_end":78}},{"value":"/ and `from_reader`. However, if you want to configure the CSV reader to use","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118285,"byte_end":118363,"line_start":641,"line_end":641,"column_start":1,"column_end":79}},{"value":"/ a different delimiter or quote character (among many other things), then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118364,"byte_end":118440,"line_start":642,"line_end":642,"column_start":1,"column_end":77}},{"value":"/ you should use a [`ReaderBuilder`](struct.ReaderBuilder.html) to construct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118441,"byte_end":118519,"line_start":643,"line_end":643,"column_start":1,"column_end":79}},{"value":"/ a `Reader`. For example, to change the field delimiter:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118520,"byte_end":118579,"line_start":644,"line_end":644,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118580,"byte_end":118583,"line_start":645,"line_end":645,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118584,"byte_end":118591,"line_start":646,"line_end":646,"column_start":1,"column_end":8}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118592,"byte_end":118618,"line_start":647,"line_end":647,"column_start":1,"column_end":27}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118619,"byte_end":118646,"line_start":648,"line_end":648,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118647,"byte_end":118650,"line_start":649,"line_end":649,"column_start":1,"column_end":4}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118651,"byte_end":118690,"line_start":650,"line_end":650,"column_start":1,"column_end":40}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118691,"byte_end":118739,"line_start":651,"line_end":651,"column_start":1,"column_end":49}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118740,"byte_end":118761,"line_start":652,"line_end":652,"column_start":1,"column_end":22}},{"value":"/ city;country;pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118762,"byte_end":118782,"line_start":653,"line_end":653,"column_start":1,"column_end":21}},{"value":"/ Boston;United States;4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118783,"byte_end":118815,"line_start":654,"line_end":654,"column_start":1,"column_end":33}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118816,"byte_end":118822,"line_start":655,"line_end":655,"column_start":1,"column_end":7}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118823,"byte_end":118865,"line_start":656,"line_end":656,"column_start":1,"column_end":43}},{"value":"/         .delimiter(b';')","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118866,"byte_end":118894,"line_start":657,"line_end":657,"column_start":1,"column_end":29}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118895,"byte_end":118937,"line_start":658,"line_end":658,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118938,"byte_end":118941,"line_start":659,"line_end":659,"column_start":1,"column_end":4}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118942,"byte_end":118994,"line_start":660,"line_end":660,"column_start":1,"column_end":53}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":118995,"byte_end":119028,"line_start":661,"line_end":661,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119029,"byte_end":119104,"line_start":662,"line_end":662,"column_start":1,"column_end":76}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119105,"byte_end":119123,"line_start":663,"line_end":663,"column_start":1,"column_end":19}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119124,"byte_end":119140,"line_start":664,"line_end":664,"column_start":1,"column_end":17}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119141,"byte_end":119213,"line_start":665,"line_end":665,"column_start":1,"column_end":73}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119214,"byte_end":119223,"line_start":666,"line_end":666,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119224,"byte_end":119229,"line_start":667,"line_end":667,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119230,"byte_end":119237,"line_start":668,"line_end":668,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119238,"byte_end":119241,"line_start":669,"line_end":669,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119242,"byte_end":119262,"line_start":670,"line_end":670,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119263,"byte_end":119266,"line_start":671,"line_end":671,"column_start":1,"column_end":4}},{"value":"/ In general, CSV *parsing* does not ever return an error. That is, there is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119267,"byte_end":119345,"line_start":672,"line_end":672,"column_start":1,"column_end":79}},{"value":"/ no such thing as malformed CSV data. Instead, this reader will prioritize","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119346,"byte_end":119423,"line_start":673,"line_end":673,"column_start":1,"column_end":78}},{"value":"/ finding a parse over rejecting CSV data that it does not understand. This","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119424,"byte_end":119501,"line_start":674,"line_end":674,"column_start":1,"column_end":78}},{"value":"/ choice was inspired by other popular CSV parsers, but also because it is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119502,"byte_end":119578,"line_start":675,"line_end":675,"column_start":1,"column_end":77}},{"value":"/ pragmatic. CSV data varies wildly, so even if the CSV data is malformed,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119579,"byte_end":119655,"line_start":676,"line_end":676,"column_start":1,"column_end":77}},{"value":"/ it might still be possible to work with the data. In the land of CSV, there","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119656,"byte_end":119735,"line_start":677,"line_end":677,"column_start":1,"column_end":80}},{"value":"/ is no \"right\" or \"wrong,\" only \"right\" and \"less right.\"","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119736,"byte_end":119796,"line_start":678,"line_end":678,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119797,"byte_end":119800,"line_start":679,"line_end":679,"column_start":1,"column_end":4}},{"value":"/ With that said, a number of errors can occur while reading CSV data:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119801,"byte_end":119873,"line_start":680,"line_end":680,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119874,"byte_end":119877,"line_start":681,"line_end":681,"column_start":1,"column_end":4}},{"value":"/ * By default, all records in CSV data must have the same number of fields.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119878,"byte_end":119956,"line_start":682,"line_end":682,"column_start":1,"column_end":79}},{"value":"/   If a record is found with a different number of fields than a prior","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":119957,"byte_end":120030,"line_start":683,"line_end":683,"column_start":1,"column_end":74}},{"value":"/   record, then an error is returned. This behavior can be disabled by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120031,"byte_end":120104,"line_start":684,"line_end":684,"column_start":1,"column_end":74}},{"value":"/   enabling flexible parsing via the `flexible` method on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120105,"byte_end":120165,"line_start":685,"line_end":685,"column_start":1,"column_end":61}},{"value":"/   [`ReaderBuilder`](struct.ReaderBuilder.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120166,"byte_end":120217,"line_start":686,"line_end":686,"column_start":1,"column_end":52}},{"value":"/ * When reading CSV data from a resource (like a file), it is possible for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120218,"byte_end":120295,"line_start":687,"line_end":687,"column_start":1,"column_end":78}},{"value":"/   reading from the underlying resource to fail. This will return an error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120296,"byte_end":120374,"line_start":688,"line_end":688,"column_start":1,"column_end":79}},{"value":"/   For subsequent calls to the `Reader` after encountering a such error","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120375,"byte_end":120449,"line_start":689,"line_end":689,"column_start":1,"column_end":75}},{"value":"/   (unless `seek` is used), it will behave as if end of file had been","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120450,"byte_end":120522,"line_start":690,"line_end":690,"column_start":1,"column_end":73}},{"value":"/   reached, in order to avoid running into infinite loops when still","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120523,"byte_end":120594,"line_start":691,"line_end":691,"column_start":1,"column_end":72}},{"value":"/   attempting to read the next record when one has errored.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120595,"byte_end":120657,"line_start":692,"line_end":692,"column_start":1,"column_end":63}},{"value":"/ * When reading CSV data into `String` or `&str` fields (e.g., via a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120658,"byte_end":120729,"line_start":693,"line_end":693,"column_start":1,"column_end":72}},{"value":"/   [`StringRecord`](struct.StringRecord.html)), UTF-8 is strictly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120730,"byte_end":120798,"line_start":694,"line_end":694,"column_start":1,"column_end":69}},{"value":"/   enforced. If CSV data is invalid UTF-8, then an error is returned. If","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120799,"byte_end":120874,"line_start":695,"line_end":695,"column_start":1,"column_end":76}},{"value":"/   you want to read invalid UTF-8, then you should use the byte oriented","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120875,"byte_end":120950,"line_start":696,"line_end":696,"column_start":1,"column_end":76}},{"value":"/   APIs such as [`ByteRecord`](struct.ByteRecord.html). If you need explicit","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":120951,"byte_end":121030,"line_start":697,"line_end":697,"column_start":1,"column_end":80}},{"value":"/   support for another encoding entirely, then you'll need to use another","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121031,"byte_end":121107,"line_start":698,"line_end":698,"column_start":1,"column_end":77}},{"value":"/   crate to transcode your CSV data to UTF-8 before parsing it.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121108,"byte_end":121174,"line_start":699,"line_end":699,"column_start":1,"column_end":67}},{"value":"/ * When using Serde to deserialize CSV data into Rust types, it is possible","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121175,"byte_end":121253,"line_start":700,"line_end":700,"column_start":1,"column_end":79}},{"value":"/   for a number of additional errors to occur. For example, deserializing","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121254,"byte_end":121330,"line_start":701,"line_end":701,"column_start":1,"column_end":77}},{"value":"/   a field `xyz` into an `i32` field will result in an error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121331,"byte_end":121395,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121396,"byte_end":121399,"line_start":703,"line_end":703,"column_start":1,"column_end":4}},{"value":"/ For more details on the precise semantics of errors, see the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121400,"byte_end":121464,"line_start":704,"line_end":704,"column_start":1,"column_end":65}},{"value":"/ [`Error`](enum.Error.html) type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":121465,"byte_end":121501,"line_start":705,"line_end":705,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125246,"byte_end":125255,"line_start":811,"line_end":811,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Reader<Reader<File>>>::from_path","value":"pub fn from_path<P: AsRef<Path>>(P) -> Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSV parser with a default configuration for the given\n file path.","sig":null,"attributes":[{"value":"/ Create a new CSV parser with a default configuration for the given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124633,"byte_end":124703,"line_start":790,"line_end":790,"column_start":5,"column_end":75}},{"value":"/ file path.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124708,"byte_end":124722,"line_start":791,"line_end":791,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124727,"byte_end":124730,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ To customize CSV parsing, use a `ReaderBuilder`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124735,"byte_end":124787,"line_start":793,"line_end":793,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124792,"byte_end":124795,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124800,"byte_end":124813,"line_start":795,"line_end":795,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124818,"byte_end":124821,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124826,"byte_end":124839,"line_start":797,"line_end":797,"column_start":5,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124844,"byte_end":124870,"line_start":798,"line_end":798,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124875,"byte_end":124895,"line_start":799,"line_end":799,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124900,"byte_end":124903,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124908,"byte_end":124947,"line_start":801,"line_end":801,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124952,"byte_end":125000,"line_start":802,"line_end":802,"column_start":5,"column_end":53}},{"value":"/     let mut rdr = Reader::from_path(\"foo.csv\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125005,"byte_end":125057,"line_start":803,"line_end":803,"column_start":5,"column_end":57}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125062,"byte_end":125099,"line_start":804,"line_end":804,"column_start":5,"column_end":42}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125104,"byte_end":125137,"line_start":805,"line_end":805,"column_start":5,"column_end":38}},{"value":"/         println!(\"{:?}\", record);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125142,"byte_end":125179,"line_start":806,"line_end":806,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125184,"byte_end":125193,"line_start":807,"line_end":807,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125198,"byte_end":125212,"line_start":808,"line_end":808,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125217,"byte_end":125222,"line_start":809,"line_end":809,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125227,"byte_end":125234,"line_start":810,"line_end":810,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126845,"byte_end":126856,"line_start":863,"line_end":863,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<Reader<R>>::from_reader","value":"pub fn from_reader(R) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSV parser with a default configuration for the given\n reader.","sig":null,"attributes":[{"value":"/ Create a new CSV parser with a default configuration for the given","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126099,"byte_end":126169,"line_start":837,"line_end":837,"column_start":5,"column_end":75}},{"value":"/ reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126174,"byte_end":126185,"line_start":838,"line_end":838,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126190,"byte_end":126193,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ To customize CSV parsing, use a `ReaderBuilder`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126198,"byte_end":126250,"line_start":840,"line_end":840,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126255,"byte_end":126258,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126263,"byte_end":126276,"line_start":842,"line_end":842,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126281,"byte_end":126284,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126289,"byte_end":126296,"line_start":844,"line_end":844,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126301,"byte_end":126327,"line_start":845,"line_end":845,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126332,"byte_end":126352,"line_start":846,"line_end":846,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126357,"byte_end":126360,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126365,"byte_end":126404,"line_start":848,"line_end":848,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126409,"byte_end":126457,"line_start":849,"line_end":849,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126462,"byte_end":126483,"line_start":850,"line_end":850,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126488,"byte_end":126508,"line_start":851,"line_end":851,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126513,"byte_end":126545,"line_start":852,"line_end":852,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126550,"byte_end":126581,"line_start":853,"line_end":853,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126586,"byte_end":126592,"line_start":854,"line_end":854,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126597,"byte_end":126656,"line_start":855,"line_end":855,"column_start":5,"column_end":64}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126661,"byte_end":126698,"line_start":856,"line_end":856,"column_start":5,"column_end":42}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126703,"byte_end":126736,"line_start":857,"line_end":857,"column_start":5,"column_end":38}},{"value":"/         println!(\"{:?}\", record);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126741,"byte_end":126778,"line_start":858,"line_end":858,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126783,"byte_end":126792,"line_start":859,"line_end":859,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126797,"byte_end":126811,"line_start":860,"line_end":860,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126816,"byte_end":126821,"line_start":861,"line_end":861,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126826,"byte_end":126833,"line_start":862,"line_end":862,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133743,"byte_end":133754,"line_start":1051,"line_end":1051,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Reader<R>>::deserialize","value":"pub fn deserialize<D>(&mut Self) -> DeserializeRecordsIter<, R, D> where\nD: DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over deserialized records.","sig":null,"attributes":[{"value":"/ Returns a borrowed iterator over deserialized records.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":126937,"byte_end":126995,"line_start":867,"line_end":867,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127000,"byte_end":127003,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<D, Error>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127008,"byte_end":127071,"line_start":869,"line_end":869,"column_start":5,"column_end":68}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127076,"byte_end":127145,"line_start":870,"line_end":870,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127150,"byte_end":127206,"line_start":871,"line_end":871,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127211,"byte_end":127214,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127219,"byte_end":127287,"line_start":873,"line_end":873,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record. Additionally,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127292,"byte_end":127364,"line_start":874,"line_end":874,"column_start":5,"column_end":77}},{"value":"/ if `has_headers` is enabled, then deserializing into a struct will","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127369,"byte_end":127439,"line_start":875,"line_end":875,"column_start":5,"column_end":75}},{"value":"/ automatically align the values in each row to the fields of a struct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127444,"byte_end":127516,"line_start":876,"line_end":876,"column_start":5,"column_end":77}},{"value":"/ based on the header row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127521,"byte_end":127549,"line_start":877,"line_end":877,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127554,"byte_end":127557,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127562,"byte_end":127575,"line_start":879,"line_end":879,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127580,"byte_end":127583,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ This shows how to deserialize CSV data into normal Rust structs. The","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127588,"byte_end":127660,"line_start":881,"line_end":881,"column_start":5,"column_end":77}},{"value":"/ fields of the header row are used to match up the values in each row","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127665,"byte_end":127737,"line_start":882,"line_end":882,"column_start":5,"column_end":77}},{"value":"/ to the fields of the struct.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127742,"byte_end":127774,"line_start":883,"line_end":883,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127779,"byte_end":127782,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127787,"byte_end":127794,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127799,"byte_end":127825,"line_start":886,"line_end":886,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127830,"byte_end":127833,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127838,"byte_end":127858,"line_start":888,"line_end":888,"column_start":5,"column_end":25}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127863,"byte_end":127890,"line_start":889,"line_end":889,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127895,"byte_end":127898,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, Eq, PartialEq)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127903,"byte_end":127951,"line_start":891,"line_end":891,"column_start":5,"column_end":53}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127956,"byte_end":127972,"line_start":892,"line_end":892,"column_start":5,"column_end":21}},{"value":"/     city: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":127977,"byte_end":127998,"line_start":893,"line_end":893,"column_start":5,"column_end":26}},{"value":"/     country: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128003,"byte_end":128027,"line_start":894,"line_end":894,"column_start":5,"column_end":29}},{"value":"/     #[serde(rename = \"popcount\")]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128032,"byte_end":128069,"line_start":895,"line_end":895,"column_start":5,"column_end":42}},{"value":"/     population: u64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128074,"byte_end":128098,"line_start":896,"line_end":896,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128103,"byte_end":128108,"line_start":897,"line_end":897,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128113,"byte_end":128116,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128121,"byte_end":128160,"line_start":899,"line_end":899,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128165,"byte_end":128213,"line_start":900,"line_end":900,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128218,"byte_end":128239,"line_start":901,"line_end":901,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128244,"byte_end":128269,"line_start":902,"line_end":902,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128274,"byte_end":128306,"line_start":903,"line_end":903,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128311,"byte_end":128317,"line_start":904,"line_end":904,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128322,"byte_end":128381,"line_start":905,"line_end":905,"column_start":5,"column_end":64}},{"value":"/     let mut iter = rdr.deserialize();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128386,"byte_end":128427,"line_start":906,"line_end":906,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128432,"byte_end":128435,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128440,"byte_end":128483,"line_start":908,"line_end":908,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128488,"byte_end":128526,"line_start":909,"line_end":909,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128531,"byte_end":128567,"line_start":910,"line_end":910,"column_start":5,"column_end":41}},{"value":"/             city: \"Boston\".to_string(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128572,"byte_end":128615,"line_start":911,"line_end":911,"column_start":5,"column_end":48}},{"value":"/             country: \"United States\".to_string(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128620,"byte_end":128673,"line_start":912,"line_end":912,"column_start":5,"column_end":58}},{"value":"/             population: 4628910,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128678,"byte_end":128714,"line_start":913,"line_end":913,"column_start":5,"column_end":41}},{"value":"/         });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128719,"byte_end":128734,"line_start":914,"line_end":914,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128739,"byte_end":128757,"line_start":915,"line_end":915,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128762,"byte_end":128778,"line_start":916,"line_end":916,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128783,"byte_end":128855,"line_start":917,"line_end":917,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128860,"byte_end":128869,"line_start":918,"line_end":918,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128874,"byte_end":128879,"line_start":919,"line_end":919,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128884,"byte_end":128891,"line_start":920,"line_end":920,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128896,"byte_end":128899,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ # Rules","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128904,"byte_end":128915,"line_start":922,"line_end":922,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128920,"byte_end":128923,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ For the most part, any Rust type that maps straight-forwardly to a CSV","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":128928,"byte_end":129002,"line_start":924,"line_end":924,"column_start":5,"column_end":79}},{"value":"/ record is supported. This includes maps, structs, tuples and tuple","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129007,"byte_end":129077,"line_start":925,"line_end":925,"column_start":5,"column_end":75}},{"value":"/ structs. Other Rust types, such as `Vec`s, arrays, and enums have","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129082,"byte_end":129151,"line_start":926,"line_end":926,"column_start":5,"column_end":74}},{"value":"/ a more complicated story. In general, when working with CSV data, one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129156,"byte_end":129229,"line_start":927,"line_end":927,"column_start":5,"column_end":78}},{"value":"/ should avoid *nested sequences* as much as possible.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129234,"byte_end":129290,"line_start":928,"line_end":928,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129295,"byte_end":129298,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ Maps, structs, tuples and tuple structs map to CSV records in a simple","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129303,"byte_end":129377,"line_start":930,"line_end":930,"column_start":5,"column_end":79}},{"value":"/ way. Tuples and tuple structs decode their fields in the order that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129382,"byte_end":129453,"line_start":931,"line_end":931,"column_start":5,"column_end":76}},{"value":"/ they are defined. Structs will do the same only if `has_headers` has","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129458,"byte_end":129530,"line_start":932,"line_end":932,"column_start":5,"column_end":77}},{"value":"/ been disabled using [`ReaderBuilder`](struct.ReaderBuilder.html),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129535,"byte_end":129604,"line_start":933,"line_end":933,"column_start":5,"column_end":74}},{"value":"/ otherwise, structs and maps are deserialized based on the fields","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129609,"byte_end":129677,"line_start":934,"line_end":934,"column_start":5,"column_end":73}},{"value":"/ defined in the header row. (If there is no header row, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129682,"byte_end":129745,"line_start":935,"line_end":935,"column_start":5,"column_end":68}},{"value":"/ deserializing into a map will result in an error.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129750,"byte_end":129804,"line_start":936,"line_end":936,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129809,"byte_end":129812,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Nested sequences are supported in a limited capacity. Namely, they","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129817,"byte_end":129887,"line_start":938,"line_end":938,"column_start":5,"column_end":75}},{"value":"/ are flattened. As a result, it's often useful to use a `Vec` to capture","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129892,"byte_end":129967,"line_start":939,"line_end":939,"column_start":5,"column_end":80}},{"value":"/ a \"tail\" of fields in a record:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":129972,"byte_end":130007,"line_start":940,"line_end":940,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130012,"byte_end":130015,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130020,"byte_end":130027,"line_start":942,"line_end":942,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130032,"byte_end":130058,"line_start":943,"line_end":943,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130063,"byte_end":130066,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130071,"byte_end":130098,"line_start":945,"line_end":945,"column_start":5,"column_end":32}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130103,"byte_end":130130,"line_start":946,"line_end":946,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130135,"byte_end":130138,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, Eq, PartialEq)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130143,"byte_end":130191,"line_start":948,"line_end":948,"column_start":5,"column_end":53}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130196,"byte_end":130212,"line_start":949,"line_end":949,"column_start":5,"column_end":21}},{"value":"/     label: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130217,"byte_end":130239,"line_start":950,"line_end":950,"column_start":5,"column_end":27}},{"value":"/     values: Vec<i32>,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130244,"byte_end":130269,"line_start":951,"line_end":951,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130274,"byte_end":130279,"line_start":952,"line_end":952,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130284,"byte_end":130287,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130292,"byte_end":130331,"line_start":954,"line_end":954,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130336,"byte_end":130384,"line_start":955,"line_end":955,"column_start":5,"column_end":53}},{"value":"/     let data = \"foo,1,2,3\";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130389,"byte_end":130420,"line_start":956,"line_end":956,"column_start":5,"column_end":36}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130425,"byte_end":130467,"line_start":957,"line_end":957,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130472,"byte_end":130503,"line_start":958,"line_end":958,"column_start":5,"column_end":36}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130508,"byte_end":130550,"line_start":959,"line_end":959,"column_start":5,"column_end":47}},{"value":"/     let mut iter = rdr.deserialize();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130555,"byte_end":130596,"line_start":960,"line_end":960,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130601,"byte_end":130604,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130609,"byte_end":130652,"line_start":962,"line_end":962,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130657,"byte_end":130695,"line_start":963,"line_end":963,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130700,"byte_end":130736,"line_start":964,"line_end":964,"column_start":5,"column_end":41}},{"value":"/             label: \"foo\".to_string(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130741,"byte_end":130782,"line_start":965,"line_end":965,"column_start":5,"column_end":46}},{"value":"/             values: vec![1, 2, 3],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130787,"byte_end":130825,"line_start":966,"line_end":966,"column_start":5,"column_end":43}},{"value":"/         });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130830,"byte_end":130845,"line_start":967,"line_end":967,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130850,"byte_end":130868,"line_start":968,"line_end":968,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130873,"byte_end":130889,"line_start":969,"line_end":969,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130894,"byte_end":130966,"line_start":970,"line_end":970,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130971,"byte_end":130980,"line_start":971,"line_end":971,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130985,"byte_end":130990,"line_start":972,"line_end":972,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":130995,"byte_end":131002,"line_start":973,"line_end":973,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131007,"byte_end":131010,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ In the above example, adding another field to the `Row` struct after","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131015,"byte_end":131087,"line_start":975,"line_end":975,"column_start":5,"column_end":77}},{"value":"/ the `values` field will result in a deserialization error. This is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131092,"byte_end":131162,"line_start":976,"line_end":976,"column_start":5,"column_end":75}},{"value":"/ because the deserializer doesn't know when to stop reading fields","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131167,"byte_end":131236,"line_start":977,"line_end":977,"column_start":5,"column_end":74}},{"value":"/ into the `values` vector, so it will consume the rest of the fields in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131241,"byte_end":131315,"line_start":978,"line_end":978,"column_start":5,"column_end":79}},{"value":"/ the record leaving none left over for the additional field.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131320,"byte_end":131383,"line_start":979,"line_end":979,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131388,"byte_end":131391,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ Finally, simple enums in Rust can be deserialized as well. Namely,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131396,"byte_end":131466,"line_start":981,"line_end":981,"column_start":5,"column_end":75}},{"value":"/ enums must either be variants with no arguments or variants with a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131471,"byte_end":131541,"line_start":982,"line_end":982,"column_start":5,"column_end":75}},{"value":"/ single argument. Variants with no arguments are deserialized based on","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131546,"byte_end":131619,"line_start":983,"line_end":983,"column_start":5,"column_end":78}},{"value":"/ which variant name the field matches. Variants with a single argument","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131624,"byte_end":131697,"line_start":984,"line_end":984,"column_start":5,"column_end":78}},{"value":"/ are deserialized based on which variant can store the data. The latter","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131702,"byte_end":131776,"line_start":985,"line_end":985,"column_start":5,"column_end":79}},{"value":"/ is only supported when using \"untagged\" enum deserialization. The","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131781,"byte_end":131850,"line_start":986,"line_end":986,"column_start":5,"column_end":74}},{"value":"/ following example shows both forms in action:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131855,"byte_end":131904,"line_start":987,"line_end":987,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131909,"byte_end":131912,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131917,"byte_end":131924,"line_start":989,"line_end":989,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131929,"byte_end":131955,"line_start":990,"line_end":990,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131960,"byte_end":131963,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131968,"byte_end":131988,"line_start":992,"line_end":992,"column_start":5,"column_end":25}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":131993,"byte_end":132020,"line_start":993,"line_end":993,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132025,"byte_end":132028,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, PartialEq)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132033,"byte_end":132077,"line_start":995,"line_end":995,"column_start":5,"column_end":49}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132082,"byte_end":132098,"line_start":996,"line_end":996,"column_start":5,"column_end":21}},{"value":"/     label: Label,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132103,"byte_end":132124,"line_start":997,"line_end":997,"column_start":5,"column_end":26}},{"value":"/     value: Number,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132129,"byte_end":132151,"line_start":998,"line_end":998,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132156,"byte_end":132161,"line_start":999,"line_end":999,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132166,"byte_end":132169,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, PartialEq)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132174,"byte_end":132218,"line_start":1001,"line_end":1001,"column_start":5,"column_end":49}},{"value":"/ #[serde(rename_all = \"lowercase\")]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132223,"byte_end":132261,"line_start":1002,"line_end":1002,"column_start":5,"column_end":43}},{"value":"/ enum Label {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132266,"byte_end":132282,"line_start":1003,"line_end":1003,"column_start":5,"column_end":21}},{"value":"/     Celsius,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132287,"byte_end":132303,"line_start":1004,"line_end":1004,"column_start":5,"column_end":21}},{"value":"/     Fahrenheit,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132308,"byte_end":132327,"line_start":1005,"line_end":1005,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132332,"byte_end":132337,"line_start":1006,"line_end":1006,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132342,"byte_end":132345,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, PartialEq)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132350,"byte_end":132394,"line_start":1008,"line_end":1008,"column_start":5,"column_end":49}},{"value":"/ #[serde(untagged)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132399,"byte_end":132421,"line_start":1009,"line_end":1009,"column_start":5,"column_end":27}},{"value":"/ enum Number {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132426,"byte_end":132443,"line_start":1010,"line_end":1010,"column_start":5,"column_end":22}},{"value":"/     Integer(i64),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132448,"byte_end":132469,"line_start":1011,"line_end":1011,"column_start":5,"column_end":26}},{"value":"/     Float(f64),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132474,"byte_end":132493,"line_start":1012,"line_end":1012,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132498,"byte_end":132503,"line_start":1013,"line_end":1013,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132508,"byte_end":132511,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132516,"byte_end":132555,"line_start":1015,"line_end":1015,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132560,"byte_end":132608,"line_start":1016,"line_end":1016,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132613,"byte_end":132634,"line_start":1017,"line_end":1017,"column_start":5,"column_end":26}},{"value":"/ label,value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132639,"byte_end":132654,"line_start":1018,"line_end":1018,"column_start":5,"column_end":20}},{"value":"/ celsius,22.2222","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132659,"byte_end":132678,"line_start":1019,"line_end":1019,"column_start":5,"column_end":24}},{"value":"/ fahrenheit,72","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132683,"byte_end":132700,"line_start":1020,"line_end":1020,"column_start":5,"column_end":22}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132705,"byte_end":132711,"line_start":1021,"line_end":1021,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132716,"byte_end":132775,"line_start":1022,"line_end":1022,"column_start":5,"column_end":64}},{"value":"/     let mut iter = rdr.deserialize();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132780,"byte_end":132821,"line_start":1023,"line_end":1023,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132826,"byte_end":132829,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/     // Read the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132834,"byte_end":132867,"line_start":1025,"line_end":1025,"column_start":5,"column_end":38}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132872,"byte_end":132915,"line_start":1026,"line_end":1026,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132920,"byte_end":132958,"line_start":1027,"line_end":1027,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":132963,"byte_end":132999,"line_start":1028,"line_end":1028,"column_start":5,"column_end":41}},{"value":"/             label: Label::Celsius,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133004,"byte_end":133042,"line_start":1029,"line_end":1029,"column_start":5,"column_end":43}},{"value":"/             value: Number::Float(22.2222),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133047,"byte_end":133093,"line_start":1030,"line_end":1030,"column_start":5,"column_end":51}},{"value":"/         });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133098,"byte_end":133113,"line_start":1031,"line_end":1031,"column_start":5,"column_end":20}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133118,"byte_end":133134,"line_start":1032,"line_end":1032,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133139,"byte_end":133173,"line_start":1033,"line_end":1033,"column_start":5,"column_end":39}},{"value":"/             \"expected at least two records but got none\"));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133178,"byte_end":133241,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133246,"byte_end":133255,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133260,"byte_end":133263,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/     // Read the second record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133268,"byte_end":133302,"line_start":1037,"line_end":1037,"column_start":5,"column_end":39}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133307,"byte_end":133350,"line_start":1038,"line_end":1038,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133355,"byte_end":133393,"line_start":1039,"line_end":1039,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133398,"byte_end":133434,"line_start":1040,"line_end":1040,"column_start":5,"column_end":41}},{"value":"/             label: Label::Fahrenheit,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133439,"byte_end":133480,"line_start":1041,"line_end":1041,"column_start":5,"column_end":46}},{"value":"/             value: Number::Integer(72),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133485,"byte_end":133528,"line_start":1042,"line_end":1042,"column_start":5,"column_end":48}},{"value":"/         });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133533,"byte_end":133548,"line_start":1043,"line_end":1043,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133553,"byte_end":133571,"line_start":1044,"line_end":1044,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133576,"byte_end":133592,"line_start":1045,"line_end":1045,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133597,"byte_end":133624,"line_start":1046,"line_end":1046,"column_start":5,"column_end":32}},{"value":"/             \"expected at least two records but got only one\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133629,"byte_end":133695,"line_start":1047,"line_end":1047,"column_start":5,"column_end":71}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133700,"byte_end":133709,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133714,"byte_end":133719,"line_start":1049,"line_end":1049,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133724,"byte_end":133731,"line_start":1050,"line_end":1050,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135889,"byte_end":135905,"line_start":1114,"line_end":1114,"column_start":12,"column_end":28},"name":"into_deserialize","qualname":"<Reader<R>>::into_deserialize","value":"pub fn into_deserialize<D>(Self) -> DeserializeRecordsIntoIter<R, D> where\nD: DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over deserialized records.","sig":null,"attributes":[{"value":"/ Returns an owned iterator over deserialized records.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133899,"byte_end":133955,"line_start":1058,"line_end":1058,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133960,"byte_end":133963,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<D, Error>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":133968,"byte_end":134031,"line_start":1060,"line_end":1060,"column_start":5,"column_end":68}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134036,"byte_end":134105,"line_start":1061,"line_end":1061,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134110,"byte_end":134166,"line_start":1062,"line_end":1062,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134171,"byte_end":134174,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ This is mostly useful when you want to return a CSV iterator or store","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134179,"byte_end":134252,"line_start":1064,"line_end":1064,"column_start":5,"column_end":78}},{"value":"/ it somewhere.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134257,"byte_end":134274,"line_start":1065,"line_end":1065,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134279,"byte_end":134282,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134287,"byte_end":134355,"line_start":1067,"line_end":1067,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record. Additionally,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134360,"byte_end":134432,"line_start":1068,"line_end":1068,"column_start":5,"column_end":77}},{"value":"/ if `has_headers` is enabled, then deserializing into a struct will","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134437,"byte_end":134507,"line_start":1069,"line_end":1069,"column_start":5,"column_end":75}},{"value":"/ automatically align the values in each row to the fields of a struct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134512,"byte_end":134584,"line_start":1070,"line_end":1070,"column_start":5,"column_end":77}},{"value":"/ based on the header row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134589,"byte_end":134617,"line_start":1071,"line_end":1071,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134622,"byte_end":134625,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ For more detailed deserialization rules, see the documentation on the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134630,"byte_end":134703,"line_start":1073,"line_end":1073,"column_start":5,"column_end":78}},{"value":"/ `deserialize` method.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134708,"byte_end":134733,"line_start":1074,"line_end":1074,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134738,"byte_end":134741,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134746,"byte_end":134759,"line_start":1076,"line_end":1076,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134764,"byte_end":134767,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134772,"byte_end":134779,"line_start":1078,"line_end":1078,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134784,"byte_end":134810,"line_start":1079,"line_end":1079,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134815,"byte_end":134818,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134823,"byte_end":134843,"line_start":1081,"line_end":1081,"column_start":5,"column_end":25}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134848,"byte_end":134875,"line_start":1082,"line_end":1082,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134880,"byte_end":134883,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, Eq, PartialEq)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134888,"byte_end":134936,"line_start":1084,"line_end":1084,"column_start":5,"column_end":53}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134941,"byte_end":134957,"line_start":1085,"line_end":1085,"column_start":5,"column_end":21}},{"value":"/     city: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134962,"byte_end":134983,"line_start":1086,"line_end":1086,"column_start":5,"column_end":26}},{"value":"/     country: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":134988,"byte_end":135012,"line_start":1087,"line_end":1087,"column_start":5,"column_end":29}},{"value":"/     #[serde(rename = \"popcount\")]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135017,"byte_end":135054,"line_start":1088,"line_end":1088,"column_start":5,"column_end":42}},{"value":"/     population: u64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135059,"byte_end":135083,"line_start":1089,"line_end":1089,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135088,"byte_end":135093,"line_start":1090,"line_end":1090,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135098,"byte_end":135101,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135106,"byte_end":135145,"line_start":1092,"line_end":1092,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135150,"byte_end":135198,"line_start":1093,"line_end":1093,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135203,"byte_end":135224,"line_start":1094,"line_end":1094,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135229,"byte_end":135254,"line_start":1095,"line_end":1095,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135259,"byte_end":135291,"line_start":1096,"line_end":1096,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135296,"byte_end":135302,"line_start":1097,"line_end":1097,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135307,"byte_end":135362,"line_start":1098,"line_end":1098,"column_start":5,"column_end":60}},{"value":"/     let mut iter = rdr.into_deserialize();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135367,"byte_end":135413,"line_start":1099,"line_end":1099,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135418,"byte_end":135421,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135426,"byte_end":135469,"line_start":1101,"line_end":1101,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135474,"byte_end":135512,"line_start":1102,"line_end":1102,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135517,"byte_end":135553,"line_start":1103,"line_end":1103,"column_start":5,"column_end":41}},{"value":"/             city: \"Boston\".to_string(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135558,"byte_end":135601,"line_start":1104,"line_end":1104,"column_start":5,"column_end":48}},{"value":"/             country: \"United States\".to_string(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135606,"byte_end":135659,"line_start":1105,"line_end":1105,"column_start":5,"column_end":58}},{"value":"/             population: 4628910,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135664,"byte_end":135700,"line_start":1106,"line_end":1106,"column_start":5,"column_end":41}},{"value":"/         });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135705,"byte_end":135720,"line_start":1107,"line_end":1107,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135725,"byte_end":135743,"line_start":1108,"line_end":1108,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135748,"byte_end":135764,"line_start":1109,"line_end":1109,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135769,"byte_end":135841,"line_start":1110,"line_end":1110,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135846,"byte_end":135855,"line_start":1111,"line_end":1111,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135860,"byte_end":135865,"line_start":1112,"line_end":1112,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":135870,"byte_end":135877,"line_start":1113,"line_end":1113,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137234,"byte_end":137241,"line_start":1154,"line_end":1154,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<R>>::records","value":"pub fn records(&mut Self) -> StringRecordsIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all records as strings.","sig":null,"attributes":[{"value":"/ Returns a borrowed iterator over all records as strings.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136053,"byte_end":136113,"line_start":1121,"line_end":1121,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136118,"byte_end":136121,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<StringRecord, Error>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136126,"byte_end":136200,"line_start":1123,"line_end":1123,"column_start":5,"column_end":79}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136205,"byte_end":136274,"line_start":1124,"line_end":1124,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136279,"byte_end":136335,"line_start":1125,"line_end":1125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136340,"byte_end":136343,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136348,"byte_end":136416,"line_start":1127,"line_end":1127,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136421,"byte_end":136479,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136484,"byte_end":136487,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136492,"byte_end":136505,"line_start":1130,"line_end":1130,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136510,"byte_end":136513,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136518,"byte_end":136525,"line_start":1132,"line_end":1132,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136530,"byte_end":136556,"line_start":1133,"line_end":1133,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136561,"byte_end":136581,"line_start":1134,"line_end":1134,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136586,"byte_end":136589,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136594,"byte_end":136633,"line_start":1136,"line_end":1136,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136638,"byte_end":136686,"line_start":1137,"line_end":1137,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136691,"byte_end":136712,"line_start":1138,"line_end":1138,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136717,"byte_end":136737,"line_start":1139,"line_end":1139,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136742,"byte_end":136774,"line_start":1140,"line_end":1140,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136779,"byte_end":136785,"line_start":1141,"line_end":1141,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136790,"byte_end":136849,"line_start":1142,"line_end":1142,"column_start":5,"column_end":64}},{"value":"/     let mut iter = rdr.records();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136854,"byte_end":136891,"line_start":1143,"line_end":1143,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136896,"byte_end":136899,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136904,"byte_end":136947,"line_start":1145,"line_end":1145,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136952,"byte_end":136985,"line_start":1146,"line_end":1146,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":136990,"byte_end":137065,"line_start":1147,"line_end":1147,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137070,"byte_end":137088,"line_start":1148,"line_end":1148,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137093,"byte_end":137109,"line_start":1149,"line_end":1149,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137114,"byte_end":137186,"line_start":1150,"line_end":1150,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137191,"byte_end":137200,"line_start":1151,"line_end":1151,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137205,"byte_end":137210,"line_start":1152,"line_end":1152,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137215,"byte_end":137222,"line_start":1153,"line_end":1153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138615,"byte_end":138627,"line_start":1194,"line_end":1194,"column_start":12,"column_end":24},"name":"into_records","qualname":"<Reader<R>>::into_records","value":"pub fn into_records(Self) -> StringRecordsIntoIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over all records as strings.","sig":null,"attributes":[{"value":"/ Returns an owned iterator over all records as strings.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137327,"byte_end":137385,"line_start":1158,"line_end":1158,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137390,"byte_end":137393,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<StringRecord, Error>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137398,"byte_end":137472,"line_start":1160,"line_end":1160,"column_start":5,"column_end":79}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137477,"byte_end":137546,"line_start":1161,"line_end":1161,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137551,"byte_end":137607,"line_start":1162,"line_end":1162,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137612,"byte_end":137615,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ This is mostly useful when you want to return a CSV iterator or store","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137620,"byte_end":137693,"line_start":1164,"line_end":1164,"column_start":5,"column_end":78}},{"value":"/ it somewhere.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137698,"byte_end":137715,"line_start":1165,"line_end":1165,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137720,"byte_end":137723,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137728,"byte_end":137796,"line_start":1167,"line_end":1167,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137801,"byte_end":137859,"line_start":1168,"line_end":1168,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137864,"byte_end":137867,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137872,"byte_end":137885,"line_start":1170,"line_end":1170,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137890,"byte_end":137893,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137898,"byte_end":137905,"line_start":1172,"line_end":1172,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137910,"byte_end":137936,"line_start":1173,"line_end":1173,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137941,"byte_end":137961,"line_start":1174,"line_end":1174,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137966,"byte_end":137969,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":137974,"byte_end":138013,"line_start":1176,"line_end":1176,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138018,"byte_end":138066,"line_start":1177,"line_end":1177,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138071,"byte_end":138092,"line_start":1178,"line_end":1178,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138097,"byte_end":138117,"line_start":1179,"line_end":1179,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138122,"byte_end":138154,"line_start":1180,"line_end":1180,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138159,"byte_end":138165,"line_start":1181,"line_end":1181,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138170,"byte_end":138225,"line_start":1182,"line_end":1182,"column_start":5,"column_end":60}},{"value":"/     let mut iter = rdr.into_records();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138230,"byte_end":138272,"line_start":1183,"line_end":1183,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138277,"byte_end":138280,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138285,"byte_end":138328,"line_start":1185,"line_end":1185,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138333,"byte_end":138366,"line_start":1186,"line_end":1186,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138371,"byte_end":138446,"line_start":1187,"line_end":1187,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138451,"byte_end":138469,"line_start":1188,"line_end":1188,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138474,"byte_end":138490,"line_start":1189,"line_end":1189,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138495,"byte_end":138567,"line_start":1190,"line_end":1190,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138572,"byte_end":138581,"line_start":1191,"line_end":1191,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138586,"byte_end":138591,"line_start":1192,"line_end":1192,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138596,"byte_end":138603,"line_start":1193,"line_end":1193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139902,"byte_end":139914,"line_start":1231,"line_end":1231,"column_start":12,"column_end":24},"name":"byte_records","qualname":"<Reader<R>>::byte_records","value":"pub fn byte_records(&mut Self) -> ByteRecordsIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all records as raw bytes.","sig":null,"attributes":[{"value":"/ Returns a borrowed iterator over all records as raw bytes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138716,"byte_end":138778,"line_start":1198,"line_end":1198,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138783,"byte_end":138786,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<ByteRecord, Error>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138791,"byte_end":138863,"line_start":1200,"line_end":1200,"column_start":5,"column_end":77}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138868,"byte_end":138937,"line_start":1201,"line_end":1201,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":138942,"byte_end":138998,"line_start":1202,"line_end":1202,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139003,"byte_end":139006,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139011,"byte_end":139079,"line_start":1204,"line_end":1204,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139084,"byte_end":139142,"line_start":1205,"line_end":1205,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139147,"byte_end":139150,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139155,"byte_end":139168,"line_start":1207,"line_end":1207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139173,"byte_end":139176,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139181,"byte_end":139188,"line_start":1209,"line_end":1209,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139193,"byte_end":139219,"line_start":1210,"line_end":1210,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139224,"byte_end":139244,"line_start":1211,"line_end":1211,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139249,"byte_end":139252,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139257,"byte_end":139296,"line_start":1213,"line_end":1213,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139301,"byte_end":139349,"line_start":1214,"line_end":1214,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139354,"byte_end":139375,"line_start":1215,"line_end":1215,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139380,"byte_end":139400,"line_start":1216,"line_end":1216,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139405,"byte_end":139437,"line_start":1217,"line_end":1217,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139442,"byte_end":139448,"line_start":1218,"line_end":1218,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139453,"byte_end":139512,"line_start":1219,"line_end":1219,"column_start":5,"column_end":64}},{"value":"/     let mut iter = rdr.byte_records();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139517,"byte_end":139559,"line_start":1220,"line_end":1220,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139564,"byte_end":139567,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139572,"byte_end":139615,"line_start":1222,"line_end":1222,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139620,"byte_end":139653,"line_start":1223,"line_end":1223,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139658,"byte_end":139733,"line_start":1224,"line_end":1224,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139738,"byte_end":139756,"line_start":1225,"line_end":1225,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139761,"byte_end":139777,"line_start":1226,"line_end":1226,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139782,"byte_end":139854,"line_start":1227,"line_end":1227,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139859,"byte_end":139868,"line_start":1228,"line_end":1228,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139873,"byte_end":139878,"line_start":1229,"line_end":1229,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139883,"byte_end":139890,"line_start":1230,"line_end":1230,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141289,"byte_end":141306,"line_start":1271,"line_end":1271,"column_start":12,"column_end":29},"name":"into_byte_records","qualname":"<Reader<R>>::into_byte_records","value":"pub fn into_byte_records(Self) -> ByteRecordsIntoIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over all records as raw bytes.","sig":null,"attributes":[{"value":"/ Returns an owned iterator over all records as raw bytes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":139996,"byte_end":140056,"line_start":1235,"line_end":1235,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140061,"byte_end":140064,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<ByteRecord, Error>`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140069,"byte_end":140141,"line_start":1237,"line_end":1237,"column_start":5,"column_end":77}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140146,"byte_end":140215,"line_start":1238,"line_end":1238,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140220,"byte_end":140276,"line_start":1239,"line_end":1239,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140281,"byte_end":140284,"line_start":1240,"line_end":1240,"column_start":5,"column_end":8}},{"value":"/ This is mostly useful when you want to return a CSV iterator or store","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140289,"byte_end":140362,"line_start":1241,"line_end":1241,"column_start":5,"column_end":78}},{"value":"/ it somewhere.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140367,"byte_end":140384,"line_start":1242,"line_end":1242,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140389,"byte_end":140392,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140397,"byte_end":140465,"line_start":1244,"line_end":1244,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140470,"byte_end":140528,"line_start":1245,"line_end":1245,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140533,"byte_end":140536,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140541,"byte_end":140554,"line_start":1247,"line_end":1247,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140559,"byte_end":140562,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140567,"byte_end":140574,"line_start":1249,"line_end":1249,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140579,"byte_end":140605,"line_start":1250,"line_end":1250,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140610,"byte_end":140630,"line_start":1251,"line_end":1251,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140635,"byte_end":140638,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140643,"byte_end":140682,"line_start":1253,"line_end":1253,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140687,"byte_end":140735,"line_start":1254,"line_end":1254,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140740,"byte_end":140761,"line_start":1255,"line_end":1255,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140766,"byte_end":140786,"line_start":1256,"line_end":1256,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140791,"byte_end":140823,"line_start":1257,"line_end":1257,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140828,"byte_end":140834,"line_start":1258,"line_end":1258,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140839,"byte_end":140894,"line_start":1259,"line_end":1259,"column_start":5,"column_end":60}},{"value":"/     let mut iter = rdr.into_byte_records();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140899,"byte_end":140946,"line_start":1260,"line_end":1260,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140951,"byte_end":140954,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":140959,"byte_end":141002,"line_start":1262,"line_end":1262,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141007,"byte_end":141040,"line_start":1263,"line_end":1263,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141045,"byte_end":141120,"line_start":1264,"line_end":1264,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141125,"byte_end":141143,"line_start":1265,"line_end":1265,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141148,"byte_end":141164,"line_start":1266,"line_end":1266,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141169,"byte_end":141241,"line_start":1267,"line_end":1267,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141246,"byte_end":141255,"line_start":1268,"line_end":1268,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141260,"byte_end":141265,"line_start":1269,"line_end":1269,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141270,"byte_end":141277,"line_start":1270,"line_end":1270,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143430,"byte_end":143437,"line_start":1329,"line_end":1329,"column_start":12,"column_end":19},"name":"headers","qualname":"<Reader<R>>::headers","value":"pub fn headers(&mut Self) -> Result<&StringRecord>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first row read by this parser.","sig":null,"attributes":[{"value":"/ Returns a reference to the first row read by this parser.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141391,"byte_end":141452,"line_start":1275,"line_end":1275,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141457,"byte_end":141460,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ If no row has been read yet, then this will force parsing of the first","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141465,"byte_end":141539,"line_start":1277,"line_end":1277,"column_start":5,"column_end":79}},{"value":"/ row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141544,"byte_end":141552,"line_start":1278,"line_end":1278,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141557,"byte_end":141560,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ If there was a problem parsing the row or if it wasn't valid UTF-8,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141565,"byte_end":141636,"line_start":1280,"line_end":1280,"column_start":5,"column_end":76}},{"value":"/ then this returns an error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141641,"byte_end":141672,"line_start":1281,"line_end":1281,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141677,"byte_end":141680,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ If the underlying reader emits EOF before any data, then this returns","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141685,"byte_end":141758,"line_start":1283,"line_end":1283,"column_start":5,"column_end":78}},{"value":"/ an empty record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141763,"byte_end":141783,"line_start":1284,"line_end":1284,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141788,"byte_end":141791,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ Note that this method may be used regardless of whether `has_headers`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141796,"byte_end":141869,"line_start":1286,"line_end":1286,"column_start":5,"column_end":78}},{"value":"/ was enabled (but it is enabled by default).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141874,"byte_end":141921,"line_start":1287,"line_end":1287,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141926,"byte_end":141929,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141934,"byte_end":141947,"line_start":1289,"line_end":1289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141952,"byte_end":141955,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the header row of CSV data. Notice that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":141960,"byte_end":142033,"line_start":1291,"line_end":1291,"column_start":5,"column_end":78}},{"value":"/ the header row does not appear as a record in the iterator!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142038,"byte_end":142101,"line_start":1292,"line_end":1292,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142106,"byte_end":142109,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142114,"byte_end":142121,"line_start":1294,"line_end":1294,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142126,"byte_end":142152,"line_start":1295,"line_end":1295,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142157,"byte_end":142177,"line_start":1296,"line_end":1296,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142182,"byte_end":142185,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142190,"byte_end":142229,"line_start":1298,"line_end":1298,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142234,"byte_end":142282,"line_start":1299,"line_end":1299,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142287,"byte_end":142308,"line_start":1300,"line_end":1300,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142313,"byte_end":142333,"line_start":1301,"line_end":1301,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142338,"byte_end":142370,"line_start":1302,"line_end":1302,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142375,"byte_end":142381,"line_start":1303,"line_end":1303,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142386,"byte_end":142445,"line_start":1304,"line_end":1304,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142450,"byte_end":142453,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/     // We can read the headers before iterating.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142458,"byte_end":142510,"line_start":1306,"line_end":1306,"column_start":5,"column_end":57}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142515,"byte_end":142524,"line_start":1307,"line_end":1307,"column_start":5,"column_end":14}},{"value":"/         // `headers` borrows from the reader, so we put this in its","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142529,"byte_end":142600,"line_start":1308,"line_end":1308,"column_start":5,"column_end":76}},{"value":"/         // own scope. That way, the borrow ends before we try iterating","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142605,"byte_end":142680,"line_start":1309,"line_end":1309,"column_start":5,"column_end":80}},{"value":"/         // below. Alternatively, we could clone the headers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142685,"byte_end":142749,"line_start":1310,"line_end":1310,"column_start":5,"column_end":69}},{"value":"/         let headers = rdr.headers()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142754,"byte_end":142795,"line_start":1311,"line_end":1311,"column_start":5,"column_end":46}},{"value":"/         assert_eq!(headers, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142800,"byte_end":142864,"line_start":1312,"line_end":1312,"column_start":5,"column_end":69}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142869,"byte_end":142878,"line_start":1313,"line_end":1313,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142883,"byte_end":142886,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142891,"byte_end":142943,"line_start":1315,"line_end":1315,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142948,"byte_end":142981,"line_start":1316,"line_end":1316,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":142986,"byte_end":143061,"line_start":1317,"line_end":1317,"column_start":5,"column_end":80}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143066,"byte_end":143082,"line_start":1318,"line_end":1318,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143087,"byte_end":143121,"line_start":1319,"line_end":1319,"column_start":5,"column_end":39}},{"value":"/             \"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143126,"byte_end":143187,"line_start":1320,"line_end":1320,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143192,"byte_end":143201,"line_start":1321,"line_end":1321,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143206,"byte_end":143209,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/     // We can also read the headers after iterating.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143214,"byte_end":143270,"line_start":1323,"line_end":1323,"column_start":5,"column_end":61}},{"value":"/     let headers = rdr.headers()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143275,"byte_end":143312,"line_start":1324,"line_end":1324,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(headers, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143317,"byte_end":143377,"line_start":1325,"line_end":1325,"column_start":5,"column_end":65}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143382,"byte_end":143396,"line_start":1326,"line_end":1326,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143401,"byte_end":143406,"line_start":1327,"line_end":1327,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":143411,"byte_end":143418,"line_start":1328,"line_end":1328,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146052,"byte_end":146064,"line_start":1398,"line_end":1398,"column_start":12,"column_end":24},"name":"byte_headers","qualname":"<Reader<R>>::byte_headers","value":"pub fn byte_headers(&mut Self) -> Result<&ByteRecord>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first row read by this parser as raw bytes.","sig":null,"attributes":[{"value":"/ Returns a reference to the first row read by this parser as raw bytes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144022,"byte_end":144096,"line_start":1345,"line_end":1345,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144101,"byte_end":144104,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ If no row has been read yet, then this will force parsing of the first","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144109,"byte_end":144183,"line_start":1347,"line_end":1347,"column_start":5,"column_end":79}},{"value":"/ row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144188,"byte_end":144196,"line_start":1348,"line_end":1348,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144201,"byte_end":144204,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ If there was a problem parsing the row then this returns an error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144209,"byte_end":144279,"line_start":1350,"line_end":1350,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144284,"byte_end":144287,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ If the underlying reader emits EOF before any data, then this returns","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144292,"byte_end":144365,"line_start":1352,"line_end":1352,"column_start":5,"column_end":78}},{"value":"/ an empty record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144370,"byte_end":144390,"line_start":1353,"line_end":1353,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144395,"byte_end":144398,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ Note that this method may be used regardless of whether `has_headers`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144403,"byte_end":144476,"line_start":1355,"line_end":1355,"column_start":5,"column_end":78}},{"value":"/ was enabled (but it is enabled by default).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144481,"byte_end":144528,"line_start":1356,"line_end":1356,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144533,"byte_end":144536,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144541,"byte_end":144554,"line_start":1358,"line_end":1358,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144559,"byte_end":144562,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the header row of CSV data. Notice that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144567,"byte_end":144640,"line_start":1360,"line_end":1360,"column_start":5,"column_end":78}},{"value":"/ the header row does not appear as a record in the iterator!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144645,"byte_end":144708,"line_start":1361,"line_end":1361,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144713,"byte_end":144716,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144721,"byte_end":144728,"line_start":1363,"line_end":1363,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144733,"byte_end":144759,"line_start":1364,"line_end":1364,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144764,"byte_end":144784,"line_start":1365,"line_end":1365,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144789,"byte_end":144792,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144797,"byte_end":144836,"line_start":1367,"line_end":1367,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144841,"byte_end":144889,"line_start":1368,"line_end":1368,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144894,"byte_end":144915,"line_start":1369,"line_end":1369,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144920,"byte_end":144940,"line_start":1370,"line_end":1370,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144945,"byte_end":144977,"line_start":1371,"line_end":1371,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144982,"byte_end":144988,"line_start":1372,"line_end":1372,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":144993,"byte_end":145052,"line_start":1373,"line_end":1373,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145057,"byte_end":145060,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/     // We can read the headers before iterating.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145065,"byte_end":145117,"line_start":1375,"line_end":1375,"column_start":5,"column_end":57}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145122,"byte_end":145131,"line_start":1376,"line_end":1376,"column_start":5,"column_end":14}},{"value":"/         // `headers` borrows from the reader, so we put this in its","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145136,"byte_end":145207,"line_start":1377,"line_end":1377,"column_start":5,"column_end":76}},{"value":"/         // own scope. That way, the borrow ends before we try iterating","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145212,"byte_end":145287,"line_start":1378,"line_end":1378,"column_start":5,"column_end":80}},{"value":"/         // below. Alternatively, we could clone the headers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145292,"byte_end":145356,"line_start":1379,"line_end":1379,"column_start":5,"column_end":69}},{"value":"/         let headers = rdr.byte_headers()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145361,"byte_end":145407,"line_start":1380,"line_end":1380,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(headers, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145412,"byte_end":145476,"line_start":1381,"line_end":1381,"column_start":5,"column_end":69}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145481,"byte_end":145490,"line_start":1382,"line_end":1382,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145495,"byte_end":145498,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.byte_records().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145503,"byte_end":145560,"line_start":1384,"line_end":1384,"column_start":5,"column_end":62}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145565,"byte_end":145598,"line_start":1385,"line_end":1385,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145603,"byte_end":145678,"line_start":1386,"line_end":1386,"column_start":5,"column_end":80}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145683,"byte_end":145699,"line_start":1387,"line_end":1387,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145704,"byte_end":145738,"line_start":1388,"line_end":1388,"column_start":5,"column_end":39}},{"value":"/             \"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145743,"byte_end":145804,"line_start":1389,"line_end":1389,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145809,"byte_end":145818,"line_start":1390,"line_end":1390,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145823,"byte_end":145826,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/     // We can also read the headers after iterating.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145831,"byte_end":145887,"line_start":1392,"line_end":1392,"column_start":5,"column_end":61}},{"value":"/     let headers = rdr.byte_headers()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145892,"byte_end":145934,"line_start":1393,"line_end":1393,"column_start":5,"column_end":47}},{"value":"/     assert_eq!(headers, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":145939,"byte_end":145999,"line_start":1394,"line_end":1394,"column_start":5,"column_end":65}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146004,"byte_end":146018,"line_start":1395,"line_end":1395,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146023,"byte_end":146028,"line_start":1396,"line_end":1396,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146033,"byte_end":146040,"line_start":1397,"line_end":1397,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147259,"byte_end":147270,"line_start":1434,"line_end":1434,"column_start":12,"column_end":23},"name":"set_headers","qualname":"<Reader<R>>::set_headers","value":"pub fn set_headers(&mut Self, StringRecord)","parent":null,"children":[],"decl_id":null,"docs":" Set the headers of this CSV parser manually.","sig":null,"attributes":[{"value":"/ Set the headers of this CSV parser manually.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146376,"byte_end":146424,"line_start":1407,"line_end":1407,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146429,"byte_end":146432,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ This overrides any other setting (including `set_byte_headers`). Any","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146437,"byte_end":146509,"line_start":1409,"line_end":1409,"column_start":5,"column_end":77}},{"value":"/ automatic detection of headers is disabled. This may be called at any","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146514,"byte_end":146587,"line_start":1410,"line_end":1410,"column_start":5,"column_end":78}},{"value":"/ time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146592,"byte_end":146601,"line_start":1411,"line_end":1411,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146606,"byte_end":146609,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146614,"byte_end":146627,"line_start":1413,"line_end":1413,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146632,"byte_end":146635,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146640,"byte_end":146647,"line_start":1415,"line_end":1415,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146652,"byte_end":146678,"line_start":1416,"line_end":1416,"column_start":5,"column_end":31}},{"value":"/ use csv::{Reader, StringRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146683,"byte_end":146719,"line_start":1417,"line_end":1417,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146724,"byte_end":146727,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146732,"byte_end":146771,"line_start":1419,"line_end":1419,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146776,"byte_end":146824,"line_start":1420,"line_end":1420,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146829,"byte_end":146850,"line_start":1421,"line_end":1421,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146855,"byte_end":146875,"line_start":1422,"line_end":1422,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146880,"byte_end":146912,"line_start":1423,"line_end":1423,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146917,"byte_end":146923,"line_start":1424,"line_end":1424,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146928,"byte_end":146987,"line_start":1425,"line_end":1425,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":146992,"byte_end":146995,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(rdr.headers()?, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147000,"byte_end":147067,"line_start":1427,"line_end":1427,"column_start":5,"column_end":72}},{"value":"/     rdr.set_headers(StringRecord::from(vec![\"a\", \"b\", \"c\"]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147072,"byte_end":147137,"line_start":1428,"line_end":1428,"column_start":5,"column_end":70}},{"value":"/     assert_eq!(rdr.headers()?, vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147142,"byte_end":147198,"line_start":1429,"line_end":1429,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147203,"byte_end":147206,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147211,"byte_end":147225,"line_start":1431,"line_end":1431,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147230,"byte_end":147235,"line_start":1432,"line_end":1432,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147240,"byte_end":147247,"line_start":1433,"line_end":1433,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":148264,"byte_end":148280,"line_start":1465,"line_end":1465,"column_start":12,"column_end":28},"name":"set_byte_headers","qualname":"<Reader<R>>::set_byte_headers","value":"pub fn set_byte_headers(&mut Self, ByteRecord)","parent":null,"children":[],"decl_id":null,"docs":" Set the headers of this CSV parser manually as raw bytes.","sig":null,"attributes":[{"value":"/ Set the headers of this CSV parser manually as raw bytes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147362,"byte_end":147423,"line_start":1438,"line_end":1438,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147428,"byte_end":147431,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ This overrides any other setting (including `set_headers`). Any","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147436,"byte_end":147503,"line_start":1440,"line_end":1440,"column_start":5,"column_end":72}},{"value":"/ automatic detection of headers is disabled. This may be called at any","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147508,"byte_end":147581,"line_start":1441,"line_end":1441,"column_start":5,"column_end":78}},{"value":"/ time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147586,"byte_end":147595,"line_start":1442,"line_end":1442,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147600,"byte_end":147603,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147608,"byte_end":147621,"line_start":1444,"line_end":1444,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147626,"byte_end":147629,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147634,"byte_end":147641,"line_start":1446,"line_end":1446,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147646,"byte_end":147672,"line_start":1447,"line_end":1447,"column_start":5,"column_end":31}},{"value":"/ use csv::{Reader, ByteRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147677,"byte_end":147711,"line_start":1448,"line_end":1448,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147716,"byte_end":147719,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147724,"byte_end":147763,"line_start":1450,"line_end":1450,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147768,"byte_end":147816,"line_start":1451,"line_end":1451,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147821,"byte_end":147842,"line_start":1452,"line_end":1452,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147847,"byte_end":147867,"line_start":1453,"line_end":1453,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147872,"byte_end":147904,"line_start":1454,"line_end":1454,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147909,"byte_end":147915,"line_start":1455,"line_end":1455,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147920,"byte_end":147979,"line_start":1456,"line_end":1456,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147984,"byte_end":147987,"line_start":1457,"line_end":1457,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(rdr.byte_headers()?, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":147992,"byte_end":148064,"line_start":1458,"line_end":1458,"column_start":5,"column_end":77}},{"value":"/     rdr.set_byte_headers(ByteRecord::from(vec![\"a\", \"b\", \"c\"]));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":148069,"byte_end":148137,"line_start":1459,"line_end":1459,"column_start":5,"column_end":73}},{"value":"/     assert_eq!(rdr.byte_headers()?, vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":148142,"byte_end":148203,"line_start":1460,"line_end":1460,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":148208,"byte_end":148211,"line_start":1461,"line_end":1461,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":148216,"byte_end":148230,"line_start":1462,"line_end":1462,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":148235,"byte_end":148240,"line_start":1463,"line_end":1463,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":148245,"byte_end":148252,"line_start":1464,"line_end":1464,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150876,"byte_end":150887,"line_start":1536,"line_end":1536,"column_start":12,"column_end":23},"name":"read_record","qualname":"<Reader<R>>::read_record","value":"pub fn read_record(&mut Self, &mut StringRecord) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single row into the given record. Returns false when no more\n records could be read.","sig":null,"attributes":[{"value":"/ Read a single row into the given record. Returns false when no more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149470,"byte_end":149541,"line_start":1499,"line_end":1499,"column_start":5,"column_end":76}},{"value":"/ records could be read.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149546,"byte_end":149572,"line_start":1500,"line_end":1500,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149577,"byte_end":149580,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149585,"byte_end":149653,"line_start":1502,"line_end":1502,"column_start":5,"column_end":73}},{"value":"/ default), then this will never read the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149658,"byte_end":149715,"line_start":1503,"line_end":1503,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149720,"byte_end":149723,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ This method is useful when you want to read records as fast as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149728,"byte_end":149794,"line_start":1505,"line_end":1505,"column_start":5,"column_end":71}},{"value":"/ as possible. It's less ergonomic than an iterator, but it permits the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149799,"byte_end":149872,"line_start":1506,"line_end":1506,"column_start":5,"column_end":78}},{"value":"/ caller to reuse the `StringRecord` allocation, which usually results","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149877,"byte_end":149949,"line_start":1507,"line_end":1507,"column_start":5,"column_end":77}},{"value":"/ in higher throughput.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149954,"byte_end":149979,"line_start":1508,"line_end":1508,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149984,"byte_end":149987,"line_start":1509,"line_end":1509,"column_start":5,"column_end":8}},{"value":"/ Records read via this method are guaranteed to have a position set","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":149992,"byte_end":150062,"line_start":1510,"line_end":1510,"column_start":5,"column_end":75}},{"value":"/ on them, even if the reader is at EOF or if an error is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150067,"byte_end":150136,"line_start":1511,"line_end":1511,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150141,"byte_end":150144,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150149,"byte_end":150162,"line_start":1513,"line_end":1513,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150167,"byte_end":150170,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150175,"byte_end":150182,"line_start":1515,"line_end":1515,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150187,"byte_end":150213,"line_start":1516,"line_end":1516,"column_start":5,"column_end":31}},{"value":"/ use csv::{Reader, StringRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150218,"byte_end":150254,"line_start":1517,"line_end":1517,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150259,"byte_end":150262,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150267,"byte_end":150306,"line_start":1519,"line_end":1519,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150311,"byte_end":150359,"line_start":1520,"line_end":1520,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150364,"byte_end":150385,"line_start":1521,"line_end":1521,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150390,"byte_end":150410,"line_start":1522,"line_end":1522,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150415,"byte_end":150447,"line_start":1523,"line_end":1523,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150452,"byte_end":150458,"line_start":1524,"line_end":1524,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150463,"byte_end":150522,"line_start":1525,"line_end":1525,"column_start":5,"column_end":64}},{"value":"/     let mut record = StringRecord::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150527,"byte_end":150572,"line_start":1526,"line_end":1526,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150577,"byte_end":150580,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/     if rdr.read_record(&mut record)? {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150585,"byte_end":150627,"line_start":1528,"line_end":1528,"column_start":5,"column_end":47}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150632,"byte_end":150707,"line_start":1529,"line_end":1529,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150712,"byte_end":150730,"line_start":1530,"line_end":1530,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150735,"byte_end":150751,"line_start":1531,"line_end":1531,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150756,"byte_end":150828,"line_start":1532,"line_end":1532,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150833,"byte_end":150842,"line_start":1533,"line_end":1533,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150847,"byte_end":150852,"line_start":1534,"line_end":1534,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":150857,"byte_end":150864,"line_start":1535,"line_end":1535,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152677,"byte_end":152693,"line_start":1584,"line_end":1584,"column_start":12,"column_end":28},"name":"read_byte_record","qualname":"<Reader<R>>::read_byte_record","value":"pub fn read_byte_record(&mut Self, &mut ByteRecord) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single row into the given byte record. Returns false when no\n more records could be read.","sig":null,"attributes":[{"value":"/ Read a single row into the given byte record. Returns false when no","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151267,"byte_end":151338,"line_start":1547,"line_end":1547,"column_start":5,"column_end":76}},{"value":"/ more records could be read.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151343,"byte_end":151374,"line_start":1548,"line_end":1548,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151379,"byte_end":151382,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151387,"byte_end":151455,"line_start":1550,"line_end":1550,"column_start":5,"column_end":73}},{"value":"/ default), then this will never read the first record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151460,"byte_end":151517,"line_start":1551,"line_end":1551,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151522,"byte_end":151525,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ This method is useful when you want to read records as fast as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151530,"byte_end":151596,"line_start":1553,"line_end":1553,"column_start":5,"column_end":71}},{"value":"/ as possible. It's less ergonomic than an iterator, but it permits the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151601,"byte_end":151674,"line_start":1554,"line_end":1554,"column_start":5,"column_end":78}},{"value":"/ caller to reuse the `ByteRecord` allocation, which usually results","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151679,"byte_end":151749,"line_start":1555,"line_end":1555,"column_start":5,"column_end":75}},{"value":"/ in higher throughput.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151754,"byte_end":151779,"line_start":1556,"line_end":1556,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151784,"byte_end":151787,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ Records read via this method are guaranteed to have a position set","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151792,"byte_end":151862,"line_start":1558,"line_end":1558,"column_start":5,"column_end":75}},{"value":"/ on them, even if the reader is at EOF or if an error is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151867,"byte_end":151936,"line_start":1559,"line_end":1559,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151941,"byte_end":151944,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151949,"byte_end":151962,"line_start":1561,"line_end":1561,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151967,"byte_end":151970,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151975,"byte_end":151982,"line_start":1563,"line_end":1563,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":151987,"byte_end":152013,"line_start":1564,"line_end":1564,"column_start":5,"column_end":31}},{"value":"/ use csv::{ByteRecord, Reader};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152018,"byte_end":152052,"line_start":1565,"line_end":1565,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152057,"byte_end":152060,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152065,"byte_end":152104,"line_start":1567,"line_end":1567,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152109,"byte_end":152157,"line_start":1568,"line_end":1568,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152162,"byte_end":152183,"line_start":1569,"line_end":1569,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152188,"byte_end":152208,"line_start":1570,"line_end":1570,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152213,"byte_end":152245,"line_start":1571,"line_end":1571,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152250,"byte_end":152256,"line_start":1572,"line_end":1572,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152261,"byte_end":152320,"line_start":1573,"line_end":1573,"column_start":5,"column_end":64}},{"value":"/     let mut record = ByteRecord::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152325,"byte_end":152368,"line_start":1574,"line_end":1574,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152373,"byte_end":152376,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/     if rdr.read_byte_record(&mut record)? {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152381,"byte_end":152428,"line_start":1576,"line_end":1576,"column_start":5,"column_end":52}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152433,"byte_end":152508,"line_start":1577,"line_end":1577,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152513,"byte_end":152531,"line_start":1578,"line_end":1578,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152536,"byte_end":152552,"line_start":1579,"line_end":1579,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152557,"byte_end":152629,"line_start":1580,"line_end":1580,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152634,"byte_end":152643,"line_start":1581,"line_end":1581,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152648,"byte_end":152653,"line_start":1582,"line_end":1582,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":152658,"byte_end":152665,"line_start":1583,"line_end":1583,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157508,"byte_end":157516,"line_start":1721,"line_end":1721,"column_start":12,"column_end":20},"name":"position","qualname":"<Reader<R>>::position","value":"pub fn position(&Self) -> &Position","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of this CSV reader.","sig":null,"attributes":[{"value":"/ Return the current position of this CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156105,"byte_end":156156,"line_start":1681,"line_end":1681,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156161,"byte_end":156164,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ The byte offset in the position returned can be used to `seek` this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156169,"byte_end":156240,"line_start":1683,"line_end":1683,"column_start":5,"column_end":76}},{"value":"/ reader. In particular, seeking to a position returned here on the same","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156245,"byte_end":156319,"line_start":1684,"line_end":1684,"column_start":5,"column_end":79}},{"value":"/ data will result in parsing the same subsequent record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156324,"byte_end":156383,"line_start":1685,"line_end":1685,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156388,"byte_end":156391,"line_start":1686,"line_end":1686,"column_start":5,"column_end":8}},{"value":"/ # Example: reading the position","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156396,"byte_end":156431,"line_start":1687,"line_end":1687,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156436,"byte_end":156439,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156444,"byte_end":156451,"line_start":1689,"line_end":1689,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156456,"byte_end":156482,"line_start":1690,"line_end":1690,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156487,"byte_end":156503,"line_start":1691,"line_end":1691,"column_start":5,"column_end":21}},{"value":"/ use csv::{Reader, Position};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156508,"byte_end":156540,"line_start":1692,"line_end":1692,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156545,"byte_end":156548,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156553,"byte_end":156592,"line_start":1694,"line_end":1694,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156597,"byte_end":156645,"line_start":1695,"line_end":1695,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156650,"byte_end":156671,"line_start":1696,"line_end":1696,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156676,"byte_end":156701,"line_start":1697,"line_end":1697,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156706,"byte_end":156738,"line_start":1698,"line_end":1698,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156743,"byte_end":156774,"line_start":1699,"line_end":1699,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156779,"byte_end":156785,"line_start":1700,"line_end":1700,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(io::Cursor::new(data));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156790,"byte_end":156851,"line_start":1701,"line_end":1701,"column_start":5,"column_end":66}},{"value":"/     let mut iter = rdr.into_records();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156856,"byte_end":156898,"line_start":1702,"line_end":1702,"column_start":5,"column_end":47}},{"value":"/     let mut pos = Position::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156903,"byte_end":156941,"line_start":1703,"line_end":1703,"column_start":5,"column_end":43}},{"value":"/     loop {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156946,"byte_end":156960,"line_start":1704,"line_end":1704,"column_start":5,"column_end":19}},{"value":"/         // Read the position immediately before each record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":156965,"byte_end":157029,"line_start":1705,"line_end":1705,"column_start":5,"column_end":69}},{"value":"/         let next_pos = iter.reader().position().clone();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157034,"byte_end":157094,"line_start":1706,"line_end":1706,"column_start":5,"column_end":65}},{"value":"/         if iter.next().is_none() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157099,"byte_end":157137,"line_start":1707,"line_end":1707,"column_start":5,"column_end":43}},{"value":"/             break;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157142,"byte_end":157164,"line_start":1708,"line_end":1708,"column_start":5,"column_end":27}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157169,"byte_end":157182,"line_start":1709,"line_end":1709,"column_start":5,"column_end":18}},{"value":"/         pos = next_pos;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157187,"byte_end":157214,"line_start":1710,"line_end":1710,"column_start":5,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157219,"byte_end":157228,"line_start":1711,"line_end":1711,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157233,"byte_end":157236,"line_start":1712,"line_end":1712,"column_start":5,"column_end":8}},{"value":"/     // `pos` should now be the position immediately before the last","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157241,"byte_end":157312,"line_start":1713,"line_end":1713,"column_start":5,"column_end":76}},{"value":"/     // record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157317,"byte_end":157335,"line_start":1714,"line_end":1714,"column_start":5,"column_end":23}},{"value":"/     assert_eq!(pos.byte(), 51);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157340,"byte_end":157375,"line_start":1715,"line_end":1715,"column_start":5,"column_end":40}},{"value":"/     assert_eq!(pos.line(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157380,"byte_end":157414,"line_start":1716,"line_end":1716,"column_start":5,"column_end":39}},{"value":"/     assert_eq!(pos.record(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157419,"byte_end":157455,"line_start":1717,"line_end":1717,"column_start":5,"column_end":41}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157460,"byte_end":157474,"line_start":1718,"line_end":1718,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157479,"byte_end":157484,"line_start":1719,"line_end":1719,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157489,"byte_end":157496,"line_start":1720,"line_end":1720,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158448,"byte_end":158455,"line_start":1753,"line_end":1753,"column_start":12,"column_end":19},"name":"is_done","qualname":"<Reader<R>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this reader has been exhausted.","sig":null,"attributes":[{"value":"/ Returns true if and only if this reader has been exhausted.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157578,"byte_end":157641,"line_start":1725,"line_end":1725,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157646,"byte_end":157649,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ When this returns true, no more records can be read from this reader","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157654,"byte_end":157726,"line_start":1727,"line_end":1727,"column_start":5,"column_end":77}},{"value":"/ (unless it has been seeked to another position).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157731,"byte_end":157783,"line_start":1728,"line_end":1728,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157788,"byte_end":157791,"line_start":1729,"line_end":1729,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157796,"byte_end":157809,"line_start":1730,"line_end":1730,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157814,"byte_end":157817,"line_start":1731,"line_end":1731,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157822,"byte_end":157829,"line_start":1732,"line_end":1732,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157834,"byte_end":157860,"line_start":1733,"line_end":1733,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157865,"byte_end":157881,"line_start":1734,"line_end":1734,"column_start":5,"column_end":21}},{"value":"/ use csv::{Reader, Position};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157886,"byte_end":157918,"line_start":1735,"line_end":1735,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157923,"byte_end":157926,"line_start":1736,"line_end":1736,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157931,"byte_end":157970,"line_start":1737,"line_end":1737,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":157975,"byte_end":158023,"line_start":1738,"line_end":1738,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158028,"byte_end":158049,"line_start":1739,"line_end":1739,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158054,"byte_end":158079,"line_start":1740,"line_end":1740,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158084,"byte_end":158116,"line_start":1741,"line_end":1741,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158121,"byte_end":158152,"line_start":1742,"line_end":1742,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158157,"byte_end":158163,"line_start":1743,"line_end":1743,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(io::Cursor::new(data));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158168,"byte_end":158233,"line_start":1744,"line_end":1744,"column_start":5,"column_end":70}},{"value":"/     assert!(!rdr.is_done());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158238,"byte_end":158270,"line_start":1745,"line_end":1745,"column_start":5,"column_end":37}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158275,"byte_end":158312,"line_start":1746,"line_end":1746,"column_start":5,"column_end":42}},{"value":"/         let _ = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158317,"byte_end":158345,"line_start":1747,"line_end":1747,"column_start":5,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158350,"byte_end":158359,"line_start":1748,"line_end":1748,"column_start":5,"column_end":14}},{"value":"/     assert!(rdr.is_done());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158364,"byte_end":158395,"line_start":1749,"line_end":1749,"column_start":5,"column_end":36}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158400,"byte_end":158414,"line_start":1750,"line_end":1750,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158419,"byte_end":158424,"line_start":1751,"line_end":1751,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158429,"byte_end":158436,"line_start":1752,"line_end":1752,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158666,"byte_end":158677,"line_start":1759,"line_end":1759,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<Reader<R>>::has_headers","value":"pub fn has_headers(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this reader has been configured to\n interpret the first record as a header record.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this reader has been configured to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158533,"byte_end":158599,"line_start":1757,"line_end":1757,"column_start":5,"column_end":71}},{"value":"/ interpret the first record as a header record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158604,"byte_end":158654,"line_start":1758,"line_end":1758,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158798,"byte_end":158805,"line_start":1764,"line_end":1764,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Reader<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158737,"byte_end":158786,"line_start":1763,"line_end":1763,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158928,"byte_end":158935,"line_start":1769,"line_end":1769,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Reader<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158859,"byte_end":158916,"line_start":1768,"line_end":1768,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159168,"byte_end":159178,"line_start":1777,"line_end":1777,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this CSV reader, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Unwraps this CSV reader, returning the underlying reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":158997,"byte_end":159058,"line_start":1773,"line_end":1773,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159063,"byte_end":159066,"line_start":1774,"line_end":1774,"column_start":5,"column_end":8}},{"value":"/ Note that any leftover data inside this reader's internal buffer is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159071,"byte_end":159142,"line_start":1775,"line_end":1775,"column_start":5,"column_end":76}},{"value":"/ lost.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159147,"byte_end":159156,"line_start":1776,"line_end":1776,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161822,"byte_end":161826,"line_start":1845,"line_end":1845,"column_start":12,"column_end":16},"name":"seek","qualname":"<Reader<R>>::seek","value":"pub fn seek(&mut Self, Position) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Seeks the underlying reader to the position given.","sig":null,"attributes":[{"value":"/ Seeks the underlying reader to the position given.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159276,"byte_end":159330,"line_start":1783,"line_end":1783,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159335,"byte_end":159338,"line_start":1784,"line_end":1784,"column_start":5,"column_end":8}},{"value":"/ This comes with a few caveats:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159343,"byte_end":159377,"line_start":1785,"line_end":1785,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159382,"byte_end":159385,"line_start":1786,"line_end":1786,"column_start":5,"column_end":8}},{"value":"/ * Any internal buffer associated with this reader is cleared.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159390,"byte_end":159455,"line_start":1787,"line_end":1787,"column_start":5,"column_end":70}},{"value":"/ * If the given position does not correspond to a position immediately","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159460,"byte_end":159533,"line_start":1788,"line_end":1788,"column_start":5,"column_end":78}},{"value":"/   before the start of a record, then the behavior of this reader is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159538,"byte_end":159609,"line_start":1789,"line_end":1789,"column_start":5,"column_end":76}},{"value":"/   unspecified.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159614,"byte_end":159632,"line_start":1790,"line_end":1790,"column_start":5,"column_end":23}},{"value":"/ * Any special logic that skips the first record in the CSV reader","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159637,"byte_end":159706,"line_start":1791,"line_end":1791,"column_start":5,"column_end":74}},{"value":"/   when reading or iterating over records is disabled.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159711,"byte_end":159768,"line_start":1792,"line_end":1792,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159773,"byte_end":159776,"line_start":1793,"line_end":1793,"column_start":5,"column_end":8}},{"value":"/ If the given position has a byte offset equivalent to the current","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159781,"byte_end":159850,"line_start":1794,"line_end":1794,"column_start":5,"column_end":74}},{"value":"/ position, then no seeking is performed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159855,"byte_end":159898,"line_start":1795,"line_end":1795,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159903,"byte_end":159906,"line_start":1796,"line_end":1796,"column_start":5,"column_end":8}},{"value":"/ If the header row has not already been read, then this will attempt","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159911,"byte_end":159982,"line_start":1797,"line_end":1797,"column_start":5,"column_end":76}},{"value":"/ to read the header row before seeking. Therefore, it is possible that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159987,"byte_end":160060,"line_start":1798,"line_end":1798,"column_start":5,"column_end":78}},{"value":"/ this returns an error associated with reading CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160065,"byte_end":160124,"line_start":1799,"line_end":1799,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160129,"byte_end":160132,"line_start":1800,"line_end":1800,"column_start":5,"column_end":8}},{"value":"/ Note that seeking is performed based only on the byte offset in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160137,"byte_end":160208,"line_start":1801,"line_end":1801,"column_start":5,"column_end":76}},{"value":"/ given position. Namely, the record or line numbers in the position may","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160213,"byte_end":160287,"line_start":1802,"line_end":1802,"column_start":5,"column_end":79}},{"value":"/ be incorrect, but this will cause any future position generated by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160292,"byte_end":160362,"line_start":1803,"line_end":1803,"column_start":5,"column_end":75}},{"value":"/ this CSV reader to be similarly incorrect.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160367,"byte_end":160413,"line_start":1804,"line_end":1804,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160418,"byte_end":160421,"line_start":1805,"line_end":1805,"column_start":5,"column_end":8}},{"value":"/ # Example: seek to parse a record twice","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160426,"byte_end":160469,"line_start":1806,"line_end":1806,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160474,"byte_end":160477,"line_start":1807,"line_end":1807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160482,"byte_end":160489,"line_start":1808,"line_end":1808,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160494,"byte_end":160520,"line_start":1809,"line_end":1809,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160525,"byte_end":160541,"line_start":1810,"line_end":1810,"column_start":5,"column_end":21}},{"value":"/ use csv::{Reader, Position};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160546,"byte_end":160578,"line_start":1811,"line_end":1811,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160583,"byte_end":160586,"line_start":1812,"line_end":1812,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160591,"byte_end":160630,"line_start":1813,"line_end":1813,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160635,"byte_end":160683,"line_start":1814,"line_end":1814,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160688,"byte_end":160709,"line_start":1815,"line_end":1815,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160714,"byte_end":160739,"line_start":1816,"line_end":1816,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160744,"byte_end":160776,"line_start":1817,"line_end":1817,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160781,"byte_end":160812,"line_start":1818,"line_end":1818,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160817,"byte_end":160823,"line_start":1819,"line_end":1819,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(io::Cursor::new(data));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160828,"byte_end":160889,"line_start":1820,"line_end":1820,"column_start":5,"column_end":66}},{"value":"/     let mut iter = rdr.into_records();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160894,"byte_end":160936,"line_start":1821,"line_end":1821,"column_start":5,"column_end":47}},{"value":"/     let mut pos = Position::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160941,"byte_end":160979,"line_start":1822,"line_end":1822,"column_start":5,"column_end":43}},{"value":"/     loop {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":160984,"byte_end":160998,"line_start":1823,"line_end":1823,"column_start":5,"column_end":19}},{"value":"/         // Read the position immediately before each record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161003,"byte_end":161067,"line_start":1824,"line_end":1824,"column_start":5,"column_end":69}},{"value":"/         let next_pos = iter.reader().position().clone();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161072,"byte_end":161132,"line_start":1825,"line_end":1825,"column_start":5,"column_end":65}},{"value":"/         if iter.next().is_none() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161137,"byte_end":161175,"line_start":1826,"line_end":1826,"column_start":5,"column_end":43}},{"value":"/             break;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161180,"byte_end":161202,"line_start":1827,"line_end":1827,"column_start":5,"column_end":27}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161207,"byte_end":161220,"line_start":1828,"line_end":1828,"column_start":5,"column_end":18}},{"value":"/         pos = next_pos;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161225,"byte_end":161252,"line_start":1829,"line_end":1829,"column_start":5,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161257,"byte_end":161266,"line_start":1830,"line_end":1830,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161271,"byte_end":161274,"line_start":1831,"line_end":1831,"column_start":5,"column_end":8}},{"value":"/     // Now seek the reader back to `pos`. This will let us read the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161279,"byte_end":161350,"line_start":1832,"line_end":1832,"column_start":5,"column_end":76}},{"value":"/     // last record again.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161355,"byte_end":161384,"line_start":1833,"line_end":1833,"column_start":5,"column_end":34}},{"value":"/     iter.reader_mut().seek(pos)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161389,"byte_end":161426,"line_start":1834,"line_end":1834,"column_start":5,"column_end":42}},{"value":"/     let mut iter = iter.into_reader().into_records();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161431,"byte_end":161488,"line_start":1835,"line_end":1835,"column_start":5,"column_end":62}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161493,"byte_end":161536,"line_start":1836,"line_end":1836,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161541,"byte_end":161574,"line_start":1837,"line_end":1837,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Concord\", \"United States\", \"42695\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161579,"byte_end":161653,"line_start":1838,"line_end":1838,"column_start":5,"column_end":79}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161658,"byte_end":161676,"line_start":1839,"line_end":1839,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161681,"byte_end":161697,"line_start":1840,"line_end":1840,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161702,"byte_end":161774,"line_start":1841,"line_end":1841,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161779,"byte_end":161788,"line_start":1842,"line_end":1842,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161793,"byte_end":161798,"line_start":1843,"line_end":1843,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":161803,"byte_end":161810,"line_start":1844,"line_end":1844,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162982,"byte_end":162990,"line_start":1872,"line_end":1872,"column_start":12,"column_end":20},"name":"seek_raw","qualname":"<Reader<R>>::seek_raw","value":"pub fn seek_raw(&mut Self, io::SeekFrom, Position) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" This is like `seek`, but provides direct control over how the seeking\n operation is performed via `io::SeekFrom`.","sig":null,"attributes":[{"value":"/ This is like `seek`, but provides direct control over how the seeking","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162256,"byte_end":162329,"line_start":1859,"line_end":1859,"column_start":5,"column_end":78}},{"value":"/ operation is performed via `io::SeekFrom`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162334,"byte_end":162380,"line_start":1860,"line_end":1860,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162385,"byte_end":162388,"line_start":1861,"line_end":1861,"column_start":5,"column_end":8}},{"value":"/ The `pos` position given *should* correspond the position indicated","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162393,"byte_end":162464,"line_start":1862,"line_end":1862,"column_start":5,"column_end":76}},{"value":"/ by `seek_from`, but there is no requirement. If the `pos` position","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162469,"byte_end":162539,"line_start":1863,"line_end":1863,"column_start":5,"column_end":75}},{"value":"/ given is incorrect, then the position information returned by this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162544,"byte_end":162614,"line_start":1864,"line_end":1864,"column_start":5,"column_end":75}},{"value":"/ reader will be similarly incorrect.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162619,"byte_end":162658,"line_start":1865,"line_end":1865,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162663,"byte_end":162666,"line_start":1866,"line_end":1866,"column_start":5,"column_end":8}},{"value":"/ If the header row has not already been read, then this will attempt","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162671,"byte_end":162742,"line_start":1867,"line_end":1867,"column_start":5,"column_end":76}},{"value":"/ to read the header row before seeking. Therefore, it is possible that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162747,"byte_end":162820,"line_start":1868,"line_end":1868,"column_start":5,"column_end":78}},{"value":"/ this returns an error associated with reading CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162825,"byte_end":162884,"line_start":1869,"line_end":1869,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162889,"byte_end":162892,"line_start":1870,"line_end":1870,"column_start":5,"column_end":8}},{"value":"/ Unlike `seek`, this will always cause an actual seek to be performed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":162897,"byte_end":162970,"line_start":1871,"line_end":1871,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":714},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":164390,"byte_end":164416,"line_start":1915,"line_end":1915,"column_start":12,"column_end":38},"name":"DeserializeRecordsIntoIter","qualname":"::reader::DeserializeRecordsIntoIter","value":"DeserializeRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720}],"decl_id":null,"docs":" An owned iterator over deserialized records.","sig":null,"attributes":[{"value":"/ An owned iterator over deserialized records.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":164175,"byte_end":164223,"line_start":1911,"line_end":1911,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":164224,"byte_end":164227,"line_start":1912,"line_end":1912,"column_start":1,"column_end":4}},{"value":"/ The type parameter `R` refers to the underlying `io::Read` type, and `D`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":164228,"byte_end":164304,"line_start":1913,"line_end":1913,"column_start":1,"column_end":77}},{"value":"/ refers to the type that this iterator will deserialize a record into.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":164305,"byte_end":164378,"line_start":1914,"line_end":1914,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165064,"byte_end":165070,"line_start":1938,"line_end":1938,"column_start":12,"column_end":18},"name":"reader","qualname":"<DeserializeRecordsIntoIter<R, D>>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165000,"byte_end":165052,"line_start":1937,"line_end":1937,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165195,"byte_end":165205,"line_start":1943,"line_end":1943,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<DeserializeRecordsIntoIter<R, D>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165123,"byte_end":165183,"line_start":1942,"line_end":1942,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165342,"byte_end":165353,"line_start":1948,"line_end":1948,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<DeserializeRecordsIntoIter<R, D>>::into_reader","value":"pub fn into_reader(Self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Drop this iterator and return the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165270,"byte_end":165330,"line_start":1947,"line_end":1947,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":733},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":166091,"byte_end":166113,"line_start":1973,"line_end":1973,"column_start":12,"column_end":34},"name":"DeserializeRecordsIter","qualname":"::reader::DeserializeRecordsIter","value":"DeserializeRecordsIter {  }","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740}],"decl_id":null,"docs":" A borrowed iterator over deserialized records.","sig":null,"attributes":[{"value":"/ A borrowed iterator over deserialized records.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165783,"byte_end":165833,"line_start":1967,"line_end":1967,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165834,"byte_end":165837,"line_start":1968,"line_end":1968,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'r` refers to the lifetime of the underlying","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165838,"byte_end":165910,"line_start":1969,"line_end":1969,"column_start":1,"column_end":73}},{"value":"/ CSV `Reader`. The type parameter `R` refers to the underlying `io::Read`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165911,"byte_end":165987,"line_start":1970,"line_end":1970,"column_start":1,"column_end":77}},{"value":"/ type, and `D` refers to the type that this iterator will deserialize a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165988,"byte_end":166062,"line_start":1971,"line_end":1971,"column_start":1,"column_end":75}},{"value":"/ record into.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":166063,"byte_end":166079,"line_start":1972,"line_end":1972,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":166781,"byte_end":166787,"line_start":1996,"line_end":1996,"column_start":12,"column_end":18},"name":"reader","qualname":"<DeserializeRecordsIter>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":166717,"byte_end":166769,"line_start":1995,"line_end":1995,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":166912,"byte_end":166922,"line_start":2001,"line_end":2001,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<DeserializeRecordsIter>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":166840,"byte_end":166900,"line_start":2000,"line_end":2000,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":754},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167429,"byte_end":167450,"line_start":2021,"line_end":2021,"column_start":12,"column_end":33},"name":"StringRecordsIntoIter","qualname":"::reader::StringRecordsIntoIter","value":"StringRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"decl_id":null,"docs":" An owned iterator over records as strings.\n","sig":null,"attributes":[{"value":"/ An owned iterator over records as strings.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167371,"byte_end":167417,"line_start":2020,"line_end":2020,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167748,"byte_end":167754,"line_start":2032,"line_end":2032,"column_start":12,"column_end":18},"name":"reader","qualname":"<StringRecordsIntoIter<R>>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167684,"byte_end":167736,"line_start":2031,"line_end":2031,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167879,"byte_end":167889,"line_start":2037,"line_end":2037,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<StringRecordsIntoIter<R>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167807,"byte_end":167867,"line_start":2036,"line_end":2036,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168026,"byte_end":168037,"line_start":2042,"line_end":2042,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<StringRecordsIntoIter<R>>::into_reader","value":"pub fn into_reader(Self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Drop this iterator and return the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167954,"byte_end":168014,"line_start":2041,"line_end":2041,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":768},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168598,"byte_end":168615,"line_start":2063,"line_end":2063,"column_start":12,"column_end":29},"name":"StringRecordsIter","qualname":"::reader::StringRecordsIter","value":"StringRecordsIter {  }","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772}],"decl_id":null,"docs":" A borrowed iterator over records as strings.","sig":null,"attributes":[{"value":"/ A borrowed iterator over records as strings.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168443,"byte_end":168491,"line_start":2059,"line_end":2059,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168492,"byte_end":168495,"line_start":2060,"line_end":2060,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'r` refers to the lifetime of the underlying","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168496,"byte_end":168568,"line_start":2061,"line_end":2061,"column_start":1,"column_end":73}},{"value":"/ CSV `Reader`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168569,"byte_end":168586,"line_start":2062,"line_end":2062,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168937,"byte_end":168943,"line_start":2074,"line_end":2074,"column_start":12,"column_end":18},"name":"reader","qualname":"<StringRecordsIter>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168873,"byte_end":168925,"line_start":2073,"line_end":2073,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169068,"byte_end":169078,"line_start":2079,"line_end":2079,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<StringRecordsIter>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168996,"byte_end":169056,"line_start":2078,"line_end":2078,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":784},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169563,"byte_end":169582,"line_start":2097,"line_end":2097,"column_start":12,"column_end":31},"name":"ByteRecordsIntoIter","qualname":"::reader::ByteRecordsIntoIter","value":"ByteRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787}],"decl_id":null,"docs":" An owned iterator over records as raw bytes.\n","sig":null,"attributes":[{"value":"/ An owned iterator over records as raw bytes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169503,"byte_end":169551,"line_start":2096,"line_end":2096,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169870,"byte_end":169876,"line_start":2108,"line_end":2108,"column_start":12,"column_end":18},"name":"reader","qualname":"<ByteRecordsIntoIter<R>>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169806,"byte_end":169858,"line_start":2107,"line_end":2107,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170001,"byte_end":170011,"line_start":2113,"line_end":2113,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<ByteRecordsIntoIter<R>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169929,"byte_end":169989,"line_start":2112,"line_end":2112,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170148,"byte_end":170159,"line_start":2118,"line_end":2118,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<ByteRecordsIntoIter<R>>::into_reader","value":"pub fn into_reader(Self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Drop this iterator and return the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170076,"byte_end":170136,"line_start":2117,"line_end":2117,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":798},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170721,"byte_end":170736,"line_start":2139,"line_end":2139,"column_start":12,"column_end":27},"name":"ByteRecordsIter","qualname":"::reader::ByteRecordsIter","value":"ByteRecordsIter {  }","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"decl_id":null,"docs":" A borrowed iterator over records as raw bytes.","sig":null,"attributes":[{"value":"/ A borrowed iterator over records as raw bytes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170564,"byte_end":170614,"line_start":2135,"line_end":2135,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170615,"byte_end":170618,"line_start":2136,"line_end":2136,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'r` refers to the lifetime of the underlying","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170619,"byte_end":170691,"line_start":2137,"line_end":2137,"column_start":1,"column_end":73}},{"value":"/ CSV `Reader`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170692,"byte_end":170709,"line_start":2138,"line_end":2138,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":171048,"byte_end":171054,"line_start":2150,"line_end":2150,"column_start":12,"column_end":18},"name":"reader","qualname":"<ByteRecordsIter>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170984,"byte_end":171036,"line_start":2149,"line_end":2149,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":171179,"byte_end":171189,"line_start":2155,"line_end":2155,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<ByteRecordsIter>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":171107,"byte_end":171167,"line_start":2154,"line_end":2154,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1654},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225938,"byte_end":225950,"line_start":36,"line_end":36,"column_start":12,"column_end":24},"name":"StringRecord","qualname":"::string_record::StringRecord","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single CSV record stored as valid UTF-8 bytes.","sig":null,"attributes":[{"value":"/ A single CSV record stored as valid UTF-8 bytes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":224697,"byte_end":224749,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":224750,"byte_end":224753,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ A string record permits reading or writing CSV rows that are valid UTF-8.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":224754,"byte_end":224831,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ If string records are used to read CSV data that is not valid UTF-8, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":224832,"byte_end":224909,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ the CSV reader will return an invalid UTF-8 error. If you do need to read","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":224910,"byte_end":224987,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ possibly invalid UTF-8 data, then you should prefer using a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":224988,"byte_end":225051,"line_start":20,"line_end":20,"column_start":1,"column_end":64}},{"value":"/ [`ByteRecord`](struct.ByteRecord.html),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225052,"byte_end":225095,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ since it makes no assumptions about UTF-8.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225096,"byte_end":225142,"line_start":22,"line_end":22,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225143,"byte_end":225146,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ If you are using the Serde (de)serialization APIs, then you probably never","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225147,"byte_end":225225,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ need to interact with a `ByteRecord` or a `StringRecord`. However, there","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225226,"byte_end":225302,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/ are some circumstances in which you might need to use a raw record type","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225303,"byte_end":225378,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ while still using Serde. For example, if you need to deserialize possibly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225379,"byte_end":225456,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ invalid UTF-8 fields, then you'll need to first read your record into a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225457,"byte_end":225532,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ `ByteRecord`, and then use `ByteRecord::deserialize` to run Serde. Another","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225533,"byte_end":225611,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ reason for using the raw record deserialization APIs is if you're using","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225612,"byte_end":225687,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/ Serde to read into borrowed data such as a `&'a str` or a `&'a [u8]`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225688,"byte_end":225761,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225762,"byte_end":225765,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Two `StringRecord`s are compared on the basis of their field data. Any","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225766,"byte_end":225840,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ position information associated with the records is ignored.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225841,"byte_end":225905,"line_start":34,"line_end":34,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227647,"byte_end":227650,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<StringRecord>::new","value":"pub fn new() -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `StringRecord`.","sig":null,"attributes":[{"value":"/ Create a new empty `StringRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227002,"byte_end":227040,"line_start":83,"line_end":83,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227045,"byte_end":227048,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Note that you may find the `StringRecord::from` constructor more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227053,"byte_end":227121,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/ convenient, which is provided by an impl on the `From` trait.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227126,"byte_end":227191,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227196,"byte_end":227199,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Example: create an empty record","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227204,"byte_end":227241,"line_start":88,"line_end":88,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227246,"byte_end":227249,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227254,"byte_end":227261,"line_start":90,"line_end":90,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227266,"byte_end":227292,"line_start":91,"line_end":91,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227297,"byte_end":227300,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227305,"byte_end":227342,"line_start":93,"line_end":93,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(record.len(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227347,"byte_end":227379,"line_start":94,"line_end":94,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227384,"byte_end":227391,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227396,"byte_end":227399,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example: initialize a record from a `Vec`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227404,"byte_end":227451,"line_start":97,"line_end":97,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227456,"byte_end":227459,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227464,"byte_end":227471,"line_start":99,"line_end":99,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227476,"byte_end":227502,"line_start":100,"line_end":100,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227507,"byte_end":227510,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227515,"byte_end":227572,"line_start":102,"line_end":102,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227577,"byte_end":227609,"line_start":103,"line_end":103,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227614,"byte_end":227621,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227626,"byte_end":227635,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227994,"byte_end":228007,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<StringRecord>::with_capacity","value":"pub fn with_capacity(usize, usize) -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `StringRecord` with the given capacity.","sig":null,"attributes":[{"value":"/ Create a new empty `StringRecord` with the given capacity.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227722,"byte_end":227784,"line_start":110,"line_end":110,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227789,"byte_end":227792,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ `buffer` refers to the capacity of the buffer used to store the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227797,"byte_end":227864,"line_start":112,"line_end":112,"column_start":5,"column_end":72}},{"value":"/ actual row contents. `fields` refers to the number of fields one","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227869,"byte_end":227937,"line_start":113,"line_end":113,"column_start":5,"column_end":73}},{"value":"/ might expect to store.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227942,"byte_end":227968,"line_start":114,"line_end":114,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":227973,"byte_end":227982,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229323,"byte_end":229339,"line_start":154,"line_end":154,"column_start":12,"column_end":28},"name":"from_byte_record","qualname":"<StringRecord>::from_byte_record","value":"pub fn from_byte_record(ByteRecord)\n-> result::Result<StringRecord, FromUtf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `StringRecord` from a `ByteRecord`.","sig":null,"attributes":[{"value":"/ Create a new `StringRecord` from a `ByteRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228131,"byte_end":228183,"line_start":120,"line_end":120,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228188,"byte_end":228191,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Note that this does UTF-8 validation. If the given `ByteRecord` does","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228196,"byte_end":228268,"line_start":122,"line_end":122,"column_start":5,"column_end":77}},{"value":"/ not contain valid UTF-8, then this returns an error. The error includes","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228273,"byte_end":228348,"line_start":123,"line_end":123,"column_start":5,"column_end":80}},{"value":"/ the UTF-8 error and the original `ByteRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228353,"byte_end":228403,"line_start":124,"line_end":124,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228408,"byte_end":228411,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example: valid UTF-8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228416,"byte_end":228442,"line_start":126,"line_end":126,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228447,"byte_end":228450,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228455,"byte_end":228462,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228467,"byte_end":228493,"line_start":129,"line_end":129,"column_start":5,"column_end":31}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228498,"byte_end":228538,"line_start":130,"line_end":130,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228543,"byte_end":228546,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228551,"byte_end":228590,"line_start":132,"line_end":132,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228595,"byte_end":228643,"line_start":133,"line_end":133,"column_start":5,"column_end":53}},{"value":"/     let byte_record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228648,"byte_end":228712,"line_start":134,"line_end":134,"column_start":5,"column_end":69}},{"value":"/     let str_record = StringRecord::from_byte_record(byte_record)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228717,"byte_end":228787,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"/     assert_eq!(str_record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228792,"byte_end":228832,"line_start":136,"line_end":136,"column_start":5,"column_end":45}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228837,"byte_end":228851,"line_start":137,"line_end":137,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228856,"byte_end":228861,"line_start":138,"line_end":138,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228866,"byte_end":228873,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228878,"byte_end":228881,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Example: invalid UTF-8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228886,"byte_end":228914,"line_start":141,"line_end":141,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228919,"byte_end":228922,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228927,"byte_end":228934,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228939,"byte_end":228979,"line_start":144,"line_end":144,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228984,"byte_end":228987,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ let byte_record = ByteRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":228992,"byte_end":229036,"line_start":146,"line_end":146,"column_start":5,"column_end":49}},{"value":"/     &b\"quux\"[..], &b\"foo\\xFFbar\"[..], &b\"c\"[..],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229041,"byte_end":229093,"line_start":147,"line_end":147,"column_start":5,"column_end":57}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229098,"byte_end":229105,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ let err = StringRecord::from_byte_record(byte_record).unwrap_err();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229110,"byte_end":229181,"line_start":149,"line_end":149,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(err.utf8_error().field(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229186,"byte_end":229230,"line_start":150,"line_end":150,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229235,"byte_end":229285,"line_start":151,"line_end":151,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229290,"byte_end":229297,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229302,"byte_end":229311,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230631,"byte_end":230653,"line_start":193,"line_end":193,"column_start":12,"column_end":34},"name":"from_byte_record_lossy","qualname":"<StringRecord>::from_byte_record_lossy","value":"pub fn from_byte_record_lossy(ByteRecord) -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Lossily create a new `StringRecord` from a `ByteRecord`.","sig":null,"attributes":[{"value":"/ Lossily create a new `StringRecord` from a `ByteRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229589,"byte_end":229649,"line_start":163,"line_end":163,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229654,"byte_end":229657,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ This is like `StringRecord::from_byte_record`, except all invalid UTF-8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229662,"byte_end":229737,"line_start":165,"line_end":165,"column_start":5,"column_end":80}},{"value":"/ sequences are replaced with the `U+FFFD REPLACEMENT CHARACTER`, which","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229742,"byte_end":229815,"line_start":166,"line_end":166,"column_start":5,"column_end":78}},{"value":"/ looks like this: �.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229820,"byte_end":229845,"line_start":167,"line_end":167,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229850,"byte_end":229853,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Example: valid UTF-8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229858,"byte_end":229884,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229889,"byte_end":229892,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229897,"byte_end":229904,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229909,"byte_end":229949,"line_start":172,"line_end":172,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229954,"byte_end":229957,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ let byte_record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":229962,"byte_end":230022,"line_start":174,"line_end":174,"column_start":5,"column_end":65}},{"value":"/ let str_record = StringRecord::from_byte_record_lossy(byte_record);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230027,"byte_end":230098,"line_start":175,"line_end":175,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(str_record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230103,"byte_end":230139,"line_start":176,"line_end":176,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230144,"byte_end":230151,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230156,"byte_end":230159,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Example: invalid UTF-8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230164,"byte_end":230192,"line_start":179,"line_end":179,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230197,"byte_end":230200,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230205,"byte_end":230212,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230217,"byte_end":230257,"line_start":182,"line_end":182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230262,"byte_end":230265,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ let byte_record = ByteRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230270,"byte_end":230314,"line_start":184,"line_end":184,"column_start":5,"column_end":49}},{"value":"/     &b\"quux\"[..], &b\"foo\\xFFbar\"[..], &b\"c\"[..],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230319,"byte_end":230371,"line_start":185,"line_end":185,"column_start":5,"column_end":57}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230376,"byte_end":230383,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ let str_record = StringRecord::from_byte_record_lossy(byte_record);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230388,"byte_end":230459,"line_start":187,"line_end":187,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(&str_record[0], \"quux\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230464,"byte_end":230503,"line_start":188,"line_end":188,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(&str_record[1], \"foo�bar\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230508,"byte_end":230552,"line_start":189,"line_end":189,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(&str_record[2], \"c\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230557,"byte_end":230593,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230598,"byte_end":230605,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":230610,"byte_end":230619,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234146,"byte_end":234157,"line_start":292,"line_end":292,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<StringRecord>::deserialize","value":"pub fn deserialize<'de, D: Deserialize>(&'de Self, Option<&'de StringRecord>)\n-> Result<D>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize this record.","sig":null,"attributes":[{"value":"/ Deserialize this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231168,"byte_end":231196,"line_start":207,"line_end":207,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231201,"byte_end":231204,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ The `D` type parameter refers to the type that this record should be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231209,"byte_end":231281,"line_start":209,"line_end":209,"column_start":5,"column_end":77}},{"value":"/ deserialized into. The `'de` lifetime refers to the lifetime of the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231286,"byte_end":231357,"line_start":210,"line_end":210,"column_start":5,"column_end":76}},{"value":"/ `StringRecord`. The `'de` lifetime permits deserializing into structs","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231362,"byte_end":231435,"line_start":211,"line_end":211,"column_start":5,"column_end":78}},{"value":"/ that borrow field data from this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231440,"byte_end":231484,"line_start":212,"line_end":212,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231489,"byte_end":231492,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ An optional `headers` parameter permits deserializing into a struct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231497,"byte_end":231568,"line_start":214,"line_end":214,"column_start":5,"column_end":76}},{"value":"/ based on its field names (corresponding to header values) rather than","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231573,"byte_end":231646,"line_start":215,"line_end":215,"column_start":5,"column_end":78}},{"value":"/ the order in which the fields are defined.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231651,"byte_end":231697,"line_start":216,"line_end":216,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231702,"byte_end":231705,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example: without headers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231710,"byte_end":231740,"line_start":218,"line_end":218,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231745,"byte_end":231748,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ This shows how to deserialize a single row into a struct based on the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231753,"byte_end":231826,"line_start":220,"line_end":220,"column_start":5,"column_end":78}},{"value":"/ order in which fields occur. This example also shows how to borrow","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231831,"byte_end":231901,"line_start":221,"line_end":221,"column_start":5,"column_end":75}},{"value":"/ fields from the `StringRecord`, which results in zero allocation","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231906,"byte_end":231974,"line_start":222,"line_end":222,"column_start":5,"column_end":73}},{"value":"/ deserialization.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":231979,"byte_end":231999,"line_start":223,"line_end":223,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232004,"byte_end":232007,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232012,"byte_end":232019,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232024,"byte_end":232050,"line_start":226,"line_end":226,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232055,"byte_end":232058,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232063,"byte_end":232089,"line_start":228,"line_end":228,"column_start":5,"column_end":31}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232094,"byte_end":232121,"line_start":229,"line_end":229,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232126,"byte_end":232129,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232134,"byte_end":232160,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/ struct Row<'a> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232165,"byte_end":232185,"line_start":232,"line_end":232,"column_start":5,"column_end":25}},{"value":"/     city: &'a str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232190,"byte_end":232212,"line_start":233,"line_end":233,"column_start":5,"column_end":27}},{"value":"/     country: &'a str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232217,"byte_end":232242,"line_start":234,"line_end":234,"column_start":5,"column_end":30}},{"value":"/     population: u64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232247,"byte_end":232271,"line_start":235,"line_end":235,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232276,"byte_end":232281,"line_start":236,"line_end":236,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232286,"byte_end":232289,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232294,"byte_end":232332,"line_start":238,"line_end":238,"column_start":5,"column_end":43}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232337,"byte_end":232385,"line_start":239,"line_end":239,"column_start":5,"column_end":53}},{"value":"/     let record = StringRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232390,"byte_end":232435,"line_start":240,"line_end":240,"column_start":5,"column_end":50}},{"value":"/         \"Boston\", \"United States\", \"4628910\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232440,"byte_end":232489,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"/     ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232494,"byte_end":232505,"line_start":242,"line_end":242,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232510,"byte_end":232513,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/     let row: Row = record.deserialize(None)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232518,"byte_end":232567,"line_start":244,"line_end":244,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.city, \"Boston\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232572,"byte_end":232611,"line_start":245,"line_end":245,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(row.country, \"United States\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232616,"byte_end":232665,"line_start":246,"line_end":246,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.population, 4628910);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232670,"byte_end":232714,"line_start":247,"line_end":247,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232719,"byte_end":232733,"line_start":248,"line_end":248,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232738,"byte_end":232743,"line_start":249,"line_end":249,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232748,"byte_end":232755,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232760,"byte_end":232763,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Example: with headers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232768,"byte_end":232795,"line_start":252,"line_end":252,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232800,"byte_end":232803,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ This example is like the previous one, but shows how to deserialize","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232808,"byte_end":232879,"line_start":254,"line_end":254,"column_start":5,"column_end":76}},{"value":"/ into a struct based on the struct's field names. For this to work,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232884,"byte_end":232954,"line_start":255,"line_end":255,"column_start":5,"column_end":75}},{"value":"/ you must provide a header row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232959,"byte_end":232993,"line_start":256,"line_end":256,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":232998,"byte_end":233001,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ This example also shows that you can deserialize into owned data","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233006,"byte_end":233074,"line_start":258,"line_end":258,"column_start":5,"column_end":73}},{"value":"/ types (e.g., `String`) instead of borrowed data types (e.g., `&str`).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233079,"byte_end":233152,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233157,"byte_end":233160,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233165,"byte_end":233172,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233177,"byte_end":233203,"line_start":262,"line_end":262,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233208,"byte_end":233211,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233216,"byte_end":233242,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233247,"byte_end":233274,"line_start":265,"line_end":265,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233279,"byte_end":233282,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233287,"byte_end":233313,"line_start":267,"line_end":267,"column_start":5,"column_end":31}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233318,"byte_end":233334,"line_start":268,"line_end":268,"column_start":5,"column_end":21}},{"value":"/     city: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233339,"byte_end":233360,"line_start":269,"line_end":269,"column_start":5,"column_end":26}},{"value":"/     country: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233365,"byte_end":233389,"line_start":270,"line_end":270,"column_start":5,"column_end":29}},{"value":"/     population: u64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233394,"byte_end":233418,"line_start":271,"line_end":271,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233423,"byte_end":233428,"line_start":272,"line_end":272,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233433,"byte_end":233436,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap() }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233441,"byte_end":233479,"line_start":274,"line_end":274,"column_start":5,"column_end":43}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233484,"byte_end":233532,"line_start":275,"line_end":275,"column_start":5,"column_end":53}},{"value":"/     // Notice that the fields are not in the same order","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233537,"byte_end":233596,"line_start":276,"line_end":276,"column_start":5,"column_end":64}},{"value":"/     // as the fields in the struct!","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233601,"byte_end":233640,"line_start":277,"line_end":277,"column_start":5,"column_end":44}},{"value":"/     let header = StringRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233645,"byte_end":233690,"line_start":278,"line_end":278,"column_start":5,"column_end":50}},{"value":"/         \"country\", \"city\", \"population\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233695,"byte_end":233739,"line_start":279,"line_end":279,"column_start":5,"column_end":49}},{"value":"/     ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233744,"byte_end":233755,"line_start":280,"line_end":280,"column_start":5,"column_end":16}},{"value":"/     let record = StringRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233760,"byte_end":233805,"line_start":281,"line_end":281,"column_start":5,"column_end":50}},{"value":"/         \"United States\", \"Boston\", \"4628910\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233810,"byte_end":233859,"line_start":282,"line_end":282,"column_start":5,"column_end":54}},{"value":"/     ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233864,"byte_end":233875,"line_start":283,"line_end":283,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233880,"byte_end":233883,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/     let row: Row = record.deserialize(Some(&header))?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233888,"byte_end":233946,"line_start":285,"line_end":285,"column_start":5,"column_end":63}},{"value":"/     assert_eq!(row.city, \"Boston\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233951,"byte_end":233990,"line_start":286,"line_end":286,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(row.country, \"United States\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":233995,"byte_end":234044,"line_start":287,"line_end":287,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.population, 4628910);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234049,"byte_end":234093,"line_start":288,"line_end":288,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234098,"byte_end":234112,"line_start":289,"line_end":289,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234117,"byte_end":234122,"line_start":290,"line_end":290,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234127,"byte_end":234134,"line_start":291,"line_end":291,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234770,"byte_end":234774,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"iter","qualname":"<StringRecord>::iter","value":"pub fn iter(&Self) -> StringRecordIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all fields in this record.","sig":null,"attributes":[{"value":"/ Returns an iterator over all fields in this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234329,"byte_end":234384,"line_start":299,"line_end":299,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234389,"byte_end":234392,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234397,"byte_end":234410,"line_start":301,"line_end":301,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234415,"byte_end":234418,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This example shows how to iterate over each field in a `StringRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234423,"byte_end":234497,"line_start":303,"line_end":303,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234502,"byte_end":234505,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234510,"byte_end":234517,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234522,"byte_end":234548,"line_start":306,"line_end":306,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234553,"byte_end":234556,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234561,"byte_end":234618,"line_start":308,"line_end":308,"column_start":5,"column_end":62}},{"value":"/ for field in record.iter() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234623,"byte_end":234655,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/     assert!(field == \"a\" || field == \"b\" || field == \"c\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234660,"byte_end":234722,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234727,"byte_end":234732,"line_start":311,"line_end":311,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234737,"byte_end":234744,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234749,"byte_end":234758,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235221,"byte_end":235224,"line_start":332,"line_end":332,"column_start":12,"column_end":15},"name":"get","qualname":"<StringRecord>::get","value":"pub fn get(&Self, usize) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Return the field at index `i`.","sig":null,"attributes":[{"value":"/ Return the field at index `i`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234840,"byte_end":234874,"line_start":318,"line_end":318,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234879,"byte_end":234882,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If no field at index `i` exists, then this returns `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234887,"byte_end":234949,"line_start":320,"line_end":320,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234954,"byte_end":234957,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234962,"byte_end":234975,"line_start":322,"line_end":322,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234980,"byte_end":234983,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":234988,"byte_end":234995,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235000,"byte_end":235026,"line_start":325,"line_end":325,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235031,"byte_end":235034,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235039,"byte_end":235096,"line_start":327,"line_end":327,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(record.get(1), Some(\"b\"));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235101,"byte_end":235142,"line_start":328,"line_end":328,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(record.get(3), None);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235147,"byte_end":235183,"line_start":329,"line_end":329,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235188,"byte_end":235195,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235200,"byte_end":235209,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235859,"byte_end":235867,"line_start":352,"line_end":352,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<StringRecord>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this record is empty.","sig":null,"attributes":[{"value":"/ Returns true if and only if this record is empty.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235634,"byte_end":235687,"line_start":342,"line_end":342,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235692,"byte_end":235695,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235700,"byte_end":235713,"line_start":344,"line_end":344,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235718,"byte_end":235721,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235726,"byte_end":235733,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235738,"byte_end":235764,"line_start":347,"line_end":347,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235769,"byte_end":235772,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ assert!(StringRecord::new().is_empty());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235777,"byte_end":235821,"line_start":349,"line_end":349,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235826,"byte_end":235833,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235838,"byte_end":235847,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236190,"byte_end":236193,"line_start":367,"line_end":367,"column_start":12,"column_end":15},"name":"len","qualname":"<StringRecord>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields in this record.","sig":null,"attributes":[{"value":"/ Returns the number of fields in this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235920,"byte_end":235968,"line_start":356,"line_end":356,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235973,"byte_end":235976,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235981,"byte_end":235994,"line_start":358,"line_end":358,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":235999,"byte_end":236002,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236007,"byte_end":236014,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236019,"byte_end":236045,"line_start":361,"line_end":361,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236050,"byte_end":236053,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236058,"byte_end":236115,"line_start":363,"line_end":363,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236120,"byte_end":236152,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236157,"byte_end":236164,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236169,"byte_end":236178,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236722,"byte_end":236730,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"truncate","qualname":"<StringRecord>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Truncate this record to `n` fields.","sig":null,"attributes":[{"value":"/ Truncate this record to `n` fields.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236244,"byte_end":236283,"line_start":371,"line_end":371,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236288,"byte_end":236291,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ If `n` is greater than the number of fields in this record, then this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236296,"byte_end":236369,"line_start":373,"line_end":373,"column_start":5,"column_end":78}},{"value":"/ has no effect.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236374,"byte_end":236392,"line_start":374,"line_end":374,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236397,"byte_end":236400,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236405,"byte_end":236418,"line_start":376,"line_end":376,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236423,"byte_end":236426,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236431,"byte_end":236438,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236443,"byte_end":236469,"line_start":379,"line_end":379,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236474,"byte_end":236477,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236482,"byte_end":236543,"line_start":381,"line_end":381,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236548,"byte_end":236580,"line_start":382,"line_end":382,"column_start":5,"column_end":37}},{"value":"/ record.truncate(1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236585,"byte_end":236608,"line_start":383,"line_end":383,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(record.len(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236613,"byte_end":236645,"line_start":384,"line_end":384,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(record, vec![\"a\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236650,"byte_end":236684,"line_start":385,"line_end":385,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236689,"byte_end":236696,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236701,"byte_end":236710,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237236,"byte_end":237241,"line_start":408,"line_end":408,"column_start":12,"column_end":17},"name":"clear","qualname":"<StringRecord>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear this record so that it has zero fields.","sig":null,"attributes":[{"value":"/ Clear this record so that it has zero fields.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236793,"byte_end":236842,"line_start":392,"line_end":392,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236847,"byte_end":236850,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Note that it is not necessary to clear the record to reuse it with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236855,"byte_end":236925,"line_start":394,"line_end":394,"column_start":5,"column_end":75}},{"value":"/ the CSV reader.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236930,"byte_end":236949,"line_start":395,"line_end":395,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236954,"byte_end":236957,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236962,"byte_end":236975,"line_start":397,"line_end":397,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236980,"byte_end":236983,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":236988,"byte_end":236995,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237000,"byte_end":237026,"line_start":400,"line_end":400,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237031,"byte_end":237034,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237039,"byte_end":237100,"line_start":402,"line_end":402,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237105,"byte_end":237137,"line_start":403,"line_end":403,"column_start":5,"column_end":37}},{"value":"/ record.clear();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237142,"byte_end":237161,"line_start":404,"line_end":404,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(record.len(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237166,"byte_end":237198,"line_start":405,"line_end":405,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237203,"byte_end":237210,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237215,"byte_end":237224,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237764,"byte_end":237768,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"trim","qualname":"<StringRecord>::trim","value":"pub fn trim(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Trim the fields of this record so that leading and trailing whitespace\n is removed.","sig":null,"attributes":[{"value":"/ Trim the fields of this record so that leading and trailing whitespace","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237290,"byte_end":237364,"line_start":412,"line_end":412,"column_start":5,"column_end":79}},{"value":"/ is removed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237369,"byte_end":237384,"line_start":413,"line_end":413,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237389,"byte_end":237392,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ This method uses the Unicode definition of whitespace.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237397,"byte_end":237455,"line_start":415,"line_end":415,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237460,"byte_end":237463,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237468,"byte_end":237481,"line_start":417,"line_end":417,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237486,"byte_end":237489,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237494,"byte_end":237501,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237506,"byte_end":237532,"line_start":420,"line_end":420,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237537,"byte_end":237540,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::from(vec![","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237545,"byte_end":237590,"line_start":422,"line_end":422,"column_start":5,"column_end":50}},{"value":"/     \"  \", \"\\u{3000}\\tfoo \", \"bar  \", \"b a z\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237595,"byte_end":237644,"line_start":423,"line_end":423,"column_start":5,"column_end":54}},{"value":"/ ]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237649,"byte_end":237656,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ record.trim();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237661,"byte_end":237679,"line_start":425,"line_end":425,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(record, vec![\"\", \"foo\", \"bar\", \"b a z\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237684,"byte_end":237740,"line_start":426,"line_end":426,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":237745,"byte_end":237752,"line_start":427,"line_end":427,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238504,"byte_end":238514,"line_start":455,"line_end":455,"column_start":12,"column_end":22},"name":"push_field","qualname":"<StringRecord>::push_field","value":"pub fn push_field(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Add a new field to this record.","sig":null,"attributes":[{"value":"/ Add a new field to this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238227,"byte_end":238262,"line_start":443,"line_end":443,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238267,"byte_end":238270,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238275,"byte_end":238288,"line_start":445,"line_end":445,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238293,"byte_end":238296,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238301,"byte_end":238308,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238313,"byte_end":238339,"line_start":448,"line_end":448,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238344,"byte_end":238347,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238352,"byte_end":238393,"line_start":450,"line_end":450,"column_start":5,"column_end":46}},{"value":"/ record.push_field(\"foo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238398,"byte_end":238427,"line_start":451,"line_end":451,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(&record[0], \"foo\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238432,"byte_end":238466,"line_start":452,"line_end":452,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238471,"byte_end":238478,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238483,"byte_end":238492,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239837,"byte_end":239845,"line_start":496,"line_end":496,"column_start":12,"column_end":20},"name":"position","qualname":"<StringRecord>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position of this record, if available.","sig":null,"attributes":[{"value":"/ Return the position of this record, if available.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238597,"byte_end":238650,"line_start":459,"line_end":459,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238655,"byte_end":238658,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238663,"byte_end":238676,"line_start":461,"line_end":461,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238681,"byte_end":238684,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238689,"byte_end":238696,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238701,"byte_end":238727,"line_start":464,"line_end":464,"column_start":5,"column_end":31}},{"value":"/ use csv::{StringRecord, ReaderBuilder};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238732,"byte_end":238775,"line_start":465,"line_end":465,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238780,"byte_end":238783,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238788,"byte_end":238827,"line_start":467,"line_end":467,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238832,"byte_end":238880,"line_start":468,"line_end":468,"column_start":5,"column_end":53}},{"value":"/     let mut record = StringRecord::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238885,"byte_end":238930,"line_start":469,"line_end":469,"column_start":5,"column_end":50}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238935,"byte_end":238977,"line_start":470,"line_end":470,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":238982,"byte_end":239013,"line_start":471,"line_end":471,"column_start":5,"column_end":36}},{"value":"/         .from_reader(\"a,b,c\\nx,y,z\".as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239018,"byte_end":239070,"line_start":472,"line_end":472,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239075,"byte_end":239078,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/     assert!(rdr.read_record(&mut record)?);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239083,"byte_end":239130,"line_start":474,"line_end":474,"column_start":5,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239135,"byte_end":239144,"line_start":475,"line_end":475,"column_start":5,"column_end":14}},{"value":"/         let pos = record.position().expect(\"a record position\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239149,"byte_end":239217,"line_start":476,"line_end":476,"column_start":5,"column_end":73}},{"value":"/         assert_eq!(pos.byte(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239222,"byte_end":239260,"line_start":477,"line_end":477,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.line(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239265,"byte_end":239303,"line_start":478,"line_end":478,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.record(), 0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239308,"byte_end":239348,"line_start":479,"line_end":479,"column_start":5,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239353,"byte_end":239362,"line_start":480,"line_end":480,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239367,"byte_end":239370,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/     assert!(rdr.read_record(&mut record)?);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239375,"byte_end":239422,"line_start":482,"line_end":482,"column_start":5,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239427,"byte_end":239436,"line_start":483,"line_end":483,"column_start":5,"column_end":14}},{"value":"/         let pos = record.position().expect(\"a record position\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239441,"byte_end":239509,"line_start":484,"line_end":484,"column_start":5,"column_end":73}},{"value":"/         assert_eq!(pos.byte(), 6);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239514,"byte_end":239552,"line_start":485,"line_end":485,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.line(), 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239557,"byte_end":239595,"line_start":486,"line_end":486,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.record(), 1);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239600,"byte_end":239640,"line_start":487,"line_end":487,"column_start":5,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239645,"byte_end":239654,"line_start":488,"line_end":488,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239659,"byte_end":239662,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/     // Finish the CSV reader for good measure.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239667,"byte_end":239717,"line_start":490,"line_end":490,"column_start":5,"column_end":55}},{"value":"/     assert!(!rdr.read_record(&mut record)?);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239722,"byte_end":239770,"line_start":491,"line_end":491,"column_start":5,"column_end":53}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239775,"byte_end":239789,"line_start":492,"line_end":492,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239794,"byte_end":239799,"line_start":493,"line_end":493,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239804,"byte_end":239811,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239816,"byte_end":239825,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240375,"byte_end":240387,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"name":"set_position","qualname":"<StringRecord>::set_position","value":"pub fn set_position(&mut Self, Option<Position>)","parent":null,"children":[],"decl_id":null,"docs":" Set the position of this record.","sig":null,"attributes":[{"value":"/ Set the position of this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239913,"byte_end":239949,"line_start":500,"line_end":500,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239954,"byte_end":239957,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239962,"byte_end":239975,"line_start":502,"line_end":502,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239980,"byte_end":239983,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":239988,"byte_end":239995,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ use csv::{StringRecord, Position};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240000,"byte_end":240038,"line_start":505,"line_end":505,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240043,"byte_end":240046,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240051,"byte_end":240112,"line_start":507,"line_end":507,"column_start":5,"column_end":66}},{"value":"/ let mut pos = Position::new();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240117,"byte_end":240151,"line_start":508,"line_end":508,"column_start":5,"column_end":39}},{"value":"/ pos.set_byte(100);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240156,"byte_end":240178,"line_start":509,"line_end":509,"column_start":5,"column_end":27}},{"value":"/ pos.set_line(4);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240183,"byte_end":240203,"line_start":510,"line_end":510,"column_start":5,"column_end":25}},{"value":"/ pos.set_record(2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240208,"byte_end":240230,"line_start":511,"line_end":511,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240235,"byte_end":240238,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ record.set_position(Some(pos.clone()));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240243,"byte_end":240286,"line_start":513,"line_end":513,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(record.position(), Some(&pos));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240291,"byte_end":240337,"line_start":514,"line_end":514,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240342,"byte_end":240349,"line_start":515,"line_end":515,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240354,"byte_end":240363,"line_start":516,"line_end":516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241116,"byte_end":241121,"line_start":539,"line_end":539,"column_start":12,"column_end":17},"name":"range","qualname":"<StringRecord>::range","value":"pub fn range(&Self, usize) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return the start and end position of a field in this record.","sig":null,"attributes":[{"value":"/ Return the start and end position of a field in this record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240469,"byte_end":240533,"line_start":521,"line_end":521,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240538,"byte_end":240541,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ If no such field exists at the given index, then return `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240546,"byte_end":240613,"line_start":523,"line_end":523,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240618,"byte_end":240621,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ The range returned can be used with the slice returned by `as_slice`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240626,"byte_end":240699,"line_start":525,"line_end":525,"column_start":5,"column_end":78}},{"value":"/ Namely, the range returned is guaranteed to start and end at valid","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240704,"byte_end":240774,"line_start":526,"line_end":526,"column_start":5,"column_end":75}},{"value":"/ UTF-8 sequence boundaries.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240779,"byte_end":240809,"line_start":527,"line_end":527,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240814,"byte_end":240817,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240822,"byte_end":240835,"line_start":529,"line_end":529,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240840,"byte_end":240843,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240848,"byte_end":240855,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240860,"byte_end":240886,"line_start":532,"line_end":532,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240891,"byte_end":240894,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"foo\", \"quux\", \"z\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240899,"byte_end":240961,"line_start":534,"line_end":534,"column_start":5,"column_end":67}},{"value":"/ let range = record.range(1).expect(\"a record range\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":240966,"byte_end":241023,"line_start":535,"line_end":535,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(&record.as_slice()[range], \"quux\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241028,"byte_end":241078,"line_start":536,"line_end":536,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241083,"byte_end":241090,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241095,"byte_end":241104,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241630,"byte_end":241638,"line_start":556,"line_end":556,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<StringRecord>::as_slice","value":"pub fn as_slice(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the entire row as a single string slice. The slice returned\n stores all fields contiguously. The boundaries of each field can be\n determined via the `range` method.","sig":null,"attributes":[{"value":"/ Return the entire row as a single string slice. The slice returned","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241200,"byte_end":241270,"line_start":543,"line_end":543,"column_start":5,"column_end":75}},{"value":"/ stores all fields contiguously. The boundaries of each field can be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241275,"byte_end":241346,"line_start":544,"line_end":544,"column_start":5,"column_end":76}},{"value":"/ determined via the `range` method.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241351,"byte_end":241389,"line_start":545,"line_end":545,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241394,"byte_end":241397,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241402,"byte_end":241415,"line_start":547,"line_end":547,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241420,"byte_end":241423,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241428,"byte_end":241435,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241440,"byte_end":241466,"line_start":550,"line_end":550,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241471,"byte_end":241474,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"foo\", \"quux\", \"z\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241479,"byte_end":241541,"line_start":552,"line_end":552,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(record.as_slice(), \"fooquuxz\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241546,"byte_end":241592,"line_start":553,"line_end":553,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241597,"byte_end":241604,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":241609,"byte_end":241618,"line_start":555,"line_end":555,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242386,"byte_end":242400,"line_start":577,"line_end":577,"column_start":12,"column_end":26},"name":"as_byte_record","qualname":"<StringRecord>::as_byte_record","value":"pub fn as_byte_record(&Self) -> &ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to this record's raw\n [`ByteRecord`](struct.ByteRecord.html).","sig":null,"attributes":[{"value":"/ Return a reference to this record's raw","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242008,"byte_end":242051,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/ [`ByteRecord`](struct.ByteRecord.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242056,"byte_end":242099,"line_start":565,"line_end":565,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242104,"byte_end":242107,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242112,"byte_end":242125,"line_start":567,"line_end":567,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242130,"byte_end":242133,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242138,"byte_end":242145,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242150,"byte_end":242176,"line_start":570,"line_end":570,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242181,"byte_end":242184,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let str_record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242189,"byte_end":242250,"line_start":572,"line_end":572,"column_start":5,"column_end":66}},{"value":"/ let byte_record = str_record.as_byte_record();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242255,"byte_end":242305,"line_start":573,"line_end":573,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(&byte_record[2], b\"c\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242310,"byte_end":242348,"line_start":574,"line_end":574,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242353,"byte_end":242360,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242365,"byte_end":242374,"line_start":576,"line_end":576,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243361,"byte_end":243377,"line_start":609,"line_end":609,"column_start":12,"column_end":28},"name":"into_byte_record","qualname":"<StringRecord>::into_byte_record","value":"pub fn into_byte_record(Self) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Convert this `StringRecord` into a\n [`ByteRecord`](struct.ByteRecord.html).","sig":null,"attributes":[{"value":"/ Convert this `StringRecord` into a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242452,"byte_end":242490,"line_start":581,"line_end":581,"column_start":5,"column_end":43}},{"value":"/ [`ByteRecord`](struct.ByteRecord.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242495,"byte_end":242538,"line_start":582,"line_end":582,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242543,"byte_end":242546,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242551,"byte_end":242564,"line_start":584,"line_end":584,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242569,"byte_end":242572,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242577,"byte_end":242584,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242589,"byte_end":242615,"line_start":587,"line_end":587,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242620,"byte_end":242623,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let str_record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242628,"byte_end":242689,"line_start":589,"line_end":589,"column_start":5,"column_end":66}},{"value":"/ let byte_record = str_record.into_byte_record();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242694,"byte_end":242746,"line_start":590,"line_end":590,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(&byte_record[2], b\"c\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242751,"byte_end":242789,"line_start":591,"line_end":591,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242794,"byte_end":242801,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242806,"byte_end":242809,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ Note that this can also be achieved using the `From` impl:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242814,"byte_end":242876,"line_start":594,"line_end":594,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242881,"byte_end":242884,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242889,"byte_end":242896,"line_start":596,"line_end":596,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242901,"byte_end":242941,"line_start":597,"line_end":597,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242946,"byte_end":242949,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ // Using ByteRecord::from...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242954,"byte_end":242986,"line_start":599,"line_end":599,"column_start":5,"column_end":37}},{"value":"/ let str_record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":242991,"byte_end":243052,"line_start":600,"line_end":600,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(ByteRecord::from(str_record).len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243057,"byte_end":243111,"line_start":601,"line_end":601,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243116,"byte_end":243119,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ // Using StringRecord::into...","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243124,"byte_end":243158,"line_start":603,"line_end":603,"column_start":5,"column_end":39}},{"value":"/ let str_record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243163,"byte_end":243224,"line_start":604,"line_end":604,"column_start":5,"column_end":66}},{"value":"/ let byte_record: ByteRecord = str_record.into();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243229,"byte_end":243281,"line_start":605,"line_end":605,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(byte_record.len(), 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243286,"byte_end":243323,"line_start":606,"line_end":606,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243328,"byte_end":243335,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":243340,"byte_end":243349,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1662},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":246496,"byte_end":246512,"line_start":711,"line_end":711,"column_start":12,"column_end":28},"name":"StringRecordIter","qualname":"::string_record::StringRecordIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the fields in a string record.","sig":null,"attributes":[{"value":"/ An iterator over the fields in a string record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":246303,"byte_end":246354,"line_start":706,"line_end":706,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":246355,"byte_end":246358,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ The `'r` lifetime variable refers to the lifetime of the `StringRecord`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":246359,"byte_end":246434,"line_start":708,"line_end":708,"column_start":1,"column_end":76}},{"value":"/ that is being iterated over.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":246435,"byte_end":246467,"line_start":709,"line_end":709,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":1272},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/tutorial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tutorial","qualname":"::tutorial","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/tutorial.rs","parent":null,"children":[],"decl_id":null,"docs":"A tutorial for handling CSV data in Rust.","sig":null,"attributes":[{"value":"*\nA tutorial for handling CSV data in Rust.\n\nThis tutorial will cover basic CSV reading and writing, automatic\n(de)serialization with Serde, CSV transformations and performance.\n\nThis tutorial is targeted at beginner Rust programmers. Experienced Rust\nprogrammers may find this tutorial to be too verbose, but skimming may be\nuseful. There is also a\n[cookbook](../cookbook/index.html)\nof examples for those that prefer more information density.\n\nFor an introduction to Rust, please see the\n[official book](https://doc.rust-lang.org/book/second-edition/).\nIf you haven't written any Rust code yet but have written code in another\nlanguage, then this tutorial might be accessible to you without needing to read\nthe book first.\n\n# Table of contents\n\n1. [Setup](#setup)\n1. [Basic error handling](#basic-error-handling)\n    * [Switch to recoverable errors](#switch-to-recoverable-errors)\n1. [Reading CSV](#reading-csv)\n    * [Reading headers](#reading-headers)\n    * [Delimiters, quotes and variable length records](#delimiters-quotes-and-variable-length-records)\n    * [Reading with Serde](#reading-with-serde)\n    * [Handling invalid data with Serde](#handling-invalid-data-with-serde)\n1. [Writing CSV](#writing-csv)\n    * [Writing tab separated values](#writing-tab-separated-values)\n    * [Writing with Serde](#writing-with-serde)\n1. [Pipelining](#pipelining)\n    * [Filter by search](#filter-by-search)\n    * [Filter by population count](#filter-by-population-count)\n1. [Performance](#performance)\n    * [Amortizing allocations](#amortizing-allocations)\n    * [Serde and zero allocation](#serde-and-zero-allocation)\n    * [CSV parsing without the standard library](#csv-parsing-without-the-standard-library)\n1. [Closing thoughts](#closing-thoughts)\n\n# Setup\n\nIn this section, we'll get you setup with a simple program that reads CSV data\nand prints a \"debug\" version of each record. This assumes that you have the\n[Rust toolchain installed](https://www.rust-lang.org/install.html),\nwhich includes both Rust and Cargo.\n\nWe'll start by creating a new Cargo project:\n\n```text\n$ cargo new --bin csvtutor\n$ cd csvtutor\n```\n\nOnce inside `csvtutor`, open `Cargo.toml` in your favorite text editor and add\n`csv = \"1.1\"` to your `[dependencies]` section. At this point, your\n`Cargo.toml` should look something like this:\n\n```text\n[package]\nname = \"csvtutor\"\nversion = \"0.1.0\"\nauthors = [\"Your Name\"]\n\n[dependencies]\ncsv = \"1.1\"\n```\n\nNext, let's build your project. Since you added the `csv` crate as a\ndependency, Cargo will automatically download it and compile it for you. To\nbuild your project, use Cargo:\n\n```text\n$ cargo build\n```\n\nThis will produce a new binary, `csvtutor`, in your `target/debug` directory.\nIt won't do much at this point, but you can run it:\n\n```text\n$ ./target/debug/csvtutor\nHello, world!\n```\n\nLet's make our program do something useful. Our program will read CSV data on\nstdin and print debug output for each record on stdout. To write this program,\nopen `src/main.rs` in your favorite text editor and replace its contents with\nthis:\n\n```no_run\n//tutorial-setup-01.rs\n// Import the standard library's I/O module so we can read from stdin.\nuse std::io;\n\n// The `main` function is where your program starts executing.\nfn main() {\n    // Create a CSV parser that reads data from stdin.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    // Loop over each record.\n    for result in rdr.records() {\n        // An error may occur, so abort the program in an unfriendly way.\n        // We will make this more friendly later!\n        let record = result.expect(\"a CSV record\");\n        // Print a debug version of the record.\n        println!(\"{:?}\", record);\n    }\n}\n```\n\nDon't worry too much about what this code means; we'll dissect it in the next\nsection. For now, try rebuilding your project:\n\n```text\n$ cargo build\n```\n\nAssuming that succeeds, let's try running our program. But first, we will need\nsome CSV data to play with! For that, we will use a random selection of 100\nUS cities, along with their population size and geographical coordinates. (We\nwill use this same CSV data throughout the entire tutorial.) To get the data,\ndownload it from github:\n\n```text\n$ curl -LO 'https://raw.githubusercontent.com/BurntSushi/rust-csv/master/examples/data/uspop.csv'\n```\n\nAnd now finally, run your program on `uspop.csv`:\n\n```text\n$ ./target/debug/csvtutor < uspop.csv\nStringRecord([\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])\nStringRecord([\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])\nStringRecord([\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])\n# ... and much more\n```\n\n# Basic error handling\n\nSince reading CSV data can result in errors, error handling is pervasive\nthroughout the examples in this tutorial. Therefore, we're going to spend a\nlittle bit of time going over basic error handling, and in particular, fix\nour previous example to show errors in a more friendly way. **If you're already\ncomfortable with things like `Result` and `try!`/`?` in Rust, then you can\nsafely skip this section.**\n\nNote that\n[The Rust Programming Language Book](https://doc.rust-lang.org/book/second-edition/)\ncontains an\n[introduction to general error handling](https://doc.rust-lang.org/book/second-edition/ch09-00-error-handling.html).\nFor a deeper dive, see\n[my blog post on error handling in Rust](http://blog.burntsushi.net/rust-error-handling/).\nThe blog post is especially important if you plan on building Rust libraries.\n\nWith that out of the way, error handling in Rust comes in two different forms:\nunrecoverable errors and recoverable errors.\n\nUnrecoverable errors generally correspond to things like bugs in your program,\nwhich might occur when an invariant or contract is broken. At that point, the\nstate of your program is unpredictable, and there's typically little recourse\nother than *panicking*. In Rust, a panic is similar to simply aborting your\nprogram, but it will unwind the stack and clean up resources before your\nprogram exits.\n\nOn the other hand, recoverable errors generally correspond to predictable\nerrors. A non-existent file or invalid CSV data are examples of recoverable\nerrors. In Rust, recoverable errors are handled via `Result`. A `Result`\nrepresents the state of a computation that has either succeeded or failed.\nIt is defined like so:\n\n```\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\nThat is, a `Result` either contains a value of type `T` when the computation\nsucceeds, or it contains a value of type `E` when the computation fails.\n\nThe relationship between unrecoverable errors and recoverable errors is\nimportant. In particular, it is **strongly discouraged** to treat recoverable\nerrors as if they were unrecoverable. For example, panicking when a file could\nnot be found, or if some CSV data is invalid, is considered bad practice.\nInstead, predictable errors should be handled using Rust's `Result` type.\n\nWith our new found knowledge, let's re-examine our previous example and dissect\nits error handling.\n\n```no_run\n//tutorial-error-01.rs\nuse std::io;\n\nfn main() {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result.expect(\"a CSV record\");\n        println!(\"{:?}\", record);\n    }\n}\n```\n\nThere are two places where an error can occur in this program. The first is\nif there was a problem reading a record from stdin. The second is if there is\na problem writing to stdout. In general, we will ignore the latter problem in\nthis tutorial, although robust command line applications should probably try\nto handle it (e.g., when a broken pipe occurs). The former however is worth\nlooking into in more detail. For example, if a user of this program provides\ninvalid CSV data, then the program will panic:\n\n```text\n$ cat invalid\nheader1,header2\nfoo,bar\nquux,baz,foobar\n$ ./target/debug/csvtutor < invalid\nStringRecord { position: Some(Position { byte: 16, line: 2, record: 1 }), fields: [\"foo\", \"bar\"] }\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: UnequalLengths { pos: Some(Position { byte: 24, line: 3, record: 2 }), expected_len: 2, len: 3 }', /checkout/src/libcore/result.rs:859\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n```\n\nWhat happened here? First and foremost, we should talk about why the CSV data\nis invalid. The CSV data consists of three records: a header and two data\nrecords. The header and first data record have two fields, but the second\ndata record has three fields. By default, the csv crate will treat inconsistent\nrecord lengths as an error.\n(This behavior can be toggled using the\n[`ReaderBuilder::flexible`](../struct.ReaderBuilder.html#method.flexible)\nconfig knob.) This explains why the first data record is printed in this\nexample, since it has the same number of fields as the header record. That is,\nwe don't actually hit an error until we parse the second data record.\n\n(Note that the CSV reader automatically interprets the first record as a\nheader. This can be toggled with the\n[`ReaderBuilder::has_headers`](../struct.ReaderBuilder.html#method.has_headers)\nconfig knob.)\n\nSo what actually causes the panic to happen in our program? That would be the\nfirst line in our loop:\n\n```ignore\nfor result in rdr.records() {\n    let record = result.expect(\"a CSV record\"); // this panics\n    println!(\"{:?}\", record);\n}\n```\n\nThe key thing to understand here is that `rdr.records()` returns an iterator\nthat yields `Result` values. That is, instead of yielding records, it yields\na `Result` that contains either a record or an error. The `expect` method,\nwhich is defined on `Result`, *unwraps* the success value inside the `Result`.\nSince the `Result` might contain an error instead, `expect` will *panic* when\nit does contain an error.\n\nIt might help to look at the implementation of `expect`:\n\n```ignore\nuse std::fmt;\n\n// This says, \"for all types T and E, where E can be turned into a human\n// readable debug message, define the `expect` method.\"\nimpl<T, E: fmt::Debug> Result<T, E> {\n    fn expect(self, msg: &str) -> T {\n        match self {\n            Ok(t) => t,\n            Err(e) => panic!(\"{}: {:?}\", msg, e),\n        }\n    }\n}\n```\n\nSince this causes a panic if the CSV data is invalid, and invalid CSV data is\na perfectly predictable error, we've turned what should be a *recoverable*\nerror into an *unrecoverable* error. We did this because it is expedient to\nuse unrecoverable errors. Since this is bad practice, we will endeavor to avoid\nunrecoverable errors throughout the rest of the tutorial.\n\n## Switch to recoverable errors\n\nWe'll convert our unrecoverable error to a recoverable error in 3 steps. First,\nlet's get rid of the panic and print an error message manually:\n\n```no_run\n//tutorial-error-02.rs\nuse std::io;\nuse std::process;\n\nfn main() {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // Examine our Result.\n        // If there was no problem, print the record.\n        // Otherwise, print the error message and quit the program.\n        match result {\n            Ok(record) => println!(\"{:?}\", record),\n            Err(err) => {\n                println!(\"error reading CSV from <stdin>: {}\", err);\n                process::exit(1);\n            }\n        }\n    }\n}\n```\n\nIf we run our program again, we'll still see an error message, but it is no\nlonger a panic message:\n\n```text\n$ cat invalid\nheader1,header2\nfoo,bar\nquux,baz,foobar\n$ ./target/debug/csvtutor < invalid\nStringRecord { position: Some(Position { byte: 16, line: 2, record: 1 }), fields: [\"foo\", \"bar\"] }\nerror reading CSV from <stdin>: CSV error: record 2 (line: 3, byte: 24): found record with 3 fields, but the previous record has 2 fields\n```\n\nThe second step for moving to recoverable errors is to put our CSV record loop\ninto a separate function. This function then has the option of *returning* an\nerror, which our `main` function can then inspect and decide what to do with.\n\n```no_run\n//tutorial-error-03.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // Examine our Result.\n        // If there was no problem, print the record.\n        // Otherwise, convert our error to a Box<dyn Error> and return it.\n        match result {\n            Err(err) => return Err(From::from(err)),\n            Ok(record) => {\n              println!(\"{:?}\", record);\n            }\n        }\n    }\n    Ok(())\n}\n```\n\nOur new function, `run`, has a return type of `Result<(), Box<dyn Error>>`. In\nsimple terms, this says that `run` either returns nothing when successful, or\nif an error occurred, it returns a `Box<dyn Error>`, which stands for \"any kind of\nerror.\" A `Box<dyn Error>` is hard to inspect if we cared about the specific error\nthat occurred. But for our purposes, all we need to do is gracefully print an\nerror message and exit the program.\n\nThe third and final step is to replace our explicit `match` expression with a\nspecial Rust language feature: the question mark.\n\n```no_run\n//tutorial-error-04.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // This is effectively the same code as our `match` in the\n        // previous example. In other words, `?` is syntactic sugar.\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n```\n\nThis last step shows how we can use the `?` to automatically forward errors\nto our caller without having to do explicit case analysis with `match`\nourselves. We will use the `?` heavily throughout this tutorial, and it's\nimportant to note that it can **only be used in functions that return\n`Result`.**\n\nWe'll end this section with a word of caution: using `Box<dyn Error>` as our error\ntype is the minimally acceptable thing we can do here. Namely, while it allows\nour program to gracefully handle errors, it makes it hard for callers to\ninspect the specific error condition that occurred. However, since this is a\ntutorial on writing command line programs that do CSV parsing, we will consider\nourselves satisfied. If you'd like to know more, or are interested in writing\na library that handles CSV data, then you should check out my\n[blog post on error handling](http://blog.burntsushi.net/rust-error-handling/).\n\nWith all that said, if all you're doing is writing a one-off program to do\nCSV transformations, then using methods like `expect` and panicking when an\nerror occurs is a perfectly reasonable thing to do. Nevertheless, this tutorial\nwill endeavor to show idiomatic code.\n\n# Reading CSV\n\nNow that we've got you setup and covered basic error handling, it's time to do\nwhat we came here to do: handle CSV data. We've already seen how to read\nCSV data from `stdin`, but this section will cover how to read CSV data from\nfiles and how to configure our CSV reader to data formatted with different\ndelimiters and quoting strategies.\n\nFirst up, let's adapt the example we've been working with to accept a file\npath argument instead of stdin.\n\n```no_run\n//tutorial-read-01.rs\nuse std::env;\nuse std::error::Error;\nuse std::ffi::OsString;\nuse std::fs::File;\nuse std::process;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let file_path = get_first_arg()?;\n    let file = File::open(file_path)?;\n    let mut rdr = csv::Reader::from_reader(file);\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\n/// Returns the first positional argument sent to this process. If there are no\n/// positional arguments, then this returns an error.\nfn get_first_arg() -> Result<OsString, Box<dyn Error>> {\n    match env::args_os().nth(1) {\n        None => Err(From::from(\"expected 1 argument, but got none\")),\n        Some(file_path) => Ok(file_path),\n    }\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nIf you replace the contents of your `src/main.rs` file with the above code,\nthen you should be able to rebuild your project and try it out:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor uspop.csv\nStringRecord([\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])\nStringRecord([\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])\nStringRecord([\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])\n# ... and much more\n```\n\nThis example contains two new pieces of code:\n\n1. Code for querying the positional arguments of your program. We put this code\n   into its own function called `get_first_arg`. Our program expects a file\n   path in the first position (which is indexed at `1`; the argument at index\n   `0` is the executable name), so if one doesn't exist, then `get_first_arg`\n   returns an error.\n2. Code for opening a file. In `run`, we open a file using `File::open`. If\n   there was a problem opening the file, we forward the error to the caller of\n   `run` (which is `main` in this program). Note that we do *not* wrap the\n   `File` in a buffer. The CSV reader does buffering internally, so there's\n   no need for the caller to do it.\n\nNow is a good time to introduce an alternate CSV reader constructor, which\nmakes it slightly more convenient to open CSV data from a file. That is,\ninstead of:\n\n```ignore\nlet file_path = get_first_arg()?;\nlet file = File::open(file_path)?;\nlet mut rdr = csv::Reader::from_reader(file);\n```\n\nyou can use:\n\n```ignore\nlet file_path = get_first_arg()?;\nlet mut rdr = csv::Reader::from_path(file_path)?;\n```\n\n`csv::Reader::from_path` will open the file for you and return an error if\nthe file could not be opened.\n\n## Reading headers\n\nIf you had a chance to look at the data inside `uspop.csv`, you would notice\nthat there is a header record that looks like this:\n\n```text\nCity,State,Population,Latitude,Longitude\n```\n\nNow, if you look back at the output of the commands you've run so far, you'll\nnotice that the header record is never printed. Why is that? By default, the\nCSV reader will interpret the first record in CSV data as a header, which\nis typically distinct from the actual data in the records that follow.\nTherefore, the header record is always skipped whenever you try to read or\niterate over the records in CSV data.\n\nThe CSV reader does not try to be smart about the header record and does\n**not** employ any heuristics for automatically detecting whether the first\nrecord is a header or not. Instead, if you don't want to treat the first record\nas a header, you'll need to tell the CSV reader that there are no headers.\n\nTo configure a CSV reader to do this, we'll need to use a\n[`ReaderBuilder`](../struct.ReaderBuilder.html)\nto build a CSV reader with our desired configuration. Here's an example that\ndoes just that. (Note that we've moved back to reading from `stdin`, since it\nproduces terser examples.)\n\n```no_run\n//tutorial-read-headers-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::ReaderBuilder::new()\n        .has_headers(false)\n        .from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nIf you compile and run this program with our `uspop.csv` data, then you'll see\nthat the header record is now printed:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop.csv\nStringRecord([\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])\nStringRecord([\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])\nStringRecord([\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])\nStringRecord([\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])\n```\n\nIf you ever need to access the header record directly, then you can use the\n[`Reader::header`](../struct.Reader.html#method.headers)\nmethod like so:\n\n```no_run\n//tutorial-read-headers-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    {\n        // We nest this call in its own scope because of lifetimes.\n        let headers = rdr.headers()?;\n        println!(\"{:?}\", headers);\n    }\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    // We can ask for the headers at any time. There's no need to nest this\n    // call in its own scope because we never try to borrow the reader again.\n    let headers = rdr.headers()?;\n    println!(\"{:?}\", headers);\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nOne interesting thing to note in this example is that we put the call to\n`rdr.headers()` in its own scope. We do this because `rdr.headers()` returns\na *borrow* of the reader's internal header state. The nested scope in this\ncode allows the borrow to end before we try to iterate over the records. If\nwe didn't nest the call to `rdr.headers()` in its own scope, then the code\nwouldn't compile because we cannot borrow the reader's headers at the same time\nthat we try to borrow the reader to iterate over its records.\n\nAnother way of solving this problem is to *clone* the header record:\n\n```ignore\nlet headers = rdr.headers()?.clone();\n```\n\nThis converts it from a borrow of the CSV reader to a new owned value. This\nmakes the code a bit easier to read, but at the cost of copying the header\nrecord into a new allocation.\n\n## Delimiters, quotes and variable length records\n\nIn this section we'll temporarily depart from our `uspop.csv` data set and\nshow how to read some CSV data that is a little less clean. This CSV data\nuses `;` as a delimiter, escapes quotes with `\\\"` (instead of `\"\"`) and has\nrecords of varying length. Here's the data, which contains a list of WWE\nwrestlers and the year they started, if it's known:\n\n```text\n$ cat strange.csv\n\"\\\"Hacksaw\\\" Jim Duggan\";1987\n\"Bret \\\"Hit Man\\\" Hart\";1984\n# We're not sure when Rafael started, so omit the year.\nRafael Halperin\n\"\\\"Big Cat\\\" Ernie Ladd\";1964\n\"\\\"Macho Man\\\" Randy Savage\";1985\n\"Jake \\\"The Snake\\\" Roberts\";1986\n```\n\nTo read this CSV data, we'll want to do the following:\n\n1. Disable headers, since this data has none.\n2. Change the delimiter from `,` to `;`.\n3. Change the quote strategy from doubled (e.g., `\"\"`) to escaped (e.g., `\\\"`).\n4. Permit flexible length records, since some omit the year.\n5. Ignore lines beginning with a `#`.\n\nAll of this (and more!) can be configured with a\n[`ReaderBuilder`](../struct.ReaderBuilder.html),\nas seen in the following example:\n\n```no_run\n//tutorial-read-delimiter-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::ReaderBuilder::new()\n        .has_headers(false)\n        .delimiter(b';')\n        .double_quote(false)\n        .escape(Some(b'\\\\'))\n        .flexible(true)\n        .comment(Some(b'#'))\n        .from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nNow re-compile your project and try running the program on `strange.csv`:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < strange.csv\nStringRecord([\"\\\"Hacksaw\\\" Jim Duggan\", \"1987\"])\nStringRecord([\"Bret \\\"Hit Man\\\" Hart\", \"1984\"])\nStringRecord([\"Rafael Halperin\"])\nStringRecord([\"\\\"Big Cat\\\" Ernie Ladd\", \"1964\"])\nStringRecord([\"\\\"Macho Man\\\" Randy Savage\", \"1985\"])\nStringRecord([\"Jake \\\"The Snake\\\" Roberts\", \"1986\"])\n```\n\nYou should feel encouraged to play around with the settings. Some interesting\nthings you might try:\n\n1. If you remove the `escape` setting, notice that no CSV errors are reported.\n   Instead, records are still parsed. This is a feature of the CSV parser. Even\n   though it gets the data slightly wrong, it still provides a parse that you\n   might be able to work with. This is a useful property given the messiness\n   of real world CSV data.\n2. If you remove the `delimiter` setting, parsing still succeeds, although\n   every record has exactly one field.\n3. If you remove the `flexible` setting, the reader will print the first two\n   records (since they both have the same number of fields), but will return a\n   parse error on the third record, since it has only one field.\n\nThis covers most of the things you might want to configure on your CSV reader,\nalthough there are a few other knobs. For example, you can change the record\nterminator from a new line to any other character. (By default, the terminator\nis `CRLF`, which treats each of `\\r\\n`, `\\r` and `\\n` as single record\nterminators.) For more details, see the documentation and examples for each of\nthe methods on\n[`ReaderBuilder`](../struct.ReaderBuilder.html).\n\n## Reading with Serde\n\nOne of the most convenient features of this crate is its support for\n[Serde](https://serde.rs/).\nSerde is a framework for automatically serializing and deserializing data into\nRust types. In simpler terms, that means instead of iterating over records\nas an array of string fields, we can iterate over records of a specific type\nof our choosing.\n\nFor example, let's take a look at some data from our `uspop.csv` file:\n\n```text\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\n```\n\nWhile some of these fields make sense as strings (`City`, `State`), other\nfields look more like numbers. For example, `Population` looks like it contains\nintegers while `Latitude` and `Longitude` appear to contain decimals. If we\nwanted to convert these fields to their \"proper\" types, then we need to do\na lot of manual work. This next example shows how.\n\n```no_run\n//tutorial-read-serde-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n\n        let city = &record[0];\n        let state = &record[1];\n        // Some records are missing population counts, so if we can't\n        // parse a number, treat the population count as missing instead\n        // of returning an error.\n        let pop: Option<u64> = record[2].parse().ok();\n        // Lucky us! Latitudes and longitudes are available for every record.\n        // Therefore, if one couldn't be parsed, return an error.\n        let latitude: f64 = record[3].parse()?;\n        let longitude: f64 = record[4].parse()?;\n\n        println!(\n            \"city: {:?}, state: {:?}, \\\n             pop: {:?}, latitude: {:?}, longitude: {:?}\",\n            city, state, pop, latitude, longitude);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nThe problem here is that we need to parse each individual field manually, which\ncan be labor intensive and repetitive. Serde, however, makes this process\nautomatic. For example, we can ask to deserialize every record into a tuple\ntype: `(String, String, Option<u64>, f64, f64)`.\n\n```no_run\n//tutorial-read-serde-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n// This introduces a type alias so that we can conveniently reference our\n// record type.\ntype Record = (String, String, Option<u64>, f64, f64);\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    // Instead of creating an iterator with the `records` method, we create\n    // an iterator with the `deserialize` method.\n    for result in rdr.deserialize() {\n        // We must tell Serde what type we want to deserialize into.\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nRunning this code should show similar output as previous examples:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop.csv\n(\"Davidsons Landing\", \"AK\", None, 65.2419444, -165.2716667)\n(\"Kenai\", \"AK\", Some(7610), 60.5544444, -151.2583333)\n(\"Oakman\", \"AL\", None, 33.7133333, -87.3886111)\n# ... and much more\n```\n\nOne of the downsides of using Serde this way is that the type you use must\nmatch the order of fields as they appear in each record. This can be a pain\nif your CSV data has a header record, since you might tend to think about each\nfield as a value of a particular named field rather than as a numbered field.\nOne way we might achieve this is to deserialize our record into a map type like\n[`HashMap`](https://doc.rust-lang.org/std/collections/struct.HashMap.html)\nor\n[`BTreeMap`](https://doc.rust-lang.org/std/collections/struct.BTreeMap.html).\nThe next example shows how, and in particular, notice that the only thing that\nchanged from the last example is the definition of the `Record` type alias and\na new `use` statement that imports `HashMap` from the standard library:\n\n```no_run\n//tutorial-read-serde-03.rs\nuse std::collections::HashMap;\n# use std::error::Error;\n# use std::io;\n# use std::process;\n\n// This introduces a type alias so that we can conveniently reference our\n// record type.\ntype Record = HashMap<String, String>;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nRunning this program shows similar results as before, but each record is\nprinted as a map:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop.csv\n{\"City\": \"Davidsons Landing\", \"Latitude\": \"65.2419444\", \"State\": \"AK\", \"Population\": \"\", \"Longitude\": \"-165.2716667\"}\n{\"City\": \"Kenai\", \"Population\": \"7610\", \"State\": \"AK\", \"Longitude\": \"-151.2583333\", \"Latitude\": \"60.5544444\"}\n{\"State\": \"AL\", \"City\": \"Oakman\", \"Longitude\": \"-87.3886111\", \"Population\": \"\", \"Latitude\": \"33.7133333\"}\n```\n\nThis method works especially well if you need to read CSV data with header\nrecords, but whose exact structure isn't known until your program runs.\nHowever, in our case, we know the structure of the data in `uspop.csv`. In\nparticular, with the `HashMap` approach, we've lost the specific types we had\nfor each field in the previous example when we deserialized each record into a\n`(String, String, Option<u64>, f64, f64)`. Is there a way to identify fields\nby their corresponding header name *and* assign each field its own unique\ntype? The answer is yes, but we'll need to bring in Serde's `derive` feature\nfirst. You can do that by adding this to the `[dependencies]` section of your\n`Cargo.toml` file:\n\n```text\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\nWith these crates added to our project, we can now define our own custom struct\nthat represents our record. We then ask Serde to automatically write the glue\ncode required to populate our struct from a CSV record. The next example shows\nhow. Don't miss the new Serde imports!\n\n```no_run\n//tutorial-read-serde-04.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\n// This lets us write `#[derive(Deserialize)]`.\nuse serde::Deserialize;\n\n// We don't need to derive `Debug` (which doesn't require Serde), but it's a\n// good habit to do it for all your types.\n//\n// Notice that the field names in this struct are NOT in the same order as\n// the fields in the CSV data!\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    latitude: f64,\n    longitude: f64,\n    population: Option<u64>,\n    city: String,\n    state: String,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n        // Try this if you don't like each record smushed on one line:\n        // println!(\"{:#?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nCompile and run this program to see similar output as before:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop.csv\nRecord { latitude: 65.2419444, longitude: -165.2716667, population: None, city: \"Davidsons Landing\", state: \"AK\" }\nRecord { latitude: 60.5544444, longitude: -151.2583333, population: Some(7610), city: \"Kenai\", state: \"AK\" }\nRecord { latitude: 33.7133333, longitude: -87.3886111, population: None, city: \"Oakman\", state: \"AL\" }\n```\n\nOnce again, we didn't need to change our `run` function at all: we're still\niterating over records using the `deserialize` iterator that we started with\nin the beginning of this section. The only thing that changed in this example\nwas the definition of the `Record` type and a new `use` statement. Our `Record`\ntype is now a custom struct that we defined instead of a type alias, and as a\nresult, Serde doesn't know how to deserialize it by default. However, a special\ncompiler plugin provided by Serde is available, which will read your struct\ndefinition at compile time and generate code that will deserialize a CSV record\ninto a `Record` value. To see what happens if you leave out the automatic\nderive, change `#[derive(Debug, Deserialize)]` to `#[derive(Debug)]`.\n\nOne other thing worth mentioning in this example is the use of\n`#[serde(rename_all = \"PascalCase\")]`. This directive helps Serde map your\nstruct's field names to the header names in the CSV data. If you recall, our\nheader record is:\n\n```text\nCity,State,Population,Latitude,Longitude\n```\n\nNotice that each name is capitalized, but the fields in our struct are not. The\n`#[serde(rename_all = \"PascalCase\")]` directive fixes that by interpreting each\nfield in `PascalCase`, where the first letter of the field is capitalized. If\nwe didn't tell Serde about the name remapping, then the program will quit with\nan error:\n\n```text\n$ ./target/debug/csvtutor < uspop.csv\nCSV deserialize error: record 1 (line: 2, byte: 41): missing field `latitude`\n```\n\nWe could have fixed this through other means. For example, we could have used\ncapital letters in our field names:\n\n```ignore\n#[derive(Debug, Deserialize)]\nstruct Record {\n    Latitude: f64,\n    Longitude: f64,\n    Population: Option<u64>,\n    City: String,\n    State: String,\n}\n```\n\nHowever, this violates Rust naming style. (In fact, the Rust compiler\nwill even warn you that the names do not follow convention!)\n\nAnother way to fix this is to ask Serde to rename each field individually. This\nis useful when there is no consistent name mapping from fields to header names:\n\n```ignore\n#[derive(Debug, Deserialize)]\nstruct Record {\n    #[serde(rename = \"Latitude\")]\n    latitude: f64,\n    #[serde(rename = \"Longitude\")]\n    longitude: f64,\n    #[serde(rename = \"Population\")]\n    population: Option<u64>,\n    #[serde(rename = \"City\")]\n    city: String,\n    #[serde(rename = \"State\")]\n    state: String,\n}\n```\n\nTo read more about renaming fields and about other Serde directives, please\nconsult the\n[Serde documentation on attributes](https://serde.rs/attributes.html).\n\n## Handling invalid data with Serde\n\nIn this section we will see a brief example of how to deal with data that isn't\nclean. To do this exercise, we'll work with a slightly tweaked version of the\nUS population data we've been using throughout this tutorial. This version of\nthe data is slightly messier than what we've been using. You can get it like\nso:\n\n```text\n$ curl -LO 'https://raw.githubusercontent.com/BurntSushi/rust-csv/master/examples/data/uspop-null.csv'\n```\n\nLet's start by running our program from the previous section:\n\n```no_run\n//tutorial-read-serde-invalid-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n# use serde::Deserialize;\n#\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    latitude: f64,\n    longitude: f64,\n    population: Option<u64>,\n    city: String,\n    state: String,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nCompile and run it on our messier data:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop-null.csv\nRecord { latitude: 65.2419444, longitude: -165.2716667, population: None, city: \"Davidsons Landing\", state: \"AK\" }\nRecord { latitude: 60.5544444, longitude: -151.2583333, population: Some(7610), city: \"Kenai\", state: \"AK\" }\nRecord { latitude: 33.7133333, longitude: -87.3886111, population: None, city: \"Oakman\", state: \"AL\" }\n# ... more records\nCSV deserialize error: record 42 (line: 43, byte: 1710): field 2: invalid digit found in string\n```\n\nOops! What happened? The program printed several records, but stopped when it\ntripped over a deserialization problem. The error message says that it found\nan invalid digit in the field at index `2` (which is the `Population` field)\non line 43. What does line 43 look like?\n\n```text\n$ head -n 43 uspop-null.csv | tail -n1\nFlint Springs,KY,NULL,37.3433333,-86.7136111\n```\n\nAh! The third field (index `2`) is supposed to either be empty or contain a\npopulation count. However, in this data, it seems that `NULL` sometimes appears\nas a value, presumably to indicate that there is no count available.\n\nThe problem with our current program is that it fails to read this record\nbecause it doesn't know how to deserialize a `NULL` string into an\n`Option<u64>`. That is, a `Option<u64>` either corresponds to an empty field\nor an integer.\n\nTo fix this, we tell Serde to convert any deserialization errors on this field\nto a `None` value, as shown in this next example:\n\n```no_run\n//tutorial-read-serde-invalid-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n# use serde::Deserialize;\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    latitude: f64,\n    longitude: f64,\n    #[serde(deserialize_with = \"csv::invalid_option\")]\n    population: Option<u64>,\n    city: String,\n    state: String,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nIf you compile and run this example, then it should run to completion just\nlike the other examples:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop-null.csv\nRecord { latitude: 65.2419444, longitude: -165.2716667, population: None, city: \"Davidsons Landing\", state: \"AK\" }\nRecord { latitude: 60.5544444, longitude: -151.2583333, population: Some(7610), city: \"Kenai\", state: \"AK\" }\nRecord { latitude: 33.7133333, longitude: -87.3886111, population: None, city: \"Oakman\", state: \"AL\" }\n# ... and more\n```\n\nThe only change in this example was adding this attribute to the `population`\nfield in our `Record` type:\n\n```ignore\n#[serde(deserialize_with = \"csv::invalid_option\")]\n```\n\nThe\n[`invalid_option`](../fn.invalid_option.html)\nfunction is a generic helper function that does one very simple thing: when\napplied to `Option` fields, it will convert any deserialization error into a\n`None` value. This is useful when you need to work with messy CSV data.\n\n# Writing CSV\n\nIn this section we'll show a few examples that write CSV data. Writing CSV data\ntends to be a bit more straight-forward than reading CSV data, since you get to\ncontrol the output format.\n\nLet's start with the most basic example: writing a few CSV records to `stdout`.\n\n```no_run\n//tutorial-write-01.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n    // Since we're writing records manually, we must explicitly write our\n    // header record. A header record is written the same way that other\n    // records are written.\n    wtr.write_record(&[\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])?;\n    wtr.write_record(&[\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])?;\n    wtr.write_record(&[\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])?;\n    wtr.write_record(&[\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])?;\n\n    // A CSV writer maintains an internal buffer, so it's important\n    // to flush the buffer when you're done.\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nCompiling and running this example results in CSV data being printed:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\nOakman,AL,,33.7133333,-87.3886111\n```\n\nBefore moving on, it's worth taking a closer look at the `write_record`\nmethod. In this example, it looks rather simple, but if you're new to Rust then\nits type signature might look a little daunting:\n\n```ignore\npub fn write_record<I, T>(&mut self, record: I) -> csv::Result<()>\n    where I: IntoIterator<Item=T>, T: AsRef<[u8]>\n{\n    // implementation elided\n}\n```\n\nTo understand the type signature, we can break it down piece by piece.\n\n1. The method takes two parameters: `self` and `record`.\n2. `self` is a special parameter that corresponds to the `Writer` itself.\n3. `record` is the CSV record we'd like to write. Its type is `I`, which is\n   a generic type.\n4. In the method's `where` clause, the `I` type is constrained by the\n   `IntoIterator<Item=T>` bound. What that means is that `I` must satisfy the\n   `IntoIterator` trait. If you look at the documentation of the\n   [`IntoIterator` trait](https://doc.rust-lang.org/std/iter/trait.IntoIterator.html),\n   then we can see that it describes types that can build iterators. In this\n   case, we want an iterator that yields *another* generic type `T`, where\n   `T` is the type of each field we want to write.\n5. `T` also appears in the method's `where` clause, but its constraint is the\n   `AsRef<[u8]>` bound. The `AsRef` trait is a way to describe zero cost\n   conversions between types in Rust. In this case, the `[u8]` in `AsRef<[u8]>`\n   means that we want to be able to *borrow* a slice of bytes from `T`.\n   The CSV writer will take these bytes and write them as a single field.\n   The `AsRef<[u8]>` bound is useful because types like `String`, `&str`,\n   `Vec<u8>` and `&[u8]` all satisfy it.\n6. Finally, the method returns a `csv::Result<()>`, which is short-hand for\n   `Result<(), csv::Error>`. That means `write_record` either returns nothing\n   on success or returns a `csv::Error` on failure.\n\nNow, let's apply our new found understanding of the type signature of\n`write_record`. If you recall, in our previous example, we used it like so:\n\n```ignore\nwtr.write_record(&[\"field 1\", \"field 2\", \"etc\"])?;\n```\n\nSo how do the types match up? Well, the type of each of our fields in this\ncode is `&'static str` (which is the type of a string literal in Rust). Since\nwe put them in a slice literal, the type of our parameter is\n`&'static [&'static str]`, or more succinctly written as `&[&str]` without the\nlifetime annotations. Since slices satisfy the `IntoIterator` bound and\nstrings satisfy the `AsRef<[u8]>` bound, this ends up being a legal call.\n\nHere are a few more examples of ways you can call `write_record`:\n\n```no_run\n# use csv;\n# let mut wtr = csv::Writer::from_writer(vec![]);\n// A slice of byte strings.\nwtr.write_record(&[b\"a\", b\"b\", b\"c\"]);\n// A vector.\nwtr.write_record(vec![\"a\", \"b\", \"c\"]);\n// A string record.\nwtr.write_record(&csv::StringRecord::from(vec![\"a\", \"b\", \"c\"]));\n// A byte record.\nwtr.write_record(&csv::ByteRecord::from(vec![\"a\", \"b\", \"c\"]));\n```\n\nFinally, the example above can be easily adapted to write to a file instead\nof `stdout`:\n\n```no_run\n//tutorial-write-02.rs\nuse std::env;\nuse std::error::Error;\nuse std::ffi::OsString;\nuse std::process;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let file_path = get_first_arg()?;\n    let mut wtr = csv::Writer::from_path(file_path)?;\n\n    wtr.write_record(&[\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])?;\n    wtr.write_record(&[\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])?;\n    wtr.write_record(&[\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])?;\n    wtr.write_record(&[\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])?;\n\n    wtr.flush()?;\n    Ok(())\n}\n\n/// Returns the first positional argument sent to this process. If there are no\n/// positional arguments, then this returns an error.\nfn get_first_arg() -> Result<OsString, Box<dyn Error>> {\n    match env::args_os().nth(1) {\n        None => Err(From::from(\"expected 1 argument, but got none\")),\n        Some(file_path) => Ok(file_path),\n    }\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\n## Writing tab separated values\n\nIn the previous section, we saw how to write some simple CSV data to `stdout`\nthat looked like this:\n\n```text\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\nOakman,AL,,33.7133333,-87.3886111\n```\n\nYou might wonder to yourself: what's the point of using a CSV writer if the\ndata is so simple? Well, the benefit of a CSV writer is that it can handle all\ntypes of data without sacrificing the integrity of your data. That is, it knows\nwhen to quote fields that contain special CSV characters (like commas or new\nlines) or escape literal quotes that appear in your data. The CSV writer can\nalso be easily configured to use different delimiters or quoting strategies.\n\nIn this section, we'll take a look a look at how to tweak some of the settings\non a CSV writer. In particular, we'll write TSV (\"tab separated values\")\ninstead of CSV, and we'll ask the CSV writer to quote all non-numeric fields.\nHere's an example:\n\n```no_run\n//tutorial-write-delimiter-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::WriterBuilder::new()\n        .delimiter(b'\\t')\n        .quote_style(csv::QuoteStyle::NonNumeric)\n        .from_writer(io::stdout());\n\n    wtr.write_record(&[\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])?;\n    wtr.write_record(&[\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])?;\n    wtr.write_record(&[\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])?;\n    wtr.write_record(&[\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])?;\n\n    wtr.flush()?;\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nCompiling and running this example gives:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor\n\"City\"  \"State\" \"Population\"    \"Latitude\"      \"Longitude\"\n\"Davidsons Landing\"     \"AK\"    \"\"      65.2419444      -165.2716667\n\"Kenai\" \"AK\"    7610    60.5544444      -151.2583333\n\"Oakman\"        \"AL\"    \"\"      33.7133333      -87.3886111\n```\n\nIn this example, we used a new type\n[`QuoteStyle`](../enum.QuoteStyle.html).\nThe `QuoteStyle` type represents the different quoting strategies available\nto you. The default is to add quotes to fields only when necessary. This\nprobably works for most use cases, but you can also ask for quotes to always\nbe put around fields, to never be put around fields or to always be put around\nnon-numeric fields.\n\n## Writing with Serde\n\nJust like the CSV reader supports automatic deserialization into Rust types\nwith Serde, the CSV writer supports automatic serialization from Rust types\ninto CSV records using Serde. In this section, we'll learn how to use it.\n\nAs with reading, let's start by seeing how we can serialize a Rust tuple.\n\n```no_run\n//tutorial-write-serde-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // We still need to write headers manually.\n    wtr.write_record(&[\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])?;\n\n    // But now we can write records by providing a normal Rust value.\n    //\n    // Note that the odd `None::<u64>` syntax is required because `None` on\n    // its own doesn't have a concrete type, but Serde needs a concrete type\n    // in order to serialize it. That is, `None` has type `Option<T>` but\n    // `None::<u64>` has type `Option<u64>`.\n    wtr.serialize((\"Davidsons Landing\", \"AK\", None::<u64>, 65.2419444, -165.2716667))?;\n    wtr.serialize((\"Kenai\", \"AK\", Some(7610), 60.5544444, -151.2583333))?;\n    wtr.serialize((\"Oakman\", \"AL\", None::<u64>, 33.7133333, -87.3886111))?;\n\n    wtr.flush()?;\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nCompiling and running this program gives the expected output:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\nOakman,AL,,33.7133333,-87.3886111\n```\n\nThe key thing to note in the above example is the use of `serialize` instead\nof `write_record` to write our data. In particular, `write_record` is used\nwhen writing a simple record that contains string-like data only. On the other\nhand, `serialize` is used when your data consists of more complex values like\nnumbers, floats or optional values. Of course, you could always convert the\ncomplex values to strings and then use `write_record`, but Serde can do it for\nyou automatically.\n\nAs with reading, we can also serialize custom structs as CSV records. As a\nbonus, the fields in a struct will automatically be written as a header\nrecord!\n\nTo write custom structs as CSV records, we'll need to make use of Serde's\nautomatic `derive` feature again. As in the\n[previous section on reading with Serde](#reading-with-serde),\nwe'll need to add a couple crates to our `[dependencies]` section in our\n`Cargo.toml` (if they aren't already there):\n\n```text\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\nAnd we'll also need to add a new `use` statement to our code, for Serde, as\nshown in the example:\n\n```no_run\n//tutorial-write-serde-02.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Serialize;\n\n// Note that structs can derive both Serialize and Deserialize!\n#[derive(Debug, Serialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record<'a> {\n    city: &'a str,\n    state: &'a str,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    wtr.serialize(Record {\n        city: \"Davidsons Landing\",\n        state: \"AK\",\n        population: None,\n        latitude: 65.2419444,\n        longitude: -165.2716667,\n    })?;\n    wtr.serialize(Record {\n        city: \"Kenai\",\n        state: \"AK\",\n        population: Some(7610),\n        latitude: 60.5544444,\n        longitude: -151.2583333,\n    })?;\n    wtr.serialize(Record {\n        city: \"Oakman\",\n        state: \"AL\",\n        population: None,\n        latitude: 33.7133333,\n        longitude: -87.3886111,\n    })?;\n\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nCompiling and running this example has the same output as last time, even\nthough we didn't explicitly write a header record:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\nOakman,AL,,33.7133333,-87.3886111\n```\n\nIn this case, the `serialize` method noticed that we were writing a struct\nwith field names. When this happens, `serialize` will automatically write a\nheader record (only if no other records have been written) that consists of\nthe fields in the struct in the order in which they are defined. Note that\nthis behavior can be disabled with the\n[`WriterBuilder::has_headers`](../struct.WriterBuilder.html#method.has_headers)\nmethod.\n\nIt's also worth pointing out the use of a *lifetime parameter* in our `Record`\nstruct:\n\n```ignore\nstruct Record<'a> {\n    city: &'a str,\n    state: &'a str,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n```\n\nThe `'a` lifetime parameter corresponds to the lifetime of the `city` and\n`state` string slices. This says that the `Record` struct contains *borrowed*\ndata. We could have written our struct without borrowing any data, and\ntherefore, without any lifetime parameters:\n\n```ignore\nstruct Record {\n    city: String,\n    state: String,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n```\n\nHowever, since we had to replace our borrowed `&str` types with owned `String`\ntypes, we're now forced to allocate a new `String` value for both of `city`\nand `state` for every record that we write. There's no intrinsic problem with\ndoing that, but it might be a bit wasteful.\n\nFor more examples and more details on the rules for serialization, please see\nthe\n[`Writer::serialize`](../struct.Writer.html#method.serialize)\nmethod.\n\n# Pipelining\n\nIn this section, we're going to cover a few examples that demonstrate programs\nthat take CSV data as input, and produce possibly transformed or filtered CSV\ndata as output. This shows how to write a complete program that efficiently\nreads and writes CSV data. Rust is well positioned to perform this task, since\nyou'll get great performance with the convenience of a high level CSV library.\n\n## Filter by search\n\nThe first example of CSV pipelining we'll look at is a simple filter. It takes\nas input some CSV data on stdin and a single string query as its only\npositional argument, and it will produce as output CSV data that only contains\nrows with a field that matches the query.\n\n```no_run\n//tutorial-pipeline-search-01.rs\nuse std::env;\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    // Get the query from the positional arguments.\n    // If one doesn't exist, return an error.\n    let query = match env::args().nth(1) {\n        None => return Err(From::from(\"expected 1 argument, but got none\")),\n        Some(query) => query,\n    };\n\n    // Build CSV readers and writers to stdin and stdout, respectively.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // Before reading our data records, we should write the header record.\n    wtr.write_record(rdr.headers()?)?;\n\n    // Iterate over all the records in `rdr`, and write only records containing\n    // `query` to `wtr`.\n    for result in rdr.records() {\n        let record = result?;\n        if record.iter().any(|field| field == &query) {\n            wtr.write_record(&record)?;\n        }\n    }\n\n    // CSV writers use an internal buffer, so we should always flush when done.\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nIf we compile and run this program with a query of `MA` on `uspop.csv`, we'll\nsee that only one record matches:\n\n```text\n$ cargo build\n$ ./csvtutor MA < uspop.csv\nCity,State,Population,Latitude,Longitude\nReading,MA,23441,42.5255556,-71.0958333\n```\n\nThis example doesn't actually introduce anything new. It merely combines what\nyou've already learned about CSV readers and writers from previous sections.\n\nLet's add a twist to this example. In the real world, you're often faced with\nmessy CSV data that might not be encoded correctly. One example you might come\nacross is CSV data encoded in\n[Latin-1](https://en.wikipedia.org/wiki/ISO/IEC_8859-1).\nUnfortunately, for the examples we've seen so far, our CSV reader assumes that\nall of the data is UTF-8. Since all of the data we've worked on has been\nASCII---which is a subset of both Latin-1 and UTF-8---we haven't had any\nproblems. But let's introduce a slightly tweaked version of our `uspop.csv`\nfile that contains an encoding of a Latin-1 character that is invalid UTF-8.\nYou can get the data like so:\n\n```text\n$ curl -LO 'https://raw.githubusercontent.com/BurntSushi/rust-csv/master/examples/data/uspop-latin1.csv'\n```\n\nEven though I've already given away the problem, let's see what happen when\nwe try to run our previous example on this new data:\n\n```text\n$ ./csvtutor MA < uspop-latin1.csv\nCity,State,Population,Latitude,Longitude\nCSV parse error: record 3 (line 4, field: 0, byte: 125): invalid utf-8: invalid UTF-8 in field 0 near byte index 0\n```\n\nThe error message tells us exactly what's wrong. Let's take a look at line 4\nto see what we're dealing with:\n\n```text\n$ head -n4 uspop-latin1.csv | tail -n1\nÕakman,AL,,33.7133333,-87.3886111\n```\n\nIn this case, the very first character is the Latin-1 `Õ`, which is encoded as\nthe byte `0xD5`, which is in turn invalid UTF-8. So what do we do now that our\nCSV parser has choked on our data? You have two choices. The first is to go in\nand fix up your CSV data so that it's valid UTF-8. This is probably a good\nidea anyway, and tools like `iconv` can help with the task of transcoding.\nBut if you can't or don't want to do that, then you can instead read CSV data\nin a way that is mostly encoding agnostic (so long as ASCII is still a valid\nsubset). The trick is to use *byte records* instead of *string records*.\n\nThus far, we haven't actually talked much about the type of a record in this\nlibrary, but now is a good time to introduce them. There are two of them,\n[`StringRecord`](../struct.StringRecord.html)\nand\n[`ByteRecord`](../struct.ByteRecord.html).\nEach them represent a single record in CSV data, where a record is a sequence\nof an arbitrary number of fields. The only difference between `StringRecord`\nand `ByteRecord` is that `StringRecord` is guaranteed to be valid UTF-8, where\nas `ByteRecord` contains arbitrary bytes.\n\nArmed with that knowledge, we can now begin to understand why we saw an error\nwhen we ran the last example on data that wasn't UTF-8. Namely, when we call\n`records`, we get back an iterator of `StringRecord`. Since `StringRecord` is\nguaranteed to be valid UTF-8, trying to build a `StringRecord` with invalid\nUTF-8 will result in the error that we see.\n\nAll we need to do to make our example work is to switch from a `StringRecord`\nto a `ByteRecord`. This means using `byte_records` to create our iterator\ninstead of `records`, and similarly using `byte_headers` instead of `headers`\nif we think our header data might contain invalid UTF-8 as well. Here's the\nchange:\n\n```no_run\n//tutorial-pipeline-search-02.rs\n# use std::env;\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let query = match env::args().nth(1) {\n        None => return Err(From::from(\"expected 1 argument, but got none\")),\n        Some(query) => query,\n    };\n\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    wtr.write_record(rdr.byte_headers()?)?;\n\n    for result in rdr.byte_records() {\n        let record = result?;\n        // `query` is a `String` while `field` is now a `&[u8]`, so we'll\n        // need to convert `query` to `&[u8]` before doing a comparison.\n        if record.iter().any(|field| field == query.as_bytes()) {\n            wtr.write_record(&record)?;\n        }\n    }\n\n    wtr.flush()?;\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nCompiling and running this now yields the same results as our first example,\nbut this time it works on data that isn't valid UTF-8.\n\n```text\n$ cargo build\n$ ./csvtutor MA < uspop-latin1.csv\nCity,State,Population,Latitude,Longitude\nReading,MA,23441,42.5255556,-71.0958333\n```\n\n## Filter by population count\n\nIn this section, we will show another example program that both reads and\nwrites CSV data, but instead of dealing with arbitrary records, we will use\nSerde to deserialize and serialize records with specific types.\n\nFor this program, we'd like to be able to filter records in our population data\nby population count. Specifically, we'd like to see which records meet a\ncertain population threshold. In addition to using a simple inequality, we must\nalso account for records that have a missing population count. This is where\ntypes like `Option<T>` come in handy, because the compiler will force us to\nconsider the case when the population count is missing.\n\nSince we're using Serde in this example, don't forget to add the Serde\ndependencies to your `Cargo.toml` in your `[dependencies]` section if they\naren't already there:\n\n```text\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\nNow here's the code:\n\n```no_run\n//tutorial-pipeline-pop-01.rs\nuse std::env;\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::{Deserialize, Serialize};\n\n// Unlike previous examples, we derive both Deserialize and Serialize. This\n// means we'll be able to automatically deserialize and serialize this type.\n#[derive(Debug, Deserialize, Serialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    city: String,\n    state: String,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    // Get the query from the positional arguments.\n    // If one doesn't exist or isn't an integer, return an error.\n    let minimum_pop: u64 = match env::args().nth(1) {\n        None => return Err(From::from(\"expected 1 argument, but got none\")),\n        Some(arg) => arg.parse()?,\n    };\n\n    // Build CSV readers and writers to stdin and stdout, respectively.\n    // Note that we don't need to write headers explicitly. Since we're\n    // serializing a custom struct, that's done for us automatically.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // Iterate over all the records in `rdr`, and write only records containing\n    // a population that is greater than or equal to `minimum_pop`.\n    for result in rdr.deserialize() {\n        // Remember that when deserializing, we must use a type hint to\n        // indicate which type we want to deserialize our record into.\n        let record: Record = result?;\n\n        // `map_or` is a combinator on `Option`. It take two parameters:\n        // a value to use when the `Option` is `None` (i.e., the record has\n        // no population count) and a closure that returns another value of\n        // the same type when the `Option` is `Some`. In this case, we test it\n        // against our minimum population count that we got from the command\n        // line.\n        if record.population.map_or(false, |pop| pop >= minimum_pop) {\n            wtr.serialize(record)?;\n        }\n    }\n\n    // CSV writers use an internal buffer, so we should always flush when done.\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nIf we compile and run our program with a minimum threshold of `100000`, we\nshould see three matching records. Notice that the headers were added even\nthough we never explicitly wrote them!\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor 100000 < uspop.csv\nCity,State,Population,Latitude,Longitude\nFontana,CA,169160,34.0922222,-117.4341667\nBridgeport,CT,139090,41.1669444,-73.2052778\nIndianapolis,IN,773283,39.7683333,-86.1580556\n```\n\n# Performance\n\nIn this section, we'll go over how to squeeze the most juice out of our CSV\nreader. As it happens, most of the APIs we've seen so far were designed with\nhigh level convenience in mind, and that often comes with some costs. For the\nmost part, those costs revolve around unnecessary allocations. Therefore, most\nof the section will show how to do CSV parsing with as little allocation as\npossible.\n\nThere are two critical preliminaries we must cover.\n\nFirstly, when you care about performance, you should compile your code\nwith `cargo build --release` instead of `cargo build`. The `--release`\nflag instructs the compiler to spend more time optimizing your code. When\ncompiling with the `--release` flag, you'll find your compiled program at\n`target/release/csvtutor` instead of `target/debug/csvtutor`. Throughout this\ntutorial, we've used `cargo build` because our dataset was small and we weren't\nfocused on speed. The downside of `cargo build --release` is that it will take\nlonger than `cargo build`.\n\nSecondly, the dataset we've used throughout this tutorial only has 100 records.\nWe'd have to try really hard to cause our program to run slowly on 100 records,\neven when we compile without the `--release` flag. Therefore, in order to\nactually witness a performance difference, we need a bigger dataset. To get\nsuch a dataset, we'll use the original source of `uspop.csv`. **Warning: the\ndownload is 41MB compressed and decompresses to 145MB.**\n\n```text\n$ curl -LO http://burntsushi.net/stuff/worldcitiespop.csv.gz\n$ gunzip worldcitiespop.csv.gz\n$ wc worldcitiespop.csv\n  3173959   5681543 151492068 worldcitiespop.csv\n$ md5sum worldcitiespop.csv\n6198bd180b6d6586626ecbf044c1cca5  worldcitiespop.csv\n```\n\nFinally, it's worth pointing out that this section is not attempting to\npresent a rigorous set of benchmarks. We will stay away from rigorous analysis\nand instead rely a bit more on wall clock times and intuition.\n\n## Amortizing allocations\n\nIn order to measure performance, we must be careful about what it is we're\nmeasuring. We must also be careful to not change the thing we're measuring as\nwe make improvements to the code. For this reason, we will focus on measuring\nhow long it takes to count the number of records corresponding to city\npopulation counts in Massachusetts. This represents a very small amount of work\nthat requires us to visit every record, and therefore represents a decent way\nto measure how long it takes to do CSV parsing.\n\nBefore diving into our first optimization, let's start with a baseline by\nadapting a previous example to count the number of records in\n`worldcitiespop.csv`:\n\n```no_run\n//tutorial-perf-alloc-01.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n\n    let mut count = 0;\n    for result in rdr.records() {\n        let record = result?;\n        if &record[0] == \"us\" && &record[3] == \"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n\nfn main() {\n    match run() {\n        Ok(count) => {\n            println!(\"{}\", count);\n        }\n        Err(err) => {\n            println!(\"{}\", err);\n            process::exit(1);\n        }\n    }\n}\n```\n\nNow let's compile and run it and see what kind of timing we get. Don't forget\nto compile with the `--release` flag. (For grins, try compiling without the\n`--release` flag and see how long it takes to run the program!)\n\n```text\n$ cargo build --release\n$ time ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.645s\nuser    0m0.627s\nsys     0m0.017s\n```\n\nAll right, so what's the first thing we can do to make this faster? This\nsection promised to speed things up by amortizing allocation, but we can do\nsomething even simpler first: iterate over\n[`ByteRecord`](../struct.ByteRecord.html)s\ninstead of\n[`StringRecord`](../struct.StringRecord.html)s.\nIf you recall from a previous section, a `StringRecord` is guaranteed to be\nvalid UTF-8, and therefore must validate that its contents is actually UTF-8.\n(If validation fails, then the CSV reader will return an error.) If we remove\nthat validation from our program, then we can realize a nice speed boost as\nshown in the next example:\n\n```no_run\n//tutorial-perf-alloc-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n\n    let mut count = 0;\n    for result in rdr.byte_records() {\n        let record = result?;\n        if &record[0] == b\"us\" && &record[3] == b\"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n#\n# fn main() {\n#     match run() {\n#         Ok(count) => {\n#             println!(\"{}\", count);\n#         }\n#         Err(err) => {\n#             println!(\"{}\", err);\n#             process::exit(1);\n#         }\n#     }\n# }\n```\n\nAnd now compile and run:\n\n```text\n$ cargo build --release\n$ time ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.429s\nuser    0m0.403s\nsys     0m0.023s\n```\n\nOur program is now approximately 30% faster, all because we removed UTF-8\nvalidation. But was it actually okay to remove UTF-8 validation? What have we\nlost? In this case, it is perfectly acceptable to drop UTF-8 validation and use\n`ByteRecord` instead because all we're doing with the data in the record is\ncomparing two of its fields to raw bytes:\n\n```ignore\nif &record[0] == b\"us\" && &record[3] == b\"MA\" {\n    count += 1;\n}\n```\n\nIn particular, it doesn't matter whether `record` is valid UTF-8 or not, since\nwe're checking for equality on the raw bytes themselves.\n\nUTF-8 validation via `StringRecord` is useful because it provides access to\nfields as `&str` types, where as `ByteRecord` provides fields as `&[u8]` types.\n`&str` is the type of a borrowed string in Rust, which provides convenient\naccess to string APIs like substring search. Strings are also frequently used\nin other areas, so they tend to be a useful thing to have. Therefore, sticking\nwith `StringRecord` is a good default, but if you need the extra speed and can\ndeal with arbitrary bytes, then switching to `ByteRecord` might be a good idea.\n\nMoving on, let's try to get another speed boost by amortizing allocation.\nAmortizing allocation is the technique that creates an allocation once (or\nvery rarely), and then attempts to reuse it instead of creating additional\nallocations. In the case of the previous examples, we used iterators created\nby the `records` and `byte_records` methods on a CSV reader. These iterators\nallocate a new record for every item that it yields, which in turn corresponds\nto a new allocation. It does this because iterators cannot yield items that\nborrow from the iterator itself, and because creating new allocations tends to\nbe a lot more convenient.\n\nIf we're willing to forgo use of iterators, then we can amortize allocations\nby creating a *single* `ByteRecord` and asking the CSV reader to read into it.\nWe do this by using the\n[`Reader::read_byte_record`](../struct.Reader.html#method.read_byte_record)\nmethod.\n\n```no_run\n//tutorial-perf-alloc-03.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut record = csv::ByteRecord::new();\n\n    let mut count = 0;\n    while rdr.read_byte_record(&mut record)? {\n        if &record[0] == b\"us\" && &record[3] == b\"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n#\n# fn main() {\n#     match run() {\n#         Ok(count) => {\n#             println!(\"{}\", count);\n#         }\n#         Err(err) => {\n#             println!(\"{}\", err);\n#             process::exit(1);\n#         }\n#     }\n# }\n```\n\nCompile and run:\n\n```text\n$ cargo build --release\n$ time ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.308s\nuser    0m0.283s\nsys     0m0.023s\n```\n\nWoohoo! This represents *another* 30% boost over the previous example, which is\na 50% boost over the first example.\n\nLet's dissect this code by taking a look at the type signature of the\n`read_byte_record` method:\n\n```ignore\nfn read_byte_record(&mut self, record: &mut ByteRecord) -> csv::Result<bool>;\n```\n\nThis method takes as input a CSV reader (the `self` parameter) and a *mutable\nborrow* of a `ByteRecord`, and returns a `csv::Result<bool>`. (The\n`csv::Result<bool>` is equivalent to `Result<bool, csv::Error>`.) The return\nvalue is `true` if and only if a record was read. When it's `false`, that means\nthe reader has exhausted its input. This method works by copying the contents\nof the next record into the provided `ByteRecord`. Since the same `ByteRecord`\nis used to read every record, it will already have space allocated for data.\nWhen `read_byte_record` runs, it will overwrite the contents that were there\nwith the new record, which means that it can reuse the space that was\nallocated. Thus, we have *amortized allocation*.\n\nAn exercise you might consider doing is to use a `StringRecord` instead of a\n`ByteRecord`, and therefore\n[`Reader::read_record`](../struct.Reader.html#method.read_record)\ninstead of `read_byte_record`. This will give you easy access to Rust strings\nat the cost of UTF-8 validation but *without* the cost of allocating a new\n`StringRecord` for every record.\n\n## Serde and zero allocation\n\nIn this section, we are going to briefly examine how we use Serde and what we\ncan do to speed it up. The key optimization we'll want to make is to---you\nguessed it---amortize allocation.\n\nAs with the previous section, let's start with a simple baseline based off an\nexample using Serde in a previous section:\n\n```no_run\n//tutorial-perf-serde-01.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    country: String,\n    city: String,\n    accent_city: String,\n    region: String,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n\n    let mut count = 0;\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        if record.country == \"us\" && record.region == \"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n\nfn main() {\n    match run() {\n        Ok(count) => {\n            println!(\"{}\", count);\n        }\n        Err(err) => {\n            println!(\"{}\", err);\n            process::exit(1);\n        }\n    }\n}\n```\n\nNow compile and run this program:\n\n```text\n$ cargo build --release\n$ ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m1.381s\nuser    0m1.367s\nsys     0m0.013s\n```\n\nThe first thing you might notice is that this is quite a bit slower than our\nprograms in the previous section. This is because deserializing each record\nhas a certain amount of overhead to it. In particular, some of the fields need\nto be parsed as integers or floating point numbers, which isn't free. However,\nthere is hope yet, because we can speed up this program!\n\nOur first attempt to speed up the program will be to amortize allocation. Doing\nthis with Serde is a bit trickier than before, because we need to change our\n`Record` type and use the manual deserialization API. Let's see what that looks\nlike:\n\n```no_run\n//tutorial-perf-serde-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n# use serde::Deserialize;\n#\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record<'a> {\n    country: &'a str,\n    city: &'a str,\n    accent_city: &'a str,\n    region: &'a str,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut raw_record = csv::StringRecord::new();\n    let headers = rdr.headers()?.clone();\n\n    let mut count = 0;\n    while rdr.read_record(&mut raw_record)? {\n        let record: Record = raw_record.deserialize(Some(&headers))?;\n        if record.country == \"us\" && record.region == \"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n#\n# fn main() {\n#     match run() {\n#         Ok(count) => {\n#             println!(\"{}\", count);\n#         }\n#         Err(err) => {\n#             println!(\"{}\", err);\n#             process::exit(1);\n#         }\n#     }\n# }\n```\n\nCompile and run:\n\n```text\n$ cargo build --release\n$ ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m1.055s\nuser    0m1.040s\nsys     0m0.013s\n```\n\nThis corresponds to an approximately 24% increase in performance. To achieve\nthis, we had to make two important changes.\n\nThe first was to make our `Record` type contain `&str` fields instead of\n`String` fields. If you recall from a previous section, `&str` is a *borrowed*\nstring where a `String` is an *owned* string. A borrowed string points to\na already existing allocation where as a `String` always implies a new\nallocation. In this case, our `&str` is borrowing from the CSV record itself.\n\nThe second change we had to make was to stop using the\n[`Reader::deserialize`](../struct.Reader.html#method.deserialize)\niterator, and instead deserialize our record into a `StringRecord` explicitly\nand then use the\n[`StringRecord::deserialize`](../struct.StringRecord.html#method.deserialize)\nmethod to deserialize a single record.\n\nThe second change is a bit tricky, because in order for it to work, our\n`Record` type needs to borrow from the data inside the `StringRecord`. That\nmeans that our `Record` value cannot outlive the `StringRecord` that it was\ncreated from. Since we overwrite the same `StringRecord` on each iteration\n(in order to amortize allocation), that means our `Record` value must evaporate\nbefore the next iteration of the loop. Indeed, the compiler will enforce this!\n\nThere is one more optimization we can make: remove UTF-8 validation. In\ngeneral, this means using `&[u8]` instead of `&str` and `ByteRecord` instead\nof `StringRecord`:\n\n```no_run\n//tutorial-perf-serde-03.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n# use serde::Deserialize;\n#\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record<'a> {\n    country: &'a [u8],\n    city: &'a [u8],\n    accent_city: &'a [u8],\n    region: &'a [u8],\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut raw_record = csv::ByteRecord::new();\n    let headers = rdr.byte_headers()?.clone();\n\n    let mut count = 0;\n    while rdr.read_byte_record(&mut raw_record)? {\n        let record: Record = raw_record.deserialize(Some(&headers))?;\n        if record.country == b\"us\" && record.region == b\"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n#\n# fn main() {\n#     match run() {\n#         Ok(count) => {\n#             println!(\"{}\", count);\n#         }\n#         Err(err) => {\n#             println!(\"{}\", err);\n#             process::exit(1);\n#         }\n#     }\n# }\n```\n\nCompile and run:\n\n```text\n$ cargo build --release\n$ ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.873s\nuser    0m0.850s\nsys     0m0.023s\n```\n\nThis corresponds to a 17% increase over the previous example and a 37% increase\nover the first example.\n\nIn sum, Serde parsing is still quite fast, but will generally not be the\nfastest way to parse CSV since it necessarily needs to do more work.\n\n## CSV parsing without the standard library\n\nIn this section, we will explore a niche use case: parsing CSV without the\nstandard library. While the `csv` crate itself requires the standard library,\nthe underlying parser is actually part of the\n[`csv-core`](https://docs.rs/csv-core)\ncrate, which does not depend on the standard library. The downside of not\ndepending on the standard library is that CSV parsing becomes a lot more\ninconvenient.\n\nThe `csv-core` crate is structured similarly to the `csv` crate. There is a\n[`Reader`](../../csv_core/struct.Reader.html)\nand a\n[`Writer`](../../csv_core/struct.Writer.html),\nas well as corresponding builders\n[`ReaderBuilder`](../../csv_core/struct.ReaderBuilder.html)\nand\n[`WriterBuilder`](../../csv_core/struct.WriterBuilder.html).\nThe `csv-core` crate has no record types or iterators. Instead, CSV data\ncan either be read one field at a time or one record at a time. In this\nsection, we'll focus on reading a field at a time since it is simpler, but it\nis generally faster to read a record at a time since it does more work per\nfunction call.\n\nIn keeping with this section on performance, let's write a program using only\n`csv-core` that counts the number of records in the state of Massachusetts.\n\n(Note that we unfortunately use the standard library in this example even\nthough `csv-core` doesn't technically require it. We do this for convenient\naccess to I/O, which would be harder without the standard library.)\n\n```no_run\n//tutorial-perf-core-01.rs\nuse std::io::{self, Read};\nuse std::process;\n\nuse csv_core::{Reader, ReadFieldResult};\n\nfn run(mut data: &[u8]) -> Option<u64> {\n    let mut rdr = Reader::new();\n\n    // Count the number of records in Massachusetts.\n    let mut count = 0;\n    // Indicates the current field index. Reset to 0 at start of each record.\n    let mut fieldidx = 0;\n    // True when the current record is in the United States.\n    let mut inus = false;\n    // Buffer for field data. Must be big enough to hold the largest field.\n    let mut field = [0; 1024];\n    loop {\n        // Attempt to incrementally read the next CSV field.\n        let (result, nread, nwrite) = rdr.read_field(data, &mut field);\n        // nread is the number of bytes read from our input. We should never\n        // pass those bytes to read_field again.\n        data = &data[nread..];\n        // nwrite is the number of bytes written to the output buffer `field`.\n        // The contents of the buffer after this point is unspecified.\n        let field = &field[..nwrite];\n\n        match result {\n            // We don't need to handle this case because we read all of the\n            // data up front. If we were reading data incrementally, then this\n            // would be a signal to read more.\n            ReadFieldResult::InputEmpty => {}\n            // If we get this case, then we found a field that contains more\n            // than 1024 bytes. We keep this example simple and just fail.\n            ReadFieldResult::OutputFull => {\n                return None;\n            }\n            // This case happens when we've successfully read a field. If the\n            // field is the last field in a record, then `record_end` is true.\n            ReadFieldResult::Field { record_end } => {\n                if fieldidx == 0 && field == b\"us\" {\n                    inus = true;\n                } else if inus && fieldidx == 3 && field == b\"MA\" {\n                    count += 1;\n                }\n                if record_end {\n                    fieldidx = 0;\n                    inus = false;\n                } else {\n                    fieldidx += 1;\n                }\n            }\n            // This case happens when the CSV reader has successfully exhausted\n            // all input.\n            ReadFieldResult::End => {\n                break;\n            }\n        }\n    }\n    Some(count)\n}\n\nfn main() {\n    // Read the entire contents of stdin up front.\n    let mut data = vec![];\n    if let Err(err) = io::stdin().read_to_end(&mut data) {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n    match run(&data) {\n        None => {\n            println!(\"error: could not count records, buffer too small\");\n            process::exit(1);\n        }\n        Some(count) => {\n            println!(\"{}\", count);\n        }\n    }\n}\n```\n\nAnd compile and run it:\n\n```text\n$ cargo build --release\n$ time ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.572s\nuser    0m0.513s\nsys     0m0.057s\n```\n\nThis isn't as fast as some of our previous examples where we used the `csv`\ncrate to read into a `StringRecord` or a `ByteRecord`. This is mostly because\nthis example reads a field at a time, which incurs more overhead than reading a\nrecord at a time. To fix this, you would want to use the\n[`Reader::read_record`](../../csv_core/struct.Reader.html#method.read_record)\nmethod instead, which is defined on `csv_core::Reader`.\n\nThe other thing to notice here is that the example is considerably longer than\nthe other examples. This is because we need to do more book keeping to keep\ntrack of which field we're reading and how much data we've already fed to the\nreader. There are basically two reasons to use the `csv_core` crate:\n\n1. If you're in an environment where the standard library is not usable.\n2. If you wanted to build your own csv-like library, you could build it on top\n   of `csv-core`.\n\n# Closing thoughts\n\nCongratulations on making it to the end! It seems incredible that one could\nwrite so many words on something as basic as CSV parsing. I wanted this\nguide to be accessible not only to Rust beginners, but to inexperienced\nprogrammers as well. My hope is that the large number of examples will help\npush you in the right direction.\n\nWith that said, here are a few more things you might want to look at:\n\n* The [API documentation for the `csv` crate](../index.html) documents all\n  facets of the library, and is itself littered with even more examples.\n* The [`csv-index` crate](https://docs.rs/csv-index) provides data structures\n  that can index CSV data that are amenable to writing to disk. (This library\n  is still a work in progress.)\n* The [`xsv` command line tool](https://github.com/BurntSushi/xsv) is a high\n  performance CSV swiss army knife. It can slice, select, search, sort, join,\n  concatenate, index, format and compute statistics on arbitrary CSV data. Give\n  it a try!\n\n*/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/tutorial.rs","byte_start":250086,"byte_end":336289,"line_start":1,"line_end":2520,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1669},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":336931,"byte_end":336944,"line_start":23,"line_end":23,"column_start":12,"column_end":25},"name":"WriterBuilder","qualname":"::writer::WriterBuilder","value":"WriterBuilder {  }","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1673}],"decl_id":null,"docs":" Builds a CSV writer with various configuration knobs.","sig":null,"attributes":[{"value":"/ Builds a CSV writer with various configuration knobs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":336679,"byte_end":336736,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":336737,"byte_end":336740,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This builder can be used to tweak the field delimiter, record terminator","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":336741,"byte_end":336817,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ and more. Once a CSV `Writer` is built, its configuration cannot be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":336818,"byte_end":336889,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ changed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":336890,"byte_end":336902,"line_start":21,"line_end":21,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338042,"byte_end":338045,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<WriterBuilder>::new","value":"pub fn new() -> WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV writing.","sig":null,"attributes":[{"value":"/ Create a new builder for configuring CSV writing.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337331,"byte_end":337384,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337389,"byte_end":337392,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ To convert a builder into a writer, call one of the methods starting","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337397,"byte_end":337469,"line_start":44,"line_end":44,"column_start":5,"column_end":77}},{"value":"/ with `from_`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337474,"byte_end":337491,"line_start":45,"line_end":45,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337496,"byte_end":337499,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337504,"byte_end":337517,"line_start":47,"line_end":47,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337522,"byte_end":337525,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337530,"byte_end":337537,"line_start":49,"line_end":49,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337542,"byte_end":337568,"line_start":50,"line_end":50,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337573,"byte_end":337600,"line_start":51,"line_end":51,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337605,"byte_end":337608,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337613,"byte_end":337652,"line_start":53,"line_end":53,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337657,"byte_end":337705,"line_start":54,"line_end":54,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337710,"byte_end":337773,"line_start":55,"line_end":55,"column_start":5,"column_end":68}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337778,"byte_end":337822,"line_start":56,"line_end":56,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337827,"byte_end":337871,"line_start":57,"line_end":57,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337876,"byte_end":337879,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337884,"byte_end":337941,"line_start":59,"line_end":59,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337946,"byte_end":337989,"line_start":60,"line_end":60,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337994,"byte_end":338008,"line_start":61,"line_end":61,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338013,"byte_end":338018,"line_start":62,"line_end":62,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338023,"byte_end":338030,"line_start":63,"line_end":63,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338843,"byte_end":338852,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"from_path","qualname":"<WriterBuilder>::from_path","value":"pub fn from_path<P: AsRef<Path>>(&Self, P) -> Result<Writer<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer from this configuration that writes data to the\n given file path. The file is truncated if it already exists.","sig":null,"attributes":[{"value":"/ Build a CSV writer from this configuration that writes data to the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338111,"byte_end":338181,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ given file path. The file is truncated if it already exists.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338186,"byte_end":338250,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338255,"byte_end":338258,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ If there was a problem opening the file at the given path, then this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338263,"byte_end":338335,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/ returns the corresponding error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338340,"byte_end":338376,"line_start":72,"line_end":72,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338381,"byte_end":338384,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338389,"byte_end":338402,"line_start":74,"line_end":74,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338407,"byte_end":338410,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338415,"byte_end":338428,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338433,"byte_end":338459,"line_start":77,"line_end":77,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338464,"byte_end":338491,"line_start":78,"line_end":78,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338496,"byte_end":338499,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338504,"byte_end":338543,"line_start":80,"line_end":80,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338548,"byte_end":338596,"line_start":81,"line_end":81,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_path(\"foo.csv\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338601,"byte_end":338666,"line_start":82,"line_end":82,"column_start":5,"column_end":70}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338671,"byte_end":338715,"line_start":83,"line_end":83,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338720,"byte_end":338764,"line_start":84,"line_end":84,"column_start":5,"column_end":49}},{"value":"/     wtr.flush()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338769,"byte_end":338790,"line_start":85,"line_end":85,"column_start":5,"column_end":26}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338795,"byte_end":338809,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338814,"byte_end":338819,"line_start":87,"line_end":87,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338824,"byte_end":338831,"line_start":88,"line_end":88,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339745,"byte_end":339756,"line_start":115,"line_end":115,"column_start":12,"column_end":23},"name":"from_writer","qualname":"<WriterBuilder>::from_writer","value":"pub fn from_writer<W: io::Write>(&Self, W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer from this configuration that writes data to `wtr`.","sig":null,"attributes":[{"value":"/ Build a CSV writer from this configuration that writes data to `wtr`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":338973,"byte_end":339046,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339051,"byte_end":339054,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that the CSV writer is buffered automatically, so you should not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339059,"byte_end":339132,"line_start":95,"line_end":95,"column_start":5,"column_end":78}},{"value":"/ wrap `wtr` in a buffered writer like `io::BufWriter`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339137,"byte_end":339194,"line_start":96,"line_end":96,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339199,"byte_end":339202,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339207,"byte_end":339220,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339225,"byte_end":339228,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339233,"byte_end":339240,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339245,"byte_end":339271,"line_start":101,"line_end":101,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339276,"byte_end":339303,"line_start":102,"line_end":102,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339308,"byte_end":339311,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339316,"byte_end":339355,"line_start":104,"line_end":104,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339360,"byte_end":339408,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339413,"byte_end":339476,"line_start":106,"line_end":106,"column_start":5,"column_end":68}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339481,"byte_end":339525,"line_start":107,"line_end":107,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339530,"byte_end":339574,"line_start":108,"line_end":108,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339579,"byte_end":339582,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339587,"byte_end":339644,"line_start":110,"line_end":110,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339649,"byte_end":339692,"line_start":111,"line_end":111,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339697,"byte_end":339711,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339716,"byte_end":339721,"line_start":113,"line_end":113,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339726,"byte_end":339733,"line_start":114,"line_end":114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340531,"byte_end":340540,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"delimiter","qualname":"<WriterBuilder>::delimiter","value":"pub fn delimiter(&mut Self, u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The field delimiter to use when writing CSV.","sig":null,"attributes":[{"value":"/ The field delimiter to use when writing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339843,"byte_end":339891,"line_start":119,"line_end":119,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339896,"byte_end":339899,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The default is `b','`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339904,"byte_end":339930,"line_start":121,"line_end":121,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339935,"byte_end":339938,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339943,"byte_end":339956,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339961,"byte_end":339964,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339969,"byte_end":339976,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":339981,"byte_end":340007,"line_start":126,"line_end":126,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340012,"byte_end":340039,"line_start":127,"line_end":127,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340044,"byte_end":340047,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340052,"byte_end":340091,"line_start":129,"line_end":129,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340096,"byte_end":340144,"line_start":130,"line_end":130,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340149,"byte_end":340191,"line_start":131,"line_end":131,"column_start":5,"column_end":47}},{"value":"/         .delimiter(b';')","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340196,"byte_end":340224,"line_start":132,"line_end":132,"column_start":5,"column_end":33}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340229,"byte_end":340262,"line_start":133,"line_end":133,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340267,"byte_end":340311,"line_start":134,"line_end":134,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340316,"byte_end":340360,"line_start":135,"line_end":135,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340365,"byte_end":340368,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340373,"byte_end":340430,"line_start":137,"line_end":137,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a;b;c\\nx;y;z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340435,"byte_end":340478,"line_start":138,"line_end":138,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340483,"byte_end":340497,"line_start":139,"line_end":139,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340502,"byte_end":340507,"line_start":140,"line_end":140,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340512,"byte_end":340519,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343563,"byte_end":343574,"line_start":230,"line_end":230,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<WriterBuilder>::has_headers","value":"pub fn has_headers(&mut Self, bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to write a header row before writing any other row.","sig":null,"attributes":[{"value":"/ Whether to write a header row before writing any other row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340658,"byte_end":340721,"line_start":147,"line_end":147,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340726,"byte_end":340729,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ When this is enabled and the `serialize` method is used to write data","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340734,"byte_end":340807,"line_start":149,"line_end":149,"column_start":5,"column_end":78}},{"value":"/ with something that contains field names (i.e., a struct), then a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340812,"byte_end":340881,"line_start":150,"line_end":150,"column_start":5,"column_end":74}},{"value":"/ header row is written containing the field names before any other row","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340886,"byte_end":340959,"line_start":151,"line_end":151,"column_start":5,"column_end":78}},{"value":"/ is written.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340964,"byte_end":340979,"line_start":152,"line_end":152,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340984,"byte_end":340987,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ This option has no effect when using other methods to write rows. That","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":340992,"byte_end":341066,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/ is, if you don't use `serialize`, then you must write your header row","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341071,"byte_end":341144,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ explicitly if you want a header row.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341149,"byte_end":341189,"line_start":156,"line_end":156,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341194,"byte_end":341197,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341202,"byte_end":341233,"line_start":158,"line_end":158,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341238,"byte_end":341241,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Example: with headers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341246,"byte_end":341273,"line_start":160,"line_end":160,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341278,"byte_end":341281,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ This shows how the header will be automatically written from the field","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341286,"byte_end":341360,"line_start":162,"line_end":162,"column_start":5,"column_end":79}},{"value":"/ names of a struct.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341365,"byte_end":341387,"line_start":163,"line_end":163,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341392,"byte_end":341395,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341400,"byte_end":341407,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341412,"byte_end":341438,"line_start":166,"line_end":166,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341443,"byte_end":341446,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341451,"byte_end":341478,"line_start":168,"line_end":168,"column_start":5,"column_end":32}},{"value":"/ use serde::Serialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341483,"byte_end":341508,"line_start":169,"line_end":169,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341513,"byte_end":341516,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341521,"byte_end":341545,"line_start":171,"line_end":171,"column_start":5,"column_end":29}},{"value":"/ struct Row<'a> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341550,"byte_end":341570,"line_start":172,"line_end":172,"column_start":5,"column_end":25}},{"value":"/     city: &'a str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341575,"byte_end":341597,"line_start":173,"line_end":173,"column_start":5,"column_end":27}},{"value":"/     country: &'a str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341602,"byte_end":341627,"line_start":174,"line_end":174,"column_start":5,"column_end":30}},{"value":"/     // Serde allows us to name our headers exactly,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341632,"byte_end":341687,"line_start":175,"line_end":175,"column_start":5,"column_end":60}},{"value":"/     // even if they don't match our struct field names.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341692,"byte_end":341751,"line_start":176,"line_end":176,"column_start":5,"column_end":64}},{"value":"/     #[serde(rename = \"popcount\")]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341756,"byte_end":341793,"line_start":177,"line_end":177,"column_start":5,"column_end":42}},{"value":"/     population: u64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341798,"byte_end":341822,"line_start":178,"line_end":178,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341827,"byte_end":341832,"line_start":179,"line_end":179,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341837,"byte_end":341840,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341845,"byte_end":341884,"line_start":181,"line_end":181,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341889,"byte_end":341937,"line_start":182,"line_end":182,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":341942,"byte_end":342005,"line_start":183,"line_end":183,"column_start":5,"column_end":68}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342010,"byte_end":342037,"line_start":184,"line_end":184,"column_start":5,"column_end":32}},{"value":"/         city: \"Boston\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342042,"byte_end":342069,"line_start":185,"line_end":185,"column_start":5,"column_end":32}},{"value":"/         country: \"United States\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342074,"byte_end":342111,"line_start":186,"line_end":186,"column_start":5,"column_end":42}},{"value":"/         population: 4628910,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342116,"byte_end":342148,"line_start":187,"line_end":187,"column_start":5,"column_end":37}},{"value":"/     })?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342153,"byte_end":342165,"line_start":188,"line_end":188,"column_start":5,"column_end":17}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342170,"byte_end":342197,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/         city: \"Concord\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342202,"byte_end":342230,"line_start":190,"line_end":190,"column_start":5,"column_end":33}},{"value":"/         country: \"United States\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342235,"byte_end":342272,"line_start":191,"line_end":191,"column_start":5,"column_end":42}},{"value":"/         population: 42695,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342277,"byte_end":342307,"line_start":192,"line_end":192,"column_start":5,"column_end":35}},{"value":"/     })?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342312,"byte_end":342324,"line_start":193,"line_end":193,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342329,"byte_end":342332,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342337,"byte_end":342394,"line_start":195,"line_end":195,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342399,"byte_end":342426,"line_start":196,"line_end":196,"column_start":5,"column_end":32}},{"value":"/ city,country,popcount","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342431,"byte_end":342456,"line_start":197,"line_end":197,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342461,"byte_end":342493,"line_start":198,"line_end":198,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342498,"byte_end":342529,"line_start":199,"line_end":199,"column_start":5,"column_end":36}},{"value":"/ \");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342534,"byte_end":342541,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342546,"byte_end":342560,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342565,"byte_end":342570,"line_start":202,"line_end":202,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342575,"byte_end":342582,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342587,"byte_end":342590,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example: without headers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342595,"byte_end":342625,"line_start":205,"line_end":205,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342630,"byte_end":342633,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ This shows that serializing things that aren't structs (in this case,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342638,"byte_end":342711,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/ a tuple struct) won't result in a header row being written. This means","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342716,"byte_end":342790,"line_start":208,"line_end":208,"column_start":5,"column_end":79}},{"value":"/ you usually don't need to set `has_headers(false)` unless you","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342795,"byte_end":342860,"line_start":209,"line_end":209,"column_start":5,"column_end":70}},{"value":"/ explicitly want to both write custom headers and serialize structs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342865,"byte_end":342936,"line_start":210,"line_end":210,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342941,"byte_end":342944,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342949,"byte_end":342956,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342961,"byte_end":342987,"line_start":213,"line_end":213,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":342992,"byte_end":343019,"line_start":214,"line_end":214,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343024,"byte_end":343027,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343032,"byte_end":343071,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343076,"byte_end":343124,"line_start":217,"line_end":217,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343129,"byte_end":343192,"line_start":218,"line_end":218,"column_start":5,"column_end":68}},{"value":"/     wtr.serialize((\"Boston\", \"United States\", 4628910))?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343197,"byte_end":343258,"line_start":219,"line_end":219,"column_start":5,"column_end":66}},{"value":"/     wtr.serialize((\"Concord\", \"United States\", 42695))?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343263,"byte_end":343323,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343328,"byte_end":343331,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343336,"byte_end":343393,"line_start":222,"line_end":222,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343398,"byte_end":343425,"line_start":223,"line_end":223,"column_start":5,"column_end":32}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343430,"byte_end":343462,"line_start":224,"line_end":224,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343467,"byte_end":343498,"line_start":225,"line_end":225,"column_start":5,"column_end":36}},{"value":"/ \");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343503,"byte_end":343510,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343515,"byte_end":343529,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343534,"byte_end":343539,"line_start":228,"line_end":228,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343544,"byte_end":343551,"line_start":229,"line_end":229,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345532,"byte_end":345540,"line_start":288,"line_end":288,"column_start":12,"column_end":20},"name":"flexible","qualname":"<WriterBuilder>::flexible","value":"pub fn flexible(&mut Self, bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether the number of fields in records is allowed to change or not.","sig":null,"attributes":[{"value":"/ Whether the number of fields in records is allowed to change or not.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343677,"byte_end":343749,"line_start":235,"line_end":235,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343754,"byte_end":343757,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ When disabled (which is the default), writing CSV data will return an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343762,"byte_end":343835,"line_start":237,"line_end":237,"column_start":5,"column_end":78}},{"value":"/ error if a record is written with a number of fields different from the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343840,"byte_end":343915,"line_start":238,"line_end":238,"column_start":5,"column_end":80}},{"value":"/ number of fields written in a previous record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343920,"byte_end":343970,"line_start":239,"line_end":239,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343975,"byte_end":343978,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ When enabled, this error checking is turned off.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":343983,"byte_end":344035,"line_start":241,"line_end":241,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344040,"byte_end":344043,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example: writing flexible records","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344048,"byte_end":344087,"line_start":243,"line_end":243,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344092,"byte_end":344095,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344100,"byte_end":344107,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344112,"byte_end":344138,"line_start":246,"line_end":246,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344143,"byte_end":344170,"line_start":247,"line_end":247,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344175,"byte_end":344178,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344183,"byte_end":344222,"line_start":249,"line_end":249,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344227,"byte_end":344275,"line_start":250,"line_end":250,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344280,"byte_end":344322,"line_start":251,"line_end":251,"column_start":5,"column_end":47}},{"value":"/         .flexible(true)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344327,"byte_end":344354,"line_start":252,"line_end":252,"column_start":5,"column_end":32}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344359,"byte_end":344392,"line_start":253,"line_end":253,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"b\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344397,"byte_end":344436,"line_start":254,"line_end":254,"column_start":5,"column_end":44}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344441,"byte_end":344485,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344490,"byte_end":344493,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344498,"byte_end":344555,"line_start":257,"line_end":257,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344560,"byte_end":344601,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344606,"byte_end":344620,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344625,"byte_end":344630,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344635,"byte_end":344642,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344647,"byte_end":344650,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Example: error when `flexible` is disabled","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344655,"byte_end":344703,"line_start":263,"line_end":263,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344708,"byte_end":344711,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344716,"byte_end":344723,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344728,"byte_end":344754,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344759,"byte_end":344786,"line_start":267,"line_end":267,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344791,"byte_end":344794,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344799,"byte_end":344838,"line_start":269,"line_end":269,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344843,"byte_end":344891,"line_start":270,"line_end":270,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344896,"byte_end":344938,"line_start":271,"line_end":271,"column_start":5,"column_end":47}},{"value":"/         .flexible(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344943,"byte_end":344971,"line_start":272,"line_end":272,"column_start":5,"column_end":33}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":344976,"byte_end":345009,"line_start":273,"line_end":273,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"b\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345014,"byte_end":345053,"line_start":274,"line_end":274,"column_start":5,"column_end":44}},{"value":"/     let err = wtr.write_record(&[\"x\", \"y\", \"z\"]).unwrap_err();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345058,"byte_end":345124,"line_start":275,"line_end":275,"column_start":5,"column_end":71}},{"value":"/     match *err.kind() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345129,"byte_end":345156,"line_start":276,"line_end":276,"column_start":5,"column_end":32}},{"value":"/         csv::ErrorKind::UnequalLengths { expected_len, len, .. } => {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345161,"byte_end":345234,"line_start":277,"line_end":277,"column_start":5,"column_end":78}},{"value":"/             assert_eq!(expected_len, 2);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345239,"byte_end":345283,"line_start":278,"line_end":278,"column_start":5,"column_end":49}},{"value":"/             assert_eq!(len, 3);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345288,"byte_end":345323,"line_start":279,"line_end":279,"column_start":5,"column_end":40}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345328,"byte_end":345341,"line_start":280,"line_end":280,"column_start":5,"column_end":18}},{"value":"/         ref wrong => {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345346,"byte_end":345372,"line_start":281,"line_end":281,"column_start":5,"column_end":31}},{"value":"/             panic!(\"expected UnequalLengths but got {:?}\", wrong);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345377,"byte_end":345447,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/         }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345452,"byte_end":345465,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345470,"byte_end":345479,"line_start":284,"line_end":284,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345484,"byte_end":345498,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345503,"byte_end":345508,"line_start":286,"line_end":286,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345513,"byte_end":345520,"line_start":287,"line_end":287,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346638,"byte_end":346648,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"terminator","qualname":"<WriterBuilder>::terminator","value":"pub fn terminator(&mut Self, Terminator) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The record terminator to use when writing CSV.","sig":null,"attributes":[{"value":"/ The record terminator to use when writing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345640,"byte_end":345690,"line_start":293,"line_end":293,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345695,"byte_end":345698,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ A record terminator can be any single byte. The default is `\\n`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345703,"byte_end":345771,"line_start":295,"line_end":295,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345776,"byte_end":345779,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Note that RFC 4180 specifies that record terminators should be `\\r\\n`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345784,"byte_end":345858,"line_start":297,"line_end":297,"column_start":5,"column_end":79}},{"value":"/ To use `\\r\\n`, use the special `Terminator::CRLF` value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345863,"byte_end":345923,"line_start":298,"line_end":298,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345928,"byte_end":345931,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Example: CRLF","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345936,"byte_end":345955,"line_start":300,"line_end":300,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345960,"byte_end":345963,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ This shows how to use RFC 4180 compliant record terminators.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":345968,"byte_end":346032,"line_start":302,"line_end":302,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346037,"byte_end":346040,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346045,"byte_end":346052,"line_start":304,"line_end":304,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346057,"byte_end":346083,"line_start":305,"line_end":305,"column_start":5,"column_end":31}},{"value":"/ use csv::{Terminator, WriterBuilder};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346088,"byte_end":346129,"line_start":306,"line_end":306,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346134,"byte_end":346137,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346142,"byte_end":346181,"line_start":308,"line_end":308,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346186,"byte_end":346234,"line_start":309,"line_end":309,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346239,"byte_end":346281,"line_start":310,"line_end":310,"column_start":5,"column_end":47}},{"value":"/         .terminator(Terminator::CRLF)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346286,"byte_end":346327,"line_start":311,"line_end":311,"column_start":5,"column_end":46}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346332,"byte_end":346365,"line_start":312,"line_end":312,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346370,"byte_end":346414,"line_start":313,"line_end":313,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346419,"byte_end":346463,"line_start":314,"line_end":314,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346468,"byte_end":346471,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346476,"byte_end":346533,"line_start":316,"line_end":316,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\r\\nx,y,z\\r\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346538,"byte_end":346585,"line_start":317,"line_end":317,"column_start":5,"column_end":52}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346590,"byte_end":346604,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346609,"byte_end":346614,"line_start":319,"line_end":319,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346619,"byte_end":346626,"line_start":320,"line_end":320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348659,"byte_end":348670,"line_start":378,"line_end":378,"column_start":12,"column_end":23},"name":"quote_style","qualname":"<WriterBuilder>::quote_style","value":"pub fn quote_style(&mut Self, QuoteStyle) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quoting style to use when writing CSV.","sig":null,"attributes":[{"value":"/ The quoting style to use when writing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346775,"byte_end":346821,"line_start":326,"line_end":326,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346826,"byte_end":346829,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ By default, this is set to `QuoteStyle::Necessary`, which will only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346834,"byte_end":346905,"line_start":328,"line_end":328,"column_start":5,"column_end":76}},{"value":"/ use quotes when they are necessary to preserve the integrity of data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346910,"byte_end":346983,"line_start":329,"line_end":329,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346988,"byte_end":346991,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Note that unless the quote style is set to `Never`, an empty field is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":346996,"byte_end":347069,"line_start":331,"line_end":331,"column_start":5,"column_end":78}},{"value":"/ quoted if it is the only field in a record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347074,"byte_end":347121,"line_start":332,"line_end":332,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347126,"byte_end":347129,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ # Example: non-numeric quoting","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347134,"byte_end":347168,"line_start":334,"line_end":334,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347173,"byte_end":347176,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ This shows how to quote non-numeric fields only.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347181,"byte_end":347233,"line_start":336,"line_end":336,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347238,"byte_end":347241,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347246,"byte_end":347253,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347258,"byte_end":347284,"line_start":339,"line_end":339,"column_start":5,"column_end":31}},{"value":"/ use csv::{QuoteStyle, WriterBuilder};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347289,"byte_end":347330,"line_start":340,"line_end":340,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347335,"byte_end":347338,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347343,"byte_end":347382,"line_start":342,"line_end":342,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347387,"byte_end":347435,"line_start":343,"line_end":343,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347440,"byte_end":347482,"line_start":344,"line_end":344,"column_start":5,"column_end":47}},{"value":"/         .quote_style(QuoteStyle::NonNumeric)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347487,"byte_end":347535,"line_start":345,"line_end":345,"column_start":5,"column_end":53}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347540,"byte_end":347573,"line_start":346,"line_end":346,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"5\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347578,"byte_end":347622,"line_start":347,"line_end":347,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"3.14\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347627,"byte_end":347674,"line_start":348,"line_end":348,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347679,"byte_end":347682,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347687,"byte_end":347744,"line_start":350,"line_end":350,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\\"a\\\",5,\\\"c\\\"\\n3.14,\\\"y\\\",\\\"z\\\"\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347749,"byte_end":347811,"line_start":351,"line_end":351,"column_start":5,"column_end":67}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347816,"byte_end":347830,"line_start":352,"line_end":352,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347835,"byte_end":347840,"line_start":353,"line_end":353,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347845,"byte_end":347852,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347857,"byte_end":347860,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ # Example: never quote","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347865,"byte_end":347891,"line_start":356,"line_end":356,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347896,"byte_end":347899,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ This shows how the CSV writer can be made to never write quotes, even","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347904,"byte_end":347977,"line_start":358,"line_end":358,"column_start":5,"column_end":78}},{"value":"/ if it sacrifices the integrity of the data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":347982,"byte_end":348029,"line_start":359,"line_end":359,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348034,"byte_end":348037,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348042,"byte_end":348049,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348054,"byte_end":348080,"line_start":362,"line_end":362,"column_start":5,"column_end":31}},{"value":"/ use csv::{QuoteStyle, WriterBuilder};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348085,"byte_end":348126,"line_start":363,"line_end":363,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348131,"byte_end":348134,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348139,"byte_end":348178,"line_start":365,"line_end":365,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348183,"byte_end":348231,"line_start":366,"line_end":366,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348236,"byte_end":348278,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/         .quote_style(QuoteStyle::Never)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348283,"byte_end":348326,"line_start":368,"line_end":368,"column_start":5,"column_end":48}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348331,"byte_end":348364,"line_start":369,"line_end":369,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"foo\\nbar\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348369,"byte_end":348420,"line_start":370,"line_end":370,"column_start":5,"column_end":56}},{"value":"/     wtr.write_record(&[\"g\\\"h\\\"i\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348425,"byte_end":348475,"line_start":371,"line_end":371,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348480,"byte_end":348483,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348488,"byte_end":348545,"line_start":373,"line_end":373,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,foo\\nbar,c\\ng\\\"h\\\"i,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348550,"byte_end":348606,"line_start":374,"line_end":374,"column_start":5,"column_end":61}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348611,"byte_end":348625,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348630,"byte_end":348635,"line_start":376,"line_end":376,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348640,"byte_end":348647,"line_start":377,"line_end":377,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349525,"byte_end":349530,"line_start":406,"line_end":406,"column_start":12,"column_end":17},"name":"quote","qualname":"<WriterBuilder>::quote","value":"pub fn quote(&mut Self, u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quote character to use when writing CSV.","sig":null,"attributes":[{"value":"/ The quote character to use when writing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348800,"byte_end":348848,"line_start":383,"line_end":383,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348853,"byte_end":348856,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ The default is `b'\"'`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348861,"byte_end":348887,"line_start":385,"line_end":385,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348892,"byte_end":348895,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348900,"byte_end":348913,"line_start":387,"line_end":387,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348918,"byte_end":348921,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348926,"byte_end":348933,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348938,"byte_end":348964,"line_start":390,"line_end":390,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":348969,"byte_end":348996,"line_start":391,"line_end":391,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349001,"byte_end":349004,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349009,"byte_end":349048,"line_start":393,"line_end":393,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349053,"byte_end":349101,"line_start":394,"line_end":394,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349106,"byte_end":349148,"line_start":395,"line_end":395,"column_start":5,"column_end":47}},{"value":"/         .quote(b'\\'')","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349153,"byte_end":349178,"line_start":396,"line_end":396,"column_start":5,"column_end":30}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349183,"byte_end":349216,"line_start":397,"line_end":397,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"foo\\nbar\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349221,"byte_end":349272,"line_start":398,"line_end":398,"column_start":5,"column_end":56}},{"value":"/     wtr.write_record(&[\"g'h'i\", \"y\\\"y\\\"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349277,"byte_end":349331,"line_start":399,"line_end":399,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349336,"byte_end":349339,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349344,"byte_end":349401,"line_start":401,"line_end":401,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,'foo\\nbar',c\\n'g''h''i',y\\\"y\\\"y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349406,"byte_end":349472,"line_start":402,"line_end":402,"column_start":5,"column_end":71}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349477,"byte_end":349491,"line_start":403,"line_end":403,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349496,"byte_end":349501,"line_start":404,"line_end":404,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349506,"byte_end":349513,"line_start":405,"line_end":405,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350437,"byte_end":350449,"line_start":435,"line_end":435,"column_start":12,"column_end":24},"name":"double_quote","qualname":"<WriterBuilder>::double_quote","value":"pub fn double_quote(&mut Self, bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable double quote escapes.","sig":null,"attributes":[{"value":"/ Enable double quote escapes.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349636,"byte_end":349668,"line_start":411,"line_end":411,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349673,"byte_end":349676,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default, but it may be disabled. When disabled,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349681,"byte_end":349751,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ quotes in field data are escaped instead of doubled.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349756,"byte_end":349812,"line_start":414,"line_end":414,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349817,"byte_end":349820,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349825,"byte_end":349838,"line_start":416,"line_end":416,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349843,"byte_end":349846,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349851,"byte_end":349858,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349863,"byte_end":349889,"line_start":419,"line_end":419,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349894,"byte_end":349921,"line_start":420,"line_end":420,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349926,"byte_end":349929,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349934,"byte_end":349973,"line_start":422,"line_end":422,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":349978,"byte_end":350026,"line_start":423,"line_end":423,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350031,"byte_end":350073,"line_start":424,"line_end":424,"column_start":5,"column_end":47}},{"value":"/         .double_quote(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350078,"byte_end":350110,"line_start":425,"line_end":425,"column_start":5,"column_end":37}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350115,"byte_end":350148,"line_start":426,"line_end":426,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"foo\\\"bar\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350153,"byte_end":350204,"line_start":427,"line_end":427,"column_start":5,"column_end":56}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350209,"byte_end":350253,"line_start":428,"line_end":428,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350258,"byte_end":350261,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350266,"byte_end":350323,"line_start":430,"line_end":430,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,\\\"foo\\\\\\\"bar\\\",c\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350328,"byte_end":350384,"line_start":431,"line_end":431,"column_start":5,"column_end":61}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350389,"byte_end":350403,"line_start":432,"line_end":432,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350408,"byte_end":350413,"line_start":433,"line_end":433,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350418,"byte_end":350425,"line_start":434,"line_end":434,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351555,"byte_end":351561,"line_start":468,"line_end":468,"column_start":12,"column_end":18},"name":"escape","qualname":"<WriterBuilder>::escape","value":"pub fn escape(&mut Self, u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The escape character to use when writing CSV.","sig":null,"attributes":[{"value":"/ The escape character to use when writing CSV.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350560,"byte_end":350609,"line_start":440,"line_end":440,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350614,"byte_end":350617,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ In some variants of CSV, quotes are escaped using a special escape","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350622,"byte_end":350692,"line_start":442,"line_end":442,"column_start":5,"column_end":75}},{"value":"/ character like `\\` (instead of escaping quotes by doubling them).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350697,"byte_end":350766,"line_start":443,"line_end":443,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350771,"byte_end":350774,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ By default, writing these idiosyncratic escapes is disabled, and is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350779,"byte_end":350850,"line_start":445,"line_end":445,"column_start":5,"column_end":76}},{"value":"/ only used when `double_quote` is disabled.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350855,"byte_end":350901,"line_start":446,"line_end":446,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350906,"byte_end":350909,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350914,"byte_end":350927,"line_start":448,"line_end":448,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350932,"byte_end":350935,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350940,"byte_end":350947,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350952,"byte_end":350978,"line_start":451,"line_end":451,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":350983,"byte_end":351010,"line_start":452,"line_end":452,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351015,"byte_end":351018,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351023,"byte_end":351062,"line_start":454,"line_end":454,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351067,"byte_end":351115,"line_start":455,"line_end":455,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351120,"byte_end":351162,"line_start":456,"line_end":456,"column_start":5,"column_end":47}},{"value":"/         .double_quote(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351167,"byte_end":351199,"line_start":457,"line_end":457,"column_start":5,"column_end":37}},{"value":"/         .escape(b'$')","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351204,"byte_end":351229,"line_start":458,"line_end":458,"column_start":5,"column_end":30}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351234,"byte_end":351267,"line_start":459,"line_end":459,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"foo\\\"bar\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351272,"byte_end":351323,"line_start":460,"line_end":460,"column_start":5,"column_end":56}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351328,"byte_end":351372,"line_start":461,"line_end":461,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351377,"byte_end":351380,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351385,"byte_end":351442,"line_start":463,"line_end":463,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,\\\"foo$\\\"bar\\\",c\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351447,"byte_end":351502,"line_start":464,"line_end":464,"column_start":5,"column_end":60}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351507,"byte_end":351521,"line_start":465,"line_end":465,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351526,"byte_end":351531,"line_start":466,"line_end":466,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351536,"byte_end":351543,"line_start":467,"line_end":467,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351807,"byte_end":351822,"line_start":475,"line_end":475,"column_start":12,"column_end":27},"name":"buffer_capacity","qualname":"<WriterBuilder>::buffer_capacity","value":"pub fn buffer_capacity(&mut Self, usize) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the capacity (in bytes) of the internal buffer used in the CSV\n writer. This defaults to a reasonable setting.\n","sig":null,"attributes":[{"value":"/ Set the capacity (in bytes) of the internal buffer used in the CSV","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351670,"byte_end":351740,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/ writer. This defaults to a reasonable setting.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351745,"byte_end":351795,"line_start":474,"line_end":474,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1676},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":353193,"byte_end":353199,"line_start":508,"line_end":508,"column_start":12,"column_end":18},"name":"Writer","qualname":"::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681}],"decl_id":null,"docs":" A already configured CSV writer.","sig":null,"attributes":[{"value":"/ A already configured CSV writer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351931,"byte_end":351967,"line_start":481,"line_end":481,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351968,"byte_end":351971,"line_start":482,"line_end":482,"column_start":1,"column_end":4}},{"value":"/ A CSV writer takes as input Rust values and writes those values in a valid","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":351972,"byte_end":352050,"line_start":483,"line_end":483,"column_start":1,"column_end":79}},{"value":"/ CSV format as output.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352051,"byte_end":352076,"line_start":484,"line_end":484,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352077,"byte_end":352080,"line_start":485,"line_end":485,"column_start":1,"column_end":4}},{"value":"/ While CSV writing is considerably easier than parsing CSV, a proper writer","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352081,"byte_end":352159,"line_start":486,"line_end":486,"column_start":1,"column_end":79}},{"value":"/ will do a number of things for you:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352160,"byte_end":352199,"line_start":487,"line_end":487,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352200,"byte_end":352203,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ 1. Quote fields when necessary.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352204,"byte_end":352239,"line_start":489,"line_end":489,"column_start":1,"column_end":36}},{"value":"/ 2. Check that all records have the same number of fields.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352240,"byte_end":352301,"line_start":490,"line_end":490,"column_start":1,"column_end":62}},{"value":"/ 3. Write records with a single empty field correctly.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352302,"byte_end":352359,"line_start":491,"line_end":491,"column_start":1,"column_end":58}},{"value":"/ 4. Automatically serialize normal Rust types to CSV records. When that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352360,"byte_end":352434,"line_start":492,"line_end":492,"column_start":1,"column_end":75}},{"value":"/    type is a struct, a header row is automatically written corresponding","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352435,"byte_end":352511,"line_start":493,"line_end":493,"column_start":1,"column_end":77}},{"value":"/    to the fields of that struct.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352512,"byte_end":352548,"line_start":494,"line_end":494,"column_start":1,"column_end":37}},{"value":"/ 5. Use buffering intelligently and otherwise avoid allocation. (This means","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352549,"byte_end":352627,"line_start":495,"line_end":495,"column_start":1,"column_end":79}},{"value":"/    that callers should not do their own buffering.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352628,"byte_end":352683,"line_start":496,"line_end":496,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352684,"byte_end":352687,"line_start":497,"line_end":497,"column_start":1,"column_end":4}},{"value":"/ All of the above can be configured using a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352688,"byte_end":352734,"line_start":498,"line_end":498,"column_start":1,"column_end":47}},{"value":"/ [`WriterBuilder`](struct.WriterBuilder.html).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352735,"byte_end":352784,"line_start":499,"line_end":499,"column_start":1,"column_end":50}},{"value":"/ However, a `Writer` has a couple of convenience constructors (`from_path`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352785,"byte_end":352862,"line_start":500,"line_end":500,"column_start":1,"column_end":78}},{"value":"/ and `from_writer`) that use the default configuration.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352863,"byte_end":352921,"line_start":501,"line_end":501,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352922,"byte_end":352925,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ Note that the default configuration of a `Writer` uses `\\n` for record","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":352926,"byte_end":353000,"line_start":503,"line_end":503,"column_start":1,"column_end":75}},{"value":"/ terminators instead of `\\r\\n` as specified by RFC 4180. Use the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":353001,"byte_end":353068,"line_start":504,"line_end":504,"column_start":1,"column_end":68}},{"value":"/ `terminator` method on `WriterBuilder` to set the terminator to `\\r\\n` if","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":353069,"byte_end":353146,"line_start":505,"line_end":505,"column_start":1,"column_end":78}},{"value":"/ it's desired.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":353147,"byte_end":353164,"line_start":506,"line_end":506,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355917,"byte_end":355926,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Writer<File>>::from_path","value":"pub fn from_path<P: AsRef<Path>>(P) -> Result<Writer<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer with a default configuration that writes data to the\n given file path. The file is truncated if it already exists.","sig":null,"attributes":[{"value":"/ Build a CSV writer with a default configuration that writes data to the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355200,"byte_end":355275,"line_start":570,"line_end":570,"column_start":5,"column_end":80}},{"value":"/ given file path. The file is truncated if it already exists.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355280,"byte_end":355344,"line_start":571,"line_end":571,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355349,"byte_end":355352,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ If there was a problem opening the file at the given path, then this","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355357,"byte_end":355429,"line_start":573,"line_end":573,"column_start":5,"column_end":77}},{"value":"/ returns the corresponding error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355434,"byte_end":355470,"line_start":574,"line_end":574,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355475,"byte_end":355478,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355483,"byte_end":355496,"line_start":576,"line_end":576,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355501,"byte_end":355504,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355509,"byte_end":355522,"line_start":578,"line_end":578,"column_start":5,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355527,"byte_end":355553,"line_start":579,"line_end":579,"column_start":5,"column_end":31}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355558,"byte_end":355578,"line_start":580,"line_end":580,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355583,"byte_end":355586,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355591,"byte_end":355630,"line_start":582,"line_end":582,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355635,"byte_end":355683,"line_start":583,"line_end":583,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_path(\"foo.csv\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355688,"byte_end":355740,"line_start":584,"line_end":584,"column_start":5,"column_end":57}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355745,"byte_end":355789,"line_start":585,"line_end":585,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355794,"byte_end":355838,"line_start":586,"line_end":586,"column_start":5,"column_end":49}},{"value":"/     wtr.flush()?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355843,"byte_end":355864,"line_start":587,"line_end":587,"column_start":5,"column_end":26}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355869,"byte_end":355883,"line_start":588,"line_end":588,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355888,"byte_end":355893,"line_start":589,"line_end":589,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355898,"byte_end":355905,"line_start":590,"line_end":590,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357444,"byte_end":357455,"line_start":640,"line_end":640,"column_start":12,"column_end":23},"name":"from_writer","qualname":"<Writer<W>>::from_writer","value":"pub fn from_writer(W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer with a default configuration that writes data to\n `wtr`.","sig":null,"attributes":[{"value":"/ Build a CSV writer with a default configuration that writes data to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356679,"byte_end":356750,"line_start":617,"line_end":617,"column_start":5,"column_end":76}},{"value":"/ `wtr`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356755,"byte_end":356765,"line_start":618,"line_end":618,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356770,"byte_end":356773,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Note that the CSV writer is buffered automatically, so you should not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356778,"byte_end":356851,"line_start":620,"line_end":620,"column_start":5,"column_end":78}},{"value":"/ wrap `wtr` in a buffered writer like `io::BufWriter`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356856,"byte_end":356913,"line_start":621,"line_end":621,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356918,"byte_end":356921,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356926,"byte_end":356939,"line_start":623,"line_end":623,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356944,"byte_end":356947,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356952,"byte_end":356959,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356964,"byte_end":356990,"line_start":626,"line_end":626,"column_start":5,"column_end":31}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356995,"byte_end":357015,"line_start":627,"line_end":627,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357020,"byte_end":357023,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357028,"byte_end":357067,"line_start":629,"line_end":629,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357072,"byte_end":357120,"line_start":630,"line_end":630,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357125,"byte_end":357175,"line_start":631,"line_end":631,"column_start":5,"column_end":55}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357180,"byte_end":357224,"line_start":632,"line_end":632,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357229,"byte_end":357273,"line_start":633,"line_end":633,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357278,"byte_end":357281,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357286,"byte_end":357343,"line_start":635,"line_end":635,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357348,"byte_end":357391,"line_start":636,"line_end":636,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357396,"byte_end":357410,"line_start":637,"line_end":637,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357415,"byte_end":357420,"line_start":638,"line_end":638,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357425,"byte_end":357432,"line_start":639,"line_end":639,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365074,"byte_end":365083,"line_start":852,"line_end":852,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Writer<W>>::serialize","value":"pub fn serialize<S: Serialize>(&mut Self, S) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a single record using Serde.","sig":null,"attributes":[{"value":"/ Serialize a single record using Serde.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357536,"byte_end":357578,"line_start":644,"line_end":644,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357583,"byte_end":357586,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357591,"byte_end":357604,"line_start":646,"line_end":646,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357609,"byte_end":357612,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ This shows how to serialize normal Rust structs as CSV records. The","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357617,"byte_end":357688,"line_start":648,"line_end":648,"column_start":5,"column_end":76}},{"value":"/ fields of the struct are used to write a header row automatically.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357693,"byte_end":357763,"line_start":649,"line_end":649,"column_start":5,"column_end":75}},{"value":"/ (Writing the header row automatically can be disabled by building the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357768,"byte_end":357841,"line_start":650,"line_end":650,"column_start":5,"column_end":78}},{"value":"/ CSV writer with a [`WriterBuilder`](struct.WriterBuilder.html) and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357846,"byte_end":357916,"line_start":651,"line_end":651,"column_start":5,"column_end":75}},{"value":"/ calling the `has_headers` method.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357921,"byte_end":357959,"line_start":652,"line_end":652,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357964,"byte_end":357967,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357972,"byte_end":357979,"line_start":654,"line_end":654,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":357984,"byte_end":358010,"line_start":655,"line_end":655,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358015,"byte_end":358018,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358023,"byte_end":358043,"line_start":657,"line_end":657,"column_start":5,"column_end":25}},{"value":"/ use serde::Serialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358048,"byte_end":358073,"line_start":658,"line_end":658,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358078,"byte_end":358081,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358086,"byte_end":358110,"line_start":660,"line_end":660,"column_start":5,"column_end":29}},{"value":"/ struct Row<'a> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358115,"byte_end":358135,"line_start":661,"line_end":661,"column_start":5,"column_end":25}},{"value":"/     city: &'a str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358140,"byte_end":358162,"line_start":662,"line_end":662,"column_start":5,"column_end":27}},{"value":"/     country: &'a str,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358167,"byte_end":358192,"line_start":663,"line_end":663,"column_start":5,"column_end":30}},{"value":"/     // Serde allows us to name our headers exactly,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358197,"byte_end":358252,"line_start":664,"line_end":664,"column_start":5,"column_end":60}},{"value":"/     // even if they don't match our struct field names.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358257,"byte_end":358316,"line_start":665,"line_end":665,"column_start":5,"column_end":64}},{"value":"/     #[serde(rename = \"popcount\")]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358321,"byte_end":358358,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/     population: u64,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358363,"byte_end":358387,"line_start":667,"line_end":667,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358392,"byte_end":358397,"line_start":668,"line_end":668,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358402,"byte_end":358405,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358410,"byte_end":358449,"line_start":670,"line_end":670,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358454,"byte_end":358502,"line_start":671,"line_end":671,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358507,"byte_end":358557,"line_start":672,"line_end":672,"column_start":5,"column_end":55}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358562,"byte_end":358589,"line_start":673,"line_end":673,"column_start":5,"column_end":32}},{"value":"/         city: \"Boston\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358594,"byte_end":358621,"line_start":674,"line_end":674,"column_start":5,"column_end":32}},{"value":"/         country: \"United States\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358626,"byte_end":358663,"line_start":675,"line_end":675,"column_start":5,"column_end":42}},{"value":"/         population: 4628910,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358668,"byte_end":358700,"line_start":676,"line_end":676,"column_start":5,"column_end":37}},{"value":"/     })?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358705,"byte_end":358717,"line_start":677,"line_end":677,"column_start":5,"column_end":17}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358722,"byte_end":358749,"line_start":678,"line_end":678,"column_start":5,"column_end":32}},{"value":"/         city: \"Concord\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358754,"byte_end":358782,"line_start":679,"line_end":679,"column_start":5,"column_end":33}},{"value":"/         country: \"United States\",","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358787,"byte_end":358824,"line_start":680,"line_end":680,"column_start":5,"column_end":42}},{"value":"/         population: 42695,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358829,"byte_end":358859,"line_start":681,"line_end":681,"column_start":5,"column_end":35}},{"value":"/     })?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358864,"byte_end":358876,"line_start":682,"line_end":682,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358881,"byte_end":358884,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358889,"byte_end":358946,"line_start":684,"line_end":684,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358951,"byte_end":358978,"line_start":685,"line_end":685,"column_start":5,"column_end":32}},{"value":"/ city,country,popcount","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":358983,"byte_end":359008,"line_start":686,"line_end":686,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359013,"byte_end":359045,"line_start":687,"line_end":687,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359050,"byte_end":359081,"line_start":688,"line_end":688,"column_start":5,"column_end":36}},{"value":"/ \");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359086,"byte_end":359093,"line_start":689,"line_end":689,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359098,"byte_end":359112,"line_start":690,"line_end":690,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359117,"byte_end":359122,"line_start":691,"line_end":691,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359127,"byte_end":359134,"line_start":692,"line_end":692,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359139,"byte_end":359142,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ # Rules","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359147,"byte_end":359158,"line_start":694,"line_end":694,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359163,"byte_end":359166,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ The behavior of `serialize` is fairly simple:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359171,"byte_end":359220,"line_start":696,"line_end":696,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359225,"byte_end":359228,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ 1. Nested containers (tuples, `Vec`s, structs, etc.) are always","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359233,"byte_end":359300,"line_start":698,"line_end":698,"column_start":5,"column_end":72}},{"value":"/    flattened (depth-first order).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359305,"byte_end":359342,"line_start":699,"line_end":699,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359347,"byte_end":359350,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ 2. If `has_headers` is `true` and the type contains field names, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359355,"byte_end":359428,"line_start":701,"line_end":701,"column_start":5,"column_end":78}},{"value":"/    a header row is automatically generated.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359433,"byte_end":359480,"line_start":702,"line_end":702,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359485,"byte_end":359488,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ However, some container types cannot be serialized, and if","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359493,"byte_end":359555,"line_start":704,"line_end":704,"column_start":5,"column_end":67}},{"value":"/ `has_headers` is `true`, there are some additional restrictions on the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359560,"byte_end":359634,"line_start":705,"line_end":705,"column_start":5,"column_end":79}},{"value":"/ types that can be serialized. See below for details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359639,"byte_end":359695,"line_start":706,"line_end":706,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359700,"byte_end":359703,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ For the purpose of this section, Rust types can be divided into three","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359708,"byte_end":359781,"line_start":708,"line_end":708,"column_start":5,"column_end":78}},{"value":"/ categories: scalars, non-struct containers, and structs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359786,"byte_end":359846,"line_start":709,"line_end":709,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359851,"byte_end":359854,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ## Scalars","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359859,"byte_end":359873,"line_start":711,"line_end":711,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359878,"byte_end":359881,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ Single values with no field names are written like the following. Note","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359886,"byte_end":359960,"line_start":713,"line_end":713,"column_start":5,"column_end":79}},{"value":"/ that some of the outputs may be quoted, according to the selected","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":359965,"byte_end":360034,"line_start":714,"line_end":714,"column_start":5,"column_end":74}},{"value":"/ quoting style.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360039,"byte_end":360057,"line_start":715,"line_end":715,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360062,"byte_end":360065,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ | Name | Example Type | Example Value | Output |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360070,"byte_end":360122,"line_start":717,"line_end":717,"column_start":5,"column_end":57}},{"value":"/ | ---- | ---- | ---- | ---- |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360127,"byte_end":360160,"line_start":718,"line_end":718,"column_start":5,"column_end":38}},{"value":"/ | boolean | `bool` | `true` | `true` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360165,"byte_end":360207,"line_start":719,"line_end":719,"column_start":5,"column_end":47}},{"value":"/ | integers | `i8`, `i16`, `i32`, `i64`, `i128`, `u8`, `u16`, `u32`, `u64`, `u128` | `5` | `5` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360212,"byte_end":360311,"line_start":720,"line_end":720,"column_start":5,"column_end":104}},{"value":"/ | floats | `f32`, `f64` | `3.14` | `3.14` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360316,"byte_end":360363,"line_start":721,"line_end":721,"column_start":5,"column_end":52}},{"value":"/ | character | `char` | `'☃'` | `☃` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360368,"byte_end":360412,"line_start":722,"line_end":722,"column_start":5,"column_end":45}},{"value":"/ | string | `&str` | `\"hi\"` | `hi` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360417,"byte_end":360456,"line_start":723,"line_end":723,"column_start":5,"column_end":44}},{"value":"/ | bytes | `&[u8]` | `b\"hi\"[..]` | `hi` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360461,"byte_end":360505,"line_start":724,"line_end":724,"column_start":5,"column_end":49}},{"value":"/ | option | `Option` | `None` | *empty* |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360510,"byte_end":360554,"line_start":725,"line_end":725,"column_start":5,"column_end":49}},{"value":"/ | option |          | `Some(5)` | `5` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360559,"byte_end":360602,"line_start":726,"line_end":726,"column_start":5,"column_end":48}},{"value":"/ | unit | `()` | `()` | *empty* |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360607,"byte_end":360643,"line_start":727,"line_end":727,"column_start":5,"column_end":41}},{"value":"/ | unit struct | `struct Foo;` | `Foo` | `Foo` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360648,"byte_end":360699,"line_start":728,"line_end":728,"column_start":5,"column_end":56}},{"value":"/ | unit enum variant | `enum E { A, B }` | `E::A` | `A` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360704,"byte_end":360764,"line_start":729,"line_end":729,"column_start":5,"column_end":65}},{"value":"/ | newtype struct | `struct Foo(u8);` | `Foo(5)` | `5` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360769,"byte_end":360828,"line_start":730,"line_end":730,"column_start":5,"column_end":64}},{"value":"/ | newtype enum variant | `enum E { A(u8) }` | `E::A(5)` | `5` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360833,"byte_end":360900,"line_start":731,"line_end":731,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360905,"byte_end":360908,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Note that this table includes simple structs and enums. For example, to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360913,"byte_end":360988,"line_start":733,"line_end":733,"column_start":5,"column_end":80}},{"value":"/ serialize a field from either an integer or a float type, one can do","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":360993,"byte_end":361065,"line_start":734,"line_end":734,"column_start":5,"column_end":77}},{"value":"/ this:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361070,"byte_end":361079,"line_start":735,"line_end":735,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361084,"byte_end":361087,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361092,"byte_end":361099,"line_start":737,"line_end":737,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361104,"byte_end":361130,"line_start":738,"line_end":738,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361135,"byte_end":361138,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361143,"byte_end":361163,"line_start":740,"line_end":740,"column_start":5,"column_end":25}},{"value":"/ use serde::Serialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361168,"byte_end":361193,"line_start":741,"line_end":741,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361198,"byte_end":361201,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361206,"byte_end":361230,"line_start":743,"line_end":743,"column_start":5,"column_end":29}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361235,"byte_end":361251,"line_start":744,"line_end":744,"column_start":5,"column_end":21}},{"value":"/     label: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361256,"byte_end":361278,"line_start":745,"line_end":745,"column_start":5,"column_end":27}},{"value":"/     value: Value,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361283,"byte_end":361304,"line_start":746,"line_end":746,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361309,"byte_end":361314,"line_start":747,"line_end":747,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361319,"byte_end":361322,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361327,"byte_end":361351,"line_start":749,"line_end":749,"column_start":5,"column_end":29}},{"value":"/ enum Value {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361356,"byte_end":361372,"line_start":750,"line_end":750,"column_start":5,"column_end":21}},{"value":"/     Integer(i64),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361377,"byte_end":361398,"line_start":751,"line_end":751,"column_start":5,"column_end":26}},{"value":"/     Float(f64),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361403,"byte_end":361422,"line_start":752,"line_end":752,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361427,"byte_end":361432,"line_start":753,"line_end":753,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361437,"byte_end":361440,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361445,"byte_end":361484,"line_start":755,"line_end":755,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361489,"byte_end":361537,"line_start":756,"line_end":756,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361542,"byte_end":361592,"line_start":757,"line_end":757,"column_start":5,"column_end":55}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361597,"byte_end":361624,"line_start":758,"line_end":758,"column_start":5,"column_end":32}},{"value":"/         label: \"foo\".to_string(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361629,"byte_end":361666,"line_start":759,"line_end":759,"column_start":5,"column_end":42}},{"value":"/         value: Value::Integer(3),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361671,"byte_end":361708,"line_start":760,"line_end":760,"column_start":5,"column_end":42}},{"value":"/     })?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361713,"byte_end":361725,"line_start":761,"line_end":761,"column_start":5,"column_end":17}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361730,"byte_end":361757,"line_start":762,"line_end":762,"column_start":5,"column_end":32}},{"value":"/         label: \"bar\".to_string(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361762,"byte_end":361799,"line_start":763,"line_end":763,"column_start":5,"column_end":42}},{"value":"/         value: Value::Float(3.14),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361804,"byte_end":361842,"line_start":764,"line_end":764,"column_start":5,"column_end":43}},{"value":"/     })?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361847,"byte_end":361859,"line_start":765,"line_end":765,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361864,"byte_end":361867,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361872,"byte_end":361929,"line_start":767,"line_end":767,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361934,"byte_end":361961,"line_start":768,"line_end":768,"column_start":5,"column_end":32}},{"value":"/ label,value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361966,"byte_end":361981,"line_start":769,"line_end":769,"column_start":5,"column_end":20}},{"value":"/ foo,3","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":361986,"byte_end":361995,"line_start":770,"line_end":770,"column_start":5,"column_end":14}},{"value":"/ bar,3.14","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362000,"byte_end":362012,"line_start":771,"line_end":771,"column_start":5,"column_end":17}},{"value":"/ \");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362017,"byte_end":362024,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362029,"byte_end":362043,"line_start":773,"line_end":773,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362048,"byte_end":362053,"line_start":774,"line_end":774,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362058,"byte_end":362065,"line_start":775,"line_end":775,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362070,"byte_end":362073,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ ## Non-Struct Containers","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362078,"byte_end":362106,"line_start":777,"line_end":777,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362111,"byte_end":362114,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ Nested containers are flattened to their scalar components, with the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362119,"byte_end":362191,"line_start":779,"line_end":779,"column_start":5,"column_end":77}},{"value":"/ exception of a few types that are not allowed:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362196,"byte_end":362246,"line_start":780,"line_end":780,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362251,"byte_end":362254,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ | Name | Example Type | Example Value | Output |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362259,"byte_end":362311,"line_start":782,"line_end":782,"column_start":5,"column_end":57}},{"value":"/ | ---- | ---- | ---- | ---- |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362316,"byte_end":362349,"line_start":783,"line_end":783,"column_start":5,"column_end":38}},{"value":"/ | sequence | `Vec<u8>` | `vec![1, 2, 3]` | `1,2,3` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362354,"byte_end":362410,"line_start":784,"line_end":784,"column_start":5,"column_end":61}},{"value":"/ | tuple | `(u8, bool)` | `(5, true)` | `5,true` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362415,"byte_end":362468,"line_start":785,"line_end":785,"column_start":5,"column_end":58}},{"value":"/ | tuple struct | `Foo(u8, bool)` | `Foo(5, true)` | `5,true` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362473,"byte_end":362539,"line_start":786,"line_end":786,"column_start":5,"column_end":71}},{"value":"/ | tuple enum variant | `enum E { A(u8, bool) }` | `E::A(5, true)` | *error* |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362544,"byte_end":362625,"line_start":787,"line_end":787,"column_start":5,"column_end":86}},{"value":"/ | struct enum variant | `enum E { V { a: u8, b: bool } }` | `E::V { a: 5, b: true }` | *error* |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362630,"byte_end":362730,"line_start":788,"line_end":788,"column_start":5,"column_end":105}},{"value":"/ | map | `BTreeMap<K, V>` | `BTreeMap::new()` | *error* |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362735,"byte_end":362795,"line_start":789,"line_end":789,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362800,"byte_end":362803,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ ## Structs","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362808,"byte_end":362822,"line_start":791,"line_end":791,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362827,"byte_end":362830,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ Like the other containers, structs are flattened to their scalar","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362835,"byte_end":362903,"line_start":793,"line_end":793,"column_start":5,"column_end":73}},{"value":"/ components:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362908,"byte_end":362923,"line_start":794,"line_end":794,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362928,"byte_end":362931,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ | Name | Example Type | Example Value | Output |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362936,"byte_end":362988,"line_start":796,"line_end":796,"column_start":5,"column_end":57}},{"value":"/ | ---- | ---- | ---- | ---- |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":362993,"byte_end":363026,"line_start":797,"line_end":797,"column_start":5,"column_end":38}},{"value":"/ | struct | `struct Foo { a: u8, b: bool }` | `Foo { a: 5, b: true }` | `5,true` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363031,"byte_end":363116,"line_start":798,"line_end":798,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363121,"byte_end":363124,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` is `false`, then there are no additional restrictions;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363129,"byte_end":363204,"line_start":800,"line_end":800,"column_start":5,"column_end":80}},{"value":"/ types can be nested arbitrarily. For example:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363209,"byte_end":363258,"line_start":801,"line_end":801,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363263,"byte_end":363266,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363271,"byte_end":363278,"line_start":803,"line_end":803,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363283,"byte_end":363309,"line_start":804,"line_end":804,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363314,"byte_end":363317,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363322,"byte_end":363349,"line_start":806,"line_end":806,"column_start":5,"column_end":32}},{"value":"/ use serde::Serialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363354,"byte_end":363379,"line_start":807,"line_end":807,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363384,"byte_end":363387,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363392,"byte_end":363416,"line_start":809,"line_end":809,"column_start":5,"column_end":29}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363421,"byte_end":363437,"line_start":810,"line_end":810,"column_start":5,"column_end":21}},{"value":"/     label: String,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363442,"byte_end":363464,"line_start":811,"line_end":811,"column_start":5,"column_end":27}},{"value":"/     values: Vec<f64>,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363469,"byte_end":363494,"line_start":812,"line_end":812,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363499,"byte_end":363504,"line_start":813,"line_end":813,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363509,"byte_end":363512,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363517,"byte_end":363556,"line_start":815,"line_end":815,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363561,"byte_end":363609,"line_start":816,"line_end":816,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363614,"byte_end":363656,"line_start":817,"line_end":817,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363661,"byte_end":363692,"line_start":818,"line_end":818,"column_start":5,"column_end":36}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363697,"byte_end":363730,"line_start":819,"line_end":819,"column_start":5,"column_end":38}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363735,"byte_end":363762,"line_start":820,"line_end":820,"column_start":5,"column_end":32}},{"value":"/         label: \"foo\".to_string(),","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363767,"byte_end":363804,"line_start":821,"line_end":821,"column_start":5,"column_end":42}},{"value":"/         values: vec![1.1234, 2.5678, 3.14],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363809,"byte_end":363856,"line_start":822,"line_end":822,"column_start":5,"column_end":52}},{"value":"/     })?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363861,"byte_end":363873,"line_start":823,"line_end":823,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363878,"byte_end":363881,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363886,"byte_end":363943,"line_start":825,"line_end":825,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363948,"byte_end":363975,"line_start":826,"line_end":826,"column_start":5,"column_end":32}},{"value":"/ foo,1.1234,2.5678,3.14","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":363980,"byte_end":364006,"line_start":827,"line_end":827,"column_start":5,"column_end":31}},{"value":"/ \");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364011,"byte_end":364018,"line_start":828,"line_end":828,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364023,"byte_end":364037,"line_start":829,"line_end":829,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364042,"byte_end":364047,"line_start":830,"line_end":830,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364052,"byte_end":364059,"line_start":831,"line_end":831,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364064,"byte_end":364067,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ However, if `has_headers` were enabled in the above example, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364072,"byte_end":364141,"line_start":833,"line_end":833,"column_start":5,"column_end":74}},{"value":"/ serialization would return an error. Specifically, when `has_headers` is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364146,"byte_end":364222,"line_start":834,"line_end":834,"column_start":5,"column_end":81}},{"value":"/ `true`, there are two restrictions:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364227,"byte_end":364266,"line_start":835,"line_end":835,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364271,"byte_end":364274,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ 1. Named field values in structs must be scalars.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364279,"byte_end":364332,"line_start":837,"line_end":837,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364337,"byte_end":364340,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ 2. All scalars must be named field values in structs.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364345,"byte_end":364402,"line_start":839,"line_end":839,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364407,"byte_end":364410,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ Other than these two restrictions, types can be nested arbitrarily.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364415,"byte_end":364486,"line_start":841,"line_end":841,"column_start":5,"column_end":76}},{"value":"/ Here are a few examples:","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364491,"byte_end":364519,"line_start":842,"line_end":842,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364524,"byte_end":364527,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ | Value | Header | Record |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364532,"byte_end":364563,"line_start":844,"line_end":844,"column_start":5,"column_end":36}},{"value":"/ | ---- | ---- | ---- |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364568,"byte_end":364594,"line_start":845,"line_end":845,"column_start":5,"column_end":31}},{"value":"/ | `(Foo { x: 5, y: 6 }, Bar { z: true })` | `x,y,z` | `5,6,true` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364599,"byte_end":364669,"line_start":846,"line_end":846,"column_start":5,"column_end":75}},{"value":"/ | `vec![Foo { x: 5, y: 6 }, Foo { x: 7, y: 8 }]` | `x,y,x,y` | `5,6,7,8` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364674,"byte_end":364752,"line_start":847,"line_end":847,"column_start":5,"column_end":83}},{"value":"/ | `(Foo { x: 5, y: 6 }, vec![Bar { z: Baz(true) }])` | `x,y,z` | `5,6,true` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364757,"byte_end":364838,"line_start":848,"line_end":848,"column_start":5,"column_end":86}},{"value":"/ | `Foo { x: 5, y: (6, 7) }` | *error: restriction 1* | `5,6,7` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364843,"byte_end":364911,"line_start":849,"line_end":849,"column_start":5,"column_end":73}},{"value":"/ | `(5, Foo { x: 6, y: 7 }` | *error: restriction 2* | `5,6,7` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364916,"byte_end":364983,"line_start":850,"line_end":850,"column_start":5,"column_end":72}},{"value":"/ | `(Foo { x: 5, y: 6 }, true)` | *error: restriction 2* | `5,6,true` |","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":364988,"byte_end":365062,"line_start":851,"line_end":851,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366515,"byte_end":366527,"line_start":893,"line_end":893,"column_start":12,"column_end":24},"name":"write_record","qualname":"<Writer<W>>::write_record","value":"pub fn write_record<I, T>(&mut Self, I) -> Result<()> where\nI: IntoIterator<Item = T>, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Write a single record.","sig":null,"attributes":[{"value":"/ Write a single record.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365591,"byte_end":365617,"line_start":867,"line_end":867,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365622,"byte_end":365625,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ This method accepts something that can be turned into an iterator that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365630,"byte_end":365704,"line_start":869,"line_end":869,"column_start":5,"column_end":79}},{"value":"/ yields elements that can be represented by a `&[u8]`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365709,"byte_end":365766,"line_start":870,"line_end":870,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365771,"byte_end":365774,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ This may be called with an empty iterator, which will cause a record","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365779,"byte_end":365851,"line_start":872,"line_end":872,"column_start":5,"column_end":77}},{"value":"/ terminator to be written. If no fields had been written, then a single","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365856,"byte_end":365930,"line_start":873,"line_end":873,"column_start":5,"column_end":79}},{"value":"/ empty field is written before the terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365935,"byte_end":365984,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365989,"byte_end":365992,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":365997,"byte_end":366010,"line_start":876,"line_end":876,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366015,"byte_end":366018,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366023,"byte_end":366030,"line_start":878,"line_end":878,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366035,"byte_end":366061,"line_start":879,"line_end":879,"column_start":5,"column_end":31}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366066,"byte_end":366086,"line_start":880,"line_end":880,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366091,"byte_end":366094,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366099,"byte_end":366138,"line_start":882,"line_end":882,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366143,"byte_end":366191,"line_start":883,"line_end":883,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366196,"byte_end":366246,"line_start":884,"line_end":884,"column_start":5,"column_end":55}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366251,"byte_end":366295,"line_start":885,"line_end":885,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366300,"byte_end":366344,"line_start":886,"line_end":886,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366349,"byte_end":366352,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366357,"byte_end":366414,"line_start":888,"line_end":888,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366419,"byte_end":366462,"line_start":889,"line_end":889,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366467,"byte_end":366481,"line_start":890,"line_end":890,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366486,"byte_end":366491,"line_start":891,"line_end":891,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366496,"byte_end":366503,"line_start":892,"line_end":892,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367994,"byte_end":368011,"line_start":935,"line_end":935,"column_start":12,"column_end":29},"name":"write_byte_record","qualname":"<Writer<W>>::write_byte_record","value":"pub fn write_byte_record(&mut Self, &ByteRecord) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single `ByteRecord`.","sig":null,"attributes":[{"value":"/ Write a single `ByteRecord`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366783,"byte_end":366815,"line_start":904,"line_end":904,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366820,"byte_end":366823,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ This method accepts a borrowed `ByteRecord` and writes its contents","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366828,"byte_end":366899,"line_start":906,"line_end":906,"column_start":5,"column_end":76}},{"value":"/ to the underlying writer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366904,"byte_end":366933,"line_start":907,"line_end":907,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366938,"byte_end":366941,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ This is similar to `write_record` except that it specifically requires","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":366946,"byte_end":367020,"line_start":909,"line_end":909,"column_start":5,"column_end":79}},{"value":"/ a `ByteRecord`. This permits the writer to possibly write the record","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367025,"byte_end":367097,"line_start":910,"line_end":910,"column_start":5,"column_end":77}},{"value":"/ more quickly than the more generic `write_record`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367102,"byte_end":367156,"line_start":911,"line_end":911,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367161,"byte_end":367164,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ This may be called with an empty record, which will cause a record","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367169,"byte_end":367239,"line_start":913,"line_end":913,"column_start":5,"column_end":75}},{"value":"/ terminator to be written. If no fields had been written, then a single","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367244,"byte_end":367318,"line_start":914,"line_end":914,"column_start":5,"column_end":79}},{"value":"/ empty field is written before the terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367323,"byte_end":367372,"line_start":915,"line_end":915,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367377,"byte_end":367380,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367385,"byte_end":367398,"line_start":917,"line_end":917,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367403,"byte_end":367406,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367411,"byte_end":367418,"line_start":919,"line_end":919,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367423,"byte_end":367449,"line_start":920,"line_end":920,"column_start":5,"column_end":31}},{"value":"/ use csv::{ByteRecord, Writer};","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367454,"byte_end":367488,"line_start":921,"line_end":921,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367493,"byte_end":367496,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367501,"byte_end":367540,"line_start":923,"line_end":923,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367545,"byte_end":367593,"line_start":924,"line_end":924,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367598,"byte_end":367648,"line_start":925,"line_end":925,"column_start":5,"column_end":55}},{"value":"/     wtr.write_byte_record(&ByteRecord::from(&[\"a\", \"b\", \"c\"][..]))?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367653,"byte_end":367725,"line_start":926,"line_end":926,"column_start":5,"column_end":77}},{"value":"/     wtr.write_byte_record(&ByteRecord::from(&[\"x\", \"y\", \"z\"][..]))?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367730,"byte_end":367802,"line_start":927,"line_end":927,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367807,"byte_end":367810,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367815,"byte_end":367872,"line_start":929,"line_end":929,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367877,"byte_end":367920,"line_start":930,"line_end":930,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367925,"byte_end":367939,"line_start":931,"line_end":931,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367944,"byte_end":367949,"line_start":932,"line_end":932,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367954,"byte_end":367961,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"inline(never)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":367966,"byte_end":367982,"line_start":934,"line_end":934,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371464,"byte_end":371475,"line_start":1023,"line_end":1023,"column_start":12,"column_end":23},"name":"write_field","qualname":"<Writer<W>>::write_field","value":"pub fn write_field<T: AsRef<[u8]>>(&mut Self, T) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single field.","sig":null,"attributes":[{"value":"/ Write a single field.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370366,"byte_end":370391,"line_start":991,"line_end":991,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370396,"byte_end":370399,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ One should prefer using `write_record` over this method. It is provided","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370404,"byte_end":370479,"line_start":993,"line_end":993,"column_start":5,"column_end":80}},{"value":"/ for cases where writing a field at a time is more convenient than","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370484,"byte_end":370553,"line_start":994,"line_end":994,"column_start":5,"column_end":74}},{"value":"/ writing a record at a time.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370558,"byte_end":370589,"line_start":995,"line_end":995,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370594,"byte_end":370597,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ Note that if this API is used, `write_record` should be called with an","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370602,"byte_end":370676,"line_start":997,"line_end":997,"column_start":5,"column_end":79}},{"value":"/ empty iterator to write a record terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370681,"byte_end":370729,"line_start":998,"line_end":998,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370734,"byte_end":370737,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370742,"byte_end":370755,"line_start":1000,"line_end":1000,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370760,"byte_end":370763,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370768,"byte_end":370775,"line_start":1002,"line_end":1002,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370780,"byte_end":370806,"line_start":1003,"line_end":1003,"column_start":5,"column_end":31}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370811,"byte_end":370831,"line_start":1004,"line_end":1004,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370836,"byte_end":370839,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370844,"byte_end":370883,"line_start":1006,"line_end":1006,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370888,"byte_end":370936,"line_start":1007,"line_end":1007,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370941,"byte_end":370991,"line_start":1008,"line_end":1008,"column_start":5,"column_end":55}},{"value":"/     wtr.write_field(\"a\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":370996,"byte_end":371026,"line_start":1009,"line_end":1009,"column_start":5,"column_end":35}},{"value":"/     wtr.write_field(\"b\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371031,"byte_end":371061,"line_start":1010,"line_end":1010,"column_start":5,"column_end":35}},{"value":"/     wtr.write_field(\"c\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371066,"byte_end":371096,"line_start":1011,"line_end":1011,"column_start":5,"column_end":35}},{"value":"/     wtr.write_record(None::<&[u8]>)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371101,"byte_end":371142,"line_start":1012,"line_end":1012,"column_start":5,"column_end":46}},{"value":"/     wtr.write_field(\"x\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371147,"byte_end":371177,"line_start":1013,"line_end":1013,"column_start":5,"column_end":35}},{"value":"/     wtr.write_field(\"y\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371182,"byte_end":371212,"line_start":1014,"line_end":1014,"column_start":5,"column_end":35}},{"value":"/     wtr.write_field(\"z\")?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371217,"byte_end":371247,"line_start":1015,"line_end":1015,"column_start":5,"column_end":35}},{"value":"/     wtr.write_record(None::<&[u8]>)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371252,"byte_end":371293,"line_start":1016,"line_end":1016,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371298,"byte_end":371301,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371306,"byte_end":371363,"line_start":1018,"line_end":1018,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371368,"byte_end":371411,"line_start":1019,"line_end":1019,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371416,"byte_end":371430,"line_start":1020,"line_end":1020,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371435,"byte_end":371440,"line_start":1021,"line_end":1021,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":371445,"byte_end":371452,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":372647,"byte_end":372652,"line_start":1057,"line_end":1057,"column_start":12,"column_end":17},"name":"flush","qualname":"<Writer<W>>::flush","value":"pub fn flush(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the internal buffer to the underlying writer.","sig":null,"attributes":[{"value":"/ Flush the contents of the internal buffer to the underlying writer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":372389,"byte_end":372460,"line_start":1051,"line_end":1051,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":372465,"byte_end":372468,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ If there was a problem writing to the underlying writer, then an error","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":372473,"byte_end":372547,"line_start":1053,"line_end":1053,"column_start":5,"column_end":79}},{"value":"/ is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":372552,"byte_end":372568,"line_start":1054,"line_end":1054,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":372573,"byte_end":372576,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ Note that this also flushes the underlying writer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":372581,"byte_end":372635,"line_start":1056,"line_end":1056,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":373271,"byte_end":373281,"line_start":1076,"line_end":1076,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W>>::into_inner","value":"pub fn into_inner(Self) -> result::Result<W, IntoInnerError<Writer<W>>>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the internal buffer and return the underlying\n writer.\n","sig":null,"attributes":[{"value":"/ Flush the contents of the internal buffer and return the underlying","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":373172,"byte_end":373243,"line_start":1074,"line_end":1074,"column_start":5,"column_end":76}},{"value":"/ writer.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":373248,"byte_end":373259,"line_start":1075,"line_end":1075,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1710},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4626,"byte_end":4632,"line_start":183,"line_end":183,"column_start":5,"column_end":11},"name":"Always","qualname":"::QuoteStyle::Always","value":"QuoteStyle::Always","parent":{"krate":0,"index":1709},"children":[],"decl_id":null,"docs":" This puts quotes around every field. Always.\n","sig":null,"attributes":[{"value":"/ This puts quotes around every field. Always.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4573,"byte_end":4621,"line_start":182,"line_end":182,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1712},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4967,"byte_end":4976,"line_start":191,"line_end":191,"column_start":5,"column_end":14},"name":"Necessary","qualname":"::QuoteStyle::Necessary","value":"QuoteStyle::Necessary","parent":{"krate":0,"index":1709},"children":[],"decl_id":null,"docs":" This puts quotes around fields only when necessary.","sig":null,"attributes":[{"value":"/ This puts quotes around fields only when necessary.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4638,"byte_end":4693,"line_start":184,"line_end":184,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4698,"byte_end":4701,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ They are necessary when fields contain a quote, delimiter or record","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4706,"byte_end":4777,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/ terminator. Quotes are also necessary when writing an empty record","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4782,"byte_end":4852,"line_start":187,"line_end":187,"column_start":5,"column_end":75}},{"value":"/ (which is indistinguishable from a record with one empty field).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4857,"byte_end":4925,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4930,"byte_end":4933,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ This is the default.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4938,"byte_end":4962,"line_start":190,"line_end":190,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1714},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5206,"byte_end":5216,"line_start":195,"line_end":195,"column_start":5,"column_end":15},"name":"NonNumeric","qualname":"::QuoteStyle::NonNumeric","value":"QuoteStyle::NonNumeric","parent":{"krate":0,"index":1709},"children":[],"decl_id":null,"docs":" This puts quotes around all fields that are non-numeric. Namely, when\n writing a field that does not parse as a valid float or integer, then\n quotes will be used even if they aren't strictly necessary.\n","sig":null,"attributes":[{"value":"/ This puts quotes around all fields that are non-numeric. Namely, when","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4982,"byte_end":5055,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"/ writing a field that does not parse as a valid float or integer, then","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5060,"byte_end":5133,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/ quotes will be used even if they aren't strictly necessary.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5138,"byte_end":5201,"line_start":194,"line_end":194,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1716},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5301,"byte_end":5306,"line_start":197,"line_end":197,"column_start":5,"column_end":10},"name":"Never","qualname":"::QuoteStyle::Never","value":"QuoteStyle::Never","parent":{"krate":0,"index":1709},"children":[],"decl_id":null,"docs":" This *never* writes quotes, even if it would produce invalid CSV data.\n","sig":null,"attributes":[{"value":"/ This *never* writes quotes, even if it would produce invalid CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5222,"byte_end":5296,"line_start":196,"line_end":196,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1718},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5586,"byte_end":5601,"line_start":204,"line_end":204,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::QuoteStyle::__Nonexhaustive","value":"QuoteStyle::__Nonexhaustive","parent":{"krate":0,"index":1709},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5312,"byte_end":5366,"line_start":198,"line_end":198,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5371,"byte_end":5374,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5379,"byte_end":5449,"line_start":200,"line_end":200,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5454,"byte_end":5526,"line_start":201,"line_end":201,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5531,"byte_end":5562,"line_start":202,"line_end":202,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1709},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4556,"byte_end":4566,"line_start":181,"line_end":181,"column_start":10,"column_end":20},"name":"QuoteStyle","qualname":"::QuoteStyle","value":"pub enum QuoteStyle { Always, Necessary, NonNumeric, Never, __Nonexhaustive, }","parent":null,"children":[{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718}],"decl_id":null,"docs":" The quoting style to use when writing CSV data.\n","sig":null,"attributes":[{"value":"/ The quoting style to use when writing CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4465,"byte_end":4516,"line_start":179,"line_end":179,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1726},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6421,"byte_end":6425,"line_start":232,"line_end":232,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::Terminator::CRLF","value":"Terminator::CRLF","parent":{"krate":0,"index":1725},"children":[],"decl_id":null,"docs":" Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.\n","sig":null,"attributes":[{"value":"/ Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6354,"byte_end":6416,"line_start":231,"line_end":231,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1728},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6485,"byte_end":6488,"line_start":234,"line_end":234,"column_start":5,"column_end":8},"name":"Any","qualname":"::Terminator::Any","value":"Terminator::Any(u8)","parent":{"krate":0,"index":1725},"children":[],"decl_id":null,"docs":" Parses the byte given as a record terminator.\n","sig":null,"attributes":[{"value":"/ Parses the byte given as a record terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6431,"byte_end":6480,"line_start":233,"line_end":233,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1731},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6772,"byte_end":6787,"line_start":241,"line_end":241,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::Terminator::__Nonexhaustive","value":"Terminator::__Nonexhaustive","parent":{"krate":0,"index":1725},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6498,"byte_end":6552,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6557,"byte_end":6560,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6565,"byte_end":6635,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6640,"byte_end":6712,"line_start":238,"line_end":238,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6717,"byte_end":6748,"line_start":239,"line_end":239,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1725},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6337,"byte_end":6347,"line_start":230,"line_end":230,"column_start":10,"column_end":20},"name":"Terminator","qualname":"::Terminator","value":"pub enum Terminator { CRLF, Any(u8), __Nonexhaustive, }","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1731}],"decl_id":null,"docs":" A record terminator.","sig":null,"attributes":[{"value":"/ A record terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6114,"byte_end":6138,"line_start":225,"line_end":225,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6139,"byte_end":6142,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Use this to specify the record terminator while parsing CSV. The default is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6143,"byte_end":6222,"line_start":227,"line_end":227,"column_start":1,"column_end":80}},{"value":"/ CRLF, which treats `\\r`, `\\n` or `\\r\\n` as a single record terminator.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6223,"byte_end":6297,"line_start":228,"line_end":228,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1739},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7396,"byte_end":7400,"line_start":265,"line_end":265,"column_start":5,"column_end":9},"name":"None","qualname":"::Trim::None","value":"Trim::None","parent":{"krate":0,"index":1738},"children":[],"decl_id":null,"docs":" Preserves fields and headers. This is the default.\n","sig":null,"attributes":[{"value":"/ Preserves fields and headers. This is the default.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7337,"byte_end":7391,"line_start":264,"line_end":264,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1741},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7444,"byte_end":7451,"line_start":267,"line_end":267,"column_start":5,"column_end":12},"name":"Headers","qualname":"::Trim::Headers","value":"Trim::Headers","parent":{"krate":0,"index":1738},"children":[],"decl_id":null,"docs":" Trim whitespace from headers.\n","sig":null,"attributes":[{"value":"/ Trim whitespace from headers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7406,"byte_end":7439,"line_start":266,"line_end":266,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1743},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7511,"byte_end":7517,"line_start":269,"line_end":269,"column_start":5,"column_end":11},"name":"Fields","qualname":"::Trim::Fields","value":"Trim::Fields","parent":{"krate":0,"index":1738},"children":[],"decl_id":null,"docs":" Trim whitespace from fields, but not headers.\n","sig":null,"attributes":[{"value":"/ Trim whitespace from fields, but not headers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7457,"byte_end":7506,"line_start":268,"line_end":268,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1745},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7572,"byte_end":7575,"line_start":271,"line_end":271,"column_start":5,"column_end":8},"name":"All","qualname":"::Trim::All","value":"Trim::All","parent":{"krate":0,"index":1738},"children":[],"decl_id":null,"docs":" Trim whitespace from fields and headers.\n","sig":null,"attributes":[{"value":"/ Trim whitespace from fields and headers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7523,"byte_end":7567,"line_start":270,"line_end":270,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1747},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7855,"byte_end":7870,"line_start":278,"line_end":278,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::Trim::__Nonexhaustive","value":"Trim::__Nonexhaustive","parent":{"krate":0,"index":1738},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7581,"byte_end":7635,"line_start":272,"line_end":272,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7640,"byte_end":7643,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7648,"byte_end":7718,"line_start":274,"line_end":274,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7723,"byte_end":7795,"line_start":275,"line_end":275,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7800,"byte_end":7831,"line_start":276,"line_end":276,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1738},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7326,"byte_end":7330,"line_start":263,"line_end":263,"column_start":10,"column_end":14},"name":"Trim","qualname":"::Trim","value":"pub enum Trim { None, Headers, Fields, All, __Nonexhaustive, }","parent":null,"children":[{"krate":0,"index":1739},{"krate":0,"index":1741},{"krate":0,"index":1743},{"krate":0,"index":1745},{"krate":0,"index":1747}],"decl_id":null,"docs":" The whitespace preservation behaviour when reading CSV data.\n","sig":null,"attributes":[{"value":"/ The whitespace preservation behaviour when reading CSV data.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7211,"byte_end":7275,"line_start":261,"line_end":261,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1394},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":10239,"byte_end":10253,"line_start":353,"line_end":353,"column_start":8,"column_end":22},"name":"invalid_option","qualname":"::invalid_option","value":"pub fn invalid_option<'de, D, T>(D) -> result::Result<Option<T>, D::Error>\nwhere D: Deserializer, Option<T>: Deserialize","parent":null,"children":[],"decl_id":null,"docs":" A custom Serde deserializer for possibly invalid `Option<T>` fields.","sig":null,"attributes":[{"value":"/ A custom Serde deserializer for possibly invalid `Option<T>` fields.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8174,"byte_end":8246,"line_start":297,"line_end":297,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8247,"byte_end":8250,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ When deserializing CSV data, it is sometimes desirable to simply ignore","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8251,"byte_end":8326,"line_start":299,"line_end":299,"column_start":1,"column_end":76}},{"value":"/ fields with invalid data. For example, there might be a field that is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8327,"byte_end":8400,"line_start":300,"line_end":300,"column_start":1,"column_end":74}},{"value":"/ usually a number, but will occasionally contain garbage data that causes","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8401,"byte_end":8477,"line_start":301,"line_end":301,"column_start":1,"column_end":77}},{"value":"/ number parsing to fail.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8478,"byte_end":8505,"line_start":302,"line_end":302,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8506,"byte_end":8509,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ You might be inclined to use, say, `Option<i32>` for fields such at this.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8510,"byte_end":8587,"line_start":304,"line_end":304,"column_start":1,"column_end":78}},{"value":"/ By default, however, `Option<i32>` will either capture *empty* fields with","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8588,"byte_end":8666,"line_start":305,"line_end":305,"column_start":1,"column_end":79}},{"value":"/ `None` or valid numeric fields with `Some(the_number)`. If the field is","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8667,"byte_end":8742,"line_start":306,"line_end":306,"column_start":1,"column_end":76}},{"value":"/ non-empty and not a valid number, then deserialization will return an error","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8743,"byte_end":8822,"line_start":307,"line_end":307,"column_start":1,"column_end":80}},{"value":"/ instead of using `None`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8823,"byte_end":8851,"line_start":308,"line_end":308,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8852,"byte_end":8855,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ This function allows you to override this default behavior. Namely, if","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8856,"byte_end":8930,"line_start":310,"line_end":310,"column_start":1,"column_end":75}},{"value":"/ `Option<T>` is deserialized with non-empty but invalid data, then the value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8931,"byte_end":9010,"line_start":311,"line_end":311,"column_start":1,"column_end":80}},{"value":"/ will be `None` and the error will be ignored.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9011,"byte_end":9060,"line_start":312,"line_end":312,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9061,"byte_end":9064,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9065,"byte_end":9078,"line_start":314,"line_end":314,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9079,"byte_end":9082,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ This example shows how to parse CSV records with numerical data, even if","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9083,"byte_end":9159,"line_start":316,"line_end":316,"column_start":1,"column_end":77}},{"value":"/ some numerical data is absent or invalid. Without the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9160,"byte_end":9217,"line_start":317,"line_end":317,"column_start":1,"column_end":58}},{"value":"/ `serde(deserialize_with = \"...\")` annotations, this example would return","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9218,"byte_end":9294,"line_start":318,"line_end":318,"column_start":1,"column_end":77}},{"value":"/ an error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9295,"byte_end":9308,"line_start":319,"line_end":319,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9309,"byte_end":9312,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9313,"byte_end":9320,"line_start":321,"line_end":321,"column_start":1,"column_end":8}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9321,"byte_end":9347,"line_start":322,"line_end":322,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9348,"byte_end":9351,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9352,"byte_end":9372,"line_start":324,"line_end":324,"column_start":1,"column_end":21}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9373,"byte_end":9400,"line_start":325,"line_end":325,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9401,"byte_end":9404,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Deserialize, Eq, PartialEq)]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9405,"byte_end":9453,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ struct Row {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9454,"byte_end":9470,"line_start":328,"line_end":328,"column_start":1,"column_end":17}},{"value":"/     #[serde(deserialize_with = \"csv::invalid_option\")]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9471,"byte_end":9529,"line_start":329,"line_end":329,"column_start":1,"column_end":59}},{"value":"/     a: Option<i32>,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9530,"byte_end":9553,"line_start":330,"line_end":330,"column_start":1,"column_end":24}},{"value":"/     #[serde(deserialize_with = \"csv::invalid_option\")]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9554,"byte_end":9612,"line_start":331,"line_end":331,"column_start":1,"column_end":59}},{"value":"/     b: Option<i32>,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9613,"byte_end":9636,"line_start":332,"line_end":332,"column_start":1,"column_end":24}},{"value":"/     #[serde(deserialize_with = \"csv::invalid_option\")]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9637,"byte_end":9695,"line_start":333,"line_end":333,"column_start":1,"column_end":59}},{"value":"/     c: Option<i32>,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9696,"byte_end":9719,"line_start":334,"line_end":334,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9720,"byte_end":9725,"line_start":335,"line_end":335,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9726,"byte_end":9729,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9730,"byte_end":9769,"line_start":337,"line_end":337,"column_start":1,"column_end":40}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9770,"byte_end":9818,"line_start":338,"line_end":338,"column_start":1,"column_end":49}},{"value":"/     let data = \"\\","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9819,"byte_end":9840,"line_start":339,"line_end":339,"column_start":1,"column_end":22}},{"value":"/ a,b,c","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9841,"byte_end":9850,"line_start":340,"line_end":340,"column_start":1,"column_end":10}},{"value":"/ 5,\\\"\\\",xyz","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9851,"byte_end":9865,"line_start":341,"line_end":341,"column_start":1,"column_end":15}},{"value":"/ \";","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9866,"byte_end":9872,"line_start":342,"line_end":342,"column_start":1,"column_end":7}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9873,"byte_end":9932,"line_start":343,"line_end":343,"column_start":1,"column_end":60}},{"value":"/     if let Some(result) = rdr.deserialize().next() {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9933,"byte_end":9989,"line_start":344,"line_end":344,"column_start":1,"column_end":57}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":9990,"byte_end":10028,"line_start":345,"line_end":345,"column_start":1,"column_end":39}},{"value":"/         assert_eq!(record, Row { a: Some(5), b: None, c: None });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":10029,"byte_end":10098,"line_start":346,"line_end":346,"column_start":1,"column_end":70}},{"value":"/         Ok(())","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":10099,"byte_end":10117,"line_start":347,"line_end":347,"column_start":1,"column_end":19}},{"value":"/     } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":10118,"byte_end":10134,"line_start":348,"line_end":348,"column_start":1,"column_end":17}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":10135,"byte_end":10207,"line_start":349,"line_end":349,"column_start":1,"column_end":73}},{"value":"/     }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":10208,"byte_end":10217,"line_start":350,"line_end":350,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":10218,"byte_end":10223,"line_start":351,"line_end":351,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":10224,"byte_end":10231,"line_start":352,"line_end":352,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11894,"byte_end":11904,"line_start":36,"line_end":36,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":12139,"byte_end":12149,"line_start":45,"line_end":45,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":12416,"byte_end":12426,"line_start":57,"line_end":57,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":12664,"byte_end":12674,"line_start":69,"line_end":69,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13558,"byte_end":13568,"line_start":95,"line_end":95,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13658,"byte_end":13668,"line_start":102,"line_end":102,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28455,"byte_end":28463,"line_start":594,"line_end":594,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":30133,"byte_end":30139,"line_start":655,"line_end":655,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":30232,"byte_end":30238,"line_start":662,"line_end":662,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":31936,"byte_end":31946,"line_start":725,"line_end":725,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32094,"byte_end":32104,"line_start":733,"line_end":733,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32252,"byte_end":32262,"line_start":740,"line_end":740,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32406,"byte_end":32416,"line_start":747,"line_end":747,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32558,"byte_end":32568,"line_start":754,"line_end":754,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32786,"byte_end":32796,"line_start":763,"line_end":763,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":33966,"byte_end":33980,"line_start":806,"line_end":806,"column_start":32,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":34011,"byte_end":34025,"line_start":808,"line_end":808,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":34677,"byte_end":34691,"line_start":836,"line_end":836,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":54802,"byte_end":54814,"line_start":104,"line_end":104,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":56013,"byte_end":56027,"line_start":157,"line_end":157,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":58372,"byte_end":58384,"line_start":241,"line_end":241,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71097,"byte_end":71113,"line_start":687,"line_end":687,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71282,"byte_end":71298,"line_start":693,"line_end":693,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71400,"byte_end":71416,"line_start":699,"line_end":699,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71673,"byte_end":71693,"line_start":709,"line_end":709,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":72282,"byte_end":72298,"line_start":727,"line_end":727,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":72569,"byte_end":72589,"line_start":739,"line_end":739,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86783,"byte_end":86788,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89728,"byte_end":89737,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":90300,"byte_end":90305,"line_start":125,"line_end":125,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":90420,"byte_end":90425,"line_start":131,"line_end":131,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":90544,"byte_end":90549,"line_start":137,"line_end":137,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":91018,"byte_end":91023,"line_start":151,"line_end":151,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93594,"byte_end":93607,"line_start":228,"line_end":228,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94073,"byte_end":94086,"line_start":245,"line_end":245,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94199,"byte_end":94212,"line_start":251,"line_end":251,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94983,"byte_end":94992,"line_start":277,"line_end":277,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95300,"byte_end":95309,"line_start":288,"line_end":288,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95336,"byte_end":95345,"line_start":290,"line_end":290,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95950,"byte_end":95964,"line_start":312,"line_end":312,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96730,"byte_end":96744,"line_start":337,"line_end":337,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96870,"byte_end":96884,"line_start":343,"line_end":343,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":97005,"byte_end":97019,"line_start":349,"line_end":349,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98182,"byte_end":98195,"line_start":34,"line_end":34,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98475,"byte_end":98488,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124606,"byte_end":124612,"line_start":789,"line_end":789,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125379,"byte_end":125385,"line_start":816,"line_end":816,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159260,"byte_end":159266,"line_start":1782,"line_end":1782,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":163367,"byte_end":163378,"line_start":1888,"line_end":1888,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":164572,"byte_end":164598,"line_start":1922,"line_end":1922,"column_start":40,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165457,"byte_end":165483,"line_start":1954,"line_end":1954,"column_start":9,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":166289,"byte_end":166311,"line_start":1980,"line_end":1980,"column_start":44,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167045,"byte_end":167067,"line_start":2007,"line_end":2007,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167520,"byte_end":167541,"line_start":2026,"line_end":2026,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168116,"byte_end":168137,"line_start":2047,"line_end":2047,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168705,"byte_end":168722,"line_start":2068,"line_end":2068,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169176,"byte_end":169193,"line_start":2084,"line_end":2084,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169650,"byte_end":169669,"line_start":2102,"line_end":2102,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170238,"byte_end":170257,"line_start":2123,"line_end":2123,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170824,"byte_end":170839,"line_start":2144,"line_end":2144,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":171287,"byte_end":171302,"line_start":2160,"line_end":2160,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/serializer.rs","byte_start":196257,"byte_end":196262,"line_start":356,"line_end":356,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/serializer.rs","byte_start":200404,"byte_end":200412,"line_start":453,"line_end":453,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1023},{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225984,"byte_end":225996,"line_start":38,"line_end":38,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226133,"byte_end":226145,"line_start":44,"line_end":44,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226418,"byte_end":226430,"line_start":56,"line_end":56,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226674,"byte_end":226686,"line_start":68,"line_end":68,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226877,"byte_end":226889,"line_start":75,"line_end":75,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226983,"byte_end":226995,"line_start":82,"line_end":82,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245175,"byte_end":245187,"line_start":656,"line_end":656,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1239},{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245342,"byte_end":245354,"line_start":664,"line_end":664,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245512,"byte_end":245524,"line_start":671,"line_end":671,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245669,"byte_end":245681,"line_start":678,"line_end":678,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245902,"byte_end":245914,"line_start":687,"line_end":687,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":246561,"byte_end":246577,"line_start":713,"line_end":713,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":247100,"byte_end":247116,"line_start":736,"line_end":736,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337063,"byte_end":337076,"line_start":30,"line_end":30,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337311,"byte_end":337324,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355030,"byte_end":355036,"line_start":561,"line_end":561,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355181,"byte_end":355187,"line_start":569,"line_end":569,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356051,"byte_end":356057,"line_start":596,"line_end":596,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":375789,"byte_end":375795,"line_start":1155,"line_end":1155,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5611,"byte_end":5621,"line_start":207,"line_end":207,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6029,"byte_end":6039,"line_start":219,"line_end":219,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6797,"byte_end":6807,"line_start":244,"line_end":244,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7131,"byte_end":7141,"line_start":255,"line_end":255,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7880,"byte_end":7884,"line_start":281,"line_end":281,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8112,"byte_end":8116,"line_start":291,"line_end":291,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4348,"byte_end":4356,"line_start":170,"line_end":170,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":240}},{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":4442,"byte_end":4450,"line_start":176,"line_end":176,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1272}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":11894,"byte_end":11904,"line_start":36,"line_end":36,"column_start":20,"column_end":30},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":12139,"byte_end":12149,"line_start":45,"line_end":45,"column_start":44,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":12416,"byte_end":12426,"line_start":57,"line_end":57,"column_start":41,"column_end":51},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":12664,"byte_end":12674,"line_start":69,"line_end":69,"column_start":21,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13558,"byte_end":13568,"line_start":95,"line_end":95,"column_start":18,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":13658,"byte_end":13668,"line_start":102,"line_end":102,"column_start":6,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":28455,"byte_end":28463,"line_start":594,"line_end":594,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":30133,"byte_end":30139,"line_start":655,"line_end":655,"column_start":18,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1437},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":30232,"byte_end":30238,"line_start":662,"line_end":662,"column_start":6,"column_end":12},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":31936,"byte_end":31946,"line_start":725,"line_end":725,"column_start":28,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":3327}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32094,"byte_end":32104,"line_start":733,"line_end":733,"column_start":29,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32252,"byte_end":32262,"line_start":740,"line_end":740,"column_start":39,"column_end":49},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32406,"byte_end":32416,"line_start":747,"line_end":747,"column_start":44,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32558,"byte_end":32568,"line_start":754,"line_end":754,"column_start":42,"column_end":52},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":7711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":32786,"byte_end":32796,"line_start":763,"line_end":763,"column_start":36,"column_end":46},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":33966,"byte_end":33980,"line_start":806,"line_end":806,"column_start":32,"column_end":46},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1451},"to":{"krate":2,"index":7784}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":34011,"byte_end":34025,"line_start":808,"line_end":808,"column_start":23,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1451},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/byte_record.rs","byte_start":34677,"byte_end":34691,"line_start":836,"line_end":836,"column_start":34,"column_end":48},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1451},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":54802,"byte_end":54814,"line_start":104,"line_end":104,"column_start":44,"column_end":56},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":343},"to":{"krate":0,"index":331}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":56013,"byte_end":56027,"line_start":157,"line_end":157,"column_start":27,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":360},"to":{"krate":0,"index":331}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":58372,"byte_end":58384,"line_start":241,"line_end":241,"column_start":27,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":381},"to":{"krate":0,"index":331}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71097,"byte_end":71113,"line_start":687,"line_end":687,"column_start":21,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1491},"to":{"krate":20,"index":8914}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71282,"byte_end":71298,"line_start":693,"line_end":693,"column_start":19,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1491},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71400,"byte_end":71416,"line_start":699,"line_end":699,"column_start":23,"column_end":39},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1491},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":71673,"byte_end":71693,"line_start":709,"line_end":709,"column_start":23,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":72282,"byte_end":72298,"line_start":727,"line_end":727,"column_start":6,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/deserializer.rs","byte_start":72569,"byte_end":72589,"line_start":739,"line_end":739,"column_start":6,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":86783,"byte_end":86788,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":89728,"byte_end":89737,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":90300,"byte_end":90305,"line_start":125,"line_end":125,"column_start":26,"column_end":31},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1543},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":90420,"byte_end":90425,"line_start":131,"line_end":131,"column_start":26,"column_end":31},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":4047},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":90544,"byte_end":90549,"line_start":137,"line_end":137,"column_start":19,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1543},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":91018,"byte_end":91023,"line_start":151,"line_end":151,"column_start":23,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1543},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":93594,"byte_end":93607,"line_start":228,"line_end":228,"column_start":6,"column_end":19},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94073,"byte_end":94086,"line_start":245,"line_end":245,"column_start":23,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1571},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94199,"byte_end":94212,"line_start":251,"line_end":251,"column_start":19,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1571},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":94983,"byte_end":94992,"line_start":277,"line_end":277,"column_start":6,"column_end":15},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95300,"byte_end":95309,"line_start":288,"line_end":288,"column_start":19,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1585},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95336,"byte_end":95345,"line_start":290,"line_end":290,"column_start":23,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1585},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":95950,"byte_end":95964,"line_start":312,"line_end":312,"column_start":9,"column_end":23},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96730,"byte_end":96744,"line_start":337,"line_end":337,"column_start":37,"column_end":51},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":96870,"byte_end":96884,"line_start":343,"line_end":343,"column_start":26,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":576},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/error.rs","byte_start":97005,"byte_end":97019,"line_start":349,"line_end":349,"column_start":24,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":576},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98182,"byte_end":98195,"line_start":34,"line_end":34,"column_start":18,"column_end":31},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1599},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":98475,"byte_end":98488,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":124606,"byte_end":124612,"line_start":789,"line_end":789,"column_start":6,"column_end":12},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":125379,"byte_end":125385,"line_start":816,"line_end":816,"column_start":19,"column_end":25},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":159260,"byte_end":159266,"line_start":1782,"line_end":1782,"column_start":30,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":163367,"byte_end":163378,"line_start":1888,"line_end":1888,"column_start":6,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":164572,"byte_end":164598,"line_start":1922,"line_end":1922,"column_start":40,"column_end":66},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":714},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":165457,"byte_end":165483,"line_start":1954,"line_end":1954,"column_start":9,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":714},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":166289,"byte_end":166311,"line_start":1980,"line_end":1980,"column_start":44,"column_end":66},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167045,"byte_end":167067,"line_start":2007,"line_end":2007,"column_start":9,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":733},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":167520,"byte_end":167541,"line_start":2026,"line_end":2026,"column_start":19,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168116,"byte_end":168137,"line_start":2047,"line_end":2047,"column_start":32,"column_end":53},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":754},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":168705,"byte_end":168722,"line_start":2068,"line_end":2068,"column_start":23,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169176,"byte_end":169193,"line_start":2084,"line_end":2084,"column_start":36,"column_end":53},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":768},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":169650,"byte_end":169669,"line_start":2102,"line_end":2102,"column_start":19,"column_end":38},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170238,"byte_end":170257,"line_start":2123,"line_end":2123,"column_start":32,"column_end":51},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":170824,"byte_end":170839,"line_start":2144,"line_end":2144,"column_start":23,"column_end":38},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/reader.rs","byte_start":171287,"byte_end":171302,"line_start":2160,"line_end":2160,"column_start":36,"column_end":51},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/serializer.rs","byte_start":196257,"byte_end":196262,"line_start":356,"line_end":356,"column_start":21,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1543},"to":{"krate":20,"index":9529}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/serializer.rs","byte_start":200404,"byte_end":200412,"line_start":453,"line_end":453,"column_start":24,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":225984,"byte_end":225996,"line_start":38,"line_end":38,"column_start":20,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226133,"byte_end":226145,"line_start":44,"line_end":44,"column_start":44,"column_end":56},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226418,"byte_end":226430,"line_start":56,"line_end":56,"column_start":41,"column_end":53},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226674,"byte_end":226686,"line_start":68,"line_end":68,"column_start":21,"column_end":33},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226877,"byte_end":226889,"line_start":75,"line_end":75,"column_start":18,"column_end":30},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":226983,"byte_end":226995,"line_start":82,"line_end":82,"column_start":6,"column_end":18},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245175,"byte_end":245187,"line_start":656,"line_end":656,"column_start":28,"column_end":40},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":3327}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245342,"byte_end":245354,"line_start":664,"line_end":664,"column_start":38,"column_end":50},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245512,"byte_end":245524,"line_start":671,"line_end":671,"column_start":43,"column_end":55},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245669,"byte_end":245681,"line_start":678,"line_end":678,"column_start":41,"column_end":53},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":7711}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":245902,"byte_end":245914,"line_start":687,"line_end":687,"column_start":35,"column_end":47},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":7724}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":246561,"byte_end":246577,"line_start":713,"line_end":713,"column_start":23,"column_end":39},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1662},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/string_record.rs","byte_start":247100,"byte_end":247116,"line_start":736,"line_end":736,"column_start":34,"column_end":50},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1662},"to":{"krate":2,"index":7759}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337063,"byte_end":337076,"line_start":30,"line_end":30,"column_start":18,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1669},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":337311,"byte_end":337324,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355030,"byte_end":355036,"line_start":561,"line_end":561,"column_start":29,"column_end":35},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1676},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":355181,"byte_end":355187,"line_start":569,"line_end":569,"column_start":6,"column_end":12},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":356051,"byte_end":356057,"line_start":596,"line_end":596,"column_start":20,"column_end":26},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/writer.rs","byte_start":375789,"byte_end":375795,"line_start":1155,"line_end":1155,"column_start":6,"column_end":12},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1704},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":5611,"byte_end":5621,"line_start":207,"line_end":207,"column_start":6,"column_end":16},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1709},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6029,"byte_end":6039,"line_start":219,"line_end":219,"column_start":18,"column_end":28},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1709},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":6797,"byte_end":6807,"line_start":244,"line_end":244,"column_start":6,"column_end":16},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1725},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7131,"byte_end":7141,"line_start":255,"line_end":255,"column_start":18,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1725},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":7880,"byte_end":7884,"line_start":281,"line_end":281,"column_start":6,"column_end":10},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.6/src/lib.rs","byte_start":8112,"byte_end":8116,"line_start":291,"line_end":291,"column_start":18,"column_end":22},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1738},"to":{"krate":2,"index":3002}}]}