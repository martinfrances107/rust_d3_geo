{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2","program":"/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","half","--edition=2018","/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=104a350934fc19a4","-C","extra-filename=-104a350934fc19a4","--out-dir","/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","-L","dependency=/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/martin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/martin/build/rust_d3_geo/lib/target/rls/debug/deps/libhalf-104a350934fc19a4.rmeta"},"prelude":{"crate_id":{"name":"half","disambiguator":[14148917345091484181,0]},"crate_root":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src","external_crates":[{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}}],"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":0,"byte_end":8430,"line_start":1,"line_end":217,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":748},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7702,"byte_end":7706,"line_start":183,"line_end":183,"column_start":17,"column_end":21},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7762,"byte_end":7768,"line_start":186,"line_end":186,"column_start":19,"column_end":25},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":768},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7788,"byte_end":7791,"line_start":187,"line_end":187,"column_start":19,"column_end":22},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":748},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8017,"byte_end":8021,"line_start":199,"line_end":199,"column_start":9,"column_end":13},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":722}},{"kind":"Use","ref_id":{"krate":0,"index":768},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8023,"byte_end":8026,"line_start":199,"line_end":199,"column_start":15,"column_end":18},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":722}},{"kind":"Use","ref_id":{"krate":0,"index":668},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8044,"byte_end":8060,"line_start":200,"line_end":200,"column_start":17,"column_end":33},"alias_span":null,"name":"HalfBitsSliceExt","value":"","parent":{"krate":0,"index":722}},{"kind":"Use","ref_id":{"krate":0,"index":661},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8062,"byte_end":8079,"line_start":200,"line_end":200,"column_start":35,"column_end":52},"alias_span":null,"name":"HalfFloatSliceExt","value":"","parent":{"krate":0,"index":722}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":0,"byte_end":8430,"line_start":1,"line_end":217,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":301},{"krate":0,"index":647},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":737}],"decl_id":null,"docs":" A crate that provides support for half-precision 16-bit floating point types.","sig":null,"attributes":[{"value":"/ A crate that provides support for half-precision 16-bit floating point types.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":82,"byte_end":85,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides the [`f16`] type, which is an implementation of the IEEE 754-2008 standard","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":86,"byte_end":184,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ [`binary16`] a.k.a `half` floating point type. This 16-bit floating point type is intended for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":185,"byte_end":283,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ efficient storage where the full range and precision of a larger floating point value is not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":284,"byte_end":380,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ required. This is especially useful for image storage formats.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":381,"byte_end":447,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":448,"byte_end":451,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`bf16`] type, an alternative 16-bit floating point format. The","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":452,"byte_end":546,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ [`bfloat16`] format is a truncated IEEE 754 standard `binary32` float that preserves the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":547,"byte_end":639,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ exponent to allow the same range as [`f32`] but with only 8 bits of precision (instead of 11","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":640,"byte_end":736,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ bits for [`f16`]). See the [`bf16`] type for details.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":737,"byte_end":794,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":795,"byte_end":798,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Because [`f16`] and [`bf16`] are primarily for efficient storage, floating point operations such","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":799,"byte_end":899,"line_start":13,"line_end":13,"column_start":1,"column_end":101}},{"value":"/ as addition, multiplication, etc. are not implemented by hardware. While this crate does provide","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":900,"byte_end":1000,"line_start":14,"line_end":14,"column_start":1,"column_end":101}},{"value":"/ the appropriate trait implementations for basic operations, they each convert the value to","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1001,"byte_end":1095,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/ [`f32`] before performing the operation and then back afterward. When performing complex","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1096,"byte_end":1188,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ arithmetic, manually convert to and from [`f32`] before and after to reduce repeated conversions","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1189,"byte_end":1289,"line_start":17,"line_end":17,"column_start":1,"column_end":101}},{"value":"/ for each operation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1290,"byte_end":1313,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1314,"byte_end":1317,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`slice`][mod@slice] module for zero-copy in-place conversions of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1318,"byte_end":1414,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ [`u16`] slices to both [`f16`] and [`bf16`], as well as efficient vectorized conversions of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1415,"byte_end":1510,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ larger buffers of floating point values to and from these half formats.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1511,"byte_end":1586,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1587,"byte_end":1590,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The crate uses `#[no_std]` by default, so can be used in embedded environments without using the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1591,"byte_end":1691,"line_start":24,"line_end":24,"column_start":1,"column_end":101}},{"value":"/ Rust [`std`] library. A `std` feature to enable support for the standard library is available,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1692,"byte_end":1790,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ see the [Cargo Features](#cargo-features) section below.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1791,"byte_end":1851,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1852,"byte_end":1855,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ A [`prelude`] module is provided for easy importing of available utility traits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1856,"byte_end":1940,"line_start":28,"line_end":28,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1941,"byte_end":1944,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Cargo Features","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1945,"byte_end":1965,"line_start":30,"line_end":30,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1966,"byte_end":1969,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This crate supports a number of optional cargo features. None of these features are enabled by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":1970,"byte_end":2068,"line_start":32,"line_end":32,"column_start":1,"column_end":99}},{"value":"/ default, even `std`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2069,"byte_end":2093,"line_start":33,"line_end":33,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2094,"byte_end":2097,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ - **`use-intrinsics`** -- Use [`core::arch`] hardware intrinsics for `f16` and `bf16` conversions","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2098,"byte_end":2199,"line_start":35,"line_end":35,"column_start":1,"column_end":102}},{"value":"/   if available on the compiler target. This feature currently only works on nightly Rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2200,"byte_end":2292,"line_start":36,"line_end":36,"column_start":1,"column_end":93}},{"value":"/   until the corresponding intrinsics are stabilized.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2293,"byte_end":2349,"line_start":37,"line_end":37,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2350,"byte_end":2353,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/   When this feature is enabled and the hardware supports it, the functions and traits in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2354,"byte_end":2450,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/   [`slice`][mod@slice] module will use vectorized SIMD intructions for increased efficiency.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2451,"byte_end":2547,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2548,"byte_end":2551,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/   By default, without this feature, conversions are done only in software, which will also be","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2552,"byte_end":2649,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"/   the fallback if the target does not have hardware support. Note that without the `std`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2650,"byte_end":2742,"line_start":43,"line_end":43,"column_start":1,"column_end":93}},{"value":"/   feature enabled, no runtime CPU feature detection is used, so the hardware support is only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2743,"byte_end":2839,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/   compiled if the compiler target supports the CPU feature.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2840,"byte_end":2903,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2904,"byte_end":2907,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ - **`alloc`** -- Enable use of the [`alloc`] crate when not using the `std` library.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2908,"byte_end":2996,"line_start":47,"line_end":47,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":2997,"byte_end":3000,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/   Among other functions, this enables the [`vec`] module, which contains zero-copy","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3001,"byte_end":3087,"line_start":49,"line_end":49,"column_start":1,"column_end":87}},{"value":"/   conversions for the [`Vec`] type. This allows fast conversion between raw `Vec<u16>` bits and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3088,"byte_end":3187,"line_start":50,"line_end":50,"column_start":1,"column_end":100}},{"value":"/   `Vec<f16>` or `Vec<bf16>` arrays, and vice versa.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3188,"byte_end":3243,"line_start":51,"line_end":51,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3244,"byte_end":3247,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - **`std`** -- Enable features that depend on the Rust [`std`] library. This also enables the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3248,"byte_end":3345,"line_start":53,"line_end":53,"column_start":1,"column_end":98}},{"value":"/   `alloc` feature automatically.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3346,"byte_end":3382,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3383,"byte_end":3386,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/   Enabling the `std` feature also enables runtime CPU feature detection when the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3387,"byte_end":3471,"line_start":56,"line_end":56,"column_start":1,"column_end":85}},{"value":"/   `use-intrsincis` feature is also enabled. Without this feature detection, intrinsics are only","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3472,"byte_end":3571,"line_start":57,"line_end":57,"column_start":1,"column_end":100}},{"value":"/   used when compiler target supports the target feature.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3572,"byte_end":3632,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3633,"byte_end":3636,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ - **`serde`** -- Adds support for the [`serde`] crate by implementing [`Serialize`] and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3637,"byte_end":3728,"line_start":60,"line_end":60,"column_start":1,"column_end":92}},{"value":"/   [`Deserialize`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3729,"byte_end":3788,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3789,"byte_end":3792,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ - **`num-traits`** -- Adds support for the [`num-traits`] crate by implementing [`ToPrimitive`],","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3793,"byte_end":3893,"line_start":63,"line_end":63,"column_start":1,"column_end":101}},{"value":"/   [`FromPrimitive`], [`AsPrimitive`], [`Num`], [`Float`], [`FloatCore`], and [`Bounded`] traits","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3894,"byte_end":3993,"line_start":64,"line_end":64,"column_start":1,"column_end":100}},{"value":"/   for both [`f16`] and [`bf16`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":3994,"byte_end":4030,"line_start":65,"line_end":65,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4031,"byte_end":4034,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ - **`bytemuck`** -- Adds support for the [`bytemuck`] crate by implementing [`Zeroable`] and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4035,"byte_end":4131,"line_start":67,"line_end":67,"column_start":1,"column_end":97}},{"value":"/   [`Pod`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4132,"byte_end":4183,"line_start":68,"line_end":68,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4184,"byte_end":4187,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ - **`zerocopy`** -- Adds support for the [`zerocopy`] crate by implementing [`AsBytes`] and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4188,"byte_end":4283,"line_start":70,"line_end":70,"column_start":1,"column_end":96}},{"value":"/   [`FromBytes`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4284,"byte_end":4341,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4342,"byte_end":4345,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ [`alloc`]: https://doc.rust-lang.org/alloc/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4346,"byte_end":4393,"line_start":73,"line_end":73,"column_start":1,"column_end":48}},{"value":"/ [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4394,"byte_end":4437,"line_start":74,"line_end":74,"column_start":1,"column_end":44}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4438,"byte_end":4522,"line_start":75,"line_end":75,"column_start":1,"column_end":85}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4523,"byte_end":4601,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ [`serde`]: https://crates.io/crates/serde","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4602,"byte_end":4647,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"/ [`bytemuck`]: https://crates.io/crates/bytemuck","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4648,"byte_end":4699,"line_start":78,"line_end":78,"column_start":1,"column_end":52}},{"value":"/ [`num-traits`]: https://crates.io/crates/num-traits","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4700,"byte_end":4755,"line_start":79,"line_end":79,"column_start":1,"column_end":56}},{"value":"/ [`zerocopy`]: https://crates.io/crates/zerocopy","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":4756,"byte_end":4807,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"warn(missing_docs, missing_copy_implementations,\nmissing_debug_implementations, trivial_numeric_casts, future_incompatible)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":6897,"byte_end":7046,"line_start":150,"line_end":156,"column_start":1,"column_end":3}},{"value":"allow(clippy :: verbose_bit_mask, clippy :: cast_lossless)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7047,"byte_end":7105,"line_start":157,"line_end":157,"column_start":1,"column_end":59}},{"value":"no_std","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7140,"byte_end":7146,"line_start":158,"line_end":158,"column_start":35,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":748},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10024,"byte_end":10028,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"bf16","qualname":"::bfloat::bf16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the [`bfloat16`] format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the [`bfloat16`] format.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":8975,"byte_end":9045,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9046,"byte_end":9049,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The [`bfloat16`] floating point format is a truncated 16-bit version of the IEEE 754 standard","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9050,"byte_end":9147,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ `binary32`, a.k.a [`f32`]. [`bf16`] has approximately the same dynamic range as [`f32`] by","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9148,"byte_end":9242,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"/ having a lower precision than [`f16`][crate::f16]. While [`f16`][crate::f16] has a precision of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9243,"byte_end":9342,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ 11 bits, [`bf16`] has a precision of only 8 bits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9343,"byte_end":9396,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9397,"byte_end":9400,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Like [`f16`][crate::f16], [`bf16`] does not offer arithmetic operations as it is intended for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9401,"byte_end":9498,"line_start":27,"line_end":27,"column_start":1,"column_end":98}},{"value":"/ compact storage rather than calculations. Operations should be performed with [`f32`] or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9499,"byte_end":9591,"line_start":28,"line_end":28,"column_start":1,"column_end":93}},{"value":"/ higher-precision types and converted to/from [`bf16`] as necessary.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9592,"byte_end":9663,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9664,"byte_end":9667,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9668,"byte_end":9746,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9747,"byte_end":9777,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":9810,"byte_end":9830,"line_start":34,"line_end":34,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10134,"byte_end":10143,"line_start":43,"line_end":43,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<bf16>::from_bits","value":"pub const fn from_bits(u16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from the raw bits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10052,"byte_end":10102,"line_start":41,"line_end":41,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10107,"byte_end":10116,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10558,"byte_end":10566,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<bf16>::from_f32","value":"pub fn from_f32(f32) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 32-bit floating point value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10195,"byte_end":10262,"line_start":47,"line_end":47,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10267,"byte_end":10270,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is too large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10275,"byte_end":10364,"line_start":49,"line_end":49,"column_start":5,"column_end":91}},{"value":"/ Subnormal values that are too tiny to be represented will result in ±0. All other values","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10369,"byte_end":10462,"line_start":50,"line_end":50,"column_start":5,"column_end":97}},{"value":"/ are truncated and rounded to the nearest representable value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10467,"byte_end":10532,"line_start":51,"line_end":51,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10537,"byte_end":10546,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11093,"byte_end":11101,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<bf16>::from_f64","value":"pub fn from_f64(f64) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 64-bit floating point value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10642,"byte_end":10709,"line_start":57,"line_end":57,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10714,"byte_end":10717,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10722,"byte_end":10810,"line_start":59,"line_end":59,"column_start":5,"column_end":90}},{"value":"/ 64-bit subnormal values are too tiny to be represented and result in ±0. Exponents that","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10815,"byte_end":10907,"line_start":60,"line_end":60,"column_start":5,"column_end":96}},{"value":"/ underflow the minimum exponent will result in subnormals or ±0. All other values are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10912,"byte_end":11001,"line_start":61,"line_end":61,"column_start":5,"column_end":93}},{"value":"/ truncated and rounded to the nearest representable value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11006,"byte_end":11067,"line_start":62,"line_end":62,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11072,"byte_end":11081,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11272,"byte_end":11279,"line_start":70,"line_end":70,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<bf16>::to_bits","value":"pub const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] into the underlying bit representation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11177,"byte_end":11240,"line_start":68,"line_end":68,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11245,"byte_end":11254,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11672,"byte_end":11683,"line_start":85,"line_end":85,"column_start":18,"column_end":29},"name":"to_le_bytes","qualname":"<bf16>::to_le_bytes","value":"pub const fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11321,"byte_end":11414,"line_start":74,"line_end":74,"column_start":5,"column_end":98}},{"value":"/ little-endian byte order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11419,"byte_end":11448,"line_start":75,"line_end":75,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11453,"byte_end":11456,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11461,"byte_end":11475,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11480,"byte_end":11483,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11488,"byte_end":11499,"line_start":79,"line_end":79,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11504,"byte_end":11531,"line_start":80,"line_end":80,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_le_bytes();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11536,"byte_end":11587,"line_start":81,"line_end":81,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x48, 0x41]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11592,"byte_end":11628,"line_start":82,"line_end":82,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11633,"byte_end":11640,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11645,"byte_end":11654,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12101,"byte_end":12112,"line_start":100,"line_end":100,"column_start":18,"column_end":29},"name":"to_be_bytes","qualname":"<bf16>::to_be_bytes","value":"pub const fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11743,"byte_end":11836,"line_start":89,"line_end":89,"column_start":5,"column_end":98}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11841,"byte_end":11877,"line_start":90,"line_end":90,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11882,"byte_end":11885,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11890,"byte_end":11904,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11909,"byte_end":11912,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11917,"byte_end":11928,"line_start":94,"line_end":94,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11933,"byte_end":11960,"line_start":95,"line_end":95,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_be_bytes();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":11965,"byte_end":12016,"line_start":96,"line_end":96,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x41, 0x48]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12021,"byte_end":12057,"line_start":97,"line_end":97,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12062,"byte_end":12069,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12074,"byte_end":12083,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12821,"byte_end":12832,"line_start":123,"line_end":123,"column_start":18,"column_end":29},"name":"to_ne_bytes","qualname":"<bf16>::to_ne_bytes","value":"pub const fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12172,"byte_end":12265,"line_start":104,"line_end":104,"column_start":5,"column_end":98}},{"value":"/ native byte order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12270,"byte_end":12292,"line_start":105,"line_end":105,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12297,"byte_end":12300,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12305,"byte_end":12385,"line_start":107,"line_end":107,"column_start":5,"column_end":85}},{"value":"/ [`to_be_bytes`][bf16::to_be_bytes] or [`to_le_bytes`][bf16::to_le_bytes], as appropriate,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12390,"byte_end":12483,"line_start":108,"line_end":108,"column_start":5,"column_end":98}},{"value":"/ instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12488,"byte_end":12500,"line_start":109,"line_end":109,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12505,"byte_end":12508,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12513,"byte_end":12527,"line_start":111,"line_end":111,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12532,"byte_end":12535,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12540,"byte_end":12551,"line_start":113,"line_end":113,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12556,"byte_end":12583,"line_start":114,"line_end":114,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12588,"byte_end":12639,"line_start":115,"line_end":115,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12644,"byte_end":12698,"line_start":116,"line_end":116,"column_start":5,"column_end":59}},{"value":"/     [0x41, 0x48]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12703,"byte_end":12723,"line_start":117,"line_end":117,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12728,"byte_end":12740,"line_start":118,"line_end":118,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12745,"byte_end":12765,"line_start":119,"line_end":119,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12770,"byte_end":12777,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12782,"byte_end":12789,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12794,"byte_end":12803,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13215,"byte_end":13228,"line_start":137,"line_end":137,"column_start":18,"column_end":31},"name":"from_le_bytes","qualname":"<bf16>::from_le_bytes","value":"pub const fn from_le_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in little endian.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12892,"byte_end":12984,"line_start":127,"line_end":127,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12989,"byte_end":12992,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":12997,"byte_end":13011,"line_start":129,"line_end":129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13016,"byte_end":13019,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13024,"byte_end":13035,"line_start":131,"line_end":131,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13040,"byte_end":13067,"line_start":132,"line_end":132,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_le_bytes([0x48, 0x41]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13072,"byte_end":13122,"line_start":133,"line_end":133,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13127,"byte_end":13171,"line_start":134,"line_end":134,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13176,"byte_end":13183,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13188,"byte_end":13197,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13637,"byte_end":13650,"line_start":151,"line_end":151,"column_start":18,"column_end":31},"name":"from_be_bytes","qualname":"<bf16>::from_be_bytes","value":"pub const fn from_be_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in big endian.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13317,"byte_end":13406,"line_start":141,"line_end":141,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13411,"byte_end":13414,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13419,"byte_end":13433,"line_start":143,"line_end":143,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13438,"byte_end":13441,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13446,"byte_end":13457,"line_start":145,"line_end":145,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13462,"byte_end":13489,"line_start":146,"line_end":146,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_be_bytes([0x41, 0x48]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13494,"byte_end":13544,"line_start":147,"line_end":147,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13549,"byte_end":13593,"line_start":148,"line_end":148,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13598,"byte_end":13605,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13610,"byte_end":13619,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14383,"byte_end":14396,"line_start":173,"line_end":173,"column_start":18,"column_end":31},"name":"from_ne_bytes","qualname":"<bf16>::from_ne_bytes","value":"pub const fn from_ne_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in native endian.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13739,"byte_end":13831,"line_start":155,"line_end":155,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13836,"byte_end":13839,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13844,"byte_end":13933,"line_start":157,"line_end":157,"column_start":5,"column_end":94}},{"value":"/ [`from_be_bytes`][bf16::from_be_bytes] or [`from_le_bytes`][bf16::from_le_bytes], as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":13938,"byte_end":14026,"line_start":158,"line_end":158,"column_start":5,"column_end":93}},{"value":"/ appropriate instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14031,"byte_end":14055,"line_start":159,"line_end":159,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14060,"byte_end":14063,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14068,"byte_end":14082,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14087,"byte_end":14090,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14095,"byte_end":14106,"line_start":163,"line_end":163,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14111,"byte_end":14138,"line_start":164,"line_end":164,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14143,"byte_end":14211,"line_start":165,"line_end":165,"column_start":5,"column_end":73}},{"value":"/     [0x41, 0x48]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14216,"byte_end":14236,"line_start":166,"line_end":166,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14241,"byte_end":14253,"line_start":167,"line_end":167,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14258,"byte_end":14278,"line_start":168,"line_end":168,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14283,"byte_end":14290,"line_start":169,"line_end":169,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14295,"byte_end":14339,"line_start":170,"line_end":170,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14344,"byte_end":14351,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14356,"byte_end":14365,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14660,"byte_end":14666,"line_start":181,"line_end":181,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<bf16>::to_f32","value":"pub fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f32`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f32`] value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14485,"byte_end":14537,"line_start":177,"line_end":177,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14542,"byte_end":14545,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f32`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14550,"byte_end":14634,"line_start":179,"line_end":179,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14639,"byte_end":14648,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14905,"byte_end":14911,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<bf16>::to_f64","value":"pub fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f64`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f64`] value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14730,"byte_end":14782,"line_start":185,"line_end":185,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14787,"byte_end":14790,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f64`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14795,"byte_end":14879,"line_start":187,"line_end":187,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14884,"byte_end":14893,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15311,"byte_end":15317,"line_start":207,"line_end":207,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<bf16>::is_nan","value":"pub const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is NaN and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is NaN and `false` otherwise.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":14975,"byte_end":15037,"line_start":193,"line_end":193,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15042,"byte_end":15045,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15050,"byte_end":15064,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15069,"byte_end":15072,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15077,"byte_end":15088,"line_start":197,"line_end":197,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15093,"byte_end":15120,"line_start":198,"line_end":198,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15125,"byte_end":15128,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15133,"byte_end":15157,"line_start":200,"line_end":200,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15162,"byte_end":15198,"line_start":201,"line_end":201,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15203,"byte_end":15206,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15211,"byte_end":15237,"line_start":203,"line_end":203,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15242,"byte_end":15267,"line_start":204,"line_end":204,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15272,"byte_end":15279,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15284,"byte_end":15293,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15892,"byte_end":15903,"line_start":230,"line_end":230,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<bf16>::is_infinite","value":"pub const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false` otherwise.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15384,"byte_end":15448,"line_start":211,"line_end":211,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15453,"byte_end":15456,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15461,"byte_end":15475,"line_start":213,"line_end":213,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15480,"byte_end":15483,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15488,"byte_end":15499,"line_start":215,"line_end":215,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15504,"byte_end":15531,"line_start":216,"line_end":216,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15536,"byte_end":15539,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15544,"byte_end":15579,"line_start":218,"line_end":218,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15584,"byte_end":15613,"line_start":219,"line_end":219,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15618,"byte_end":15655,"line_start":220,"line_end":220,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15660,"byte_end":15684,"line_start":221,"line_end":221,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15689,"byte_end":15692,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15697,"byte_end":15727,"line_start":223,"line_end":223,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15732,"byte_end":15764,"line_start":224,"line_end":224,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15769,"byte_end":15772,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15777,"byte_end":15808,"line_start":226,"line_end":226,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15813,"byte_end":15848,"line_start":227,"line_end":227,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15853,"byte_end":15860,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15865,"byte_end":15874,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16470,"byte_end":16479,"line_start":253,"line_end":253,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<bf16>::is_finite","value":"pub const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":15971,"byte_end":16033,"line_start":234,"line_end":234,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16038,"byte_end":16041,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16046,"byte_end":16060,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16065,"byte_end":16068,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16073,"byte_end":16084,"line_start":238,"line_end":238,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16089,"byte_end":16116,"line_start":239,"line_end":239,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16121,"byte_end":16124,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16129,"byte_end":16164,"line_start":241,"line_end":241,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16169,"byte_end":16198,"line_start":242,"line_end":242,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16203,"byte_end":16240,"line_start":243,"line_end":243,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16245,"byte_end":16269,"line_start":244,"line_end":244,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16274,"byte_end":16277,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16282,"byte_end":16309,"line_start":246,"line_end":246,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16314,"byte_end":16317,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16322,"byte_end":16352,"line_start":248,"line_end":248,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16357,"byte_end":16387,"line_start":249,"line_end":249,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16392,"byte_end":16426,"line_start":250,"line_end":250,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16431,"byte_end":16438,"line_start":251,"line_end":251,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16443,"byte_end":16452,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17235,"byte_end":17244,"line_start":279,"line_end":279,"column_start":18,"column_end":27},"name":"is_normal","qualname":"<bf16>::is_normal","value":"pub const fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16547,"byte_end":16625,"line_start":257,"line_end":257,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16630,"byte_end":16633,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16638,"byte_end":16652,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16657,"byte_end":16660,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16665,"byte_end":16676,"line_start":261,"line_end":261,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16681,"byte_end":16708,"line_start":262,"line_end":262,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16713,"byte_end":16716,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ let min = bf16::MIN_POSITIVE;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16721,"byte_end":16754,"line_start":264,"line_end":264,"column_start":5,"column_end":38}},{"value":"/ let max = bf16::MAX;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16759,"byte_end":16783,"line_start":265,"line_end":265,"column_start":5,"column_end":29}},{"value":"/ let lower_than_min = bf16::from_f32(1.0e-39_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16788,"byte_end":16841,"line_start":266,"line_end":266,"column_start":5,"column_end":58}},{"value":"/ let zero = bf16::from_f32(0.0_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16846,"byte_end":16885,"line_start":267,"line_end":267,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16890,"byte_end":16893,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16898,"byte_end":16927,"line_start":269,"line_end":269,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16932,"byte_end":16961,"line_start":270,"line_end":270,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16966,"byte_end":16969,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":16974,"byte_end":17005,"line_start":272,"line_end":272,"column_start":5,"column_end":36}},{"value":"/ assert!(!bf16::NAN.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17010,"byte_end":17046,"line_start":273,"line_end":273,"column_start":5,"column_end":41}},{"value":"/ assert!(!bf16::INFINITY.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17051,"byte_end":17092,"line_start":274,"line_end":274,"column_start":5,"column_end":46}},{"value":"/ // Values between 0 and `min` are subnormal.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17097,"byte_end":17145,"line_start":275,"line_end":275,"column_start":5,"column_end":53}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17150,"byte_end":17191,"line_start":276,"line_end":276,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17196,"byte_end":17203,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17208,"byte_end":17217,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17886,"byte_end":17894,"line_start":301,"line_end":301,"column_start":18,"column_end":26},"name":"classify","qualname":"<bf16>::classify","value":"pub const fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17347,"byte_end":17401,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17406,"byte_end":17409,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17414,"byte_end":17504,"line_start":286,"line_end":286,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17509,"byte_end":17531,"line_start":287,"line_end":287,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17536,"byte_end":17539,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17544,"byte_end":17558,"line_start":289,"line_end":289,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17563,"byte_end":17566,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17571,"byte_end":17582,"line_start":291,"line_end":291,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17587,"byte_end":17616,"line_start":292,"line_end":292,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17621,"byte_end":17648,"line_start":293,"line_end":293,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17653,"byte_end":17656,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let num = bf16::from_f32(12.4_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17661,"byte_end":17700,"line_start":295,"line_end":295,"column_start":5,"column_end":44}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17705,"byte_end":17734,"line_start":296,"line_end":296,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17739,"byte_end":17742,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17747,"byte_end":17798,"line_start":298,"line_end":298,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17803,"byte_end":17856,"line_start":299,"line_end":299,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":17861,"byte_end":17868,"line_start":300,"line_end":300,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18894,"byte_end":18900,"line_start":331,"line_end":331,"column_start":18,"column_end":24},"name":"signum","qualname":"<bf16>::signum","value":"pub const fn signum(Self) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18262,"byte_end":18318,"line_start":313,"line_end":313,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18323,"byte_end":18326,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ * 1.0 if the number is positive, +0.0 or [`INFINITY`][bf16::INFINITY]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18331,"byte_end":18404,"line_start":315,"line_end":315,"column_start":5,"column_end":78}},{"value":"/ * −1.0 if the number is negative, −0.0` or [`NEG_INFINITY`][bf16::NEG_INFINITY]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18409,"byte_end":18496,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/ * [`NAN`][bf16::NAN] if the number is NaN","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18501,"byte_end":18546,"line_start":317,"line_end":317,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18551,"byte_end":18554,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18559,"byte_end":18573,"line_start":319,"line_end":319,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18578,"byte_end":18581,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18586,"byte_end":18597,"line_start":321,"line_end":321,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18602,"byte_end":18629,"line_start":322,"line_end":322,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18634,"byte_end":18637,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(3.5_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18642,"byte_end":18678,"line_start":324,"line_end":324,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18683,"byte_end":18686,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), bf16::from_f32(1.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18691,"byte_end":18739,"line_start":326,"line_end":326,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(bf16::NEG_INFINITY.signum(), bf16::from_f32(-1.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18744,"byte_end":18810,"line_start":327,"line_end":327,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18815,"byte_end":18818,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ assert!(bf16::NAN.signum().is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18823,"byte_end":18864,"line_start":329,"line_end":329,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":18869,"byte_end":18876,"line_start":330,"line_end":330,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19667,"byte_end":19683,"line_start":359,"line_end":359,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<bf16>::is_sign_positive","value":"pub const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19091,"byte_end":19180,"line_start":341,"line_end":341,"column_start":5,"column_end":94}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19185,"byte_end":19216,"line_start":342,"line_end":342,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19221,"byte_end":19224,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19229,"byte_end":19243,"line_start":344,"line_end":344,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19248,"byte_end":19251,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19256,"byte_end":19267,"line_start":346,"line_end":346,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19272,"byte_end":19299,"line_start":347,"line_end":347,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19304,"byte_end":19307,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19312,"byte_end":19336,"line_start":349,"line_end":349,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19341,"byte_end":19377,"line_start":350,"line_end":350,"column_start":5,"column_end":41}},{"value":"/ let g = bf16::from_f32(-7.0_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19382,"byte_end":19419,"line_start":351,"line_end":351,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19424,"byte_end":19427,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19432,"byte_end":19466,"line_start":353,"line_end":353,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19471,"byte_end":19506,"line_start":354,"line_end":354,"column_start":5,"column_end":40}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19511,"byte_end":19556,"line_start":355,"line_end":355,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19561,"byte_end":19623,"line_start":356,"line_end":356,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19628,"byte_end":19635,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19640,"byte_end":19649,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20321,"byte_end":20337,"line_start":381,"line_end":381,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<bf16>::is_sign_negative","value":"pub const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19743,"byte_end":19834,"line_start":363,"line_end":363,"column_start":5,"column_end":94}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19839,"byte_end":19872,"line_start":364,"line_end":364,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19877,"byte_end":19880,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19885,"byte_end":19899,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19904,"byte_end":19907,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19912,"byte_end":19923,"line_start":368,"line_end":368,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19928,"byte_end":19955,"line_start":369,"line_end":369,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19960,"byte_end":19963,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19968,"byte_end":19992,"line_start":371,"line_end":371,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":19997,"byte_end":20032,"line_start":372,"line_end":372,"column_start":5,"column_end":40}},{"value":"/ let g = bf16::from_f32(-7.0f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20037,"byte_end":20073,"line_start":373,"line_end":373,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20078,"byte_end":20081,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20086,"byte_end":20121,"line_start":375,"line_end":375,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20126,"byte_end":20160,"line_start":376,"line_end":376,"column_start":5,"column_end":39}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20165,"byte_end":20210,"line_start":377,"line_end":377,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20215,"byte_end":20277,"line_start":378,"line_end":378,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20282,"byte_end":20289,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20294,"byte_end":20303,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21209,"byte_end":21217,"line_start":404,"line_end":404,"column_start":18,"column_end":26},"name":"copysign","qualname":"<bf16>::copysign","value":"pub const fn copysign(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number composed of the magnitude of `self` and the sign of `sign`.","sig":null,"attributes":[{"value":"/ Returns a number composed of the magnitude of `self` and the sign of `sign`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20397,"byte_end":20477,"line_start":385,"line_end":385,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20482,"byte_end":20485,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Equal to `self` if the sign of `self` and `sign` are the same, otherwise equal to `-self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20490,"byte_end":20584,"line_start":387,"line_end":387,"column_start":5,"column_end":99}},{"value":"/ If `self` is NaN, then NaN with the sign of `sign` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20589,"byte_end":20656,"line_start":388,"line_end":388,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20661,"byte_end":20664,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20669,"byte_end":20683,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20688,"byte_end":20691,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20696,"byte_end":20703,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20708,"byte_end":20735,"line_start":393,"line_end":393,"column_start":5,"column_end":32}},{"value":"/ let f = bf16::from_f32(3.5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20740,"byte_end":20772,"line_start":394,"line_end":394,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20777,"byte_end":20780,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.copysign(bf16::from_f32(0.42)), bf16::from_f32(3.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20785,"byte_end":20855,"line_start":396,"line_end":396,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(f.copysign(bf16::from_f32(-0.42)), bf16::from_f32(-3.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20860,"byte_end":20932,"line_start":397,"line_end":397,"column_start":5,"column_end":77}},{"value":"/ assert_eq!((-f).copysign(bf16::from_f32(0.42)), bf16::from_f32(3.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":20937,"byte_end":21010,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ assert_eq!((-f).copysign(bf16::from_f32(-0.42)), bf16::from_f32(-3.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21015,"byte_end":21090,"line_start":399,"line_end":399,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21095,"byte_end":21098,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ assert!(bf16::NAN.copysign(bf16::from_f32(1.0)).is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21103,"byte_end":21165,"line_start":401,"line_end":401,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21170,"byte_end":21177,"line_start":402,"line_end":402,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21182,"byte_end":21191,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21675,"byte_end":21678,"line_start":422,"line_end":422,"column_start":12,"column_end":15},"name":"max","qualname":"<bf16>::max","value":"pub fn max(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21315,"byte_end":21358,"line_start":408,"line_end":408,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21363,"byte_end":21366,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21371,"byte_end":21443,"line_start":410,"line_end":410,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21448,"byte_end":21451,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21456,"byte_end":21470,"line_start":412,"line_end":412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21475,"byte_end":21478,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21483,"byte_end":21490,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21495,"byte_end":21522,"line_start":415,"line_end":415,"column_start":5,"column_end":32}},{"value":"/ let x = bf16::from_f32(1.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21527,"byte_end":21559,"line_start":416,"line_end":416,"column_start":5,"column_end":37}},{"value":"/ let y = bf16::from_f32(2.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21564,"byte_end":21596,"line_start":417,"line_end":417,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21601,"byte_end":21604,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.max(y), y);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21609,"byte_end":21637,"line_start":419,"line_end":419,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21642,"byte_end":21649,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21654,"byte_end":21663,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22186,"byte_end":22189,"line_start":444,"line_end":444,"column_start":12,"column_end":15},"name":"min","qualname":"<bf16>::min","value":"pub fn min(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21826,"byte_end":21869,"line_start":430,"line_end":430,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21874,"byte_end":21877,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21882,"byte_end":21954,"line_start":432,"line_end":432,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21959,"byte_end":21962,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21967,"byte_end":21981,"line_start":434,"line_end":434,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21986,"byte_end":21989,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":21994,"byte_end":22001,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22006,"byte_end":22033,"line_start":437,"line_end":437,"column_start":5,"column_end":32}},{"value":"/ let x = bf16::from_f32(1.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22038,"byte_end":22070,"line_start":438,"line_end":438,"column_start":5,"column_end":37}},{"value":"/ let y = bf16::from_f32(2.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22075,"byte_end":22107,"line_start":439,"line_end":439,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22112,"byte_end":22115,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.min(y), x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22120,"byte_end":22148,"line_start":441,"line_end":441,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22153,"byte_end":22160,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22165,"byte_end":22174,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23251,"byte_end":23256,"line_start":472,"line_end":472,"column_start":12,"column_end":17},"name":"clamp","qualname":"<bf16>::clamp","value":"pub fn clamp(Self, bf16, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Restrict a value to a certain interval unless it is NaN.","sig":null,"attributes":[{"value":"/ Restrict a value to a certain interval unless it is NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22337,"byte_end":22397,"line_start":452,"line_end":452,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22402,"byte_end":22405,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22410,"byte_end":22500,"line_start":454,"line_end":454,"column_start":5,"column_end":95}},{"value":"/ Otherwise this returns `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22505,"byte_end":22539,"line_start":455,"line_end":455,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22544,"byte_end":22547,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Note that this function returns NaN if the initial value was NaN as well.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22552,"byte_end":22629,"line_start":457,"line_end":457,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22634,"byte_end":22637,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22642,"byte_end":22654,"line_start":459,"line_end":459,"column_start":5,"column_end":17}},{"value":"/ Panics if `min > max`, `min` is NaN, or `max` is NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22659,"byte_end":22716,"line_start":460,"line_end":460,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22721,"byte_end":22724,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22729,"byte_end":22743,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22748,"byte_end":22751,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22756,"byte_end":22763,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22768,"byte_end":22795,"line_start":465,"line_end":465,"column_start":5,"column_end":32}},{"value":"/ assert!(bf16::from_f32(-3.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(-2.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22800,"byte_end":22907,"line_start":466,"line_end":466,"column_start":5,"column_end":112}},{"value":"/ assert!(bf16::from_f32(0.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(0.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":22912,"byte_end":23017,"line_start":467,"line_end":467,"column_start":5,"column_end":110}},{"value":"/ assert!(bf16::from_f32(2.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(1.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23022,"byte_end":23127,"line_start":468,"line_end":468,"column_start":5,"column_end":110}},{"value":"/ assert!(bf16::NAN.clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)).is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23132,"byte_end":23213,"line_start":469,"line_end":469,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23218,"byte_end":23225,"line_start":470,"line_end":470,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23230,"byte_end":23239,"line_start":471,"line_end":471,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":127},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23554,"byte_end":23560,"line_start":485,"line_end":485,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::bfloat::bf16::DIGITS","value":"u32","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Approximate number of [`bf16`] significant digits in base 10\n","sig":null,"attributes":[{"value":"/ Approximate number of [`bf16`] significant digits in base 10","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23475,"byte_end":23539,"line_start":484,"line_end":484,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":128},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23775,"byte_end":23782,"line_start":490,"line_end":490,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::bfloat::bf16::EPSILON","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`]\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","sig":null,"attributes":[{"value":"/ [`bf16`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23575,"byte_end":23587,"line_start":486,"line_end":486,"column_start":5,"column_end":17}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23592,"byte_end":23666,"line_start":487,"line_end":487,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23671,"byte_end":23674,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23679,"byte_end":23760,"line_start":489,"line_end":489,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":129},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23864,"byte_end":23872,"line_start":492,"line_end":492,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::bfloat::bf16::INFINITY","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] positive Infinity (+∞)\n","sig":null,"attributes":[{"value":"/ [`bf16`] positive Infinity (+∞)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23812,"byte_end":23849,"line_start":491,"line_end":491,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":130},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23968,"byte_end":23983,"line_start":494,"line_end":494,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::bfloat::bf16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Number of [`bf16`] significant digits in base 2\n","sig":null,"attributes":[{"value":"/ Number of [`bf16`] significant digits in base 2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23902,"byte_end":23953,"line_start":493,"line_end":493,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":131},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24046,"byte_end":24049,"line_start":496,"line_end":496,"column_start":15,"column_end":18},"name":"MAX","qualname":"::bfloat::bf16::MAX","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Largest finite [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Largest finite [`bf16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":23998,"byte_end":24031,"line_start":495,"line_end":495,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":132},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24141,"byte_end":24151,"line_start":498,"line_end":498,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::bfloat::bf16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`] power of 10 exponent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24076,"byte_end":24126,"line_start":497,"line_end":497,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":133},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24231,"byte_end":24238,"line_start":500,"line_end":500,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::bfloat::bf16::MAX_EXP","value":"i32","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`] power of 2 exponent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24167,"byte_end":24216,"line_start":499,"line_end":499,"column_start":5,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":134},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24304,"byte_end":24307,"line_start":502,"line_end":502,"column_start":15,"column_end":18},"name":"MIN","qualname":"::bfloat::bf16::MIN","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Smallest finite [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Smallest finite [`bf16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24255,"byte_end":24289,"line_start":501,"line_end":501,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":135},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24406,"byte_end":24416,"line_start":504,"line_end":504,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::bfloat::bf16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Minimum possible normal [`bf16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`bf16`] power of 10 exponent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24334,"byte_end":24391,"line_start":503,"line_end":503,"column_start":5,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":136},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24525,"byte_end":24532,"line_start":506,"line_end":506,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::bfloat::bf16::MIN_EXP","value":"i32","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`bf16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`bf16`] power of 2 exponent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24433,"byte_end":24510,"line_start":505,"line_end":505,"column_start":5,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":137},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24608,"byte_end":24620,"line_start":508,"line_end":508,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::bfloat::bf16::MIN_POSITIVE","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Smallest positive normal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`bf16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24550,"byte_end":24593,"line_start":507,"line_end":507,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":138},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24696,"byte_end":24699,"line_start":510,"line_end":510,"column_start":15,"column_end":18},"name":"NAN","qualname":"::bfloat::bf16::NAN","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] Not a Number (NaN)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Not a Number (NaN)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24650,"byte_end":24681,"line_start":509,"line_end":509,"column_start":5,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":139},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24782,"byte_end":24794,"line_start":512,"line_end":512,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::bfloat::bf16::NEG_INFINITY","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`bf16`] negative infinity (-∞).","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24729,"byte_end":24767,"line_start":511,"line_end":511,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":140},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24903,"byte_end":24908,"line_start":514,"line_end":514,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::bfloat::bf16::RADIX","value":"u32","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`bf16`]\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`bf16`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24824,"byte_end":24888,"line_start":513,"line_end":513,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":141},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24984,"byte_end":25006,"line_start":517,"line_end":517,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::bfloat::bf16::MIN_POSITIVE_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`bf16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":24924,"byte_end":24969,"line_start":516,"line_end":516,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":142},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25087,"byte_end":25100,"line_start":519,"line_end":519,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::bfloat::bf16::MAX_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Maximum subnormal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`bf16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25036,"byte_end":25072,"line_start":518,"line_end":518,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":143},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25160,"byte_end":25163,"line_start":522,"line_end":522,"column_start":15,"column_end":18},"name":"ONE","qualname":"::bfloat::bf16::ONE","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 1\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25131,"byte_end":25145,"line_start":521,"line_end":521,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":144},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25222,"byte_end":25226,"line_start":524,"line_end":524,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::bfloat::bf16::ZERO","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 0\n","sig":null,"attributes":[{"value":"/ [`bf16`] 0","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25193,"byte_end":25207,"line_start":523,"line_end":523,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":145},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25286,"byte_end":25294,"line_start":526,"line_end":526,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::bfloat::bf16::NEG_ZERO","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] -0\n","sig":null,"attributes":[{"value":"/ [`bf16`] -0","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25256,"byte_end":25271,"line_start":525,"line_end":525,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":146},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25354,"byte_end":25361,"line_start":528,"line_end":528,"column_start":15,"column_end":22},"name":"NEG_ONE","qualname":"::bfloat::bf16::NEG_ONE","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] -1\n","sig":null,"attributes":[{"value":"/ [`bf16`] -1","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25324,"byte_end":25339,"line_start":527,"line_end":527,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":147},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25440,"byte_end":25441,"line_start":531,"line_end":531,"column_start":15,"column_end":16},"name":"E","qualname":"::bfloat::bf16::E","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] Euler's number (ℯ)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Euler's number (ℯ)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25392,"byte_end":25425,"line_start":530,"line_end":530,"column_start":5,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":148},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25524,"byte_end":25526,"line_start":533,"line_end":533,"column_start":15,"column_end":17},"name":"PI","qualname":"::bfloat::bf16::PI","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Archimedes' constant (π)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25471,"byte_end":25509,"line_start":532,"line_end":532,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":149},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25588,"byte_end":25597,"line_start":535,"line_end":535,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::bfloat::bf16::FRAC_1_PI","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 1/π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1/π","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25556,"byte_end":25573,"line_start":534,"line_end":534,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25661,"byte_end":25674,"line_start":537,"line_end":537,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::bfloat::bf16::FRAC_1_SQRT_2","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 1/√2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1/√2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25627,"byte_end":25646,"line_start":536,"line_end":536,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25736,"byte_end":25745,"line_start":539,"line_end":539,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::bfloat::bf16::FRAC_2_PI","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 2/π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 2/π","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25704,"byte_end":25721,"line_start":538,"line_end":538,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25810,"byte_end":25824,"line_start":541,"line_end":541,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::bfloat::bf16::FRAC_2_SQRT_PI","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 2/√π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 2/√π","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25775,"byte_end":25795,"line_start":540,"line_end":540,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25886,"byte_end":25895,"line_start":543,"line_end":543,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::bfloat::bf16::FRAC_PI_2","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] π/2\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25854,"byte_end":25871,"line_start":542,"line_end":542,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25957,"byte_end":25966,"line_start":545,"line_end":545,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::bfloat::bf16::FRAC_PI_3","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] π/3\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/3","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25925,"byte_end":25942,"line_start":544,"line_end":544,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26028,"byte_end":26037,"line_start":547,"line_end":547,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::bfloat::bf16::FRAC_PI_4","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] π/4\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/4","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":25996,"byte_end":26013,"line_start":546,"line_end":546,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26099,"byte_end":26108,"line_start":549,"line_end":549,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::bfloat::bf16::FRAC_PI_6","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] π/6\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/6","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26067,"byte_end":26084,"line_start":548,"line_end":548,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26170,"byte_end":26179,"line_start":551,"line_end":551,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::bfloat::bf16::FRAC_PI_8","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] π/8\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26138,"byte_end":26155,"line_start":550,"line_end":550,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26248,"byte_end":26253,"line_start":553,"line_end":553,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::bfloat::bf16::LN_10","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗇 10","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26209,"byte_end":26233,"line_start":552,"line_end":552,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26321,"byte_end":26325,"line_start":555,"line_end":555,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::bfloat::bf16::LN_2","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗇 2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26283,"byte_end":26306,"line_start":554,"line_end":554,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":160},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26404,"byte_end":26411,"line_start":557,"line_end":557,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::bfloat::bf16::LOG10_E","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26355,"byte_end":26389,"line_start":556,"line_end":556,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":161},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26488,"byte_end":26495,"line_start":559,"line_end":559,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::bfloat::bf16::LOG10_2","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₁₀2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26441,"byte_end":26473,"line_start":558,"line_end":558,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":162},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26571,"byte_end":26577,"line_start":561,"line_end":561,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::bfloat::bf16::LOG2_E","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26525,"byte_end":26556,"line_start":560,"line_end":560,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":163},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26652,"byte_end":26659,"line_start":563,"line_end":563,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::bfloat::bf16::LOG2_10","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₂10","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26607,"byte_end":26637,"line_start":562,"line_end":562,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26721,"byte_end":26727,"line_start":565,"line_end":565,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::bfloat::bf16::SQRT_2","value":"bf16","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" [`bf16`] √2\n","sig":null,"attributes":[{"value":"/ [`bf16`] √2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26689,"byte_end":26706,"line_start":564,"line_end":564,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":768},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63770,"byte_end":63773,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"f16","qualname":"::binary16::f16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`\n format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":62866,"byte_end":62964,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/ format.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":62965,"byte_end":62976,"line_start":21,"line_end":21,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":62977,"byte_end":62980,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This 16-bit floating point type is intended for efficient storage where the full range and","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":62981,"byte_end":63075,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"/ precision of a larger floating point value is not required. Because [`f16`] is primarily for","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63076,"byte_end":63172,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ efficient storage, floating point operations such as addition, multiplication, etc. are not","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63173,"byte_end":63268,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ implemented. Operations should be performed with [`f32`] or higher-precision types and converted","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63269,"byte_end":63369,"line_start":26,"line_end":26,"column_start":1,"column_end":101}},{"value":"/ to/from [`f16`] as necessary.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63370,"byte_end":63403,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63404,"byte_end":63407,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63408,"byte_end":63492,"line_start":29,"line_end":29,"column_start":1,"column_end":85}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63493,"byte_end":63523,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63556,"byte_end":63576,"line_start":32,"line_end":32,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":402},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63908,"byte_end":63914,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"name":"consts","qualname":"::binary16::consts","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note =\n\"all constants moved to associated constants of `f16`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63796,"byte_end":63899,"line_start":39,"line_end":42,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":406},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64020,"byte_end":64026,"line_start":47,"line_end":47,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::binary16::consts::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::DIGITS`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":63942,"byte_end":64005,"line_start":46,"line_end":46,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":407},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64130,"byte_end":64137,"line_start":49,"line_end":49,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::binary16::consts::EPSILON","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::EPSILON`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64051,"byte_end":64115,"line_start":48,"line_end":48,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":408},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64243,"byte_end":64251,"line_start":51,"line_end":51,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::binary16::consts::INFINITY","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::INFINITY`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64163,"byte_end":64228,"line_start":50,"line_end":50,"column_start":5,"column_end":70}}]},{"kind":"Const","id":{"krate":0,"index":409},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64365,"byte_end":64380,"line_start":53,"line_end":53,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::binary16::consts::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MANTISSA_DIGITS`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64278,"byte_end":64350,"line_start":52,"line_end":52,"column_start":5,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":410},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64489,"byte_end":64492,"line_start":55,"line_end":55,"column_start":15,"column_end":18},"name":"MAX","qualname":"::binary16::consts::MAX","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MAX`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64414,"byte_end":64474,"line_start":54,"line_end":54,"column_start":5,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":411},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64596,"byte_end":64606,"line_start":57,"line_end":57,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::binary16::consts::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MAX_10_EXP`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64514,"byte_end":64581,"line_start":56,"line_end":56,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":412},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64714,"byte_end":64721,"line_start":59,"line_end":59,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::binary16::consts::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MAX_EXP`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64635,"byte_end":64699,"line_start":58,"line_end":58,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":413},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64822,"byte_end":64825,"line_start":61,"line_end":61,"column_start":15,"column_end":18},"name":"MIN","qualname":"::binary16::consts::MIN","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MIN`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64747,"byte_end":64807,"line_start":60,"line_end":60,"column_start":5,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":414},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64929,"byte_end":64939,"line_start":63,"line_end":63,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::binary16::consts::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MIN_10_EXP`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64847,"byte_end":64914,"line_start":62,"line_end":62,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":415},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65047,"byte_end":65054,"line_start":65,"line_end":65,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::binary16::consts::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MIN_EXP`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":64968,"byte_end":65032,"line_start":64,"line_end":64,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":416},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65164,"byte_end":65176,"line_start":67,"line_end":67,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::binary16::consts::MIN_POSITIVE","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MIN_POSITIVE`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65080,"byte_end":65149,"line_start":66,"line_end":66,"column_start":5,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":417},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65282,"byte_end":65285,"line_start":69,"line_end":69,"column_start":15,"column_end":18},"name":"NAN","qualname":"::binary16::consts::NAN","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::NAN`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65207,"byte_end":65267,"line_start":68,"line_end":68,"column_start":5,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":418},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65391,"byte_end":65403,"line_start":71,"line_end":71,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::binary16::consts::NEG_INFINITY","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::NEG_INFINITY`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65307,"byte_end":65376,"line_start":70,"line_end":70,"column_start":5,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":419},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65511,"byte_end":65516,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::binary16::consts::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::RADIX`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65434,"byte_end":65496,"line_start":72,"line_end":72,"column_start":5,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":420},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65635,"byte_end":65657,"line_start":76,"line_end":76,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::binary16::consts::MIN_POSITIVE_SUBNORMAL","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note =\n\"moved to `f16::MIN_POSITIVE_SUBNORMAL`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65541,"byte_end":65620,"line_start":75,"line_end":75,"column_start":5,"column_end":84}}]},{"kind":"Const","id":{"krate":0,"index":421},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65783,"byte_end":65796,"line_start":78,"line_end":78,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::binary16::consts::MAX_SUBNORMAL","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::MAX_SUBNORMAL`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65698,"byte_end":65768,"line_start":77,"line_end":77,"column_start":5,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":422},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65904,"byte_end":65907,"line_start":81,"line_end":81,"column_start":15,"column_end":18},"name":"ONE","qualname":"::binary16::consts::ONE","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::ONE`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65829,"byte_end":65889,"line_start":80,"line_end":80,"column_start":5,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":423},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66005,"byte_end":66009,"line_start":83,"line_end":83,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::binary16::consts::ZERO","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::ZERO`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":65929,"byte_end":65990,"line_start":82,"line_end":82,"column_start":5,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":424},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66112,"byte_end":66120,"line_start":85,"line_end":85,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::binary16::consts::NEG_ZERO","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::NEG_ZERO`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66032,"byte_end":66097,"line_start":84,"line_end":84,"column_start":5,"column_end":70}}]},{"kind":"Const","id":{"krate":0,"index":425},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66221,"byte_end":66222,"line_start":88,"line_end":88,"column_start":15,"column_end":16},"name":"E","qualname":"::binary16::consts::E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::E`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66148,"byte_end":66206,"line_start":87,"line_end":87,"column_start":5,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":426},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66316,"byte_end":66318,"line_start":90,"line_end":90,"column_start":15,"column_end":17},"name":"PI","qualname":"::binary16::consts::PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::PI`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66242,"byte_end":66301,"line_start":89,"line_end":89,"column_start":5,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":427},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66420,"byte_end":66429,"line_start":92,"line_end":92,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::binary16::consts::FRAC_1_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_1_PI`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66339,"byte_end":66405,"line_start":91,"line_end":91,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":428},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66542,"byte_end":66555,"line_start":94,"line_end":94,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::binary16::consts::FRAC_1_SQRT_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_1_SQRT_2`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66457,"byte_end":66527,"line_start":93,"line_end":93,"column_start":5,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":429},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66668,"byte_end":66677,"line_start":96,"line_end":96,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::binary16::consts::FRAC_2_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_2_PI`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66587,"byte_end":66653,"line_start":95,"line_end":95,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":430},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66791,"byte_end":66805,"line_start":98,"line_end":98,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::binary16::consts::FRAC_2_SQRT_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_2_SQRT_PI`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66705,"byte_end":66776,"line_start":97,"line_end":97,"column_start":5,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":431},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66919,"byte_end":66928,"line_start":100,"line_end":100,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::binary16::consts::FRAC_PI_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_PI_2`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66838,"byte_end":66904,"line_start":99,"line_end":99,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":432},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67037,"byte_end":67046,"line_start":102,"line_end":102,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::binary16::consts::FRAC_PI_3","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_PI_3`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":66956,"byte_end":67022,"line_start":101,"line_end":101,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":433},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67155,"byte_end":67164,"line_start":104,"line_end":104,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::binary16::consts::FRAC_PI_4","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_PI_4`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67074,"byte_end":67140,"line_start":103,"line_end":103,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":434},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67273,"byte_end":67282,"line_start":106,"line_end":106,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::binary16::consts::FRAC_PI_6","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_PI_6`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67192,"byte_end":67258,"line_start":105,"line_end":105,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":435},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67391,"byte_end":67400,"line_start":108,"line_end":108,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::binary16::consts::FRAC_PI_8","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::FRAC_PI_8`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67310,"byte_end":67376,"line_start":107,"line_end":107,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":436},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67505,"byte_end":67510,"line_start":110,"line_end":110,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::binary16::consts::LN_10","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::LN_10`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67428,"byte_end":67490,"line_start":109,"line_end":109,"column_start":5,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":437},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67610,"byte_end":67614,"line_start":112,"line_end":112,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::binary16::consts::LN_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::LN_2`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67534,"byte_end":67595,"line_start":111,"line_end":111,"column_start":5,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":438},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67716,"byte_end":67723,"line_start":114,"line_end":114,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::binary16::consts::LOG10_E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::LOG10_E`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67637,"byte_end":67701,"line_start":113,"line_end":113,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":439},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67827,"byte_end":67833,"line_start":116,"line_end":116,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::binary16::consts::LOG2_E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::LOG2_E`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67749,"byte_end":67812,"line_start":115,"line_end":115,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":440},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67936,"byte_end":67942,"line_start":118,"line_end":118,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::binary16::consts::SQRT_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note = \"moved to `f16::SQRT_2`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67858,"byte_end":67921,"line_start":117,"line_end":117,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68076,"byte_end":68085,"line_start":124,"line_end":124,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<f16>::from_bits","value":"pub const fn from_bits(u16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from the raw bits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67981,"byte_end":68044,"line_start":122,"line_end":122,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68049,"byte_end":68058,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68650,"byte_end":68658,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<f16>::from_f32","value":"pub fn from_f32(f32) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 32-bit floating point value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68135,"byte_end":68215,"line_start":128,"line_end":128,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68220,"byte_end":68223,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68228,"byte_end":68316,"line_start":130,"line_end":130,"column_start":5,"column_end":90}},{"value":"/ preserved. 32-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68321,"byte_end":68415,"line_start":131,"line_end":131,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68420,"byte_end":68514,"line_start":132,"line_end":132,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68519,"byte_end":68609,"line_start":133,"line_end":133,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68614,"byte_end":68624,"line_start":134,"line_end":134,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68629,"byte_end":68638,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69246,"byte_end":69254,"line_start":148,"line_end":148,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<f16>::from_f64","value":"pub fn from_f64(f64) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 64-bit floating point value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68731,"byte_end":68811,"line_start":140,"line_end":140,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68816,"byte_end":68819,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68824,"byte_end":68912,"line_start":142,"line_end":142,"column_start":5,"column_end":90}},{"value":"/ preserved. 64-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":68917,"byte_end":69011,"line_start":143,"line_end":143,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69016,"byte_end":69110,"line_start":144,"line_end":144,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69115,"byte_end":69205,"line_start":145,"line_end":145,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69210,"byte_end":69220,"line_start":146,"line_end":146,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69225,"byte_end":69234,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69421,"byte_end":69428,"line_start":154,"line_end":154,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<f16>::to_bits","value":"pub const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`f16`] into the underlying bit representation.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69327,"byte_end":69389,"line_start":152,"line_end":152,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69394,"byte_end":69403,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69820,"byte_end":69831,"line_start":169,"line_end":169,"column_start":18,"column_end":29},"name":"to_le_bytes","qualname":"<f16>::to_le_bytes","value":"pub const fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69470,"byte_end":69563,"line_start":158,"line_end":158,"column_start":5,"column_end":98}},{"value":"/ little-endian byte order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69568,"byte_end":69597,"line_start":159,"line_end":159,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69602,"byte_end":69605,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69610,"byte_end":69624,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69629,"byte_end":69632,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69637,"byte_end":69648,"line_start":163,"line_end":163,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69653,"byte_end":69680,"line_start":164,"line_end":164,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_le_bytes();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69685,"byte_end":69735,"line_start":165,"line_end":165,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x40, 0x4A]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69740,"byte_end":69776,"line_start":166,"line_end":166,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69781,"byte_end":69788,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69793,"byte_end":69802,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70248,"byte_end":70259,"line_start":184,"line_end":184,"column_start":18,"column_end":29},"name":"to_be_bytes","qualname":"<f16>::to_be_bytes","value":"pub const fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69891,"byte_end":69984,"line_start":173,"line_end":173,"column_start":5,"column_end":98}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":69989,"byte_end":70025,"line_start":174,"line_end":174,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70030,"byte_end":70033,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70038,"byte_end":70052,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70057,"byte_end":70060,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70065,"byte_end":70076,"line_start":178,"line_end":178,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70081,"byte_end":70108,"line_start":179,"line_end":179,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_be_bytes();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70113,"byte_end":70163,"line_start":180,"line_end":180,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x4A, 0x40]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70168,"byte_end":70204,"line_start":181,"line_end":181,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70209,"byte_end":70216,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70221,"byte_end":70230,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70967,"byte_end":70978,"line_start":207,"line_end":207,"column_start":18,"column_end":29},"name":"to_ne_bytes","qualname":"<f16>::to_ne_bytes","value":"pub const fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70319,"byte_end":70412,"line_start":188,"line_end":188,"column_start":5,"column_end":98}},{"value":"/ native byte order.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70417,"byte_end":70439,"line_start":189,"line_end":189,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70444,"byte_end":70447,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70452,"byte_end":70532,"line_start":191,"line_end":191,"column_start":5,"column_end":85}},{"value":"/ [`to_be_bytes`][Self::to_be_bytes] or [`to_le_bytes`][Self::to_le_bytes], as appropriate,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70537,"byte_end":70630,"line_start":192,"line_end":192,"column_start":5,"column_end":98}},{"value":"/ instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70635,"byte_end":70647,"line_start":193,"line_end":193,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70652,"byte_end":70655,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70660,"byte_end":70674,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70679,"byte_end":70682,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70687,"byte_end":70698,"line_start":197,"line_end":197,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70703,"byte_end":70730,"line_start":198,"line_end":198,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70735,"byte_end":70785,"line_start":199,"line_end":199,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70790,"byte_end":70844,"line_start":200,"line_end":200,"column_start":5,"column_end":59}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70849,"byte_end":70869,"line_start":201,"line_end":201,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70874,"byte_end":70886,"line_start":202,"line_end":202,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70891,"byte_end":70911,"line_start":203,"line_end":203,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70916,"byte_end":70923,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70928,"byte_end":70935,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":70940,"byte_end":70949,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71359,"byte_end":71372,"line_start":221,"line_end":221,"column_start":18,"column_end":31},"name":"from_le_bytes","qualname":"<f16>::from_le_bytes","value":"pub const fn from_le_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in little endian.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71038,"byte_end":71130,"line_start":211,"line_end":211,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71135,"byte_end":71138,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71143,"byte_end":71157,"line_start":213,"line_end":213,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71162,"byte_end":71165,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71170,"byte_end":71181,"line_start":215,"line_end":215,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71186,"byte_end":71213,"line_start":216,"line_end":216,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_le_bytes([0x40, 0x4A]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71218,"byte_end":71267,"line_start":217,"line_end":217,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71272,"byte_end":71315,"line_start":218,"line_end":218,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71320,"byte_end":71327,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71332,"byte_end":71341,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71777,"byte_end":71790,"line_start":235,"line_end":235,"column_start":18,"column_end":31},"name":"from_be_bytes","qualname":"<f16>::from_be_bytes","value":"pub const fn from_be_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in big endian.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71459,"byte_end":71548,"line_start":225,"line_end":225,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71553,"byte_end":71556,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71561,"byte_end":71575,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71580,"byte_end":71583,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71588,"byte_end":71599,"line_start":229,"line_end":229,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71604,"byte_end":71631,"line_start":230,"line_end":230,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_be_bytes([0x4A, 0x40]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71636,"byte_end":71685,"line_start":231,"line_end":231,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71690,"byte_end":71733,"line_start":232,"line_end":232,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71738,"byte_end":71745,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71750,"byte_end":71759,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72519,"byte_end":72532,"line_start":257,"line_end":257,"column_start":18,"column_end":31},"name":"from_ne_bytes","qualname":"<f16>::from_ne_bytes","value":"pub const fn from_ne_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in native endian.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71877,"byte_end":71969,"line_start":239,"line_end":239,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71974,"byte_end":71977,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":71982,"byte_end":72071,"line_start":241,"line_end":241,"column_start":5,"column_end":94}},{"value":"/ [`from_be_bytes`][Self::from_be_bytes] or [`from_le_bytes`][Self::from_le_bytes], as","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72076,"byte_end":72164,"line_start":242,"line_end":242,"column_start":5,"column_end":93}},{"value":"/ appropriate instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72169,"byte_end":72193,"line_start":243,"line_end":243,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72198,"byte_end":72201,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72206,"byte_end":72220,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72225,"byte_end":72228,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72233,"byte_end":72244,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72249,"byte_end":72276,"line_start":248,"line_end":248,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72281,"byte_end":72348,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72353,"byte_end":72373,"line_start":250,"line_end":250,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72378,"byte_end":72390,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72395,"byte_end":72415,"line_start":252,"line_end":252,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72420,"byte_end":72427,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72432,"byte_end":72475,"line_start":254,"line_end":254,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72480,"byte_end":72487,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72492,"byte_end":72501,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72725,"byte_end":72732,"line_start":264,"line_end":264,"column_start":12,"column_end":19},"name":"as_bits","qualname":"<f16>::as_bits","value":"pub fn as_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.2.0\", note = \"renamed to `to_bits`\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72638,"byte_end":72699,"line_start":262,"line_end":262,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72704,"byte_end":72713,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72997,"byte_end":73003,"line_start":273,"line_end":273,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<f16>::to_f32","value":"pub fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f32` value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72782,"byte_end":72830,"line_start":268,"line_end":268,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72835,"byte_end":72838,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72843,"byte_end":72937,"line_start":270,"line_end":270,"column_start":5,"column_end":99}},{"value":"/ in 32-bit floating point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72942,"byte_end":72971,"line_start":271,"line_end":271,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":72976,"byte_end":72985,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73281,"byte_end":73287,"line_start":282,"line_end":282,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<f16>::to_f64","value":"pub fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f64` value.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73066,"byte_end":73114,"line_start":277,"line_end":277,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73119,"byte_end":73122,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73127,"byte_end":73221,"line_start":279,"line_end":279,"column_start":5,"column_end":99}},{"value":"/ in 64-bit floating point.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73226,"byte_end":73255,"line_start":280,"line_end":280,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73260,"byte_end":73269,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73686,"byte_end":73692,"line_start":300,"line_end":300,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<f16>::is_nan","value":"pub const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is `NaN` and `false` otherwise.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73350,"byte_end":73414,"line_start":286,"line_end":286,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73419,"byte_end":73422,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73427,"byte_end":73441,"line_start":288,"line_end":288,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73446,"byte_end":73449,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73454,"byte_end":73465,"line_start":290,"line_end":290,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73470,"byte_end":73497,"line_start":291,"line_end":291,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73502,"byte_end":73505,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73510,"byte_end":73533,"line_start":293,"line_end":293,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73538,"byte_end":73573,"line_start":294,"line_end":294,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73578,"byte_end":73581,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73586,"byte_end":73612,"line_start":296,"line_end":296,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73617,"byte_end":73642,"line_start":297,"line_end":297,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73647,"byte_end":73654,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73659,"byte_end":73668,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74272,"byte_end":74283,"line_start":324,"line_end":324,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<f16>::is_infinite","value":"pub const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false`.\n otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73759,"byte_end":73813,"line_start":304,"line_end":304,"column_start":5,"column_end":56}},{"value":"/ otherwise.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73818,"byte_end":73832,"line_start":305,"line_end":305,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73837,"byte_end":73840,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73845,"byte_end":73859,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73864,"byte_end":73867,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73872,"byte_end":73883,"line_start":309,"line_end":309,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73888,"byte_end":73915,"line_start":310,"line_end":310,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73920,"byte_end":73923,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73928,"byte_end":73962,"line_start":312,"line_end":312,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":73967,"byte_end":73995,"line_start":313,"line_end":313,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74000,"byte_end":74036,"line_start":314,"line_end":314,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74041,"byte_end":74064,"line_start":315,"line_end":315,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74069,"byte_end":74072,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74077,"byte_end":74107,"line_start":317,"line_end":317,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74112,"byte_end":74144,"line_start":318,"line_end":318,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74149,"byte_end":74152,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74157,"byte_end":74188,"line_start":320,"line_end":320,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74193,"byte_end":74228,"line_start":321,"line_end":321,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74233,"byte_end":74240,"line_start":322,"line_end":322,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74245,"byte_end":74254,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74848,"byte_end":74857,"line_start":347,"line_end":347,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<f16>::is_finite","value":"pub const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor `NaN`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74351,"byte_end":74415,"line_start":328,"line_end":328,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74420,"byte_end":74423,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74428,"byte_end":74442,"line_start":330,"line_end":330,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74447,"byte_end":74450,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74455,"byte_end":74466,"line_start":332,"line_end":332,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74471,"byte_end":74498,"line_start":333,"line_end":333,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74503,"byte_end":74506,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74511,"byte_end":74545,"line_start":335,"line_end":335,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74550,"byte_end":74578,"line_start":336,"line_end":336,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74583,"byte_end":74619,"line_start":337,"line_end":337,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74624,"byte_end":74647,"line_start":338,"line_end":338,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74652,"byte_end":74655,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74660,"byte_end":74687,"line_start":340,"line_end":340,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74692,"byte_end":74695,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74700,"byte_end":74730,"line_start":342,"line_end":342,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74735,"byte_end":74765,"line_start":343,"line_end":343,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74770,"byte_end":74804,"line_start":344,"line_end":344,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74809,"byte_end":74816,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74821,"byte_end":74830,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75611,"byte_end":75620,"line_start":373,"line_end":373,"column_start":18,"column_end":27},"name":"is_normal","qualname":"<f16>::is_normal","value":"pub const fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":74925,"byte_end":75005,"line_start":351,"line_end":351,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75010,"byte_end":75013,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75018,"byte_end":75032,"line_start":353,"line_end":353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75037,"byte_end":75040,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75045,"byte_end":75056,"line_start":355,"line_end":355,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75061,"byte_end":75088,"line_start":356,"line_end":356,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75093,"byte_end":75096,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ let min = f16::MIN_POSITIVE;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75101,"byte_end":75133,"line_start":358,"line_end":358,"column_start":5,"column_end":37}},{"value":"/ let max = f16::MAX;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75138,"byte_end":75161,"line_start":359,"line_end":359,"column_start":5,"column_end":28}},{"value":"/ let lower_than_min = f16::from_f32(1.0e-10_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75166,"byte_end":75218,"line_start":360,"line_end":360,"column_start":5,"column_end":57}},{"value":"/ let zero = f16::from_f32(0.0_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75223,"byte_end":75261,"line_start":361,"line_end":361,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75266,"byte_end":75269,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75274,"byte_end":75303,"line_start":363,"line_end":363,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75308,"byte_end":75337,"line_start":364,"line_end":364,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75342,"byte_end":75345,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75350,"byte_end":75381,"line_start":366,"line_end":366,"column_start":5,"column_end":36}},{"value":"/ assert!(!f16::NAN.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75386,"byte_end":75421,"line_start":367,"line_end":367,"column_start":5,"column_end":40}},{"value":"/ assert!(!f16::INFINITY.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75426,"byte_end":75466,"line_start":368,"line_end":368,"column_start":5,"column_end":45}},{"value":"/ // Values between `0` and `min` are Subnormal.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75471,"byte_end":75521,"line_start":369,"line_end":369,"column_start":5,"column_end":55}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75526,"byte_end":75567,"line_start":370,"line_end":370,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75572,"byte_end":75579,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75584,"byte_end":75593,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76260,"byte_end":76268,"line_start":395,"line_end":395,"column_start":18,"column_end":26},"name":"classify","qualname":"<f16>::classify","value":"pub const fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75723,"byte_end":75777,"line_start":378,"line_end":378,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75782,"byte_end":75785,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75790,"byte_end":75880,"line_start":380,"line_end":380,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75885,"byte_end":75907,"line_start":381,"line_end":381,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75912,"byte_end":75915,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75920,"byte_end":75934,"line_start":383,"line_end":383,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75939,"byte_end":75942,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75947,"byte_end":75958,"line_start":385,"line_end":385,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75963,"byte_end":75992,"line_start":386,"line_end":386,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":75997,"byte_end":76024,"line_start":387,"line_end":387,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76029,"byte_end":76032,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ let num = f16::from_f32(12.4_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76037,"byte_end":76075,"line_start":389,"line_end":389,"column_start":5,"column_end":43}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76080,"byte_end":76108,"line_start":390,"line_end":390,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76113,"byte_end":76116,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76121,"byte_end":76172,"line_start":392,"line_end":392,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76177,"byte_end":76230,"line_start":393,"line_end":393,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76235,"byte_end":76242,"line_start":394,"line_end":394,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77265,"byte_end":77271,"line_start":425,"line_end":425,"column_start":18,"column_end":24},"name":"signum","qualname":"<f16>::signum","value":"pub const fn signum(Self) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76636,"byte_end":76692,"line_start":407,"line_end":407,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76697,"byte_end":76700,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or [`INFINITY`][f16::INFINITY]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76705,"byte_end":76781,"line_start":409,"line_end":409,"column_start":5,"column_end":81}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or [`NEG_INFINITY`][f16::NEG_INFINITY]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76786,"byte_end":76871,"line_start":410,"line_end":410,"column_start":5,"column_end":90}},{"value":"/ * [`NAN`][f16::NAN] if the number is `NaN`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76876,"byte_end":76922,"line_start":411,"line_end":411,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76927,"byte_end":76930,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76935,"byte_end":76949,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76954,"byte_end":76957,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76962,"byte_end":76973,"line_start":415,"line_end":415,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":76978,"byte_end":77005,"line_start":416,"line_end":416,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77010,"byte_end":77013,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(3.5_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77018,"byte_end":77053,"line_start":418,"line_end":418,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77058,"byte_end":77061,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), f16::from_f32(1.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77066,"byte_end":77113,"line_start":420,"line_end":420,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(f16::NEG_INFINITY.signum(), f16::from_f32(-1.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77118,"byte_end":77182,"line_start":421,"line_end":421,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77187,"byte_end":77190,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ assert!(f16::NAN.signum().is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77195,"byte_end":77235,"line_start":423,"line_end":423,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77240,"byte_end":77247,"line_start":424,"line_end":424,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78040,"byte_end":78056,"line_start":453,"line_end":453,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<f16>::is_sign_positive","value":"pub const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77461,"byte_end":77554,"line_start":435,"line_end":435,"column_start":5,"column_end":98}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77559,"byte_end":77590,"line_start":436,"line_end":436,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77595,"byte_end":77598,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77603,"byte_end":77617,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77622,"byte_end":77625,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77630,"byte_end":77641,"line_start":440,"line_end":440,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77646,"byte_end":77673,"line_start":441,"line_end":441,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77678,"byte_end":77681,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77686,"byte_end":77709,"line_start":443,"line_end":443,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77714,"byte_end":77749,"line_start":444,"line_end":444,"column_start":5,"column_end":40}},{"value":"/ let g = f16::from_f32(-7.0_f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77754,"byte_end":77790,"line_start":445,"line_end":445,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77795,"byte_end":77798,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77803,"byte_end":77837,"line_start":447,"line_end":447,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77842,"byte_end":77877,"line_start":448,"line_end":448,"column_start":5,"column_end":40}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77882,"byte_end":77929,"line_start":449,"line_end":449,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":77934,"byte_end":77996,"line_start":450,"line_end":450,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78001,"byte_end":78008,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78013,"byte_end":78022,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78695,"byte_end":78711,"line_start":475,"line_end":475,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<f16>::is_sign_negative","value":"pub const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78116,"byte_end":78209,"line_start":457,"line_end":457,"column_start":5,"column_end":98}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78214,"byte_end":78247,"line_start":458,"line_end":458,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78252,"byte_end":78255,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78260,"byte_end":78274,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78279,"byte_end":78282,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78287,"byte_end":78298,"line_start":462,"line_end":462,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78303,"byte_end":78330,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78335,"byte_end":78338,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78343,"byte_end":78366,"line_start":465,"line_end":465,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78371,"byte_end":78405,"line_start":466,"line_end":466,"column_start":5,"column_end":39}},{"value":"/ let g = f16::from_f32(-7.0f32);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78410,"byte_end":78445,"line_start":467,"line_end":467,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78450,"byte_end":78453,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78458,"byte_end":78493,"line_start":469,"line_end":469,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78498,"byte_end":78532,"line_start":470,"line_end":470,"column_start":5,"column_end":39}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78537,"byte_end":78584,"line_start":471,"line_end":471,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78589,"byte_end":78651,"line_start":472,"line_end":472,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78656,"byte_end":78663,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78668,"byte_end":78677,"line_start":474,"line_end":474,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79572,"byte_end":79580,"line_start":498,"line_end":498,"column_start":18,"column_end":26},"name":"copysign","qualname":"<f16>::copysign","value":"pub const fn copysign(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number composed of the magnitude of `self` and the sign of `sign`.","sig":null,"attributes":[{"value":"/ Returns a number composed of the magnitude of `self` and the sign of `sign`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78771,"byte_end":78851,"line_start":479,"line_end":479,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78856,"byte_end":78859,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Equal to `self` if the sign of `self` and `sign` are the same, otherwise equal to `-self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78864,"byte_end":78958,"line_start":481,"line_end":481,"column_start":5,"column_end":99}},{"value":"/ If `self` is NaN, then NaN with the sign of `sign` is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":78963,"byte_end":79030,"line_start":482,"line_end":482,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79035,"byte_end":79038,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79043,"byte_end":79057,"line_start":484,"line_end":484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79062,"byte_end":79065,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79070,"byte_end":79077,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79082,"byte_end":79109,"line_start":487,"line_end":487,"column_start":5,"column_end":32}},{"value":"/ let f = f16::from_f32(3.5);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79114,"byte_end":79145,"line_start":488,"line_end":488,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79150,"byte_end":79153,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.copysign(f16::from_f32(0.42)), f16::from_f32(3.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79158,"byte_end":79226,"line_start":490,"line_end":490,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(f.copysign(f16::from_f32(-0.42)), f16::from_f32(-3.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79231,"byte_end":79301,"line_start":491,"line_end":491,"column_start":5,"column_end":75}},{"value":"/ assert_eq!((-f).copysign(f16::from_f32(0.42)), f16::from_f32(3.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79306,"byte_end":79377,"line_start":492,"line_end":492,"column_start":5,"column_end":76}},{"value":"/ assert_eq!((-f).copysign(f16::from_f32(-0.42)), f16::from_f32(-3.5));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79382,"byte_end":79455,"line_start":493,"line_end":493,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79460,"byte_end":79463,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ assert!(f16::NAN.copysign(f16::from_f32(1.0)).is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79468,"byte_end":79528,"line_start":495,"line_end":495,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79533,"byte_end":79540,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79545,"byte_end":79554,"line_start":497,"line_end":497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80033,"byte_end":80036,"line_start":516,"line_end":516,"column_start":12,"column_end":15},"name":"max","qualname":"<f16>::max","value":"pub fn max(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79675,"byte_end":79718,"line_start":502,"line_end":502,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79723,"byte_end":79726,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79731,"byte_end":79803,"line_start":504,"line_end":504,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79808,"byte_end":79811,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79816,"byte_end":79830,"line_start":506,"line_end":506,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79835,"byte_end":79838,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79843,"byte_end":79850,"line_start":508,"line_end":508,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79855,"byte_end":79882,"line_start":509,"line_end":509,"column_start":5,"column_end":32}},{"value":"/ let x = f16::from_f32(1.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79887,"byte_end":79918,"line_start":510,"line_end":510,"column_start":5,"column_end":36}},{"value":"/ let y = f16::from_f32(2.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79923,"byte_end":79954,"line_start":511,"line_end":511,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79959,"byte_end":79962,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.max(y), y);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":79967,"byte_end":79995,"line_start":513,"line_end":513,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80000,"byte_end":80007,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80012,"byte_end":80021,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80540,"byte_end":80543,"line_start":538,"line_end":538,"column_start":12,"column_end":15},"name":"min","qualname":"<f16>::min","value":"pub fn min(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80182,"byte_end":80225,"line_start":524,"line_end":524,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80230,"byte_end":80233,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80238,"byte_end":80310,"line_start":526,"line_end":526,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80315,"byte_end":80318,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80323,"byte_end":80337,"line_start":528,"line_end":528,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80342,"byte_end":80345,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80350,"byte_end":80357,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80362,"byte_end":80389,"line_start":531,"line_end":531,"column_start":5,"column_end":32}},{"value":"/ let x = f16::from_f32(1.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80394,"byte_end":80425,"line_start":532,"line_end":532,"column_start":5,"column_end":36}},{"value":"/ let y = f16::from_f32(2.0);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80430,"byte_end":80461,"line_start":533,"line_end":533,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80466,"byte_end":80469,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.min(y), x);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80474,"byte_end":80502,"line_start":535,"line_end":535,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80507,"byte_end":80514,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80519,"byte_end":80528,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81588,"byte_end":81593,"line_start":566,"line_end":566,"column_start":12,"column_end":17},"name":"clamp","qualname":"<f16>::clamp","value":"pub fn clamp(Self, f16, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Restrict a value to a certain interval unless it is NaN.","sig":null,"attributes":[{"value":"/ Restrict a value to a certain interval unless it is NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80689,"byte_end":80749,"line_start":546,"line_end":546,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80754,"byte_end":80757,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80762,"byte_end":80852,"line_start":548,"line_end":548,"column_start":5,"column_end":95}},{"value":"/ Otherwise this returns `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80857,"byte_end":80891,"line_start":549,"line_end":549,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80896,"byte_end":80899,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Note that this function returns NaN if the initial value was NaN as well.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80904,"byte_end":80981,"line_start":551,"line_end":551,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80986,"byte_end":80989,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":80994,"byte_end":81006,"line_start":553,"line_end":553,"column_start":5,"column_end":17}},{"value":"/ Panics if `min > max`, `min` is NaN, or `max` is NaN.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81011,"byte_end":81068,"line_start":554,"line_end":554,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81073,"byte_end":81076,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81081,"byte_end":81095,"line_start":556,"line_end":556,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81100,"byte_end":81103,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81108,"byte_end":81115,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81120,"byte_end":81147,"line_start":559,"line_end":559,"column_start":5,"column_end":32}},{"value":"/ assert!(f16::from_f32(-3.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(-2.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81152,"byte_end":81255,"line_start":560,"line_end":560,"column_start":5,"column_end":108}},{"value":"/ assert!(f16::from_f32(0.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(0.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81260,"byte_end":81361,"line_start":561,"line_end":561,"column_start":5,"column_end":106}},{"value":"/ assert!(f16::from_f32(2.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(1.0));","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81366,"byte_end":81467,"line_start":562,"line_end":562,"column_start":5,"column_end":106}},{"value":"/ assert!(f16::NAN.clamp(f16::from_f32(-2.0), f16::from_f32(1.0)).is_nan());","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81472,"byte_end":81550,"line_start":563,"line_end":563,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81555,"byte_end":81562,"line_start":564,"line_end":564,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81567,"byte_end":81576,"line_start":565,"line_end":565,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":473},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81887,"byte_end":81893,"line_start":579,"line_end":579,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::binary16::f16::DIGITS","value":"u32","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Approximate number of [`f16`] significant digits in base 10\n","sig":null,"attributes":[{"value":"/ Approximate number of [`f16`] significant digits in base 10","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81809,"byte_end":81872,"line_start":578,"line_end":578,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":474},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82107,"byte_end":82114,"line_start":584,"line_end":584,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::binary16::f16::EPSILON","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`]\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","sig":null,"attributes":[{"value":"/ [`f16`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81908,"byte_end":81919,"line_start":580,"line_end":580,"column_start":5,"column_end":16}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":81924,"byte_end":81998,"line_start":581,"line_end":581,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82003,"byte_end":82006,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82011,"byte_end":82092,"line_start":583,"line_end":583,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":475},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82193,"byte_end":82201,"line_start":586,"line_end":586,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::binary16::f16::INFINITY","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] positive Infinity (+∞)\n","sig":null,"attributes":[{"value":"/ [`f16`] positive Infinity (+∞)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82142,"byte_end":82178,"line_start":585,"line_end":585,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":476},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82294,"byte_end":82309,"line_start":588,"line_end":588,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::binary16::f16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Number of [`f16`] significant digits in base 2\n","sig":null,"attributes":[{"value":"/ Number of [`f16`] significant digits in base 2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82229,"byte_end":82279,"line_start":587,"line_end":587,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":477},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82372,"byte_end":82375,"line_start":590,"line_end":590,"column_start":15,"column_end":18},"name":"MAX","qualname":"::binary16::f16::MAX","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Largest finite [`f16`] value\n","sig":null,"attributes":[{"value":"/ Largest finite [`f16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82325,"byte_end":82357,"line_start":589,"line_end":589,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":478},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82464,"byte_end":82474,"line_start":592,"line_end":592,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::binary16::f16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`] power of 10 exponent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82400,"byte_end":82449,"line_start":591,"line_end":591,"column_start":5,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":479},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82552,"byte_end":82559,"line_start":594,"line_end":594,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::binary16::f16::MAX_EXP","value":"i32","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`] power of 2 exponent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82489,"byte_end":82537,"line_start":593,"line_end":593,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":480},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82623,"byte_end":82626,"line_start":596,"line_end":596,"column_start":15,"column_end":18},"name":"MIN","qualname":"::binary16::f16::MIN","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Smallest finite [`f16`] value\n","sig":null,"attributes":[{"value":"/ Smallest finite [`f16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82575,"byte_end":82608,"line_start":595,"line_end":595,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":481},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82722,"byte_end":82732,"line_start":598,"line_end":598,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::binary16::f16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Minimum possible normal [`f16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`f16`] power of 10 exponent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82651,"byte_end":82707,"line_start":597,"line_end":597,"column_start":5,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":482},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82839,"byte_end":82846,"line_start":600,"line_end":600,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::binary16::f16::MIN_EXP","value":"i32","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`f16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`f16`] power of 2 exponent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82748,"byte_end":82824,"line_start":599,"line_end":599,"column_start":5,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":483},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82920,"byte_end":82932,"line_start":602,"line_end":602,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::binary16::f16::MIN_POSITIVE","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Smallest positive normal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`f16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82863,"byte_end":82905,"line_start":601,"line_end":601,"column_start":5,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":484},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83005,"byte_end":83008,"line_start":604,"line_end":604,"column_start":15,"column_end":18},"name":"NAN","qualname":"::binary16::f16::NAN","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] Not a Number (NaN)\n","sig":null,"attributes":[{"value":"/ [`f16`] Not a Number (NaN)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":82960,"byte_end":82990,"line_start":603,"line_end":603,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":485},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83087,"byte_end":83099,"line_start":606,"line_end":606,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::binary16::f16::NEG_INFINITY","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] negative infinity (-∞)\n","sig":null,"attributes":[{"value":"/ [`f16`] negative infinity (-∞)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83036,"byte_end":83072,"line_start":605,"line_end":605,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":486},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83205,"byte_end":83210,"line_start":608,"line_end":608,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::binary16::f16::RADIX","value":"u32","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`f16`]\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`f16`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83127,"byte_end":83190,"line_start":607,"line_end":607,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":487},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83285,"byte_end":83307,"line_start":611,"line_end":611,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::binary16::f16::MIN_POSITIVE_SUBNORMAL","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`f16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83226,"byte_end":83270,"line_start":610,"line_end":610,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":488},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83385,"byte_end":83398,"line_start":613,"line_end":613,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::binary16::f16::MAX_SUBNORMAL","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Maximum subnormal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`f16`] value","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83335,"byte_end":83370,"line_start":612,"line_end":612,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":489},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83455,"byte_end":83458,"line_start":616,"line_end":616,"column_start":15,"column_end":18},"name":"ONE","qualname":"::binary16::f16::ONE","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 1\n","sig":null,"attributes":[{"value":"/ [`f16`] 1","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83427,"byte_end":83440,"line_start":615,"line_end":615,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":490},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83514,"byte_end":83518,"line_start":618,"line_end":618,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::binary16::f16::ZERO","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 0\n","sig":null,"attributes":[{"value":"/ [`f16`] 0","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83486,"byte_end":83499,"line_start":617,"line_end":617,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":491},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83575,"byte_end":83583,"line_start":620,"line_end":620,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::binary16::f16::NEG_ZERO","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] -0\n","sig":null,"attributes":[{"value":"/ [`f16`] -0","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83546,"byte_end":83560,"line_start":619,"line_end":619,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":492},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83640,"byte_end":83647,"line_start":622,"line_end":622,"column_start":15,"column_end":22},"name":"NEG_ONE","qualname":"::binary16::f16::NEG_ONE","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] -1\n","sig":null,"attributes":[{"value":"/ [`f16`] -1","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83611,"byte_end":83625,"line_start":621,"line_end":621,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":493},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83723,"byte_end":83724,"line_start":625,"line_end":625,"column_start":15,"column_end":16},"name":"E","qualname":"::binary16::f16::E","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] Euler's number (ℯ)\n","sig":null,"attributes":[{"value":"/ [`f16`] Euler's number (ℯ)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83676,"byte_end":83708,"line_start":624,"line_end":624,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":494},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83804,"byte_end":83806,"line_start":627,"line_end":627,"column_start":15,"column_end":17},"name":"PI","qualname":"::binary16::f16::PI","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"/ [`f16`] Archimedes' constant (π)","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83752,"byte_end":83789,"line_start":626,"line_end":626,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":495},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83865,"byte_end":83874,"line_start":629,"line_end":629,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::binary16::f16::FRAC_1_PI","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 1/π\n","sig":null,"attributes":[{"value":"/ [`f16`] 1/π","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83834,"byte_end":83850,"line_start":628,"line_end":628,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":496},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83935,"byte_end":83948,"line_start":631,"line_end":631,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::binary16::f16::FRAC_1_SQRT_2","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 1/√2\n","sig":null,"attributes":[{"value":"/ [`f16`] 1/√2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83902,"byte_end":83920,"line_start":630,"line_end":630,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":497},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84007,"byte_end":84016,"line_start":633,"line_end":633,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::binary16::f16::FRAC_2_PI","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 2/π\n","sig":null,"attributes":[{"value":"/ [`f16`] 2/π","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":83976,"byte_end":83992,"line_start":632,"line_end":632,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":498},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84078,"byte_end":84092,"line_start":635,"line_end":635,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::binary16::f16::FRAC_2_SQRT_PI","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 2/√π\n","sig":null,"attributes":[{"value":"/ [`f16`] 2/√π","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84044,"byte_end":84063,"line_start":634,"line_end":634,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":499},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84151,"byte_end":84160,"line_start":637,"line_end":637,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::binary16::f16::FRAC_PI_2","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] π/2\n","sig":null,"attributes":[{"value":"/ [`f16`] π/2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84120,"byte_end":84136,"line_start":636,"line_end":636,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":500},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84219,"byte_end":84228,"line_start":639,"line_end":639,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::binary16::f16::FRAC_PI_3","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] π/3\n","sig":null,"attributes":[{"value":"/ [`f16`] π/3","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84188,"byte_end":84204,"line_start":638,"line_end":638,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":501},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84287,"byte_end":84296,"line_start":641,"line_end":641,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::binary16::f16::FRAC_PI_4","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] π/4\n","sig":null,"attributes":[{"value":"/ [`f16`] π/4","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84256,"byte_end":84272,"line_start":640,"line_end":640,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":502},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84355,"byte_end":84364,"line_start":643,"line_end":643,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::binary16::f16::FRAC_PI_6","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] π/6\n","sig":null,"attributes":[{"value":"/ [`f16`] π/6","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84324,"byte_end":84340,"line_start":642,"line_end":642,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":503},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84423,"byte_end":84432,"line_start":645,"line_end":645,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::binary16::f16::FRAC_PI_8","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] π/8\n","sig":null,"attributes":[{"value":"/ [`f16`] π/8","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84392,"byte_end":84408,"line_start":644,"line_end":644,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":504},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84498,"byte_end":84503,"line_start":647,"line_end":647,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::binary16::f16::LN_10","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗇 10","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84460,"byte_end":84483,"line_start":646,"line_end":646,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":505},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84568,"byte_end":84572,"line_start":649,"line_end":649,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::binary16::f16::LN_2","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗇 2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84531,"byte_end":84553,"line_start":648,"line_end":648,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":506},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84648,"byte_end":84655,"line_start":651,"line_end":651,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::binary16::f16::LOG10_E","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84600,"byte_end":84633,"line_start":650,"line_end":650,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":507},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84729,"byte_end":84736,"line_start":653,"line_end":653,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::binary16::f16::LOG10_2","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₁₀2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84683,"byte_end":84714,"line_start":652,"line_end":652,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":508},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84809,"byte_end":84815,"line_start":655,"line_end":655,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::binary16::f16::LOG2_E","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84764,"byte_end":84794,"line_start":654,"line_end":654,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":509},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84887,"byte_end":84894,"line_start":657,"line_end":657,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::binary16::f16::LOG2_10","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₂10","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84843,"byte_end":84872,"line_start":656,"line_end":656,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":510},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84953,"byte_end":84959,"line_start":659,"line_end":659,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::binary16::f16::SQRT_2","value":"f16","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" [`f16`] √2\n","sig":null,"attributes":[{"value":"/ [`f16`] √2","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":84922,"byte_end":84938,"line_start":658,"line_end":658,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":647},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":668},{"krate":0,"index":673},{"krate":0,"index":686},{"krate":0,"index":697},{"krate":0,"index":704},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712}],"decl_id":null,"docs":" Contains utility functions and traits to convert between slices of [`u16`] bits and [`f16`] or\n [`bf16`] numbers.","sig":null,"attributes":[{"value":"/ Contains utility functions and traits to convert between slices of [`u16`] bits and [`f16`] or","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134224,"byte_end":134322,"line_start":1,"line_end":1,"column_start":1,"column_end":99}},{"value":"/ [`bf16`] numbers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134323,"byte_end":134344,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134345,"byte_end":134348,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The utility [`HalfBitsSliceExt`] sealed extension trait is implemented for `[u16]` slices,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134349,"byte_end":134443,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ while the utility [`HalfFloatSliceExt`] sealed extension trait is implemented for both `[f16]`","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134444,"byte_end":134542,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ and `[bf16]` slices. These traits provide efficient conversions and reinterpret casting of","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134543,"byte_end":134637,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ larger buffers of floating point values, and are automatically included in the","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134638,"byte_end":134720,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ [`prelude`][crate::prelude] module.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134721,"byte_end":134760,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":661},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135054,"byte_end":135071,"line_start":18,"line_end":18,"column_start":11,"column_end":28},"name":"HalfFloatSliceExt","qualname":"::slice::HalfFloatSliceExt","value":"HalfFloatSliceExt: private::SealedHalfFloatSlice","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667}],"decl_id":null,"docs":" Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134870,"byte_end":134965,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134966,"byte_end":134969,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":134970,"byte_end":135043,"line_start":17,"line_end":17,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135694,"byte_end":135710,"line_start":33,"line_end":33,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast","value":"pub fn reinterpret_cast(&Self) -> &[u16]","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Reinterprets a slice of [`f16`] or [`bf16`] numbers as a slice of [`u16`] bits.","sig":null,"attributes":[{"value":"/ Reinterprets a slice of [`f16`] or [`bf16`] numbers as a slice of [`u16`] bits.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135109,"byte_end":135192,"line_start":19,"line_end":19,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135197,"byte_end":135200,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135205,"byte_end":135296,"line_start":21,"line_end":21,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135301,"byte_end":135324,"line_start":22,"line_end":22,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135329,"byte_end":135332,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135337,"byte_end":135351,"line_start":24,"line_end":24,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135356,"byte_end":135359,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135364,"byte_end":135375,"line_start":26,"line_end":26,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135380,"byte_end":135407,"line_start":27,"line_end":27,"column_start":5,"column_end":32}},{"value":"/ let float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135412,"byte_end":135493,"line_start":28,"line_end":28,"column_start":5,"column_end":86}},{"value":"/ let int_buffer = float_buffer.reinterpret_cast();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135498,"byte_end":135551,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135556,"byte_end":135559,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(int_buffer, [float_buffer[0].to_bits(), float_buffer[1].to_bits(), float_buffer[2].to_bits()]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135564,"byte_end":135674,"line_start":31,"line_end":31,"column_start":5,"column_end":115}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135679,"byte_end":135686,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136773,"byte_end":136793,"line_start":59,"line_end":59,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast_mut","value":"pub fn reinterpret_cast_mut(&mut Self) -> &mut [u16]","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Reinterprets a mutable slice of [`f16`] or [`bf16`] numbers as a mutable slice of [`u16`].\n bits","sig":null,"attributes":[{"value":"/ Reinterprets a mutable slice of [`f16`] or [`bf16`] numbers as a mutable slice of [`u16`].","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135734,"byte_end":135828,"line_start":35,"line_end":35,"column_start":5,"column_end":99}},{"value":"/ bits","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135833,"byte_end":135841,"line_start":36,"line_end":36,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135846,"byte_end":135849,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135854,"byte_end":135948,"line_start":38,"line_end":38,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [u16]` is borrowed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135953,"byte_end":136037,"line_start":39,"line_end":39,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136042,"byte_end":136045,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136050,"byte_end":136064,"line_start":41,"line_end":41,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136069,"byte_end":136072,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136077,"byte_end":136088,"line_start":43,"line_end":43,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136093,"byte_end":136120,"line_start":44,"line_end":44,"column_start":5,"column_end":32}},{"value":"/ let mut float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136125,"byte_end":136210,"line_start":45,"line_end":45,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136215,"byte_end":136218,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136223,"byte_end":136228,"line_start":47,"line_end":47,"column_start":5,"column_end":10}},{"value":"/     let int_buffer = float_buffer.reinterpret_cast_mut();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136233,"byte_end":136294,"line_start":48,"line_end":48,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136299,"byte_end":136302,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(int_buffer, [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136307,"byte_end":136427,"line_start":50,"line_end":50,"column_start":5,"column_end":125}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136432,"byte_end":136435,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/     // Mutating the u16 slice will mutating the original","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136440,"byte_end":136500,"line_start":52,"line_end":52,"column_start":5,"column_end":65}},{"value":"/     int_buffer[0] = 0;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136505,"byte_end":136531,"line_start":53,"line_end":53,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136536,"byte_end":136541,"line_start":54,"line_end":54,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136546,"byte_end":136549,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop int_buffer before using float_buffer again or we will get a borrow error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136554,"byte_end":136660,"line_start":56,"line_end":56,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(0.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136665,"byte_end":136753,"line_start":57,"line_end":57,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136758,"byte_end":136765,"line_start":58,"line_end":58,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137882,"byte_end":137904,"line_start":88,"line_end":88,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f32_slice","value":"pub fn convert_from_f32_slice(&mut Self, &[f32])","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f32]` slice into [`f16`] or [`bf16`] values in `self`.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f32]` slice into [`f16`] or [`bf16`] values in `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136825,"byte_end":136919,"line_start":61,"line_end":61,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136924,"byte_end":136927,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136932,"byte_end":136983,"line_start":63,"line_end":63,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136988,"byte_end":136991,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":136996,"byte_end":137089,"line_start":65,"line_end":65,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137094,"byte_end":137179,"line_start":66,"line_end":66,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137184,"byte_end":137277,"line_start":67,"line_end":67,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137282,"byte_end":137294,"line_start":68,"line_end":68,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137299,"byte_end":137302,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137307,"byte_end":137319,"line_start":70,"line_end":70,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137324,"byte_end":137327,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137332,"byte_end":137402,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137407,"byte_end":137410,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137415,"byte_end":137429,"line_start":74,"line_end":74,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137434,"byte_end":137445,"line_start":75,"line_end":75,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137450,"byte_end":137477,"line_start":76,"line_end":76,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137482,"byte_end":137515,"line_start":77,"line_end":77,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137520,"byte_end":137551,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137556,"byte_end":137610,"line_start":79,"line_end":79,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137615,"byte_end":137618,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137623,"byte_end":137663,"line_start":81,"line_end":81,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137668,"byte_end":137671,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137676,"byte_end":137694,"line_start":83,"line_end":83,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f32_slice(&float_values);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137699,"byte_end":137748,"line_start":84,"line_end":84,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137753,"byte_end":137756,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137761,"byte_end":137862,"line_start":86,"line_end":86,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137867,"byte_end":137874,"line_start":87,"line_end":87,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138992,"byte_end":139014,"line_start":117,"line_end":117,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f64_slice","value":"pub fn convert_from_f64_slice(&mut Self, &[f64])","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f64]` slice into [`f16`] or [`bf16`] values in `self`.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f64]` slice into [`f16`] or [`bf16`] values in `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":137935,"byte_end":138029,"line_start":90,"line_end":90,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138034,"byte_end":138037,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138042,"byte_end":138093,"line_start":92,"line_end":92,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138098,"byte_end":138101,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138106,"byte_end":138199,"line_start":94,"line_end":94,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138204,"byte_end":138289,"line_start":95,"line_end":95,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138294,"byte_end":138387,"line_start":96,"line_end":96,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138392,"byte_end":138404,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138409,"byte_end":138412,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138417,"byte_end":138429,"line_start":99,"line_end":99,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138434,"byte_end":138437,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138442,"byte_end":138512,"line_start":101,"line_end":101,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138517,"byte_end":138520,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138525,"byte_end":138539,"line_start":103,"line_end":103,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138544,"byte_end":138555,"line_start":104,"line_end":104,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138560,"byte_end":138587,"line_start":105,"line_end":105,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138592,"byte_end":138625,"line_start":106,"line_end":106,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138630,"byte_end":138661,"line_start":107,"line_end":107,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138666,"byte_end":138720,"line_start":108,"line_end":108,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138725,"byte_end":138728,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138733,"byte_end":138773,"line_start":110,"line_end":110,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138778,"byte_end":138781,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138786,"byte_end":138804,"line_start":112,"line_end":112,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f64_slice(&float_values);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138809,"byte_end":138858,"line_start":113,"line_end":113,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138863,"byte_end":138866,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138871,"byte_end":138972,"line_start":115,"line_end":115,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":138977,"byte_end":138984,"line_start":116,"line_end":116,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140041,"byte_end":140061,"line_start":145,"line_end":145,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f32_slice","value":"pub fn convert_to_f32_slice(&Self, &mut [f32])","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in `dst`.","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in `dst`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139045,"byte_end":139137,"line_start":119,"line_end":119,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139142,"byte_end":139145,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139150,"byte_end":139201,"line_start":121,"line_end":121,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139206,"byte_end":139209,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139214,"byte_end":139307,"line_start":123,"line_end":123,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139312,"byte_end":139397,"line_start":124,"line_end":124,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139402,"byte_end":139495,"line_start":125,"line_end":125,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139500,"byte_end":139512,"line_start":126,"line_end":126,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139517,"byte_end":139520,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139525,"byte_end":139537,"line_start":128,"line_end":128,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139542,"byte_end":139545,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139550,"byte_end":139620,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139625,"byte_end":139628,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139633,"byte_end":139647,"line_start":132,"line_end":132,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139652,"byte_end":139663,"line_start":133,"line_end":133,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139668,"byte_end":139695,"line_start":134,"line_end":134,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139700,"byte_end":139733,"line_start":135,"line_end":135,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f32; 4];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139738,"byte_end":139769,"line_start":136,"line_end":136,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139774,"byte_end":139777,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139782,"byte_end":139881,"line_start":138,"line_end":138,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139886,"byte_end":139889,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139894,"byte_end":139912,"line_start":140,"line_end":140,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f32_slice(&mut buffer);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139917,"byte_end":139967,"line_start":141,"line_end":141,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139972,"byte_end":139975,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":139980,"byte_end":140021,"line_start":143,"line_end":143,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140026,"byte_end":140033,"line_start":144,"line_end":144,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":141088,"byte_end":141108,"line_start":173,"line_end":173,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f64_slice","value":"pub fn convert_to_f64_slice(&Self, &mut [f64])","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in `dst`.","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in `dst`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140092,"byte_end":140184,"line_start":147,"line_end":147,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140189,"byte_end":140192,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140197,"byte_end":140248,"line_start":149,"line_end":149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140253,"byte_end":140256,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140261,"byte_end":140354,"line_start":151,"line_end":151,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140359,"byte_end":140444,"line_start":152,"line_end":152,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140449,"byte_end":140542,"line_start":153,"line_end":153,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140547,"byte_end":140559,"line_start":154,"line_end":154,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140564,"byte_end":140567,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140572,"byte_end":140584,"line_start":156,"line_end":156,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140589,"byte_end":140592,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140597,"byte_end":140667,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140672,"byte_end":140675,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140680,"byte_end":140694,"line_start":160,"line_end":160,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140699,"byte_end":140710,"line_start":161,"line_end":161,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140715,"byte_end":140742,"line_start":162,"line_end":162,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140747,"byte_end":140780,"line_start":163,"line_end":163,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f64; 4];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140785,"byte_end":140816,"line_start":164,"line_end":164,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140821,"byte_end":140824,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140829,"byte_end":140928,"line_start":166,"line_end":166,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140933,"byte_end":140936,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140941,"byte_end":140959,"line_start":168,"line_end":168,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f64_slice(&mut buffer);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":140964,"byte_end":141014,"line_start":169,"line_end":169,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":141019,"byte_end":141022,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":141027,"byte_end":141068,"line_start":171,"line_end":171,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":141073,"byte_end":141080,"line_start":172,"line_end":172,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":668},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143239,"byte_end":143255,"line_start":225,"line_end":225,"column_start":11,"column_end":27},"name":"HalfBitsSliceExt","qualname":"::slice::HalfBitsSliceExt","value":"HalfBitsSliceExt: private::SealedHalfBitsSlice","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":671}],"decl_id":null,"docs":" Extensions to `[u16]` slices to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[u16]` slices to support reinterpret operations.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143083,"byte_end":143150,"line_start":222,"line_end":222,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143151,"byte_end":143154,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143155,"byte_end":143228,"line_start":224,"line_end":224,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144201,"byte_end":144217,"line_start":246,"line_end":246,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast","value":"pub fn reinterpret_cast<H>(&Self) -> &[H] where H: crate::private::SealedHalf","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":" Reinterprets a slice of [`u16`] bits as a slice of [`f16`] or [`bf16`] numbers.","sig":null,"attributes":[{"value":"/ Reinterprets a slice of [`u16`] bits as a slice of [`f16`] or [`bf16`] numbers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143292,"byte_end":143375,"line_start":226,"line_end":226,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143380,"byte_end":143383,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`] or [`bf16`] type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143388,"byte_end":143468,"line_start":228,"line_end":228,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143473,"byte_end":143476,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143481,"byte_end":143572,"line_start":230,"line_end":230,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143577,"byte_end":143600,"line_start":231,"line_end":231,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143605,"byte_end":143608,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143613,"byte_end":143627,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143632,"byte_end":143635,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143640,"byte_end":143651,"line_start":235,"line_end":235,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143656,"byte_end":143683,"line_start":236,"line_end":236,"column_start":5,"column_end":32}},{"value":"/ let int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143688,"byte_end":143797,"line_start":237,"line_end":237,"column_start":5,"column_end":114}},{"value":"/ let float_buffer: &[f16] = int_buffer.reinterpret_cast();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143802,"byte_end":143863,"line_start":238,"line_end":238,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143868,"byte_end":143871,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143876,"byte_end":143964,"line_start":240,"line_end":240,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143969,"byte_end":143972,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143977,"byte_end":144068,"line_start":242,"line_end":242,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144073,"byte_end":144116,"line_start":243,"line_end":243,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast::<f16>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144121,"byte_end":144181,"line_start":244,"line_end":244,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144186,"byte_end":144193,"line_start":245,"line_end":245,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145701,"byte_end":145721,"line_start":280,"line_end":280,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast_mut","value":"pub fn reinterpret_cast_mut<H>(&mut Self) -> &mut [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":" Reinterprets a mutable slice of [`u16`] bits as a mutable slice of [`f16`] or [`bf16`]\n numbers.","sig":null,"attributes":[{"value":"/ Reinterprets a mutable slice of [`u16`] bits as a mutable slice of [`f16`] or [`bf16`]","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144290,"byte_end":144380,"line_start":250,"line_end":250,"column_start":5,"column_end":95}},{"value":"/ numbers.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144385,"byte_end":144397,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144402,"byte_end":144405,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`] or [`bf16`] type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144410,"byte_end":144490,"line_start":253,"line_end":253,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144495,"byte_end":144498,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144503,"byte_end":144597,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [f16]` is borrowed.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144602,"byte_end":144686,"line_start":256,"line_end":256,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144691,"byte_end":144694,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144699,"byte_end":144713,"line_start":258,"line_end":258,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144718,"byte_end":144721,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144726,"byte_end":144737,"line_start":260,"line_end":260,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144742,"byte_end":144769,"line_start":261,"line_end":261,"column_start":5,"column_end":32}},{"value":"/ let mut int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144774,"byte_end":144887,"line_start":262,"line_end":262,"column_start":5,"column_end":118}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144892,"byte_end":144895,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144900,"byte_end":144905,"line_start":264,"line_end":264,"column_start":5,"column_end":10}},{"value":"/     let float_buffer: &mut [f16] = int_buffer.reinterpret_cast_mut();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144910,"byte_end":144983,"line_start":265,"line_end":265,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144988,"byte_end":144991,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":144996,"byte_end":145088,"line_start":267,"line_end":267,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145093,"byte_end":145096,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/     // Mutating the f16 slice will mutating the original","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145101,"byte_end":145161,"line_start":269,"line_end":269,"column_start":5,"column_end":65}},{"value":"/     float_buffer[0] = f16::from_f32(0.);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145166,"byte_end":145210,"line_start":270,"line_end":270,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145215,"byte_end":145220,"line_start":271,"line_end":271,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145225,"byte_end":145228,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop float_buffer before using int_buffer again or we will get a borrow error.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145233,"byte_end":145339,"line_start":273,"line_end":273,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(int_buffer, [f16::from_f32(0.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145344,"byte_end":145460,"line_start":274,"line_end":274,"column_start":5,"column_end":121}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145465,"byte_end":145468,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145473,"byte_end":145564,"line_start":276,"line_end":276,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145569,"byte_end":145612,"line_start":277,"line_end":277,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145617,"byte_end":145681,"line_start":278,"line_end":278,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145686,"byte_end":145693,"line_start":279,"line_end":279,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":681},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145857,"byte_end":145877,"line_start":288,"line_end":288,"column_start":15,"column_end":35},"name":"SealedHalfFloatSlice","qualname":"::slice::private::SealedHalfFloatSlice","value":"SealedHalfFloatSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":684},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":145983,"byte_end":146002,"line_start":292,"line_end":292,"column_start":15,"column_end":34},"name":"SealedHalfBitsSlice","qualname":"::slice::private::SealedHalfBitsSlice","value":"SealedHalfBitsSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156340,"byte_end":156353,"line_start":577,"line_end":577,"column_start":8,"column_end":21},"name":"from_bits_mut","qualname":"::slice::from_bits_mut","value":"pub fn from_bits_mut(&mut [u16]) -> &mut [f16]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note =\n\"use `HalfBitsSliceExt::reinterpret_cast_mut` instead\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156219,"byte_end":156322,"line_start":572,"line_end":575,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156323,"byte_end":156332,"line_start":576,"line_end":576,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":710},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156560,"byte_end":156571,"line_start":587,"line_end":587,"column_start":8,"column_end":19},"name":"to_bits_mut","qualname":"::slice::to_bits_mut","value":"pub fn to_bits_mut(&mut [f16]) -> &mut [u16]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note =\n\"use `HalfFloatSliceExt::reinterpret_cast_mut` instead\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156438,"byte_end":156542,"line_start":582,"line_end":585,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156543,"byte_end":156552,"line_start":586,"line_end":586,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156773,"byte_end":156782,"line_start":597,"line_end":597,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::slice::from_bits","value":"pub fn from_bits(&[u16]) -> &[f16]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note =\n\"use `HalfBitsSliceExt::reinterpret_cast` instead\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156656,"byte_end":156755,"line_start":592,"line_end":595,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156756,"byte_end":156765,"line_start":596,"line_end":596,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156973,"byte_end":156980,"line_start":607,"line_end":607,"column_start":8,"column_end":15},"name":"to_bits","qualname":"::slice::to_bits","value":"pub fn to_bits(&[f16]) -> &[u16]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note =\n\"use `HalfFloatSliceExt::reinterpret_cast` instead\")","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156855,"byte_end":156955,"line_start":602,"line_end":605,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":156956,"byte_end":156965,"line_start":606,"line_end":606,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":722},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7956,"byte_end":7963,"line_start":196,"line_end":196,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":734}],"decl_id":null,"docs":" A collection of the most used items and traits in this crate for easy importing.","sig":null,"attributes":[{"value":"/ A collection of the most used items and traits in this crate for easy importing.","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7794,"byte_end":7878,"line_start":189,"line_end":189,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7879,"byte_end":7882,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7883,"byte_end":7897,"line_start":191,"line_end":191,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7898,"byte_end":7901,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7902,"byte_end":7913,"line_start":193,"line_end":193,"column_start":1,"column_end":12}},{"value":"/ use half::prelude::*;","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7914,"byte_end":7939,"line_start":194,"line_end":194,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7940,"byte_end":7947,"line_start":195,"line_end":195,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":745},"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8351,"byte_end":8361,"line_start":213,"line_end":213,"column_start":15,"column_end":25},"name":"SealedHalf","qualname":"::private::SealedHalf","value":"SealedHalf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10041,"byte_end":10045,"line_start":40,"line_end":40,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26970,"byte_end":26974,"line_start":582,"line_end":582,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":27124,"byte_end":27128,"line_start":590,"line_end":590,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":27278,"byte_end":27282,"line_start":598,"line_end":598,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":27518,"byte_end":27522,"line_start":608,"line_end":608,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":30501,"byte_end":30505,"line_start":697,"line_end":697,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":30673,"byte_end":30677,"line_start":704,"line_end":704,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":30811,"byte_end":30815,"line_start":710,"line_end":710,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":30948,"byte_end":30952,"line_start":716,"line_end":716,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31087,"byte_end":31091,"line_start":722,"line_end":722,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31224,"byte_end":31228,"line_start":728,"line_end":728,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31353,"byte_end":31357,"line_start":734,"line_end":734,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31485,"byte_end":31489,"line_start":740,"line_end":740,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31617,"byte_end":31621,"line_start":746,"line_end":746,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31744,"byte_end":31748,"line_start":752,"line_end":752,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31863,"byte_end":31867,"line_start":760,"line_end":760,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32033,"byte_end":32037,"line_start":768,"line_end":768,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32541,"byte_end":32545,"line_start":795,"line_end":795,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32673,"byte_end":32677,"line_start":802,"line_end":802,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32793,"byte_end":32797,"line_start":809,"line_end":809,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32963,"byte_end":32967,"line_start":817,"line_end":817,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":33471,"byte_end":33475,"line_start":844,"line_end":844,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":33603,"byte_end":33607,"line_start":851,"line_end":851,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":33723,"byte_end":33727,"line_start":858,"line_end":858,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":33893,"byte_end":33897,"line_start":866,"line_end":866,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":34401,"byte_end":34405,"line_start":893,"line_end":893,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":34533,"byte_end":34537,"line_start":900,"line_end":900,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":34653,"byte_end":34657,"line_start":907,"line_end":907,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":34823,"byte_end":34827,"line_start":915,"line_end":915,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":35331,"byte_end":35335,"line_start":942,"line_end":942,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":35463,"byte_end":35467,"line_start":949,"line_end":949,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":35583,"byte_end":35587,"line_start":956,"line_end":956,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":35753,"byte_end":35757,"line_start":964,"line_end":964,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36261,"byte_end":36265,"line_start":991,"line_end":991,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36393,"byte_end":36397,"line_start":998,"line_end":998,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36517,"byte_end":36521,"line_start":1005,"line_end":1005,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36697,"byte_end":36701,"line_start":1012,"line_end":1012,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36863,"byte_end":36867,"line_start":1019,"line_end":1019,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":37031,"byte_end":37035,"line_start":1026,"line_end":1026,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67971,"byte_end":67974,"line_start":121,"line_end":121,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":85196,"byte_end":85199,"line_start":676,"line_end":676,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":85346,"byte_end":85349,"line_start":684,"line_end":684,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":85497,"byte_end":85500,"line_start":692,"line_end":692,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":85735,"byte_end":85738,"line_start":702,"line_end":702,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":88712,"byte_end":88715,"line_start":791,"line_end":791,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":88881,"byte_end":88884,"line_start":798,"line_end":798,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89018,"byte_end":89021,"line_start":804,"line_end":804,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89154,"byte_end":89157,"line_start":810,"line_end":810,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89292,"byte_end":89295,"line_start":816,"line_end":816,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89428,"byte_end":89431,"line_start":822,"line_end":822,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89556,"byte_end":89559,"line_start":828,"line_end":828,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89687,"byte_end":89690,"line_start":834,"line_end":834,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89818,"byte_end":89821,"line_start":840,"line_end":840,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89944,"byte_end":89947,"line_start":846,"line_end":846,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":90076,"byte_end":90079,"line_start":855,"line_end":855,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":90258,"byte_end":90261,"line_start":864,"line_end":864,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":90752,"byte_end":90755,"line_start":891,"line_end":891,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":90882,"byte_end":90885,"line_start":898,"line_end":898,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91000,"byte_end":91003,"line_start":905,"line_end":905,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91182,"byte_end":91185,"line_start":914,"line_end":914,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91676,"byte_end":91679,"line_start":941,"line_end":941,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91806,"byte_end":91809,"line_start":948,"line_end":948,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91924,"byte_end":91927,"line_start":955,"line_end":955,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":92106,"byte_end":92109,"line_start":964,"line_end":964,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":92600,"byte_end":92603,"line_start":991,"line_end":991,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":92730,"byte_end":92733,"line_start":998,"line_end":998,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":92848,"byte_end":92851,"line_start":1005,"line_end":1005,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93030,"byte_end":93033,"line_start":1014,"line_end":1014,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93524,"byte_end":93527,"line_start":1041,"line_end":1041,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93654,"byte_end":93657,"line_start":1048,"line_end":1048,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93772,"byte_end":93775,"line_start":1055,"line_end":1055,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93954,"byte_end":93957,"line_start":1064,"line_end":1064,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":94448,"byte_end":94451,"line_start":1091,"line_end":1091,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":94578,"byte_end":94581,"line_start":1098,"line_end":1098,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":94700,"byte_end":94703,"line_start":1105,"line_end":1105,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":94877,"byte_end":94880,"line_start":1112,"line_end":1112,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":95040,"byte_end":95043,"line_start":1119,"line_end":1119,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":95205,"byte_end":95208,"line_start":1126,"line_end":1126,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8390,"byte_end":8393,"line_start":215,"line_end":215,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8421,"byte_end":8425,"line_start":216,"line_end":216,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":7590,"byte_end":7595,"line_start":178,"line_end":178,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":647}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":10041,"byte_end":10045,"line_start":40,"line_end":40,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":26970,"byte_end":26974,"line_start":582,"line_end":582,"column_start":19,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":27124,"byte_end":27128,"line_start":590,"line_end":590,"column_start":19,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":27278,"byte_end":27282,"line_start":598,"line_end":598,"column_start":20,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":27518,"byte_end":27522,"line_start":608,"line_end":608,"column_start":21,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":2722}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":30501,"byte_end":30505,"line_start":697,"line_end":697,"column_start":18,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":12188}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":30673,"byte_end":30677,"line_start":704,"line_end":704,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":30811,"byte_end":30815,"line_start":710,"line_end":710,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":30948,"byte_end":30952,"line_start":716,"line_end":716,"column_start":19,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":9614}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31087,"byte_end":31091,"line_start":722,"line_end":722,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":9616}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31224,"byte_end":31228,"line_start":728,"line_end":728,"column_start":17,"column_end":21},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":9606}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31353,"byte_end":31357,"line_start":734,"line_end":734,"column_start":16,"column_end":20},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31485,"byte_end":31489,"line_start":740,"line_end":740,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":9608}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31617,"byte_end":31621,"line_start":746,"line_end":746,"column_start":19,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31744,"byte_end":31748,"line_start":752,"line_end":752,"column_start":14,"column_end":18},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3118}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":31863,"byte_end":31867,"line_start":760,"line_end":760,"column_start":14,"column_end":18},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32033,"byte_end":32037,"line_start":768,"line_end":768,"column_start":21,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32541,"byte_end":32545,"line_start":795,"line_end":795,"column_start":20,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3122}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32673,"byte_end":32677,"line_start":802,"line_end":802,"column_start":27,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3122}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32793,"byte_end":32797,"line_start":809,"line_end":809,"column_start":14,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3096}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":32963,"byte_end":32967,"line_start":817,"line_end":817,"column_start":21,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3096}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":33471,"byte_end":33475,"line_start":844,"line_end":844,"column_start":20,"column_end":24},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3126}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":33603,"byte_end":33607,"line_start":851,"line_end":851,"column_start":27,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3126}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":33723,"byte_end":33727,"line_start":858,"line_end":858,"column_start":14,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3101}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":33893,"byte_end":33897,"line_start":866,"line_end":866,"column_start":21,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3101}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":34401,"byte_end":34405,"line_start":893,"line_end":893,"column_start":20,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3130}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":34533,"byte_end":34537,"line_start":900,"line_end":900,"column_start":27,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3130}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":34653,"byte_end":34657,"line_start":907,"line_end":907,"column_start":14,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3106}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":34823,"byte_end":34827,"line_start":915,"line_end":915,"column_start":21,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3106}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":35331,"byte_end":35335,"line_start":942,"line_end":942,"column_start":20,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3134}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":35463,"byte_end":35467,"line_start":949,"line_end":949,"column_start":27,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3134}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":35583,"byte_end":35587,"line_start":956,"line_end":956,"column_start":14,"column_end":18},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3112}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":35753,"byte_end":35757,"line_start":964,"line_end":964,"column_start":21,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3112}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36261,"byte_end":36265,"line_start":991,"line_end":991,"column_start":20,"column_end":24},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3138}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36393,"byte_end":36397,"line_start":998,"line_end":998,"column_start":27,"column_end":31},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":3138}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36517,"byte_end":36521,"line_start":1005,"line_end":1005,"column_start":18,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":7678}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36697,"byte_end":36701,"line_start":1012,"line_end":1012,"column_start":32,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":7678}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":36863,"byte_end":36867,"line_start":1019,"line_end":1019,"column_start":14,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":7674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/bfloat.rs","byte_start":37031,"byte_end":37035,"line_start":1026,"line_end":1026,"column_start":28,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":7674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":67971,"byte_end":67974,"line_start":121,"line_end":121,"column_start":6,"column_end":9},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":85196,"byte_end":85199,"line_start":676,"line_end":676,"column_start":19,"column_end":22},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":85346,"byte_end":85349,"line_start":684,"line_end":684,"column_start":19,"column_end":22},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":85497,"byte_end":85500,"line_start":692,"line_end":692,"column_start":20,"column_end":23},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":85735,"byte_end":85738,"line_start":702,"line_end":702,"column_start":21,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":2722}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":88712,"byte_end":88715,"line_start":791,"line_end":791,"column_start":18,"column_end":21},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":12188}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":88881,"byte_end":88884,"line_start":798,"line_end":798,"column_start":16,"column_end":19},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89018,"byte_end":89021,"line_start":804,"line_end":804,"column_start":18,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89154,"byte_end":89157,"line_start":810,"line_end":810,"column_start":19,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":9614}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89292,"byte_end":89295,"line_start":816,"line_end":816,"column_start":19,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":9616}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89428,"byte_end":89431,"line_start":822,"line_end":822,"column_start":17,"column_end":20},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":9606}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89556,"byte_end":89559,"line_start":828,"line_end":828,"column_start":16,"column_end":19},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89687,"byte_end":89690,"line_start":834,"line_end":834,"column_start":19,"column_end":22},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":9608}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89818,"byte_end":89821,"line_start":840,"line_end":840,"column_start":19,"column_end":22},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":89944,"byte_end":89947,"line_start":846,"line_end":846,"column_start":14,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3118}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":90076,"byte_end":90079,"line_start":855,"line_end":855,"column_start":14,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":90258,"byte_end":90261,"line_start":864,"line_end":864,"column_start":20,"column_end":23},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":90752,"byte_end":90755,"line_start":891,"line_end":891,"column_start":20,"column_end":23},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3122}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":90882,"byte_end":90885,"line_start":898,"line_end":898,"column_start":26,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3122}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91000,"byte_end":91003,"line_start":905,"line_end":905,"column_start":14,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3096}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91182,"byte_end":91185,"line_start":914,"line_end":914,"column_start":20,"column_end":23},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3096}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91676,"byte_end":91679,"line_start":941,"line_end":941,"column_start":20,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3126}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91806,"byte_end":91809,"line_start":948,"line_end":948,"column_start":26,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3126}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":91924,"byte_end":91927,"line_start":955,"line_end":955,"column_start":14,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3101}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":92106,"byte_end":92109,"line_start":964,"line_end":964,"column_start":20,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3101}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":92600,"byte_end":92603,"line_start":991,"line_end":991,"column_start":20,"column_end":23},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3130}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":92730,"byte_end":92733,"line_start":998,"line_end":998,"column_start":26,"column_end":29},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3130}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":92848,"byte_end":92851,"line_start":1005,"line_end":1005,"column_start":14,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3106}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93030,"byte_end":93033,"line_start":1014,"line_end":1014,"column_start":20,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3106}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93524,"byte_end":93527,"line_start":1041,"line_end":1041,"column_start":20,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3134}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93654,"byte_end":93657,"line_start":1048,"line_end":1048,"column_start":26,"column_end":29},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3134}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93772,"byte_end":93775,"line_start":1055,"line_end":1055,"column_start":14,"column_end":17},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3112}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":93954,"byte_end":93957,"line_start":1064,"line_end":1064,"column_start":20,"column_end":23},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3112}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":94448,"byte_end":94451,"line_start":1091,"line_end":1091,"column_start":20,"column_end":23},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3138}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":94578,"byte_end":94581,"line_start":1098,"line_end":1098,"column_start":26,"column_end":29},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":3138}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":94700,"byte_end":94703,"line_start":1105,"line_end":1105,"column_start":18,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":7678}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":94877,"byte_end":94880,"line_start":1112,"line_end":1112,"column_start":31,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":7678}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":95040,"byte_end":95043,"line_start":1119,"line_end":1119,"column_start":14,"column_end":17},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":7674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/binary16.rs","byte_start":95205,"byte_end":95208,"line_start":1126,"line_end":1126,"column_start":27,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":7674}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":135082,"byte_end":135102,"line_start":18,"line_end":18,"column_start":39,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":681},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/slice.rs","byte_start":143266,"byte_end":143285,"line_start":225,"line_end":225,"column_start":38,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":684},"to":{"krate":0,"index":668}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8390,"byte_end":8393,"line_start":215,"line_end":215,"column_start":25,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":768},"to":{"krate":0,"index":745}},{"span":{"file_name":"/home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.8.2/src/lib.rs","byte_start":8421,"byte_end":8425,"line_start":216,"line_end":216,"column_start":25,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":748},"to":{"krate":0,"index":745}}]}