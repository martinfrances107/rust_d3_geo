<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1286" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1269.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1269.00"> </text><svg id="frames" x="10" width="1180" total_samples="650"><g><title>perf-exec (5 samples, 0.77%)</title><rect x="0.0000%" y="1221" width="0.7692%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1231.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1205" width="0.7692%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1215.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1189" width="0.7692%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1173" width="0.7692%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1157" width="0.7692%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1141" width="0.7692%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1125" width="0.7692%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1109" width="0.7692%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1093" width="0.7692%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1077" width="0.7692%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1061" width="0.7692%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1045" width="0.7692%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1029" width="0.7692%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="1013" width="0.7692%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="997" width="0.7692%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="0.0000%" y="981" width="0.7692%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="5"/><text x="0.2500%" y="991.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1205" width="0.1538%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1215.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1189" width="0.1538%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1199.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1173" width="0.1538%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1183.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1157" width="0.1538%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1167.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1141" width="0.1538%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1151.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="0.7692%" y="1125" width="0.1538%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1135.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1109" width="0.1538%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1119.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1093" width="0.1538%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1103.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1077" width="0.1538%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1087.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="0.7692%" y="1061" width="0.1538%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="1045" width="0.1538%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="1029" width="0.1538%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="1013" width="0.1538%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="997" width="0.1538%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="1.0192%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="981" width="0.1538%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="1.0192%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="965" width="0.1538%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="1.0192%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="949" width="0.1538%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="1.0192%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="933" width="0.1538%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="1.0192%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.7692%" y="917" width="0.1538%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="1.0192%" y="927.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="2.3077%" y="1189" width="0.1538%" height="15" fill="rgb(233,36,39)" fg:x="15" fg:w="1"/><text x="2.5577%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1189" width="0.3077%" height="15" fill="rgb(226,3,54)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1173" width="0.3077%" height="15" fill="rgb(245,192,40)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1157" width="0.3077%" height="15" fill="rgb(238,167,29)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1141" width="0.3077%" height="15" fill="rgb(232,182,51)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1125" width="0.3077%" height="15" fill="rgb(231,60,39)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1109" width="0.3077%" height="15" fill="rgb(208,69,12)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1093" width="0.3077%" height="15" fill="rgb(235,93,37)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1077" width="0.3077%" height="15" fill="rgb(213,116,39)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1061" width="0.3077%" height="15" fill="rgb(222,207,29)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1045" width="0.3077%" height="15" fill="rgb(206,96,30)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1029" width="0.3077%" height="15" fill="rgb(218,138,4)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="1013" width="0.3077%" height="15" fill="rgb(250,191,14)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="2.4615%" y="997" width="0.3077%" height="15" fill="rgb(239,60,40)" fg:x="16" fg:w="2"/><text x="2.7115%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.6154%" y="981" width="0.1538%" height="15" fill="rgb(206,27,48)" fg:x="17" fg:w="1"/><text x="2.8654%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="2.7692%" y="1189" width="0.1538%" height="15" fill="rgb(225,35,8)" fg:x="18" fg:w="1"/><text x="3.0192%" y="1199.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (2 samples, 0.31%)</title><rect x="2.9231%" y="1189" width="0.3077%" height="15" fill="rgb(250,213,24)" fg:x="19" fg:w="2"/><text x="3.1731%" y="1199.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="3.2308%" y="1189" width="0.1538%" height="15" fill="rgb(247,123,22)" fg:x="21" fg:w="1"/><text x="3.4808%" y="1199.50"></text></g><g><title>read (2 samples, 0.31%)</title><rect x="3.3846%" y="1189" width="0.3077%" height="15" fill="rgb(231,138,38)" fg:x="22" fg:w="2"/><text x="3.6346%" y="1199.50"></text></g><g><title>sincosf64 (1 samples, 0.15%)</title><rect x="3.6923%" y="1189" width="0.1538%" height="15" fill="rgb(231,145,46)" fg:x="24" fg:w="1"/><text x="3.9423%" y="1199.50"></text></g><g><title>[unknown] (20 samples, 3.08%)</title><rect x="0.9231%" y="1205" width="3.0769%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="20"/><text x="1.1731%" y="1215.50">[un..</text></g><g><title>std::io::Write::write_all (1 samples, 0.15%)</title><rect x="3.8462%" y="1189" width="0.1538%" height="15" fill="rgb(217,147,25)" fg:x="25" fg:w="1"/><text x="4.0962%" y="1199.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.15%)</title><rect x="4.0000%" y="1077" width="0.1538%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="1"/><text x="4.2500%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.15%)</title><rect x="4.0000%" y="1061" width="0.1538%" height="15" fill="rgb(209,12,38)" fg:x="26" fg:w="1"/><text x="4.2500%" y="1071.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.15%)</title><rect x="4.0000%" y="1045" width="0.1538%" height="15" fill="rgb(227,1,9)" fg:x="26" fg:w="1"/><text x="4.2500%" y="1055.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.15%)</title><rect x="4.0000%" y="1029" width="0.1538%" height="15" fill="rgb(248,47,43)" fg:x="26" fg:w="1"/><text x="4.2500%" y="1039.50"></text></g><g><title>core::fmt::write (1 samples, 0.15%)</title><rect x="4.0000%" y="1013" width="0.1538%" height="15" fill="rgb(221,10,30)" fg:x="26" fg:w="1"/><text x="4.2500%" y="1023.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="4.0000%" y="997" width="0.1538%" height="15" fill="rgb(210,229,1)" fg:x="26" fg:w="1"/><text x="4.2500%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="4.0000%" y="981" width="0.1538%" height="15" fill="rgb(222,148,37)" fg:x="26" fg:w="1"/><text x="4.2500%" y="991.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="4.0000%" y="965" width="0.1538%" height="15" fill="rgb(234,67,33)" fg:x="26" fg:w="1"/><text x="4.2500%" y="975.50"></text></g><g><title>realloc (1 samples, 0.15%)</title><rect x="4.0000%" y="949" width="0.1538%" height="15" fill="rgb(247,98,35)" fg:x="26" fg:w="1"/><text x="4.2500%" y="959.50"></text></g><g><title>&lt;d3_geo_rs::path::string::String&lt;T&gt; as d3_geo_rs::path::Result&gt;::result (1 samples, 0.15%)</title><rect x="4.1538%" y="1061" width="0.1538%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="1"/><text x="4.4038%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (1 samples, 0.15%)</title><rect x="4.1538%" y="1045" width="0.1538%" height="15" fill="rgb(213,79,30)" fg:x="27" fg:w="1"/><text x="4.4038%" y="1055.50"></text></g><g><title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (1 samples, 0.15%)</title><rect x="4.1538%" y="1029" width="0.1538%" height="15" fill="rgb(246,177,23)" fg:x="27" fg:w="1"/><text x="4.4038%" y="1039.50"></text></g><g><title>alloc::str::join_generic_copy (1 samples, 0.15%)</title><rect x="4.1538%" y="1013" width="0.1538%" height="15" fill="rgb(230,62,27)" fg:x="27" fg:w="1"/><text x="4.4038%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="4.1538%" y="997" width="0.1538%" height="15" fill="rgb(216,154,8)" fg:x="27" fg:w="1"/><text x="4.4038%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="4.1538%" y="981" width="0.1538%" height="15" fill="rgb(244,35,45)" fg:x="27" fg:w="1"/><text x="4.4038%" y="991.50"></text></g><g><title>d3_geo_rs::stream::geometry::&lt;impl d3_geo_rs::stream::Streamable for geo_types::geometry::Geometry&lt;T&gt;&gt;::to_stream (1 samples, 0.15%)</title><rect x="4.3077%" y="1061" width="0.1538%" height="15" fill="rgb(251,115,12)" fg:x="28" fg:w="1"/><text x="4.5577%" y="1071.50"></text></g><g><title>d3_geo_rs::stream::multi_line_string::&lt;impl d3_geo_rs::stream::Streamable for geo_types::geometry::multi_line_string::MultiLineString&lt;T&gt;&gt;::to_stream (1 samples, 0.15%)</title><rect x="4.3077%" y="1045" width="0.1538%" height="15" fill="rgb(240,54,50)" fg:x="28" fg:w="1"/><text x="4.5577%" y="1055.50"></text></g><g><title>d3_geo_rs::stream::stream_line (1 samples, 0.15%)</title><rect x="4.3077%" y="1029" width="0.1538%" height="15" fill="rgb(233,84,52)" fg:x="28" fg:w="1"/><text x="4.5577%" y="1039.50"></text></g><g><title>&lt;d3_geo_rs::projection::stream_transform_radians::StreamTransformRadians&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="4.3077%" y="1013" width="0.1538%" height="15" fill="rgb(207,117,47)" fg:x="28" fg:w="1"/><text x="4.5577%" y="1023.50"></text></g><g><title>&lt;d3_geo_rs::rot::rotator_radians::RotatorRadians&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="4.3077%" y="997" width="0.1538%" height="15" fill="rgb(249,43,39)" fg:x="28" fg:w="1"/><text x="4.5577%" y="1007.50"></text></g><g><title>&lt;d3_geo_rs::clip::clipper::Clipper&lt;I,LC,LU,PV,RC,d3_geo_rs::clip::clipper::Connected&lt;LB,LC,T&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="4.3077%" y="981" width="0.1538%" height="15" fill="rgb(209,38,44)" fg:x="28" fg:w="1"/><text x="4.5577%" y="991.50"></text></g><g><title>d3_geo_rs::clip::clipper::Clipper&lt;I,LC,LU,PV,RC,d3_geo_rs::clip::clipper::Connected&lt;LB,LC,T&gt;,T&gt;::point_line (1 samples, 0.15%)</title><rect x="4.3077%" y="965" width="0.1538%" height="15" fill="rgb(236,212,23)" fg:x="28" fg:w="1"/><text x="4.5577%" y="975.50"></text></g><g><title>&lt;d3_geo_rs::clip::circle::line::Line&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="4.3077%" y="949" width="0.1538%" height="15" fill="rgb(242,79,21)" fg:x="28" fg:w="1"/><text x="4.5577%" y="959.50"></text></g><g><title>&lt;d3_geo_rs::identity::Identity&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="4.3077%" y="933" width="0.1538%" height="15" fill="rgb(211,96,35)" fg:x="28" fg:w="1"/><text x="4.5577%" y="943.50"></text></g><g><title>&lt;d3_geo_rs::path::string::String&lt;T&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="4.3077%" y="917" width="0.1538%" height="15" fill="rgb(253,215,40)" fg:x="28" fg:w="1"/><text x="4.5577%" y="927.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.15%)</title><rect x="4.3077%" y="901" width="0.1538%" height="15" fill="rgb(211,81,21)" fg:x="28" fg:w="1"/><text x="4.5577%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.15%)</title><rect x="4.3077%" y="885" width="0.1538%" height="15" fill="rgb(208,190,38)" fg:x="28" fg:w="1"/><text x="4.5577%" y="895.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.15%)</title><rect x="4.3077%" y="869" width="0.1538%" height="15" fill="rgb(235,213,38)" fg:x="28" fg:w="1"/><text x="4.5577%" y="879.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.15%)</title><rect x="4.3077%" y="853" width="0.1538%" height="15" fill="rgb(237,122,38)" fg:x="28" fg:w="1"/><text x="4.5577%" y="863.50"></text></g><g><title>core::fmt::write (1 samples, 0.15%)</title><rect x="4.3077%" y="837" width="0.1538%" height="15" fill="rgb(244,218,35)" fg:x="28" fg:w="1"/><text x="4.5577%" y="847.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.15%)</title><rect x="4.3077%" y="821" width="0.1538%" height="15" fill="rgb(240,68,47)" fg:x="28" fg:w="1"/><text x="4.5577%" y="831.50"></text></g><g><title>d3_geo_rs::clip::rejoin::rejoin (2 samples, 0.31%)</title><rect x="4.4615%" y="997" width="0.3077%" height="15" fill="rgb(210,16,53)" fg:x="29" fg:w="2"/><text x="4.7115%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (2 samples, 0.31%)</title><rect x="4.4615%" y="981" width="0.3077%" height="15" fill="rgb(235,124,12)" fg:x="29" fg:w="2"/><text x="4.7115%" y="991.50"></text></g><g><title>d3_geo_rs::clip::rejoin::rejoin::{{closure}} (2 samples, 0.31%)</title><rect x="4.4615%" y="965" width="0.3077%" height="15" fill="rgb(224,169,11)" fg:x="29" fg:w="2"/><text x="4.7115%" y="975.50"></text></g><g><title>&lt;d3_geo_rs::identity::Identity&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;&gt; as d3_geo_rs::stream::Stream&gt;::point (2 samples, 0.31%)</title><rect x="4.4615%" y="949" width="0.3077%" height="15" fill="rgb(250,166,2)" fg:x="29" fg:w="2"/><text x="4.7115%" y="959.50"></text></g><g><title>&lt;d3_geo_rs::path::string::String&lt;T&gt; as d3_geo_rs::stream::Stream&gt;::point (2 samples, 0.31%)</title><rect x="4.4615%" y="933" width="0.3077%" height="15" fill="rgb(242,216,29)" fg:x="29" fg:w="2"/><text x="4.7115%" y="943.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.31%)</title><rect x="4.4615%" y="917" width="0.3077%" height="15" fill="rgb(230,116,27)" fg:x="29" fg:w="2"/><text x="4.7115%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (2 samples, 0.31%)</title><rect x="4.4615%" y="901" width="0.3077%" height="15" fill="rgb(228,99,48)" fg:x="29" fg:w="2"/><text x="4.7115%" y="911.50"></text></g><g><title>alloc::fmt::format::{{closure}} (2 samples, 0.31%)</title><rect x="4.4615%" y="885" width="0.3077%" height="15" fill="rgb(253,11,6)" fg:x="29" fg:w="2"/><text x="4.7115%" y="895.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.15%)</title><rect x="4.6154%" y="869" width="0.1538%" height="15" fill="rgb(247,143,39)" fg:x="30" fg:w="1"/><text x="4.8654%" y="879.50"></text></g><g><title>core::fmt::write (1 samples, 0.15%)</title><rect x="4.6154%" y="853" width="0.1538%" height="15" fill="rgb(236,97,10)" fg:x="30" fg:w="1"/><text x="4.8654%" y="863.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.15%)</title><rect x="4.6154%" y="837" width="0.1538%" height="15" fill="rgb(233,208,19)" fg:x="30" fg:w="1"/><text x="4.8654%" y="847.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::atan2 (4 samples, 0.62%)</title><rect x="4.7692%" y="981" width="0.6154%" height="15" fill="rgb(216,164,2)" fg:x="31" fg:w="4"/><text x="5.0192%" y="991.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::atan2 (4 samples, 0.62%)</title><rect x="4.7692%" y="965" width="0.6154%" height="15" fill="rgb(220,129,5)" fg:x="31" fg:w="4"/><text x="5.0192%" y="975.50"></text></g><g><title>atan2f32x (4 samples, 0.62%)</title><rect x="4.7692%" y="949" width="0.6154%" height="15" fill="rgb(242,17,10)" fg:x="31" fg:w="4"/><text x="5.0192%" y="959.50"></text></g><g><title>[libm.so.6] (2 samples, 0.31%)</title><rect x="5.0769%" y="933" width="0.3077%" height="15" fill="rgb(242,107,0)" fg:x="33" fg:w="2"/><text x="5.3269%" y="943.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sin (2 samples, 0.31%)</title><rect x="5.3846%" y="981" width="0.3077%" height="15" fill="rgb(251,28,31)" fg:x="35" fg:w="2"/><text x="5.6346%" y="991.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sin (2 samples, 0.31%)</title><rect x="5.3846%" y="965" width="0.3077%" height="15" fill="rgb(233,223,10)" fg:x="35" fg:w="2"/><text x="5.6346%" y="975.50"></text></g><g><title>sincosf64 (2 samples, 0.31%)</title><rect x="5.3846%" y="949" width="0.3077%" height="15" fill="rgb(215,21,27)" fg:x="35" fg:w="2"/><text x="5.6346%" y="959.50"></text></g><g><title>&lt;d3_geo_rs::projection::stream_transform_radians::StreamTransformRadians&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;&gt; as d3_geo_rs::stream::Stream&gt;::polygon_end (9 samples, 1.38%)</title><rect x="4.4615%" y="1045" width="1.3846%" height="15" fill="rgb(232,23,21)" fg:x="29" fg:w="9"/><text x="4.7115%" y="1055.50"></text></g><g><title>&lt;d3_geo_rs::rot::rotator_radians::RotatorRadians&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::polygon_end (9 samples, 1.38%)</title><rect x="4.4615%" y="1029" width="1.3846%" height="15" fill="rgb(244,5,23)" fg:x="29" fg:w="9"/><text x="4.7115%" y="1039.50"></text></g><g><title>&lt;d3_geo_rs::clip::clipper::Clipper&lt;I,LC,LU,PV,RC,d3_geo_rs::clip::clipper::Connected&lt;LB,LC,T&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::polygon_end (9 samples, 1.38%)</title><rect x="4.4615%" y="1013" width="1.3846%" height="15" fill="rgb(226,81,46)" fg:x="29" fg:w="9"/><text x="4.7115%" y="1023.50"></text></g><g><title>d3_geo_rs::polygon_contains::polygon_contains (7 samples, 1.08%)</title><rect x="4.7692%" y="997" width="1.0769%" height="15" fill="rgb(247,70,30)" fg:x="31" fg:w="7"/><text x="5.0192%" y="1007.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sin_cos (1 samples, 0.15%)</title><rect x="5.6923%" y="981" width="0.1538%" height="15" fill="rgb(212,68,19)" fg:x="37" fg:w="1"/><text x="5.9423%" y="991.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sin_cos (1 samples, 0.15%)</title><rect x="5.6923%" y="965" width="0.1538%" height="15" fill="rgb(240,187,13)" fg:x="37" fg:w="1"/><text x="5.9423%" y="975.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sin (1 samples, 0.15%)</title><rect x="5.6923%" y="949" width="0.1538%" height="15" fill="rgb(223,113,26)" fg:x="37" fg:w="1"/><text x="5.9423%" y="959.50"></text></g><g><title>sincosf64 (1 samples, 0.15%)</title><rect x="5.6923%" y="933" width="0.1538%" height="15" fill="rgb(206,192,2)" fg:x="37" fg:w="1"/><text x="5.9423%" y="943.50"></text></g><g><title>d3_geo_rs::clip::circle::line::Line&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt;::code (1 samples, 0.15%)</title><rect x="5.8462%" y="1013" width="0.1538%" height="15" fill="rgb(241,108,4)" fg:x="38" fg:w="1"/><text x="6.0962%" y="1023.50"></text></g><g><title>&lt;d3_geo_rs::clip::circle::line::Line&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::point (2 samples, 0.31%)</title><rect x="5.8462%" y="1029" width="0.3077%" height="15" fill="rgb(247,173,49)" fg:x="38" fg:w="2"/><text x="6.0962%" y="1039.50"></text></g><g><title>d3_geo_rs::clip::circle::line::Line&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt;::visible (1 samples, 0.15%)</title><rect x="6.0000%" y="1013" width="0.1538%" height="15" fill="rgb(224,114,35)" fg:x="39" fg:w="1"/><text x="6.2500%" y="1023.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (1 samples, 0.15%)</title><rect x="6.0000%" y="997" width="0.1538%" height="15" fill="rgb(245,159,27)" fg:x="39" fg:w="1"/><text x="6.2500%" y="1007.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (1 samples, 0.15%)</title><rect x="6.0000%" y="981" width="0.1538%" height="15" fill="rgb(245,172,44)" fg:x="39" fg:w="1"/><text x="6.2500%" y="991.50"></text></g><g><title>[libm.so.6] (1 samples, 0.15%)</title><rect x="6.0000%" y="965" width="0.1538%" height="15" fill="rgb(236,23,11)" fg:x="39" fg:w="1"/><text x="6.2500%" y="975.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (3 samples, 0.46%)</title><rect x="6.9231%" y="837" width="0.4615%" height="15" fill="rgb(205,117,38)" fg:x="45" fg:w="3"/><text x="7.1731%" y="847.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.46%)</title><rect x="6.9231%" y="821" width="0.4615%" height="15" fill="rgb(237,72,25)" fg:x="45" fg:w="3"/><text x="7.1731%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.31%)</title><rect x="7.0769%" y="805" width="0.3077%" height="15" fill="rgb(244,70,9)" fg:x="46" fg:w="2"/><text x="7.3269%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.31%)</title><rect x="7.0769%" y="789" width="0.3077%" height="15" fill="rgb(217,125,39)" fg:x="46" fg:w="2"/><text x="7.3269%" y="799.50"></text></g><g><title>realloc (1 samples, 0.15%)</title><rect x="7.2308%" y="773" width="0.1538%" height="15" fill="rgb(235,36,10)" fg:x="47" fg:w="1"/><text x="7.4808%" y="783.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="7.2308%" y="757" width="0.1538%" height="15" fill="rgb(251,123,47)" fg:x="47" fg:w="1"/><text x="7.4808%" y="767.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="7.2308%" y="741" width="0.1538%" height="15" fill="rgb(221,13,13)" fg:x="47" fg:w="1"/><text x="7.4808%" y="751.50"></text></g><g><title>&lt;d3_geo_rs::identity::Identity&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;&gt; as d3_geo_rs::stream::Stream&gt;::point (9 samples, 1.38%)</title><rect x="6.1538%" y="965" width="1.3846%" height="15" fill="rgb(238,131,9)" fg:x="40" fg:w="9"/><text x="6.4038%" y="975.50"></text></g><g><title>&lt;d3_geo_rs::path::string::String&lt;T&gt; as d3_geo_rs::stream::Stream&gt;::point (9 samples, 1.38%)</title><rect x="6.1538%" y="949" width="1.3846%" height="15" fill="rgb(211,50,8)" fg:x="40" fg:w="9"/><text x="6.4038%" y="959.50"></text></g><g><title>alloc::fmt::format (9 samples, 1.38%)</title><rect x="6.1538%" y="933" width="1.3846%" height="15" fill="rgb(245,182,24)" fg:x="40" fg:w="9"/><text x="6.4038%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (9 samples, 1.38%)</title><rect x="6.1538%" y="917" width="1.3846%" height="15" fill="rgb(242,14,37)" fg:x="40" fg:w="9"/><text x="6.4038%" y="927.50"></text></g><g><title>alloc::fmt::format::{{closure}} (9 samples, 1.38%)</title><rect x="6.1538%" y="901" width="1.3846%" height="15" fill="rgb(246,228,12)" fg:x="40" fg:w="9"/><text x="6.4038%" y="911.50"></text></g><g><title>alloc::fmt::format::format_inner (9 samples, 1.38%)</title><rect x="6.1538%" y="885" width="1.3846%" height="15" fill="rgb(213,55,15)" fg:x="40" fg:w="9"/><text x="6.4038%" y="895.50"></text></g><g><title>core::fmt::write (9 samples, 1.38%)</title><rect x="6.1538%" y="869" width="1.3846%" height="15" fill="rgb(209,9,3)" fg:x="40" fg:w="9"/><text x="6.4038%" y="879.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (9 samples, 1.38%)</title><rect x="6.1538%" y="853" width="1.3846%" height="15" fill="rgb(230,59,30)" fg:x="40" fg:w="9"/><text x="6.4038%" y="863.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (1 samples, 0.15%)</title><rect x="7.3846%" y="837" width="0.1538%" height="15" fill="rgb(209,121,21)" fg:x="48" fg:w="1"/><text x="7.6346%" y="847.50"></text></g><g><title>d3_geo_rs::projection::resampler::resample::Resample&lt;PR,d3_geo_rs::projection::resampler::resample::Connected&lt;SC,T&gt;,T&gt;::line_point (1 samples, 0.15%)</title><rect x="7.5385%" y="949" width="0.1538%" height="15" fill="rgb(220,109,13)" fg:x="49" fg:w="1"/><text x="7.7885%" y="959.50"></text></g><g><title>&lt;d3_geo_rs::projection::resampler::resample::Resample&lt;PR,d3_geo_rs::projection::resampler::resample::Connected&lt;SC,T&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::point (2 samples, 0.31%)</title><rect x="7.5385%" y="965" width="0.3077%" height="15" fill="rgb(232,18,1)" fg:x="49" fg:w="2"/><text x="7.7885%" y="975.50"></text></g><g><title>d3_geo_rs::projection::resampler::resample::Resample&lt;PR,d3_geo_rs::projection::resampler::resample::Connected&lt;SC,T&gt;,T&gt;::ring_point (1 samples, 0.15%)</title><rect x="7.6923%" y="949" width="0.1538%" height="15" fill="rgb(215,41,42)" fg:x="50" fg:w="1"/><text x="7.9423%" y="959.50"></text></g><g><title>d3_geo_rs::projection::resampler::resample::Resample&lt;PR,d3_geo_rs::projection::resampler::resample::Connected&lt;SC,T&gt;,T&gt;::line_point (1 samples, 0.15%)</title><rect x="7.6923%" y="933" width="0.1538%" height="15" fill="rgb(224,123,36)" fg:x="50" fg:w="1"/><text x="7.9423%" y="943.50"></text></g><g><title>&lt;d3_geo_rs::identity::Identity&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="7.6923%" y="917" width="0.1538%" height="15" fill="rgb(240,125,3)" fg:x="50" fg:w="1"/><text x="7.9423%" y="927.50"></text></g><g><title>&lt;d3_geo_rs::path::string::String&lt;T&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="7.6923%" y="901" width="0.1538%" height="15" fill="rgb(205,98,50)" fg:x="50" fg:w="1"/><text x="7.9423%" y="911.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.15%)</title><rect x="7.6923%" y="885" width="0.1538%" height="15" fill="rgb(205,185,37)" fg:x="50" fg:w="1"/><text x="7.9423%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.15%)</title><rect x="7.6923%" y="869" width="0.1538%" height="15" fill="rgb(238,207,15)" fg:x="50" fg:w="1"/><text x="7.9423%" y="879.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.15%)</title><rect x="7.6923%" y="853" width="0.1538%" height="15" fill="rgb(213,199,42)" fg:x="50" fg:w="1"/><text x="7.9423%" y="863.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.15%)</title><rect x="7.6923%" y="837" width="0.1538%" height="15" fill="rgb(235,201,11)" fg:x="50" fg:w="1"/><text x="7.9423%" y="847.50"></text></g><g><title>core::fmt::write (1 samples, 0.15%)</title><rect x="7.6923%" y="821" width="0.1538%" height="15" fill="rgb(207,46,11)" fg:x="50" fg:w="1"/><text x="7.9423%" y="831.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="7.6923%" y="805" width="0.1538%" height="15" fill="rgb(241,35,35)" fg:x="50" fg:w="1"/><text x="7.9423%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="7.6923%" y="789" width="0.1538%" height="15" fill="rgb(243,32,47)" fg:x="50" fg:w="1"/><text x="7.9423%" y="799.50"></text></g><g><title>&lt;d3_geo_rs::projection::stream_transform_radians::StreamTransformRadians&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;&gt; as d3_geo_rs::stream::Stream&gt;::line_end (12 samples, 1.85%)</title><rect x="6.1538%" y="1029" width="1.8462%" height="15" fill="rgb(247,202,23)" fg:x="40" fg:w="12"/><text x="6.4038%" y="1039.50">&lt;..</text></g><g><title>&lt;d3_geo_rs::rot::rotator_radians::RotatorRadians&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::line_end (12 samples, 1.85%)</title><rect x="6.1538%" y="1013" width="1.8462%" height="15" fill="rgb(219,102,11)" fg:x="40" fg:w="12"/><text x="6.4038%" y="1023.50">&lt;..</text></g><g><title>&lt;d3_geo_rs::clip::clipper::Clipper&lt;I,LC,LU,PV,RC,d3_geo_rs::clip::clipper::Connected&lt;LB,LC,T&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::line_end (12 samples, 1.85%)</title><rect x="6.1538%" y="997" width="1.8462%" height="15" fill="rgb(243,110,44)" fg:x="40" fg:w="12"/><text x="6.4038%" y="1007.50">&lt;..</text></g><g><title>d3_geo_rs::clip::clipper::Clipper&lt;I,LC,LU,PV,RC,d3_geo_rs::clip::clipper::Connected&lt;LB,LC,T&gt;,T&gt;::ring_end (12 samples, 1.85%)</title><rect x="6.1538%" y="981" width="1.8462%" height="15" fill="rgb(222,74,54)" fg:x="40" fg:w="12"/><text x="6.4038%" y="991.50">d..</text></g><g><title>d3_geo_rs::clip::clipper::Clipper&lt;I,LC,LU,PV,RC,d3_geo_rs::clip::clipper::Connected&lt;LB,LC,T&gt;,T&gt;::point_ring (1 samples, 0.15%)</title><rect x="7.8462%" y="965" width="0.1538%" height="15" fill="rgb(216,99,12)" fg:x="51" fg:w="1"/><text x="8.0962%" y="975.50"></text></g><g><title>&lt;d3_geo_rs::clip::circle::line::Line&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="7.8462%" y="949" width="0.1538%" height="15" fill="rgb(226,22,26)" fg:x="51" fg:w="1"/><text x="8.0962%" y="959.50"></text></g><g><title>d3_geo_rs::clip::circle::line::Line&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt;::visible (1 samples, 0.15%)</title><rect x="7.8462%" y="933" width="0.1538%" height="15" fill="rgb(217,163,10)" fg:x="51" fg:w="1"/><text x="8.0962%" y="943.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (1 samples, 0.15%)</title><rect x="7.8462%" y="917" width="0.1538%" height="15" fill="rgb(213,25,53)" fg:x="51" fg:w="1"/><text x="8.0962%" y="927.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (1 samples, 0.15%)</title><rect x="7.8462%" y="901" width="0.1538%" height="15" fill="rgb(252,105,26)" fg:x="51" fg:w="1"/><text x="8.0962%" y="911.50"></text></g><g><title>[libm.so.6] (1 samples, 0.15%)</title><rect x="7.8462%" y="885" width="0.1538%" height="15" fill="rgb(220,39,43)" fg:x="51" fg:w="1"/><text x="8.0962%" y="895.50"></text></g><g><title>profile_target::draw (27 samples, 4.15%)</title><rect x="4.0000%" y="1093" width="4.1538%" height="15" fill="rgb(229,68,48)" fg:x="26" fg:w="27"/><text x="4.2500%" y="1103.50">profi..</text></g><g><title>d3_geo_rs::path::Path&lt;CLIPC,CLIPU,CS,PCNC,PCNU,PR,RC,RU,T&gt;::object (26 samples, 4.00%)</title><rect x="4.1538%" y="1077" width="4.0000%" height="15" fill="rgb(252,8,32)" fg:x="27" fg:w="26"/><text x="4.4038%" y="1087.50">d3_g..</text></g><g><title>d3_geo_rs::stream::stream_polygon (24 samples, 3.69%)</title><rect x="4.4615%" y="1061" width="3.6923%" height="15" fill="rgb(223,20,43)" fg:x="29" fg:w="24"/><text x="4.7115%" y="1071.50">d3_g..</text></g><g><title>d3_geo_rs::stream::stream_line (15 samples, 2.31%)</title><rect x="5.8462%" y="1045" width="2.3077%" height="15" fill="rgb(229,81,49)" fg:x="38" fg:w="15"/><text x="6.0962%" y="1055.50">d..</text></g><g><title>&lt;d3_geo_rs::projection::stream_transform_radians::StreamTransformRadians&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="8.0000%" y="1029" width="0.1538%" height="15" fill="rgb(236,28,36)" fg:x="52" fg:w="1"/><text x="8.2500%" y="1039.50"></text></g><g><title>&lt;d3_geo_rs::rot::rotator_radians::RotatorRadians&lt;d3_geo_rs::stream::Connected&lt;SINK&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="8.0000%" y="1013" width="0.1538%" height="15" fill="rgb(249,185,26)" fg:x="52" fg:w="1"/><text x="8.2500%" y="1023.50"></text></g><g><title>&lt;d3_geo_rs::clip::clipper::Clipper&lt;I,LC,LU,PV,RC,d3_geo_rs::clip::clipper::Connected&lt;LB,LC,T&gt;,T&gt; as d3_geo_rs::stream::Stream&gt;::point (1 samples, 0.15%)</title><rect x="8.0000%" y="997" width="0.1538%" height="15" fill="rgb(249,174,33)" fg:x="52" fg:w="1"/><text x="8.2500%" y="1007.50"></text></g><g><title>d3_geo_rs::clip::clipper::Clipper&lt;I,LC,LU,PV,RC,d3_geo_rs::clip::clipper::Connected&lt;LB,LC,T&gt;,T&gt;::point_ring (1 samples, 0.15%)</title><rect x="8.0000%" y="981" width="0.1538%" height="15" fill="rgb(233,201,37)" fg:x="52" fg:w="1"/><text x="8.2500%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.15%)</title><rect x="8.0000%" y="965" width="0.1538%" height="15" fill="rgb(221,78,26)" fg:x="52" fg:w="1"/><text x="8.2500%" y="975.50"></text></g><g><title>core::ptr::write (1 samples, 0.15%)</title><rect x="8.0000%" y="949" width="0.1538%" height="15" fill="rgb(250,127,30)" fg:x="52" fg:w="1"/><text x="8.2500%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="8.1538%" y="997" width="0.1538%" height="15" fill="rgb(230,49,44)" fg:x="53" fg:w="1"/><text x="8.4038%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;f64&gt;]&gt; (1 samples, 0.15%)</title><rect x="8.1538%" y="981" width="0.1538%" height="15" fill="rgb(229,67,23)" fg:x="53" fg:w="1"/><text x="8.4038%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (1 samples, 0.15%)</title><rect x="8.1538%" y="965" width="0.1538%" height="15" fill="rgb(249,83,47)" fg:x="53" fg:w="1"/><text x="8.4038%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (1 samples, 0.15%)</title><rect x="8.1538%" y="949" width="0.1538%" height="15" fill="rgb(215,43,3)" fg:x="53" fg:w="1"/><text x="8.4038%" y="959.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="8.1538%" y="933" width="0.1538%" height="15" fill="rgb(238,154,13)" fg:x="53" fg:w="1"/><text x="8.4038%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.15%)</title><rect x="8.1538%" y="917" width="0.1538%" height="15" fill="rgb(219,56,2)" fg:x="53" fg:w="1"/><text x="8.4038%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;topojson::topology::Topology&gt; (2 samples, 0.31%)</title><rect x="8.1538%" y="1077" width="0.3077%" height="15" fill="rgb(233,0,4)" fg:x="53" fg:w="2"/><text x="8.4038%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt;&gt; (2 samples, 0.31%)</title><rect x="8.1538%" y="1061" width="0.3077%" height="15" fill="rgb(235,30,7)" fg:x="53" fg:w="2"/><text x="8.4038%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.31%)</title><rect x="8.1538%" y="1045" width="0.3077%" height="15" fill="rgb(250,79,13)" fg:x="53" fg:w="2"/><text x="8.4038%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;]&gt; (2 samples, 0.31%)</title><rect x="8.1538%" y="1029" width="0.3077%" height="15" fill="rgb(211,146,34)" fg:x="53" fg:w="2"/><text x="8.4038%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt; (2 samples, 0.31%)</title><rect x="8.1538%" y="1013" width="0.3077%" height="15" fill="rgb(228,22,38)" fg:x="53" fg:w="2"/><text x="8.4038%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt; (1 samples, 0.15%)</title><rect x="8.3077%" y="997" width="0.1538%" height="15" fill="rgb(235,168,5)" fg:x="54" fg:w="1"/><text x="8.5577%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="8.3077%" y="981" width="0.1538%" height="15" fill="rgb(221,155,16)" fg:x="54" fg:w="1"/><text x="8.5577%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.15%)</title><rect x="8.3077%" y="965" width="0.1538%" height="15" fill="rgb(215,215,53)" fg:x="54" fg:w="1"/><text x="8.5577%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.15%)</title><rect x="8.3077%" y="949" width="0.1538%" height="15" fill="rgb(223,4,10)" fg:x="54" fg:w="1"/><text x="8.5577%" y="959.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.15%)</title><rect x="8.3077%" y="933" width="0.1538%" height="15" fill="rgb(234,103,6)" fg:x="54" fg:w="1"/><text x="8.5577%" y="943.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.15%)</title><rect x="8.3077%" y="917" width="0.1538%" height="15" fill="rgb(227,97,0)" fg:x="54" fg:w="1"/><text x="8.5577%" y="927.50"></text></g><g><title>free (1 samples, 0.15%)</title><rect x="8.3077%" y="901" width="0.1538%" height="15" fill="rgb(234,150,53)" fg:x="54" fg:w="1"/><text x="8.5577%" y="911.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="8.3077%" y="885" width="0.1538%" height="15" fill="rgb(228,201,54)" fg:x="54" fg:w="1"/><text x="8.5577%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="8.3077%" y="869" width="0.1538%" height="15" fill="rgb(222,22,37)" fg:x="54" fg:w="1"/><text x="8.5577%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.46%)</title><rect x="8.4615%" y="389" width="0.4615%" height="15" fill="rgb(237,53,32)" fg:x="55" fg:w="3"/><text x="8.7115%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.46%)</title><rect x="8.4615%" y="373" width="0.4615%" height="15" fill="rgb(233,25,53)" fg:x="55" fg:w="3"/><text x="8.7115%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.46%)</title><rect x="8.4615%" y="357" width="0.4615%" height="15" fill="rgb(210,40,34)" fg:x="55" fg:w="3"/><text x="8.7115%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (3 samples, 0.46%)</title><rect x="8.4615%" y="341" width="0.4615%" height="15" fill="rgb(241,220,44)" fg:x="55" fg:w="3"/><text x="8.7115%" y="351.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (3 samples, 0.46%)</title><rect x="8.4615%" y="325" width="0.4615%" height="15" fill="rgb(235,28,35)" fg:x="55" fg:w="3"/><text x="8.7115%" y="335.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (3 samples, 0.46%)</title><rect x="8.4615%" y="309" width="0.4615%" height="15" fill="rgb(210,56,17)" fg:x="55" fg:w="3"/><text x="8.7115%" y="319.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (3 samples, 0.46%)</title><rect x="8.4615%" y="293" width="0.4615%" height="15" fill="rgb(224,130,29)" fg:x="55" fg:w="3"/><text x="8.7115%" y="303.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (3 samples, 0.46%)</title><rect x="8.4615%" y="277" width="0.4615%" height="15" fill="rgb(235,212,8)" fg:x="55" fg:w="3"/><text x="8.7115%" y="287.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.46%)</title><rect x="8.4615%" y="261" width="0.4615%" height="15" fill="rgb(223,33,50)" fg:x="55" fg:w="3"/><text x="8.7115%" y="271.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.46%)</title><rect x="8.4615%" y="245" width="0.4615%" height="15" fill="rgb(219,149,13)" fg:x="55" fg:w="3"/><text x="8.7115%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.46%)</title><rect x="8.4615%" y="229" width="0.4615%" height="15" fill="rgb(250,156,29)" fg:x="55" fg:w="3"/><text x="8.7115%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.46%)</title><rect x="8.4615%" y="213" width="0.4615%" height="15" fill="rgb(216,193,19)" fg:x="55" fg:w="3"/><text x="8.7115%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.46%)</title><rect x="8.4615%" y="197" width="0.4615%" height="15" fill="rgb(216,135,14)" fg:x="55" fg:w="3"/><text x="8.7115%" y="207.50"></text></g><g><title>read (3 samples, 0.46%)</title><rect x="8.4615%" y="181" width="0.4615%" height="15" fill="rgb(241,47,5)" fg:x="55" fg:w="3"/><text x="8.7115%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.46%)</title><rect x="8.4615%" y="165" width="0.4615%" height="15" fill="rgb(233,42,35)" fg:x="55" fg:w="3"/><text x="8.7115%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="8.6154%" y="149" width="0.3077%" height="15" fill="rgb(231,13,6)" fg:x="56" fg:w="2"/><text x="8.8654%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="8.6154%" y="133" width="0.3077%" height="15" fill="rgb(207,181,40)" fg:x="56" fg:w="2"/><text x="8.8654%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="8.7692%" y="117" width="0.1538%" height="15" fill="rgb(254,173,49)" fg:x="57" fg:w="1"/><text x="9.0192%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="8.7692%" y="101" width="0.1538%" height="15" fill="rgb(221,1,38)" fg:x="57" fg:w="1"/><text x="9.0192%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="8.7692%" y="85" width="0.1538%" height="15" fill="rgb(206,124,46)" fg:x="57" fg:w="1"/><text x="9.0192%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="8.7692%" y="69" width="0.1538%" height="15" fill="rgb(249,21,11)" fg:x="57" fg:w="1"/><text x="9.0192%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="8.7692%" y="53" width="0.1538%" height="15" fill="rgb(222,201,40)" fg:x="57" fg:w="1"/><text x="9.0192%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="8.7692%" y="37" width="0.1538%" height="15" fill="rgb(235,61,29)" fg:x="57" fg:w="1"/><text x="9.0192%" y="47.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.62%)</title><rect x="8.4615%" y="485" width="0.6154%" height="15" fill="rgb(219,207,3)" fg:x="55" fg:w="4"/><text x="8.7115%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.62%)</title><rect x="8.4615%" y="469" width="0.6154%" height="15" fill="rgb(222,56,46)" fg:x="55" fg:w="4"/><text x="8.7115%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.62%)</title><rect x="8.4615%" y="453" width="0.6154%" height="15" fill="rgb(239,76,54)" fg:x="55" fg:w="4"/><text x="8.7115%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.62%)</title><rect x="8.4615%" y="437" width="0.6154%" height="15" fill="rgb(231,124,27)" fg:x="55" fg:w="4"/><text x="8.7115%" y="447.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.62%)</title><rect x="8.4615%" y="421" width="0.6154%" height="15" fill="rgb(249,195,6)" fg:x="55" fg:w="4"/><text x="8.7115%" y="431.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.62%)</title><rect x="8.4615%" y="405" width="0.6154%" height="15" fill="rgb(237,174,47)" fg:x="55" fg:w="4"/><text x="8.7115%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.15%)</title><rect x="8.9231%" y="389" width="0.1538%" height="15" fill="rgb(206,201,31)" fg:x="58" fg:w="1"/><text x="9.1731%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.15%)</title><rect x="8.9231%" y="373" width="0.1538%" height="15" fill="rgb(231,57,52)" fg:x="58" fg:w="1"/><text x="9.1731%" y="383.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.15%)</title><rect x="8.9231%" y="357" width="0.1538%" height="15" fill="rgb(248,177,22)" fg:x="58" fg:w="1"/><text x="9.1731%" y="367.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="8.9231%" y="341" width="0.1538%" height="15" fill="rgb(215,211,37)" fg:x="58" fg:w="1"/><text x="9.1731%" y="351.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="8.9231%" y="325" width="0.1538%" height="15" fill="rgb(241,128,51)" fg:x="58" fg:w="1"/><text x="9.1731%" y="335.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="8.9231%" y="309" width="0.1538%" height="15" fill="rgb(227,165,31)" fg:x="58" fg:w="1"/><text x="9.1731%" y="319.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.15%)</title><rect x="8.9231%" y="293" width="0.1538%" height="15" fill="rgb(228,167,24)" fg:x="58" fg:w="1"/><text x="9.1731%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.15%)</title><rect x="8.9231%" y="277" width="0.1538%" height="15" fill="rgb(228,143,12)" fg:x="58" fg:w="1"/><text x="9.1731%" y="287.50"></text></g><g><title>read (1 samples, 0.15%)</title><rect x="8.9231%" y="261" width="0.1538%" height="15" fill="rgb(249,149,8)" fg:x="58" fg:w="1"/><text x="9.1731%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="8.9231%" y="245" width="0.1538%" height="15" fill="rgb(243,35,44)" fg:x="58" fg:w="1"/><text x="9.1731%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.77%)</title><rect x="8.4615%" y="581" width="0.7692%" height="15" fill="rgb(246,89,9)" fg:x="55" fg:w="5"/><text x="8.7115%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.77%)</title><rect x="8.4615%" y="565" width="0.7692%" height="15" fill="rgb(233,213,13)" fg:x="55" fg:w="5"/><text x="8.7115%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.77%)</title><rect x="8.4615%" y="549" width="0.7692%" height="15" fill="rgb(233,141,41)" fg:x="55" fg:w="5"/><text x="8.7115%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.77%)</title><rect x="8.4615%" y="533" width="0.7692%" height="15" fill="rgb(239,167,4)" fg:x="55" fg:w="5"/><text x="8.7115%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.77%)</title><rect x="8.4615%" y="517" width="0.7692%" height="15" fill="rgb(209,217,16)" fg:x="55" fg:w="5"/><text x="8.7115%" y="527.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.77%)</title><rect x="8.4615%" y="501" width="0.7692%" height="15" fill="rgb(219,88,35)" fg:x="55" fg:w="5"/><text x="8.7115%" y="511.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.15%)</title><rect x="9.0769%" y="485" width="0.1538%" height="15" fill="rgb(220,193,23)" fg:x="59" fg:w="1"/><text x="9.3269%" y="495.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.15%)</title><rect x="9.0769%" y="469" width="0.1538%" height="15" fill="rgb(230,90,52)" fg:x="59" fg:w="1"/><text x="9.3269%" y="479.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.15%)</title><rect x="9.0769%" y="453" width="0.1538%" height="15" fill="rgb(252,106,19)" fg:x="59" fg:w="1"/><text x="9.3269%" y="463.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="9.0769%" y="437" width="0.1538%" height="15" fill="rgb(206,74,20)" fg:x="59" fg:w="1"/><text x="9.3269%" y="447.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="9.0769%" y="421" width="0.1538%" height="15" fill="rgb(230,138,44)" fg:x="59" fg:w="1"/><text x="9.3269%" y="431.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="9.0769%" y="405" width="0.1538%" height="15" fill="rgb(235,182,43)" fg:x="59" fg:w="1"/><text x="9.3269%" y="415.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.15%)</title><rect x="9.0769%" y="389" width="0.1538%" height="15" fill="rgb(242,16,51)" fg:x="59" fg:w="1"/><text x="9.3269%" y="399.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.15%)</title><rect x="9.0769%" y="373" width="0.1538%" height="15" fill="rgb(248,9,4)" fg:x="59" fg:w="1"/><text x="9.3269%" y="383.50"></text></g><g><title>read (1 samples, 0.15%)</title><rect x="9.0769%" y="357" width="0.1538%" height="15" fill="rgb(210,31,22)" fg:x="59" fg:w="1"/><text x="9.3269%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="9.0769%" y="341" width="0.1538%" height="15" fill="rgb(239,54,39)" fg:x="59" fg:w="1"/><text x="9.3269%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="9.0769%" y="325" width="0.1538%" height="15" fill="rgb(230,99,41)" fg:x="59" fg:w="1"/><text x="9.3269%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="9.0769%" y="309" width="0.1538%" height="15" fill="rgb(253,106,12)" fg:x="59" fg:w="1"/><text x="9.3269%" y="319.50"></text></g><g><title>serde::de::MapAccess::next_entry (8 samples, 1.23%)</title><rect x="8.4615%" y="901" width="1.2308%" height="15" fill="rgb(213,46,41)" fg:x="55" fg:w="8"/><text x="8.7115%" y="911.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (8 samples, 1.23%)</title><rect x="8.4615%" y="885" width="1.2308%" height="15" fill="rgb(215,133,35)" fg:x="55" fg:w="8"/><text x="8.7115%" y="895.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 1.23%)</title><rect x="8.4615%" y="869" width="1.2308%" height="15" fill="rgb(213,28,5)" fg:x="55" fg:w="8"/><text x="8.7115%" y="879.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 1.23%)</title><rect x="8.4615%" y="853" width="1.2308%" height="15" fill="rgb(215,77,49)" fg:x="55" fg:w="8"/><text x="8.7115%" y="863.50"></text></g><g><title>serde::de::MapAccess::next_entry (8 samples, 1.23%)</title><rect x="8.4615%" y="837" width="1.2308%" height="15" fill="rgb(248,100,22)" fg:x="55" fg:w="8"/><text x="8.7115%" y="847.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (8 samples, 1.23%)</title><rect x="8.4615%" y="821" width="1.2308%" height="15" fill="rgb(208,67,9)" fg:x="55" fg:w="8"/><text x="8.7115%" y="831.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 1.23%)</title><rect x="8.4615%" y="805" width="1.2308%" height="15" fill="rgb(219,133,21)" fg:x="55" fg:w="8"/><text x="8.7115%" y="815.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (8 samples, 1.23%)</title><rect x="8.4615%" y="789" width="1.2308%" height="15" fill="rgb(246,46,29)" fg:x="55" fg:w="8"/><text x="8.7115%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 1.23%)</title><rect x="8.4615%" y="773" width="1.2308%" height="15" fill="rgb(246,185,52)" fg:x="55" fg:w="8"/><text x="8.7115%" y="783.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 1.23%)</title><rect x="8.4615%" y="757" width="1.2308%" height="15" fill="rgb(252,136,11)" fg:x="55" fg:w="8"/><text x="8.7115%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 1.23%)</title><rect x="8.4615%" y="741" width="1.2308%" height="15" fill="rgb(219,138,53)" fg:x="55" fg:w="8"/><text x="8.7115%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8 samples, 1.23%)</title><rect x="8.4615%" y="725" width="1.2308%" height="15" fill="rgb(211,51,23)" fg:x="55" fg:w="8"/><text x="8.7115%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 1.23%)</title><rect x="8.4615%" y="709" width="1.2308%" height="15" fill="rgb(247,221,28)" fg:x="55" fg:w="8"/><text x="8.7115%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 1.23%)</title><rect x="8.4615%" y="693" width="1.2308%" height="15" fill="rgb(251,222,45)" fg:x="55" fg:w="8"/><text x="8.7115%" y="703.50"></text></g><g><title>serde::de::MapAccess::next_entry (8 samples, 1.23%)</title><rect x="8.4615%" y="677" width="1.2308%" height="15" fill="rgb(217,162,53)" fg:x="55" fg:w="8"/><text x="8.7115%" y="687.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (8 samples, 1.23%)</title><rect x="8.4615%" y="661" width="1.2308%" height="15" fill="rgb(229,93,14)" fg:x="55" fg:w="8"/><text x="8.7115%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 1.23%)</title><rect x="8.4615%" y="645" width="1.2308%" height="15" fill="rgb(209,67,49)" fg:x="55" fg:w="8"/><text x="8.7115%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (8 samples, 1.23%)</title><rect x="8.4615%" y="629" width="1.2308%" height="15" fill="rgb(213,87,29)" fg:x="55" fg:w="8"/><text x="8.7115%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 1.23%)</title><rect x="8.4615%" y="613" width="1.2308%" height="15" fill="rgb(205,151,52)" fg:x="55" fg:w="8"/><text x="8.7115%" y="623.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 1.23%)</title><rect x="8.4615%" y="597" width="1.2308%" height="15" fill="rgb(253,215,39)" fg:x="55" fg:w="8"/><text x="8.7115%" y="607.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (3 samples, 0.46%)</title><rect x="9.2308%" y="581" width="0.4615%" height="15" fill="rgb(221,220,41)" fg:x="60" fg:w="3"/><text x="9.4808%" y="591.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (3 samples, 0.46%)</title><rect x="9.2308%" y="565" width="0.4615%" height="15" fill="rgb(218,133,21)" fg:x="60" fg:w="3"/><text x="9.4808%" y="575.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (3 samples, 0.46%)</title><rect x="9.2308%" y="549" width="0.4615%" height="15" fill="rgb(221,193,43)" fg:x="60" fg:w="3"/><text x="9.4808%" y="559.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.46%)</title><rect x="9.2308%" y="533" width="0.4615%" height="15" fill="rgb(240,128,52)" fg:x="60" fg:w="3"/><text x="9.4808%" y="543.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.46%)</title><rect x="9.2308%" y="517" width="0.4615%" height="15" fill="rgb(253,114,12)" fg:x="60" fg:w="3"/><text x="9.4808%" y="527.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.46%)</title><rect x="9.2308%" y="501" width="0.4615%" height="15" fill="rgb(215,223,47)" fg:x="60" fg:w="3"/><text x="9.4808%" y="511.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.46%)</title><rect x="9.2308%" y="485" width="0.4615%" height="15" fill="rgb(248,225,23)" fg:x="60" fg:w="3"/><text x="9.4808%" y="495.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.46%)</title><rect x="9.2308%" y="469" width="0.4615%" height="15" fill="rgb(250,108,0)" fg:x="60" fg:w="3"/><text x="9.4808%" y="479.50"></text></g><g><title>read (3 samples, 0.46%)</title><rect x="9.2308%" y="453" width="0.4615%" height="15" fill="rgb(228,208,7)" fg:x="60" fg:w="3"/><text x="9.4808%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.46%)</title><rect x="9.2308%" y="437" width="0.4615%" height="15" fill="rgb(244,45,10)" fg:x="60" fg:w="3"/><text x="9.4808%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.15%)</title><rect x="9.6923%" y="453" width="0.1538%" height="15" fill="rgb(207,125,25)" fg:x="63" fg:w="1"/><text x="9.9423%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.15%)</title><rect x="9.6923%" y="437" width="0.1538%" height="15" fill="rgb(210,195,18)" fg:x="63" fg:w="1"/><text x="9.9423%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.15%)</title><rect x="9.6923%" y="421" width="0.1538%" height="15" fill="rgb(249,80,12)" fg:x="63" fg:w="1"/><text x="9.9423%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="9.6923%" y="405" width="0.1538%" height="15" fill="rgb(221,65,9)" fg:x="63" fg:w="1"/><text x="9.9423%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="9.6923%" y="389" width="0.1538%" height="15" fill="rgb(235,49,36)" fg:x="63" fg:w="1"/><text x="9.9423%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.15%)</title><rect x="9.6923%" y="373" width="0.1538%" height="15" fill="rgb(225,32,20)" fg:x="63" fg:w="1"/><text x="9.9423%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.15%)</title><rect x="9.6923%" y="357" width="0.1538%" height="15" fill="rgb(215,141,46)" fg:x="63" fg:w="1"/><text x="9.9423%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.15%)</title><rect x="9.6923%" y="341" width="0.1538%" height="15" fill="rgb(250,160,47)" fg:x="63" fg:w="1"/><text x="9.9423%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.15%)</title><rect x="9.6923%" y="325" width="0.1538%" height="15" fill="rgb(216,222,40)" fg:x="63" fg:w="1"/><text x="9.9423%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.15%)</title><rect x="9.6923%" y="309" width="0.1538%" height="15" fill="rgb(234,217,39)" fg:x="63" fg:w="1"/><text x="9.9423%" y="319.50"></text></g><g><title>realloc (1 samples, 0.15%)</title><rect x="9.6923%" y="293" width="0.1538%" height="15" fill="rgb(207,178,40)" fg:x="63" fg:w="1"/><text x="9.9423%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="9.6923%" y="277" width="0.1538%" height="15" fill="rgb(221,136,13)" fg:x="63" fg:w="1"/><text x="9.9423%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="9.6923%" y="261" width="0.1538%" height="15" fill="rgb(249,199,10)" fg:x="63" fg:w="1"/><text x="9.9423%" y="271.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.31%)</title><rect x="9.6923%" y="597" width="0.3077%" height="15" fill="rgb(249,222,13)" fg:x="63" fg:w="2"/><text x="9.9423%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.31%)</title><rect x="9.6923%" y="581" width="0.3077%" height="15" fill="rgb(244,185,38)" fg:x="63" fg:w="2"/><text x="9.9423%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.31%)</title><rect x="9.6923%" y="565" width="0.3077%" height="15" fill="rgb(236,202,9)" fg:x="63" fg:w="2"/><text x="9.9423%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.31%)</title><rect x="9.6923%" y="549" width="0.3077%" height="15" fill="rgb(250,229,37)" fg:x="63" fg:w="2"/><text x="9.9423%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.31%)</title><rect x="9.6923%" y="533" width="0.3077%" height="15" fill="rgb(206,174,23)" fg:x="63" fg:w="2"/><text x="9.9423%" y="543.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.31%)</title><rect x="9.6923%" y="517" width="0.3077%" height="15" fill="rgb(211,33,43)" fg:x="63" fg:w="2"/><text x="9.9423%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.31%)</title><rect x="9.6923%" y="501" width="0.3077%" height="15" fill="rgb(245,58,50)" fg:x="63" fg:w="2"/><text x="9.9423%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.31%)</title><rect x="9.6923%" y="485" width="0.3077%" height="15" fill="rgb(244,68,36)" fg:x="63" fg:w="2"/><text x="9.9423%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.31%)</title><rect x="9.6923%" y="469" width="0.3077%" height="15" fill="rgb(232,229,15)" fg:x="63" fg:w="2"/><text x="9.9423%" y="479.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.15%)</title><rect x="9.8462%" y="453" width="0.1538%" height="15" fill="rgb(254,30,23)" fg:x="64" fg:w="1"/><text x="10.0962%" y="463.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.15%)</title><rect x="9.8462%" y="437" width="0.1538%" height="15" fill="rgb(235,160,14)" fg:x="64" fg:w="1"/><text x="10.0962%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.15%)</title><rect x="9.8462%" y="421" width="0.1538%" height="15" fill="rgb(212,155,44)" fg:x="64" fg:w="1"/><text x="10.0962%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.15%)</title><rect x="9.8462%" y="405" width="0.1538%" height="15" fill="rgb(226,2,50)" fg:x="64" fg:w="1"/><text x="10.0962%" y="415.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.15%)</title><rect x="9.8462%" y="389" width="0.1538%" height="15" fill="rgb(234,177,6)" fg:x="64" fg:w="1"/><text x="10.0962%" y="399.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="9.8462%" y="373" width="0.1538%" height="15" fill="rgb(217,24,9)" fg:x="64" fg:w="1"/><text x="10.0962%" y="383.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="9.8462%" y="357" width="0.1538%" height="15" fill="rgb(220,13,46)" fg:x="64" fg:w="1"/><text x="10.0962%" y="367.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="9.8462%" y="341" width="0.1538%" height="15" fill="rgb(239,221,27)" fg:x="64" fg:w="1"/><text x="10.0962%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.15%)</title><rect x="9.8462%" y="325" width="0.1538%" height="15" fill="rgb(222,198,25)" fg:x="64" fg:w="1"/><text x="10.0962%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.15%)</title><rect x="9.8462%" y="309" width="0.1538%" height="15" fill="rgb(211,99,13)" fg:x="64" fg:w="1"/><text x="10.0962%" y="319.50"></text></g><g><title>read (1 samples, 0.15%)</title><rect x="9.8462%" y="293" width="0.1538%" height="15" fill="rgb(232,111,31)" fg:x="64" fg:w="1"/><text x="10.0962%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="9.8462%" y="277" width="0.1538%" height="15" fill="rgb(245,82,37)" fg:x="64" fg:w="1"/><text x="10.0962%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.15%)</title><rect x="10.0000%" y="549" width="0.1538%" height="15" fill="rgb(227,149,46)" fg:x="65" fg:w="1"/><text x="10.2500%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.15%)</title><rect x="10.0000%" y="533" width="0.1538%" height="15" fill="rgb(218,36,50)" fg:x="65" fg:w="1"/><text x="10.2500%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.15%)</title><rect x="10.0000%" y="517" width="0.1538%" height="15" fill="rgb(226,80,48)" fg:x="65" fg:w="1"/><text x="10.2500%" y="527.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.15%)</title><rect x="10.0000%" y="501" width="0.1538%" height="15" fill="rgb(238,224,15)" fg:x="65" fg:w="1"/><text x="10.2500%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.15%)</title><rect x="10.0000%" y="485" width="0.1538%" height="15" fill="rgb(241,136,10)" fg:x="65" fg:w="1"/><text x="10.2500%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.15%)</title><rect x="10.0000%" y="469" width="0.1538%" height="15" fill="rgb(208,32,45)" fg:x="65" fg:w="1"/><text x="10.2500%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.15%)</title><rect x="10.0000%" y="453" width="0.1538%" height="15" fill="rgb(207,135,9)" fg:x="65" fg:w="1"/><text x="10.2500%" y="463.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.15%)</title><rect x="10.0000%" y="437" width="0.1538%" height="15" fill="rgb(206,86,44)" fg:x="65" fg:w="1"/><text x="10.2500%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.15%)</title><rect x="10.0000%" y="421" width="0.1538%" height="15" fill="rgb(245,177,15)" fg:x="65" fg:w="1"/><text x="10.2500%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.15%)</title><rect x="10.0000%" y="405" width="0.1538%" height="15" fill="rgb(206,64,50)" fg:x="65" fg:w="1"/><text x="10.2500%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.15%)</title><rect x="10.0000%" y="389" width="0.1538%" height="15" fill="rgb(234,36,40)" fg:x="65" fg:w="1"/><text x="10.2500%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.15%)</title><rect x="10.0000%" y="373" width="0.1538%" height="15" fill="rgb(213,64,8)" fg:x="65" fg:w="1"/><text x="10.2500%" y="383.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="10.0000%" y="357" width="0.1538%" height="15" fill="rgb(210,75,36)" fg:x="65" fg:w="1"/><text x="10.2500%" y="367.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="10.0000%" y="341" width="0.1538%" height="15" fill="rgb(229,88,21)" fg:x="65" fg:w="1"/><text x="10.2500%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="10.0000%" y="325" width="0.1538%" height="15" fill="rgb(252,204,47)" fg:x="65" fg:w="1"/><text x="10.2500%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.15%)</title><rect x="10.0000%" y="309" width="0.1538%" height="15" fill="rgb(208,77,27)" fg:x="65" fg:w="1"/><text x="10.2500%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.15%)</title><rect x="10.0000%" y="293" width="0.1538%" height="15" fill="rgb(221,76,26)" fg:x="65" fg:w="1"/><text x="10.2500%" y="303.50"></text></g><g><title>read (1 samples, 0.15%)</title><rect x="10.0000%" y="277" width="0.1538%" height="15" fill="rgb(225,139,18)" fg:x="65" fg:w="1"/><text x="10.2500%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.0000%" y="261" width="0.1538%" height="15" fill="rgb(230,137,11)" fg:x="65" fg:w="1"/><text x="10.2500%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.92%)</title><rect x="9.6923%" y="661" width="0.9231%" height="15" fill="rgb(212,28,1)" fg:x="63" fg:w="6"/><text x="9.9423%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.92%)</title><rect x="9.6923%" y="645" width="0.9231%" height="15" fill="rgb(248,164,17)" fg:x="63" fg:w="6"/><text x="9.9423%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.92%)</title><rect x="9.6923%" y="629" width="0.9231%" height="15" fill="rgb(222,171,42)" fg:x="63" fg:w="6"/><text x="9.9423%" y="639.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.92%)</title><rect x="9.6923%" y="613" width="0.9231%" height="15" fill="rgb(243,84,45)" fg:x="63" fg:w="6"/><text x="9.9423%" y="623.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (4 samples, 0.62%)</title><rect x="10.0000%" y="597" width="0.6154%" height="15" fill="rgb(252,49,23)" fg:x="65" fg:w="4"/><text x="10.2500%" y="607.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (4 samples, 0.62%)</title><rect x="10.0000%" y="581" width="0.6154%" height="15" fill="rgb(215,19,7)" fg:x="65" fg:w="4"/><text x="10.2500%" y="591.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (4 samples, 0.62%)</title><rect x="10.0000%" y="565" width="0.6154%" height="15" fill="rgb(238,81,41)" fg:x="65" fg:w="4"/><text x="10.2500%" y="575.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.46%)</title><rect x="10.1538%" y="549" width="0.4615%" height="15" fill="rgb(210,199,37)" fg:x="66" fg:w="3"/><text x="10.4038%" y="559.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.46%)</title><rect x="10.1538%" y="533" width="0.4615%" height="15" fill="rgb(244,192,49)" fg:x="66" fg:w="3"/><text x="10.4038%" y="543.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.46%)</title><rect x="10.1538%" y="517" width="0.4615%" height="15" fill="rgb(226,211,11)" fg:x="66" fg:w="3"/><text x="10.4038%" y="527.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.46%)</title><rect x="10.1538%" y="501" width="0.4615%" height="15" fill="rgb(236,162,54)" fg:x="66" fg:w="3"/><text x="10.4038%" y="511.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.46%)</title><rect x="10.1538%" y="485" width="0.4615%" height="15" fill="rgb(220,229,9)" fg:x="66" fg:w="3"/><text x="10.4038%" y="495.50"></text></g><g><title>read (3 samples, 0.46%)</title><rect x="10.1538%" y="469" width="0.4615%" height="15" fill="rgb(250,87,22)" fg:x="66" fg:w="3"/><text x="10.4038%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.46%)</title><rect x="10.1538%" y="453" width="0.4615%" height="15" fill="rgb(239,43,17)" fg:x="66" fg:w="3"/><text x="10.4038%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.46%)</title><rect x="10.1538%" y="437" width="0.4615%" height="15" fill="rgb(231,177,25)" fg:x="66" fg:w="3"/><text x="10.4038%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.46%)</title><rect x="10.1538%" y="421" width="0.4615%" height="15" fill="rgb(219,179,1)" fg:x="66" fg:w="3"/><text x="10.4038%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="10.3077%" y="405" width="0.3077%" height="15" fill="rgb(238,219,53)" fg:x="67" fg:w="2"/><text x="10.5577%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="10.3077%" y="389" width="0.3077%" height="15" fill="rgb(232,167,36)" fg:x="67" fg:w="2"/><text x="10.5577%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.4615%" y="373" width="0.1538%" height="15" fill="rgb(244,19,51)" fg:x="68" fg:w="1"/><text x="10.7115%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.4615%" y="357" width="0.1538%" height="15" fill="rgb(224,6,22)" fg:x="68" fg:w="1"/><text x="10.7115%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.4615%" y="341" width="0.1538%" height="15" fill="rgb(224,145,5)" fg:x="68" fg:w="1"/><text x="10.7115%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.4615%" y="325" width="0.1538%" height="15" fill="rgb(234,130,49)" fg:x="68" fg:w="1"/><text x="10.7115%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 1.08%)</title><rect x="9.6923%" y="757" width="1.0769%" height="15" fill="rgb(254,6,2)" fg:x="63" fg:w="7"/><text x="9.9423%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (7 samples, 1.08%)</title><rect x="9.6923%" y="741" width="1.0769%" height="15" fill="rgb(208,96,46)" fg:x="63" fg:w="7"/><text x="9.9423%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 1.08%)</title><rect x="9.6923%" y="725" width="1.0769%" height="15" fill="rgb(239,3,39)" fg:x="63" fg:w="7"/><text x="9.9423%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 1.08%)</title><rect x="9.6923%" y="709" width="1.0769%" height="15" fill="rgb(233,210,1)" fg:x="63" fg:w="7"/><text x="9.9423%" y="719.50"></text></g><g><title>serde::de::MapAccess::next_entry (7 samples, 1.08%)</title><rect x="9.6923%" y="693" width="1.0769%" height="15" fill="rgb(244,137,37)" fg:x="63" fg:w="7"/><text x="9.9423%" y="703.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (7 samples, 1.08%)</title><rect x="9.6923%" y="677" width="1.0769%" height="15" fill="rgb(240,136,2)" fg:x="63" fg:w="7"/><text x="9.9423%" y="687.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.15%)</title><rect x="10.6154%" y="661" width="0.1538%" height="15" fill="rgb(239,18,37)" fg:x="69" fg:w="1"/><text x="10.8654%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.15%)</title><rect x="10.6154%" y="645" width="0.1538%" height="15" fill="rgb(218,185,22)" fg:x="69" fg:w="1"/><text x="10.8654%" y="655.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.15%)</title><rect x="10.6154%" y="629" width="0.1538%" height="15" fill="rgb(225,218,4)" fg:x="69" fg:w="1"/><text x="10.8654%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.15%)</title><rect x="10.6154%" y="613" width="0.1538%" height="15" fill="rgb(230,182,32)" fg:x="69" fg:w="1"/><text x="10.8654%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.15%)</title><rect x="10.6154%" y="597" width="0.1538%" height="15" fill="rgb(242,56,43)" fg:x="69" fg:w="1"/><text x="10.8654%" y="607.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.15%)</title><rect x="10.6154%" y="581" width="0.1538%" height="15" fill="rgb(233,99,24)" fg:x="69" fg:w="1"/><text x="10.8654%" y="591.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (1 samples, 0.15%)</title><rect x="10.6154%" y="565" width="0.1538%" height="15" fill="rgb(234,209,42)" fg:x="69" fg:w="1"/><text x="10.8654%" y="575.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.15%)</title><rect x="10.6154%" y="549" width="0.1538%" height="15" fill="rgb(227,7,12)" fg:x="69" fg:w="1"/><text x="10.8654%" y="559.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (1 samples, 0.15%)</title><rect x="10.6154%" y="533" width="0.1538%" height="15" fill="rgb(245,203,43)" fg:x="69" fg:w="1"/><text x="10.8654%" y="543.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="10.6154%" y="517" width="0.1538%" height="15" fill="rgb(238,205,33)" fg:x="69" fg:w="1"/><text x="10.8654%" y="527.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="10.6154%" y="501" width="0.1538%" height="15" fill="rgb(231,56,7)" fg:x="69" fg:w="1"/><text x="10.8654%" y="511.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="10.6154%" y="485" width="0.1538%" height="15" fill="rgb(244,186,29)" fg:x="69" fg:w="1"/><text x="10.8654%" y="495.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.15%)</title><rect x="10.6154%" y="469" width="0.1538%" height="15" fill="rgb(234,111,31)" fg:x="69" fg:w="1"/><text x="10.8654%" y="479.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.15%)</title><rect x="10.6154%" y="453" width="0.1538%" height="15" fill="rgb(241,149,10)" fg:x="69" fg:w="1"/><text x="10.8654%" y="463.50"></text></g><g><title>read (1 samples, 0.15%)</title><rect x="10.6154%" y="437" width="0.1538%" height="15" fill="rgb(249,206,44)" fg:x="69" fg:w="1"/><text x="10.8654%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.6154%" y="421" width="0.1538%" height="15" fill="rgb(251,153,30)" fg:x="69" fg:w="1"/><text x="10.8654%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.6154%" y="405" width="0.1538%" height="15" fill="rgb(239,152,38)" fg:x="69" fg:w="1"/><text x="10.8654%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.6154%" y="389" width="0.1538%" height="15" fill="rgb(249,139,47)" fg:x="69" fg:w="1"/><text x="10.8654%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.6154%" y="373" width="0.1538%" height="15" fill="rgb(244,64,35)" fg:x="69" fg:w="1"/><text x="10.8654%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.6154%" y="357" width="0.1538%" height="15" fill="rgb(216,46,15)" fg:x="69" fg:w="1"/><text x="10.8654%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.6154%" y="341" width="0.1538%" height="15" fill="rgb(250,74,19)" fg:x="69" fg:w="1"/><text x="10.8654%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 2.46%)</title><rect x="8.4615%" y="917" width="2.4615%" height="15" fill="rgb(249,42,33)" fg:x="55" fg:w="16"/><text x="8.7115%" y="927.50">&lt;s..</text></g><g><title>serde::de::MapAccess::next_value (8 samples, 1.23%)</title><rect x="9.6923%" y="901" width="1.2308%" height="15" fill="rgb(242,149,17)" fg:x="63" fg:w="8"/><text x="9.9423%" y="911.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 1.23%)</title><rect x="9.6923%" y="885" width="1.2308%" height="15" fill="rgb(244,29,21)" fg:x="63" fg:w="8"/><text x="9.9423%" y="895.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 1.23%)</title><rect x="9.6923%" y="869" width="1.2308%" height="15" fill="rgb(220,130,37)" fg:x="63" fg:w="8"/><text x="9.9423%" y="879.50"></text></g><g><title>serde::de::MapAccess::next_entry (8 samples, 1.23%)</title><rect x="9.6923%" y="853" width="1.2308%" height="15" fill="rgb(211,67,2)" fg:x="63" fg:w="8"/><text x="9.9423%" y="863.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (8 samples, 1.23%)</title><rect x="9.6923%" y="837" width="1.2308%" height="15" fill="rgb(235,68,52)" fg:x="63" fg:w="8"/><text x="9.9423%" y="847.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 1.23%)</title><rect x="9.6923%" y="821" width="1.2308%" height="15" fill="rgb(246,142,3)" fg:x="63" fg:w="8"/><text x="9.9423%" y="831.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (8 samples, 1.23%)</title><rect x="9.6923%" y="805" width="1.2308%" height="15" fill="rgb(241,25,7)" fg:x="63" fg:w="8"/><text x="9.9423%" y="815.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 1.23%)</title><rect x="9.6923%" y="789" width="1.2308%" height="15" fill="rgb(242,119,39)" fg:x="63" fg:w="8"/><text x="9.9423%" y="799.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 1.23%)</title><rect x="9.6923%" y="773" width="1.2308%" height="15" fill="rgb(241,98,45)" fg:x="63" fg:w="8"/><text x="9.9423%" y="783.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.15%)</title><rect x="10.7692%" y="757" width="0.1538%" height="15" fill="rgb(254,28,30)" fg:x="70" fg:w="1"/><text x="11.0192%" y="767.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.15%)</title><rect x="10.7692%" y="741" width="0.1538%" height="15" fill="rgb(241,142,54)" fg:x="70" fg:w="1"/><text x="11.0192%" y="751.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.15%)</title><rect x="10.7692%" y="725" width="0.1538%" height="15" fill="rgb(222,85,15)" fg:x="70" fg:w="1"/><text x="11.0192%" y="735.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="10.7692%" y="709" width="0.1538%" height="15" fill="rgb(210,85,47)" fg:x="70" fg:w="1"/><text x="11.0192%" y="719.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="10.7692%" y="693" width="0.1538%" height="15" fill="rgb(224,206,25)" fg:x="70" fg:w="1"/><text x="11.0192%" y="703.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="10.7692%" y="677" width="0.1538%" height="15" fill="rgb(243,201,19)" fg:x="70" fg:w="1"/><text x="11.0192%" y="687.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.15%)</title><rect x="10.7692%" y="661" width="0.1538%" height="15" fill="rgb(236,59,4)" fg:x="70" fg:w="1"/><text x="11.0192%" y="671.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.15%)</title><rect x="10.7692%" y="645" width="0.1538%" height="15" fill="rgb(254,179,45)" fg:x="70" fg:w="1"/><text x="11.0192%" y="655.50"></text></g><g><title>read (1 samples, 0.15%)</title><rect x="10.7692%" y="629" width="0.1538%" height="15" fill="rgb(226,14,10)" fg:x="70" fg:w="1"/><text x="11.0192%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.7692%" y="613" width="0.1538%" height="15" fill="rgb(244,27,41)" fg:x="70" fg:w="1"/><text x="11.0192%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.7692%" y="597" width="0.1538%" height="15" fill="rgb(235,35,32)" fg:x="70" fg:w="1"/><text x="11.0192%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.7692%" y="581" width="0.1538%" height="15" fill="rgb(218,68,31)" fg:x="70" fg:w="1"/><text x="11.0192%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.7692%" y="565" width="0.1538%" height="15" fill="rgb(207,120,37)" fg:x="70" fg:w="1"/><text x="11.0192%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.7692%" y="549" width="0.1538%" height="15" fill="rgb(227,98,0)" fg:x="70" fg:w="1"/><text x="11.0192%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.7692%" y="533" width="0.1538%" height="15" fill="rgb(207,7,3)" fg:x="70" fg:w="1"/><text x="11.0192%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.7692%" y="517" width="0.1538%" height="15" fill="rgb(206,98,19)" fg:x="70" fg:w="1"/><text x="11.0192%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.7692%" y="501" width="0.1538%" height="15" fill="rgb(217,5,26)" fg:x="70" fg:w="1"/><text x="11.0192%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.15%)</title><rect x="10.9231%" y="805" width="0.1538%" height="15" fill="rgb(235,190,38)" fg:x="71" fg:w="1"/><text x="11.1731%" y="815.50"></text></g><g><title>core::ptr::write (1 samples, 0.15%)</title><rect x="10.9231%" y="789" width="0.1538%" height="15" fill="rgb(247,86,24)" fg:x="71" fg:w="1"/><text x="11.1731%" y="799.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.15%)</title><rect x="11.3846%" y="693" width="0.1538%" height="15" fill="rgb(205,101,16)" fg:x="74" fg:w="1"/><text x="11.6346%" y="703.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.15%)</title><rect x="11.3846%" y="677" width="0.1538%" height="15" fill="rgb(246,168,33)" fg:x="74" fg:w="1"/><text x="11.6346%" y="687.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.15%)</title><rect x="11.3846%" y="661" width="0.1538%" height="15" fill="rgb(231,114,1)" fg:x="74" fg:w="1"/><text x="11.6346%" y="671.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.15%)</title><rect x="11.3846%" y="645" width="0.1538%" height="15" fill="rgb(207,184,53)" fg:x="74" fg:w="1"/><text x="11.6346%" y="655.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.15%)</title><rect x="11.3846%" y="629" width="0.1538%" height="15" fill="rgb(224,95,51)" fg:x="74" fg:w="1"/><text x="11.6346%" y="639.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.15%)</title><rect x="11.3846%" y="613" width="0.1538%" height="15" fill="rgb(212,188,45)" fg:x="74" fg:w="1"/><text x="11.6346%" y="623.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="11.3846%" y="597" width="0.1538%" height="15" fill="rgb(223,154,38)" fg:x="74" fg:w="1"/><text x="11.6346%" y="607.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="11.3846%" y="581" width="0.1538%" height="15" fill="rgb(251,22,52)" fg:x="74" fg:w="1"/><text x="11.6346%" y="591.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="11.3846%" y="565" width="0.1538%" height="15" fill="rgb(229,209,22)" fg:x="74" fg:w="1"/><text x="11.6346%" y="575.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.15%)</title><rect x="11.3846%" y="549" width="0.1538%" height="15" fill="rgb(234,138,34)" fg:x="74" fg:w="1"/><text x="11.6346%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.15%)</title><rect x="11.3846%" y="533" width="0.1538%" height="15" fill="rgb(212,95,11)" fg:x="74" fg:w="1"/><text x="11.6346%" y="543.50"></text></g><g><title>read (1 samples, 0.15%)</title><rect x="11.3846%" y="517" width="0.1538%" height="15" fill="rgb(240,179,47)" fg:x="74" fg:w="1"/><text x="11.6346%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="11.3846%" y="501" width="0.1538%" height="15" fill="rgb(240,163,11)" fg:x="74" fg:w="1"/><text x="11.6346%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.46%)</title><rect x="11.3846%" y="709" width="0.4615%" height="15" fill="rgb(236,37,12)" fg:x="74" fg:w="3"/><text x="11.6346%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.31%)</title><rect x="11.5385%" y="693" width="0.3077%" height="15" fill="rgb(232,164,16)" fg:x="75" fg:w="2"/><text x="11.7885%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.31%)</title><rect x="11.5385%" y="677" width="0.3077%" height="15" fill="rgb(244,205,15)" fg:x="75" fg:w="2"/><text x="11.7885%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.31%)</title><rect x="11.5385%" y="661" width="0.3077%" height="15" fill="rgb(223,117,47)" fg:x="75" fg:w="2"/><text x="11.7885%" y="671.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="11.6923%" y="645" width="0.1538%" height="15" fill="rgb(244,107,35)" fg:x="76" fg:w="1"/><text x="11.9423%" y="655.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="11.6923%" y="629" width="0.1538%" height="15" fill="rgb(205,140,8)" fg:x="76" fg:w="1"/><text x="11.9423%" y="639.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::next_char (53 samples, 8.15%)</title><rect x="12.3077%" y="597" width="8.1538%" height="15" fill="rgb(228,84,46)" fg:x="80" fg:w="53"/><text x="12.5577%" y="607.50">serde_json:..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (53 samples, 8.15%)</title><rect x="12.3077%" y="581" width="8.1538%" height="15" fill="rgb(254,188,9)" fg:x="80" fg:w="53"/><text x="12.5577%" y="591.50">&lt;serde_json..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 8.15%)</title><rect x="12.3077%" y="565" width="8.1538%" height="15" fill="rgb(206,112,54)" fg:x="80" fg:w="53"/><text x="12.5577%" y="575.50">&lt;serde_json..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 8.00%)</title><rect x="12.4615%" y="549" width="8.0000%" height="15" fill="rgb(216,84,49)" fg:x="81" fg:w="52"/><text x="12.7115%" y="559.50">&lt;std::io::B..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (52 samples, 8.00%)</title><rect x="12.4615%" y="533" width="8.0000%" height="15" fill="rgb(214,194,35)" fg:x="81" fg:w="52"/><text x="12.7115%" y="543.50">&lt;std::fs::F..</text></g><g><title>std::sys::unix::fs::File::read (52 samples, 8.00%)</title><rect x="12.4615%" y="517" width="8.0000%" height="15" fill="rgb(249,28,3)" fg:x="81" fg:w="52"/><text x="12.7115%" y="527.50">std::sys::u..</text></g><g><title>std::sys::unix::fd::FileDesc::read (52 samples, 8.00%)</title><rect x="12.4615%" y="501" width="8.0000%" height="15" fill="rgb(222,56,52)" fg:x="81" fg:w="52"/><text x="12.7115%" y="511.50">std::sys::u..</text></g><g><title>read (52 samples, 8.00%)</title><rect x="12.4615%" y="485" width="8.0000%" height="15" fill="rgb(245,217,50)" fg:x="81" fg:w="52"/><text x="12.7115%" y="495.50">read</text></g><g><title>[unknown] (50 samples, 7.69%)</title><rect x="12.7692%" y="469" width="7.6923%" height="15" fill="rgb(213,201,24)" fg:x="83" fg:w="50"/><text x="13.0192%" y="479.50">[unknown]</text></g><g><title>[unknown] (36 samples, 5.54%)</title><rect x="14.9231%" y="453" width="5.5385%" height="15" fill="rgb(248,116,28)" fg:x="97" fg:w="36"/><text x="15.1731%" y="463.50">[unknow..</text></g><g><title>[unknown] (34 samples, 5.23%)</title><rect x="15.2308%" y="437" width="5.2308%" height="15" fill="rgb(219,72,43)" fg:x="99" fg:w="34"/><text x="15.4808%" y="447.50">[unkno..</text></g><g><title>[unknown] (23 samples, 3.54%)</title><rect x="16.9231%" y="421" width="3.5385%" height="15" fill="rgb(209,138,14)" fg:x="110" fg:w="23"/><text x="17.1731%" y="431.50">[un..</text></g><g><title>[unknown] (22 samples, 3.38%)</title><rect x="17.0769%" y="405" width="3.3846%" height="15" fill="rgb(222,18,33)" fg:x="111" fg:w="22"/><text x="17.3269%" y="415.50">[un..</text></g><g><title>[unknown] (18 samples, 2.77%)</title><rect x="17.6923%" y="389" width="2.7692%" height="15" fill="rgb(213,199,7)" fg:x="115" fg:w="18"/><text x="17.9423%" y="399.50">[u..</text></g><g><title>[unknown] (15 samples, 2.31%)</title><rect x="18.1538%" y="373" width="2.3077%" height="15" fill="rgb(250,110,10)" fg:x="118" fg:w="15"/><text x="18.4038%" y="383.50">[..</text></g><g><title>[unknown] (13 samples, 2.00%)</title><rect x="18.4615%" y="357" width="2.0000%" height="15" fill="rgb(248,123,6)" fg:x="120" fg:w="13"/><text x="18.7115%" y="367.50">[..</text></g><g><title>[unknown] (9 samples, 1.38%)</title><rect x="19.0769%" y="341" width="1.3846%" height="15" fill="rgb(206,91,31)" fg:x="124" fg:w="9"/><text x="19.3269%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="19.6923%" y="325" width="0.7692%" height="15" fill="rgb(211,154,13)" fg:x="128" fg:w="5"/><text x="19.9423%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="20.3077%" y="309" width="0.1538%" height="15" fill="rgb(225,148,7)" fg:x="132" fg:w="1"/><text x="20.5577%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (277 samples, 42.62%)</title><rect x="11.8462%" y="645" width="42.6154%" height="15" fill="rgb(220,160,43)" fg:x="77" fg:w="277"/><text x="12.0962%" y="655.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::des..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (275 samples, 42.31%)</title><rect x="12.1538%" y="629" width="42.3077%" height="15" fill="rgb(213,52,39)" fg:x="79" fg:w="275"/><text x="12.4038%" y="639.50">serde_json::de::Deserializer&lt;R&gt;::parse_any_number</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (275 samples, 42.31%)</title><rect x="12.1538%" y="613" width="42.3077%" height="15" fill="rgb(243,137,7)" fg:x="79" fg:w="275"/><text x="12.4038%" y="623.50">serde_json::de::Deserializer&lt;R&gt;::parse_integer</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (221 samples, 34.00%)</title><rect x="20.4615%" y="597" width="34.0000%" height="15" fill="rgb(230,79,13)" fg:x="133" fg:w="221"/><text x="20.7115%" y="607.50">serde_json::de::Deserializer&lt;R&gt;::peek_or_null</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (221 samples, 34.00%)</title><rect x="20.4615%" y="581" width="34.0000%" height="15" fill="rgb(247,105,23)" fg:x="133" fg:w="221"/><text x="20.7115%" y="591.50">serde_json::de::Deserializer&lt;R&gt;::peek</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (221 samples, 34.00%)</title><rect x="20.4615%" y="565" width="34.0000%" height="15" fill="rgb(223,179,41)" fg:x="133" fg:w="221"/><text x="20.7115%" y="575.50">&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (221 samples, 34.00%)</title><rect x="20.4615%" y="549" width="34.0000%" height="15" fill="rgb(218,9,34)" fg:x="133" fg:w="221"/><text x="20.7115%" y="559.50">&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::tr..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (217 samples, 33.38%)</title><rect x="21.0769%" y="533" width="33.3846%" height="15" fill="rgb(222,106,8)" fg:x="137" fg:w="217"/><text x="21.3269%" y="543.50">&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::It..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (217 samples, 33.38%)</title><rect x="21.0769%" y="517" width="33.3846%" height="15" fill="rgb(211,220,0)" fg:x="137" fg:w="217"/><text x="21.3269%" y="527.50">&lt;std::fs::File as std::io::Read&gt;::read</text></g><g><title>std::sys::unix::fs::File::read (217 samples, 33.38%)</title><rect x="21.0769%" y="501" width="33.3846%" height="15" fill="rgb(229,52,16)" fg:x="137" fg:w="217"/><text x="21.3269%" y="511.50">std::sys::unix::fs::File::read</text></g><g><title>std::sys::unix::fd::FileDesc::read (217 samples, 33.38%)</title><rect x="21.0769%" y="485" width="33.3846%" height="15" fill="rgb(212,155,18)" fg:x="137" fg:w="217"/><text x="21.3269%" y="495.50">std::sys::unix::fd::FileDesc::read</text></g><g><title>read (217 samples, 33.38%)</title><rect x="21.0769%" y="469" width="33.3846%" height="15" fill="rgb(242,21,14)" fg:x="137" fg:w="217"/><text x="21.3269%" y="479.50">read</text></g><g><title>[unknown] (213 samples, 32.77%)</title><rect x="21.6923%" y="453" width="32.7692%" height="15" fill="rgb(222,19,48)" fg:x="141" fg:w="213"/><text x="21.9423%" y="463.50">[unknown]</text></g><g><title>[unknown] (147 samples, 22.62%)</title><rect x="31.8462%" y="437" width="22.6154%" height="15" fill="rgb(232,45,27)" fg:x="207" fg:w="147"/><text x="32.0962%" y="447.50">[unknown]</text></g><g><title>[unknown] (138 samples, 21.23%)</title><rect x="33.2308%" y="421" width="21.2308%" height="15" fill="rgb(249,103,42)" fg:x="216" fg:w="138"/><text x="33.4808%" y="431.50">[unknown]</text></g><g><title>[unknown] (99 samples, 15.23%)</title><rect x="39.2308%" y="405" width="15.2308%" height="15" fill="rgb(246,81,33)" fg:x="255" fg:w="99"/><text x="39.4808%" y="415.50">[unknown]</text></g><g><title>[unknown] (96 samples, 14.77%)</title><rect x="39.6923%" y="389" width="14.7692%" height="15" fill="rgb(252,33,42)" fg:x="258" fg:w="96"/><text x="39.9423%" y="399.50">[unknown]</text></g><g><title>[unknown] (80 samples, 12.31%)</title><rect x="42.1538%" y="373" width="12.3077%" height="15" fill="rgb(209,212,41)" fg:x="274" fg:w="80"/><text x="42.4038%" y="383.50">[unknown]</text></g><g><title>[unknown] (69 samples, 10.62%)</title><rect x="43.8462%" y="357" width="10.6154%" height="15" fill="rgb(207,154,6)" fg:x="285" fg:w="69"/><text x="44.0962%" y="367.50">[unknown]</text></g><g><title>[unknown] (62 samples, 9.54%)</title><rect x="44.9231%" y="341" width="9.5385%" height="15" fill="rgb(223,64,47)" fg:x="292" fg:w="62"/><text x="45.1731%" y="351.50">[unknown]</text></g><g><title>[unknown] (47 samples, 7.23%)</title><rect x="47.2308%" y="325" width="7.2308%" height="15" fill="rgb(211,161,38)" fg:x="307" fg:w="47"/><text x="47.4808%" y="335.50">[unknown]</text></g><g><title>[unknown] (35 samples, 5.38%)</title><rect x="49.0769%" y="309" width="5.3846%" height="15" fill="rgb(219,138,40)" fg:x="319" fg:w="35"/><text x="49.3269%" y="319.50">[unknow..</text></g><g><title>[unknown] (17 samples, 2.62%)</title><rect x="51.8462%" y="293" width="2.6154%" height="15" fill="rgb(241,228,46)" fg:x="337" fg:w="17"/><text x="52.0962%" y="303.50">[u..</text></g><g><title>[unknown] (6 samples, 0.92%)</title><rect x="53.5385%" y="277" width="0.9231%" height="15" fill="rgb(223,209,38)" fg:x="348" fg:w="6"/><text x="53.7885%" y="287.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (284 samples, 43.69%)</title><rect x="11.8462%" y="677" width="43.6923%" height="15" fill="rgb(236,164,45)" fg:x="77" fg:w="284"/><text x="12.0962%" y="687.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (284 samples, 43.69%)</title><rect x="11.8462%" y="661" width="43.6923%" height="15" fill="rgb(231,15,5)" fg:x="77" fg:w="284"/><text x="12.0962%" y="671.50">serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::valu..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.08%)</title><rect x="54.4615%" y="645" width="1.0769%" height="15" fill="rgb(252,35,15)" fg:x="354" fg:w="7"/><text x="54.7115%" y="655.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.08%)</title><rect x="54.4615%" y="629" width="1.0769%" height="15" fill="rgb(248,181,18)" fg:x="354" fg:w="7"/><text x="54.7115%" y="639.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 1.08%)</title><rect x="54.4615%" y="613" width="1.0769%" height="15" fill="rgb(233,39,42)" fg:x="354" fg:w="7"/><text x="54.7115%" y="623.50"></text></g><g><title>std::sys::unix::fs::File::read (7 samples, 1.08%)</title><rect x="54.4615%" y="597" width="1.0769%" height="15" fill="rgb(238,110,33)" fg:x="354" fg:w="7"/><text x="54.7115%" y="607.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (7 samples, 1.08%)</title><rect x="54.4615%" y="581" width="1.0769%" height="15" fill="rgb(233,195,10)" fg:x="354" fg:w="7"/><text x="54.7115%" y="591.50"></text></g><g><title>read (7 samples, 1.08%)</title><rect x="54.4615%" y="565" width="1.0769%" height="15" fill="rgb(254,105,3)" fg:x="354" fg:w="7"/><text x="54.7115%" y="575.50"></text></g><g><title>[unknown] (7 samples, 1.08%)</title><rect x="54.4615%" y="549" width="1.0769%" height="15" fill="rgb(221,225,9)" fg:x="354" fg:w="7"/><text x="54.7115%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.92%)</title><rect x="55.5385%" y="629" width="0.9231%" height="15" fill="rgb(224,227,45)" fg:x="361" fg:w="6"/><text x="55.7885%" y="639.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (6 samples, 0.92%)</title><rect x="55.5385%" y="613" width="0.9231%" height="15" fill="rgb(229,198,43)" fg:x="361" fg:w="6"/><text x="55.7885%" y="623.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (6 samples, 0.92%)</title><rect x="55.5385%" y="597" width="0.9231%" height="15" fill="rgb(206,209,35)" fg:x="361" fg:w="6"/><text x="55.7885%" y="607.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (6 samples, 0.92%)</title><rect x="55.5385%" y="581" width="0.9231%" height="15" fill="rgb(245,195,53)" fg:x="361" fg:w="6"/><text x="55.7885%" y="591.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (6 samples, 0.92%)</title><rect x="55.5385%" y="565" width="0.9231%" height="15" fill="rgb(240,92,26)" fg:x="361" fg:w="6"/><text x="55.7885%" y="575.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (6 samples, 0.92%)</title><rect x="55.5385%" y="549" width="0.9231%" height="15" fill="rgb(207,40,23)" fg:x="361" fg:w="6"/><text x="55.7885%" y="559.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.92%)</title><rect x="55.5385%" y="533" width="0.9231%" height="15" fill="rgb(223,111,35)" fg:x="361" fg:w="6"/><text x="55.7885%" y="543.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.92%)</title><rect x="55.5385%" y="517" width="0.9231%" height="15" fill="rgb(229,147,28)" fg:x="361" fg:w="6"/><text x="55.7885%" y="527.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (6 samples, 0.92%)</title><rect x="55.5385%" y="501" width="0.9231%" height="15" fill="rgb(211,29,28)" fg:x="361" fg:w="6"/><text x="55.7885%" y="511.50"></text></g><g><title>std::sys::unix::fs::File::read (6 samples, 0.92%)</title><rect x="55.5385%" y="485" width="0.9231%" height="15" fill="rgb(228,72,33)" fg:x="361" fg:w="6"/><text x="55.7885%" y="495.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (6 samples, 0.92%)</title><rect x="55.5385%" y="469" width="0.9231%" height="15" fill="rgb(205,214,31)" fg:x="361" fg:w="6"/><text x="55.7885%" y="479.50"></text></g><g><title>read (6 samples, 0.92%)</title><rect x="55.5385%" y="453" width="0.9231%" height="15" fill="rgb(224,111,15)" fg:x="361" fg:w="6"/><text x="55.7885%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.92%)</title><rect x="55.5385%" y="437" width="0.9231%" height="15" fill="rgb(253,21,26)" fg:x="361" fg:w="6"/><text x="55.7885%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (412 samples, 63.38%)</title><rect x="11.2308%" y="741" width="63.3846%" height="15" fill="rgb(245,139,43)" fg:x="73" fg:w="412"/><text x="11.4808%" y="751.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (411 samples, 63.23%)</title><rect x="11.3846%" y="725" width="63.2308%" height="15" fill="rgb(252,170,7)" fg:x="74" fg:w="411"/><text x="11.6346%" y="735.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVis..</text></g><g><title>serde::de::SeqAccess::next_element (408 samples, 62.77%)</title><rect x="11.8462%" y="709" width="62.7692%" height="15" fill="rgb(231,118,14)" fg:x="77" fg:w="408"/><text x="12.0962%" y="719.50">serde::de::SeqAccess::next_element</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (408 samples, 62.77%)</title><rect x="11.8462%" y="693" width="62.7692%" height="15" fill="rgb(238,83,0)" fg:x="77" fg:w="408"/><text x="12.0962%" y="703.50">&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (124 samples, 19.08%)</title><rect x="55.5385%" y="677" width="19.0769%" height="15" fill="rgb(221,39,39)" fg:x="361" fg:w="124"/><text x="55.7885%" y="687.50">serde_json::de::Deserializer&lt;R..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (124 samples, 19.08%)</title><rect x="55.5385%" y="661" width="19.0769%" height="15" fill="rgb(222,119,46)" fg:x="361" fg:w="124"/><text x="55.7885%" y="671.50">serde_json::de::Deserializer&lt;R..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (124 samples, 19.08%)</title><rect x="55.5385%" y="645" width="19.0769%" height="15" fill="rgb(222,165,49)" fg:x="361" fg:w="124"/><text x="55.7885%" y="655.50">&lt;serde_json::read::IoRead&lt;R&gt; a..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 18.15%)</title><rect x="56.4615%" y="629" width="18.1538%" height="15" fill="rgb(219,113,52)" fg:x="367" fg:w="118"/><text x="56.7115%" y="639.50">&lt;serde_json::iter::LineColIt..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 18.15%)</title><rect x="56.4615%" y="613" width="18.1538%" height="15" fill="rgb(214,7,15)" fg:x="367" fg:w="118"/><text x="56.7115%" y="623.50">&lt;std::io::Bytes&lt;R&gt; as core::..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (118 samples, 18.15%)</title><rect x="56.4615%" y="597" width="18.1538%" height="15" fill="rgb(235,32,4)" fg:x="367" fg:w="118"/><text x="56.7115%" y="607.50">&lt;std::fs::File as std::io::R..</text></g><g><title>std::sys::unix::fs::File::read (118 samples, 18.15%)</title><rect x="56.4615%" y="581" width="18.1538%" height="15" fill="rgb(238,90,54)" fg:x="367" fg:w="118"/><text x="56.7115%" y="591.50">std::sys::unix::fs::File::re..</text></g><g><title>std::sys::unix::fd::FileDesc::read (118 samples, 18.15%)</title><rect x="56.4615%" y="565" width="18.1538%" height="15" fill="rgb(213,208,19)" fg:x="367" fg:w="118"/><text x="56.7115%" y="575.50">std::sys::unix::fd::FileDesc..</text></g><g><title>read (118 samples, 18.15%)</title><rect x="56.4615%" y="549" width="18.1538%" height="15" fill="rgb(233,156,4)" fg:x="367" fg:w="118"/><text x="56.7115%" y="559.50">read</text></g><g><title>[unknown] (118 samples, 18.15%)</title><rect x="56.4615%" y="533" width="18.1538%" height="15" fill="rgb(207,194,5)" fg:x="367" fg:w="118"/><text x="56.7115%" y="543.50">[unknown]</text></g><g><title>[unknown] (83 samples, 12.77%)</title><rect x="61.8462%" y="517" width="12.7692%" height="15" fill="rgb(206,111,30)" fg:x="402" fg:w="83"/><text x="62.0962%" y="527.50">[unknown]</text></g><g><title>[unknown] (78 samples, 12.00%)</title><rect x="62.6154%" y="501" width="12.0000%" height="15" fill="rgb(243,70,54)" fg:x="407" fg:w="78"/><text x="62.8654%" y="511.50">[unknown]</text></g><g><title>[unknown] (57 samples, 8.77%)</title><rect x="65.8462%" y="485" width="8.7692%" height="15" fill="rgb(242,28,8)" fg:x="428" fg:w="57"/><text x="66.0962%" y="495.50">[unknown]</text></g><g><title>[unknown] (52 samples, 8.00%)</title><rect x="66.6154%" y="469" width="8.0000%" height="15" fill="rgb(219,106,18)" fg:x="433" fg:w="52"/><text x="66.8654%" y="479.50">[unknown]</text></g><g><title>[unknown] (46 samples, 7.08%)</title><rect x="67.5385%" y="453" width="7.0769%" height="15" fill="rgb(244,222,10)" fg:x="439" fg:w="46"/><text x="67.7885%" y="463.50">[unknown]</text></g><g><title>[unknown] (42 samples, 6.46%)</title><rect x="68.1538%" y="437" width="6.4615%" height="15" fill="rgb(236,179,52)" fg:x="443" fg:w="42"/><text x="68.4038%" y="447.50">[unknown]</text></g><g><title>[unknown] (36 samples, 5.54%)</title><rect x="69.0769%" y="421" width="5.5385%" height="15" fill="rgb(213,23,39)" fg:x="449" fg:w="36"/><text x="69.3269%" y="431.50">[unknow..</text></g><g><title>[unknown] (27 samples, 4.15%)</title><rect x="70.4615%" y="405" width="4.1538%" height="15" fill="rgb(238,48,10)" fg:x="458" fg:w="27"/><text x="70.7115%" y="415.50">[unkn..</text></g><g><title>[unknown] (20 samples, 3.08%)</title><rect x="71.5385%" y="389" width="3.0769%" height="15" fill="rgb(251,196,23)" fg:x="465" fg:w="20"/><text x="71.7885%" y="399.50">[un..</text></g><g><title>[unknown] (8 samples, 1.23%)</title><rect x="73.3846%" y="373" width="1.2308%" height="15" fill="rgb(250,152,24)" fg:x="477" fg:w="8"/><text x="73.6346%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.46%)</title><rect x="74.1538%" y="357" width="0.4615%" height="15" fill="rgb(209,150,17)" fg:x="482" fg:w="3"/><text x="74.4038%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (418 samples, 64.31%)</title><rect x="11.2308%" y="773" width="64.3077%" height="15" fill="rgb(234,202,34)" fg:x="73" fg:w="418"/><text x="11.4808%" y="783.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (418 samples, 64.31%)</title><rect x="11.2308%" y="757" width="64.3077%" height="15" fill="rgb(253,148,53)" fg:x="73" fg:w="418"/><text x="11.4808%" y="767.50">serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.92%)</title><rect x="74.6154%" y="741" width="0.9231%" height="15" fill="rgb(218,129,16)" fg:x="485" fg:w="6"/><text x="74.8654%" y="751.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.92%)</title><rect x="74.6154%" y="725" width="0.9231%" height="15" fill="rgb(216,85,19)" fg:x="485" fg:w="6"/><text x="74.8654%" y="735.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (6 samples, 0.92%)</title><rect x="74.6154%" y="709" width="0.9231%" height="15" fill="rgb(235,228,7)" fg:x="485" fg:w="6"/><text x="74.8654%" y="719.50"></text></g><g><title>std::sys::unix::fs::File::read (6 samples, 0.92%)</title><rect x="74.6154%" y="693" width="0.9231%" height="15" fill="rgb(245,175,0)" fg:x="485" fg:w="6"/><text x="74.8654%" y="703.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (6 samples, 0.92%)</title><rect x="74.6154%" y="677" width="0.9231%" height="15" fill="rgb(208,168,36)" fg:x="485" fg:w="6"/><text x="74.8654%" y="687.50"></text></g><g><title>read (6 samples, 0.92%)</title><rect x="74.6154%" y="661" width="0.9231%" height="15" fill="rgb(246,171,24)" fg:x="485" fg:w="6"/><text x="74.8654%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.92%)</title><rect x="74.6154%" y="645" width="0.9231%" height="15" fill="rgb(215,142,24)" fg:x="485" fg:w="6"/><text x="74.8654%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.77%)</title><rect x="75.5385%" y="725" width="0.7692%" height="15" fill="rgb(250,187,7)" fg:x="491" fg:w="5"/><text x="75.7885%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.77%)</title><rect x="75.5385%" y="709" width="0.7692%" height="15" fill="rgb(228,66,33)" fg:x="491" fg:w="5"/><text x="75.7885%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.77%)</title><rect x="75.5385%" y="693" width="0.7692%" height="15" fill="rgb(234,215,21)" fg:x="491" fg:w="5"/><text x="75.7885%" y="703.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.77%)</title><rect x="75.5385%" y="677" width="0.7692%" height="15" fill="rgb(222,191,20)" fg:x="491" fg:w="5"/><text x="75.7885%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.77%)</title><rect x="75.5385%" y="661" width="0.7692%" height="15" fill="rgb(245,79,54)" fg:x="491" fg:w="5"/><text x="75.7885%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.77%)</title><rect x="75.5385%" y="645" width="0.7692%" height="15" fill="rgb(240,10,37)" fg:x="491" fg:w="5"/><text x="75.7885%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.77%)</title><rect x="75.5385%" y="629" width="0.7692%" height="15" fill="rgb(214,192,32)" fg:x="491" fg:w="5"/><text x="75.7885%" y="639.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (5 samples, 0.77%)</title><rect x="75.5385%" y="613" width="0.7692%" height="15" fill="rgb(209,36,54)" fg:x="491" fg:w="5"/><text x="75.7885%" y="623.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (5 samples, 0.77%)</title><rect x="75.5385%" y="597" width="0.7692%" height="15" fill="rgb(220,10,11)" fg:x="491" fg:w="5"/><text x="75.7885%" y="607.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (5 samples, 0.77%)</title><rect x="75.5385%" y="581" width="0.7692%" height="15" fill="rgb(221,106,17)" fg:x="491" fg:w="5"/><text x="75.7885%" y="591.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (5 samples, 0.77%)</title><rect x="75.5385%" y="565" width="0.7692%" height="15" fill="rgb(251,142,44)" fg:x="491" fg:w="5"/><text x="75.7885%" y="575.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (5 samples, 0.77%)</title><rect x="75.5385%" y="549" width="0.7692%" height="15" fill="rgb(238,13,15)" fg:x="491" fg:w="5"/><text x="75.7885%" y="559.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.77%)</title><rect x="75.5385%" y="533" width="0.7692%" height="15" fill="rgb(208,107,27)" fg:x="491" fg:w="5"/><text x="75.7885%" y="543.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.77%)</title><rect x="75.5385%" y="517" width="0.7692%" height="15" fill="rgb(205,136,37)" fg:x="491" fg:w="5"/><text x="75.7885%" y="527.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (5 samples, 0.77%)</title><rect x="75.5385%" y="501" width="0.7692%" height="15" fill="rgb(250,205,27)" fg:x="491" fg:w="5"/><text x="75.7885%" y="511.50"></text></g><g><title>std::sys::unix::fs::File::read (5 samples, 0.77%)</title><rect x="75.5385%" y="485" width="0.7692%" height="15" fill="rgb(210,80,43)" fg:x="491" fg:w="5"/><text x="75.7885%" y="495.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (5 samples, 0.77%)</title><rect x="75.5385%" y="469" width="0.7692%" height="15" fill="rgb(247,160,36)" fg:x="491" fg:w="5"/><text x="75.7885%" y="479.50"></text></g><g><title>read (5 samples, 0.77%)</title><rect x="75.5385%" y="453" width="0.7692%" height="15" fill="rgb(234,13,49)" fg:x="491" fg:w="5"/><text x="75.7885%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="75.5385%" y="437" width="0.7692%" height="15" fill="rgb(234,122,0)" fg:x="491" fg:w="5"/><text x="75.7885%" y="447.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (557 samples, 85.69%)</title><rect x="10.9231%" y="869" width="85.6923%" height="15" fill="rgb(207,146,38)" fg:x="71" fg:w="557"/><text x="11.1731%" y="879.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (557 samples, 85.69%)</title><rect x="10.9231%" y="853" width="85.6923%" height="15" fill="rgb(207,177,25)" fg:x="71" fg:w="557"/><text x="11.1731%" y="863.50">serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (557 samples, 85.69%)</title><rect x="10.9231%" y="837" width="85.6923%" height="15" fill="rgb(211,178,42)" fg:x="71" fg:w="557"/><text x="11.1731%" y="847.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (557 samples, 85.69%)</title><rect x="10.9231%" y="821" width="85.6923%" height="15" fill="rgb(230,69,54)" fg:x="71" fg:w="557"/><text x="11.1731%" y="831.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq</text></g><g><title>serde::de::SeqAccess::next_element (556 samples, 85.54%)</title><rect x="11.0769%" y="805" width="85.5385%" height="15" fill="rgb(214,135,41)" fg:x="72" fg:w="556"/><text x="11.3269%" y="815.50">serde::de::SeqAccess::next_element</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (556 samples, 85.54%)</title><rect x="11.0769%" y="789" width="85.5385%" height="15" fill="rgb(237,67,25)" fg:x="72" fg:w="556"/><text x="11.3269%" y="799.50">&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (137 samples, 21.08%)</title><rect x="75.5385%" y="773" width="21.0769%" height="15" fill="rgb(222,189,50)" fg:x="491" fg:w="137"/><text x="75.7885%" y="783.50">serde_json::de::Deserializer&lt;R&gt;::..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (137 samples, 21.08%)</title><rect x="75.5385%" y="757" width="21.0769%" height="15" fill="rgb(245,148,34)" fg:x="491" fg:w="137"/><text x="75.7885%" y="767.50">serde_json::de::Deserializer&lt;R&gt;::..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (137 samples, 21.08%)</title><rect x="75.5385%" y="741" width="21.0769%" height="15" fill="rgb(222,29,6)" fg:x="491" fg:w="137"/><text x="75.7885%" y="751.50">&lt;serde_json::read::IoRead&lt;R&gt; as s..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 20.31%)</title><rect x="76.3077%" y="725" width="20.3077%" height="15" fill="rgb(221,189,43)" fg:x="496" fg:w="132"/><text x="76.5577%" y="735.50">&lt;serde_json::iter::LineColIterat..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 20.31%)</title><rect x="76.3077%" y="709" width="20.3077%" height="15" fill="rgb(207,36,27)" fg:x="496" fg:w="132"/><text x="76.5577%" y="719.50">&lt;std::io::Bytes&lt;R&gt; as core::iter..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (132 samples, 20.31%)</title><rect x="76.3077%" y="693" width="20.3077%" height="15" fill="rgb(217,90,24)" fg:x="496" fg:w="132"/><text x="76.5577%" y="703.50">&lt;std::fs::File as std::io::Read&gt;..</text></g><g><title>std::sys::unix::fs::File::read (132 samples, 20.31%)</title><rect x="76.3077%" y="677" width="20.3077%" height="15" fill="rgb(224,66,35)" fg:x="496" fg:w="132"/><text x="76.5577%" y="687.50">std::sys::unix::fs::File::read</text></g><g><title>std::sys::unix::fd::FileDesc::read (132 samples, 20.31%)</title><rect x="76.3077%" y="661" width="20.3077%" height="15" fill="rgb(221,13,50)" fg:x="496" fg:w="132"/><text x="76.5577%" y="671.50">std::sys::unix::fd::FileDesc::re..</text></g><g><title>read (132 samples, 20.31%)</title><rect x="76.3077%" y="645" width="20.3077%" height="15" fill="rgb(236,68,49)" fg:x="496" fg:w="132"/><text x="76.5577%" y="655.50">read</text></g><g><title>[unknown] (130 samples, 20.00%)</title><rect x="76.6154%" y="629" width="20.0000%" height="15" fill="rgb(229,146,28)" fg:x="498" fg:w="130"/><text x="76.8654%" y="639.50">[unknown]</text></g><g><title>[unknown] (88 samples, 13.54%)</title><rect x="83.0769%" y="613" width="13.5385%" height="15" fill="rgb(225,31,38)" fg:x="540" fg:w="88"/><text x="83.3269%" y="623.50">[unknown]</text></g><g><title>[unknown] (88 samples, 13.54%)</title><rect x="83.0769%" y="597" width="13.5385%" height="15" fill="rgb(250,208,3)" fg:x="540" fg:w="88"/><text x="83.3269%" y="607.50">[unknown]</text></g><g><title>[unknown] (61 samples, 9.38%)</title><rect x="87.2308%" y="581" width="9.3846%" height="15" fill="rgb(246,54,23)" fg:x="567" fg:w="61"/><text x="87.4808%" y="591.50">[unknown]</text></g><g><title>[unknown] (61 samples, 9.38%)</title><rect x="87.2308%" y="565" width="9.3846%" height="15" fill="rgb(243,76,11)" fg:x="567" fg:w="61"/><text x="87.4808%" y="575.50">[unknown]</text></g><g><title>[unknown] (45 samples, 6.92%)</title><rect x="89.6923%" y="549" width="6.9231%" height="15" fill="rgb(245,21,50)" fg:x="583" fg:w="45"/><text x="89.9423%" y="559.50">[unknown]</text></g><g><title>[unknown] (39 samples, 6.00%)</title><rect x="90.6154%" y="533" width="6.0000%" height="15" fill="rgb(228,9,43)" fg:x="589" fg:w="39"/><text x="90.8654%" y="543.50">[unknown]</text></g><g><title>[unknown] (28 samples, 4.31%)</title><rect x="92.3077%" y="517" width="4.3077%" height="15" fill="rgb(208,100,47)" fg:x="600" fg:w="28"/><text x="92.5577%" y="527.50">[unkn..</text></g><g><title>[unknown] (21 samples, 3.23%)</title><rect x="93.3846%" y="501" width="3.2308%" height="15" fill="rgb(232,26,8)" fg:x="607" fg:w="21"/><text x="93.6346%" y="511.50">[un..</text></g><g><title>[unknown] (17 samples, 2.62%)</title><rect x="94.0000%" y="485" width="2.6154%" height="15" fill="rgb(216,166,38)" fg:x="611" fg:w="17"/><text x="94.2500%" y="495.50">[u..</text></g><g><title>[unknown] (6 samples, 0.92%)</title><rect x="95.6923%" y="469" width="0.9231%" height="15" fill="rgb(251,202,51)" fg:x="622" fg:w="6"/><text x="95.9423%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.62%)</title><rect x="96.0000%" y="453" width="0.6154%" height="15" fill="rgb(254,216,34)" fg:x="624" fg:w="4"/><text x="96.2500%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.4615%" y="437" width="0.1538%" height="15" fill="rgb(251,32,27)" fg:x="627" fg:w="1"/><text x="96.7115%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.31%)</title><rect x="96.6154%" y="821" width="0.3077%" height="15" fill="rgb(208,127,28)" fg:x="628" fg:w="2"/><text x="96.8654%" y="831.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.31%)</title><rect x="96.6154%" y="805" width="0.3077%" height="15" fill="rgb(224,137,22)" fg:x="628" fg:w="2"/><text x="96.8654%" y="815.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.31%)</title><rect x="96.6154%" y="789" width="0.3077%" height="15" fill="rgb(254,70,32)" fg:x="628" fg:w="2"/><text x="96.8654%" y="799.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.31%)</title><rect x="96.6154%" y="773" width="0.3077%" height="15" fill="rgb(229,75,37)" fg:x="628" fg:w="2"/><text x="96.8654%" y="783.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.31%)</title><rect x="96.6154%" y="757" width="0.3077%" height="15" fill="rgb(252,64,23)" fg:x="628" fg:w="2"/><text x="96.8654%" y="767.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.31%)</title><rect x="96.6154%" y="741" width="0.3077%" height="15" fill="rgb(232,162,48)" fg:x="628" fg:w="2"/><text x="96.8654%" y="751.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (2 samples, 0.31%)</title><rect x="96.6154%" y="725" width="0.3077%" height="15" fill="rgb(246,160,12)" fg:x="628" fg:w="2"/><text x="96.8654%" y="735.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.31%)</title><rect x="96.6154%" y="709" width="0.3077%" height="15" fill="rgb(247,166,0)" fg:x="628" fg:w="2"/><text x="96.8654%" y="719.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.31%)</title><rect x="96.6154%" y="693" width="0.3077%" height="15" fill="rgb(249,219,21)" fg:x="628" fg:w="2"/><text x="96.8654%" y="703.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.31%)</title><rect x="96.6154%" y="677" width="0.3077%" height="15" fill="rgb(205,209,3)" fg:x="628" fg:w="2"/><text x="96.8654%" y="687.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 0.31%)</title><rect x="96.6154%" y="661" width="0.3077%" height="15" fill="rgb(243,44,1)" fg:x="628" fg:w="2"/><text x="96.8654%" y="671.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 0.31%)</title><rect x="96.6154%" y="645" width="0.3077%" height="15" fill="rgb(206,159,16)" fg:x="628" fg:w="2"/><text x="96.8654%" y="655.50"></text></g><g><title>read (2 samples, 0.31%)</title><rect x="96.6154%" y="629" width="0.3077%" height="15" fill="rgb(244,77,30)" fg:x="628" fg:w="2"/><text x="96.8654%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="96.6154%" y="613" width="0.3077%" height="15" fill="rgb(218,69,12)" fg:x="628" fg:w="2"/><text x="96.8654%" y="623.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize (581 samples, 89.38%)</title><rect x="8.4615%" y="1013" width="89.3846%" height="15" fill="rgb(212,87,7)" fg:x="55" fg:w="581"/><text x="8.7115%" y="1023.50">&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (581 samples, 89.38%)</title><rect x="8.4615%" y="997" width="89.3846%" height="15" fill="rgb(245,114,25)" fg:x="55" fg:w="581"/><text x="8.7115%" y="1007.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map</text></g><g><title>&lt;&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize::Visitor as serde::de::Visitor&gt;::visit_map (581 samples, 89.38%)</title><rect x="8.4615%" y="981" width="89.3846%" height="15" fill="rgb(210,61,42)" fg:x="55" fg:w="581"/><text x="8.7115%" y="991.50">&lt;&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize::Visitor as serde::de::Visitor&gt;::visit..</text></g><g><title>serde::de::MapAccess::next_entry (581 samples, 89.38%)</title><rect x="8.4615%" y="965" width="89.3846%" height="15" fill="rgb(211,52,33)" fg:x="55" fg:w="581"/><text x="8.7115%" y="975.50">serde::de::MapAccess::next_entry</text></g><g><title>serde::de::MapAccess::next_entry_seed (581 samples, 89.38%)</title><rect x="8.4615%" y="949" width="89.3846%" height="15" fill="rgb(234,58,33)" fg:x="55" fg:w="581"/><text x="8.7115%" y="959.50">serde::de::MapAccess::next_entry_seed</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (581 samples, 89.38%)</title><rect x="8.4615%" y="933" width="89.3846%" height="15" fill="rgb(220,115,36)" fg:x="55" fg:w="581"/><text x="8.7115%" y="943.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (565 samples, 86.92%)</title><rect x="10.9231%" y="917" width="86.9231%" height="15" fill="rgb(243,153,54)" fg:x="71" fg:w="565"/><text x="11.1731%" y="927.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq</text></g><g><title>serde::de::SeqAccess::next_element (565 samples, 86.92%)</title><rect x="10.9231%" y="901" width="86.9231%" height="15" fill="rgb(251,47,18)" fg:x="71" fg:w="565"/><text x="11.1731%" y="911.50">serde::de::SeqAccess::next_element</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (565 samples, 86.92%)</title><rect x="10.9231%" y="885" width="86.9231%" height="15" fill="rgb(242,102,42)" fg:x="71" fg:w="565"/><text x="11.1731%" y="895.50">&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (8 samples, 1.23%)</title><rect x="96.6154%" y="869" width="1.2308%" height="15" fill="rgb(234,31,38)" fg:x="628" fg:w="8"/><text x="96.8654%" y="879.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (8 samples, 1.23%)</title><rect x="96.6154%" y="853" width="1.2308%" height="15" fill="rgb(221,117,51)" fg:x="628" fg:w="8"/><text x="96.8654%" y="863.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (8 samples, 1.23%)</title><rect x="96.6154%" y="837" width="1.2308%" height="15" fill="rgb(212,20,18)" fg:x="628" fg:w="8"/><text x="96.8654%" y="847.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.92%)</title><rect x="96.9231%" y="821" width="0.9231%" height="15" fill="rgb(245,133,36)" fg:x="630" fg:w="6"/><text x="97.1731%" y="831.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.92%)</title><rect x="96.9231%" y="805" width="0.9231%" height="15" fill="rgb(212,6,19)" fg:x="630" fg:w="6"/><text x="97.1731%" y="815.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (5 samples, 0.77%)</title><rect x="97.0769%" y="789" width="0.7692%" height="15" fill="rgb(218,1,36)" fg:x="631" fg:w="5"/><text x="97.3269%" y="799.50"></text></g><g><title>std::sys::unix::fs::File::read (5 samples, 0.77%)</title><rect x="97.0769%" y="773" width="0.7692%" height="15" fill="rgb(246,84,54)" fg:x="631" fg:w="5"/><text x="97.3269%" y="783.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (5 samples, 0.77%)</title><rect x="97.0769%" y="757" width="0.7692%" height="15" fill="rgb(242,110,6)" fg:x="631" fg:w="5"/><text x="97.3269%" y="767.50"></text></g><g><title>read (5 samples, 0.77%)</title><rect x="97.0769%" y="741" width="0.7692%" height="15" fill="rgb(214,47,5)" fg:x="631" fg:w="5"/><text x="97.3269%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.77%)</title><rect x="97.0769%" y="725" width="0.7692%" height="15" fill="rgb(218,159,25)" fg:x="631" fg:w="5"/><text x="97.3269%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.62%)</title><rect x="97.2308%" y="709" width="0.6154%" height="15" fill="rgb(215,211,28)" fg:x="632" fg:w="4"/><text x="97.4808%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.46%)</title><rect x="97.3846%" y="693" width="0.4615%" height="15" fill="rgb(238,59,32)" fg:x="633" fg:w="3"/><text x="97.6346%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="97.5385%" y="677" width="0.3077%" height="15" fill="rgb(226,82,3)" fg:x="634" fg:w="2"/><text x="97.7885%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.31%)</title><rect x="97.5385%" y="661" width="0.3077%" height="15" fill="rgb(240,164,32)" fg:x="634" fg:w="2"/><text x="97.7885%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="97.6923%" y="645" width="0.1538%" height="15" fill="rgb(232,46,7)" fg:x="635" fg:w="1"/><text x="97.9423%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="97.6923%" y="629" width="0.1538%" height="15" fill="rgb(229,129,53)" fg:x="635" fg:w="1"/><text x="97.9423%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="97.6923%" y="613" width="0.1538%" height="15" fill="rgb(234,188,29)" fg:x="635" fg:w="1"/><text x="97.9423%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="97.6923%" y="597" width="0.1538%" height="15" fill="rgb(246,141,4)" fg:x="635" fg:w="1"/><text x="97.9423%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="97.6923%" y="581" width="0.1538%" height="15" fill="rgb(229,23,39)" fg:x="635" fg:w="1"/><text x="97.9423%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.31%)</title><rect x="97.8462%" y="853" width="0.3077%" height="15" fill="rgb(206,12,3)" fg:x="636" fg:w="2"/><text x="98.0962%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.15%)</title><rect x="98.0000%" y="837" width="0.1538%" height="15" fill="rgb(252,226,20)" fg:x="637" fg:w="1"/><text x="98.2500%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="98.0000%" y="821" width="0.1538%" height="15" fill="rgb(216,123,35)" fg:x="637" fg:w="1"/><text x="98.2500%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.15%)</title><rect x="98.0000%" y="805" width="0.1538%" height="15" fill="rgb(212,68,40)" fg:x="637" fg:w="1"/><text x="98.2500%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.15%)</title><rect x="98.0000%" y="789" width="0.1538%" height="15" fill="rgb(254,125,32)" fg:x="637" fg:w="1"/><text x="98.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.46%)</title><rect x="97.8462%" y="981" width="0.4615%" height="15" fill="rgb(253,97,22)" fg:x="636" fg:w="3"/><text x="98.0962%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3 samples, 0.46%)</title><rect x="97.8462%" y="965" width="0.4615%" height="15" fill="rgb(241,101,14)" fg:x="636" fg:w="3"/><text x="98.0962%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.46%)</title><rect x="97.8462%" y="949" width="0.4615%" height="15" fill="rgb(238,103,29)" fg:x="636" fg:w="3"/><text x="98.0962%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.46%)</title><rect x="97.8462%" y="933" width="0.4615%" height="15" fill="rgb(233,195,47)" fg:x="636" fg:w="3"/><text x="98.0962%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.46%)</title><rect x="97.8462%" y="917" width="0.4615%" height="15" fill="rgb(246,218,30)" fg:x="636" fg:w="3"/><text x="98.0962%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3 samples, 0.46%)</title><rect x="97.8462%" y="901" width="0.4615%" height="15" fill="rgb(219,145,47)" fg:x="636" fg:w="3"/><text x="98.0962%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.46%)</title><rect x="97.8462%" y="885" width="0.4615%" height="15" fill="rgb(243,12,26)" fg:x="636" fg:w="3"/><text x="98.0962%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.46%)</title><rect x="97.8462%" y="869" width="0.4615%" height="15" fill="rgb(214,87,16)" fg:x="636" fg:w="3"/><text x="98.0962%" y="879.50"></text></g><g><title>free (1 samples, 0.15%)</title><rect x="98.1538%" y="853" width="0.1538%" height="15" fill="rgb(208,99,42)" fg:x="638" fg:w="1"/><text x="98.4038%" y="863.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="98.1538%" y="837" width="0.1538%" height="15" fill="rgb(253,99,2)" fg:x="638" fg:w="1"/><text x="98.4038%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.15%)</title><rect x="98.3077%" y="949" width="0.1538%" height="15" fill="rgb(220,168,23)" fg:x="639" fg:w="1"/><text x="98.5577%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="98.3077%" y="933" width="0.1538%" height="15" fill="rgb(242,38,24)" fg:x="639" fg:w="1"/><text x="98.5577%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="98.3077%" y="917" width="0.1538%" height="15" fill="rgb(225,182,9)" fg:x="639" fg:w="1"/><text x="98.5577%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.15%)</title><rect x="98.3077%" y="901" width="0.1538%" height="15" fill="rgb(243,178,37)" fg:x="639" fg:w="1"/><text x="98.5577%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.15%)</title><rect x="98.3077%" y="885" width="0.1538%" height="15" fill="rgb(232,139,19)" fg:x="639" fg:w="1"/><text x="98.5577%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="98.3077%" y="869" width="0.1538%" height="15" fill="rgb(225,201,24)" fg:x="639" fg:w="1"/><text x="98.5577%" y="879.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.15%)</title><rect x="98.3077%" y="853" width="0.1538%" height="15" fill="rgb(221,47,46)" fg:x="639" fg:w="1"/><text x="98.5577%" y="863.50"></text></g><g><title>__rdl_alloc (1 samples, 0.15%)</title><rect x="98.3077%" y="837" width="0.1538%" height="15" fill="rgb(249,23,13)" fg:x="639" fg:w="1"/><text x="98.5577%" y="847.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.15%)</title><rect x="98.3077%" y="821" width="0.1538%" height="15" fill="rgb(219,9,5)" fg:x="639" fg:w="1"/><text x="98.5577%" y="831.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="98.3077%" y="805" width="0.1538%" height="15" fill="rgb(254,171,16)" fg:x="639" fg:w="1"/><text x="98.5577%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="98.3077%" y="789" width="0.1538%" height="15" fill="rgb(230,171,20)" fg:x="639" fg:w="1"/><text x="98.5577%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="98.3077%" y="773" width="0.1538%" height="15" fill="rgb(210,71,41)" fg:x="639" fg:w="1"/><text x="98.5577%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="98.3077%" y="757" width="0.1538%" height="15" fill="rgb(206,173,20)" fg:x="639" fg:w="1"/><text x="98.5577%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="98.3077%" y="741" width="0.1538%" height="15" fill="rgb(233,88,34)" fg:x="639" fg:w="1"/><text x="98.5577%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="98.3077%" y="725" width="0.1538%" height="15" fill="rgb(223,209,46)" fg:x="639" fg:w="1"/><text x="98.5577%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="98.3077%" y="709" width="0.1538%" height="15" fill="rgb(250,43,18)" fg:x="639" fg:w="1"/><text x="98.5577%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="98.3077%" y="693" width="0.1538%" height="15" fill="rgb(208,13,10)" fg:x="639" fg:w="1"/><text x="98.5577%" y="703.50"></text></g><g><title>topojson::util::get_arcs_position (7 samples, 1.08%)</title><rect x="97.8462%" y="997" width="1.0769%" height="15" fill="rgb(212,200,36)" fg:x="636" fg:w="7"/><text x="98.0962%" y="1007.50"></text></g><g><title>topojson::util::json_to_arc_positions (4 samples, 0.62%)</title><rect x="98.3077%" y="981" width="0.6154%" height="15" fill="rgb(225,90,30)" fg:x="639" fg:w="4"/><text x="98.5577%" y="991.50"></text></g><g><title>topojson::util::json_to_1d_positions (4 samples, 0.62%)</title><rect x="98.3077%" y="965" width="0.6154%" height="15" fill="rgb(236,182,39)" fg:x="639" fg:w="4"/><text x="98.5577%" y="975.50"></text></g><g><title>topojson::util::json_to_position (3 samples, 0.46%)</title><rect x="98.4615%" y="949" width="0.4615%" height="15" fill="rgb(212,144,35)" fg:x="640" fg:w="3"/><text x="98.7115%" y="959.50"></text></g><g><title>topojson::util::expect_f64 (2 samples, 0.31%)</title><rect x="98.6154%" y="933" width="0.3077%" height="15" fill="rgb(228,63,44)" fg:x="641" fg:w="2"/><text x="98.8654%" y="943.50"></text></g><g><title>serde_json::value::Value::as_f64 (2 samples, 0.31%)</title><rect x="98.6154%" y="917" width="0.3077%" height="15" fill="rgb(228,109,6)" fg:x="641" fg:w="2"/><text x="98.8654%" y="927.50"></text></g><g><title>profile_target::world (589 samples, 90.62%)</title><rect x="8.4615%" y="1077" width="90.6154%" height="15" fill="rgb(238,117,24)" fg:x="55" fg:w="589"/><text x="8.7115%" y="1087.50">profile_target::world</text></g><g><title>serde_json::de::from_reader (589 samples, 90.62%)</title><rect x="8.4615%" y="1061" width="90.6154%" height="15" fill="rgb(242,26,26)" fg:x="55" fg:w="589"/><text x="8.7115%" y="1071.50">serde_json::de::from_reader</text></g><g><title>serde_json::de::from_trait (589 samples, 90.62%)</title><rect x="8.4615%" y="1045" width="90.6154%" height="15" fill="rgb(221,92,48)" fg:x="55" fg:w="589"/><text x="8.7115%" y="1055.50">serde_json::de::from_trait</text></g><g><title>&lt;topojson::topology::Topology as serde::de::Deserialize&gt;::deserialize (589 samples, 90.62%)</title><rect x="8.4615%" y="1029" width="90.6154%" height="15" fill="rgb(209,209,32)" fg:x="55" fg:w="589"/><text x="8.7115%" y="1039.50">&lt;topojson::topology::Topology as serde::de::Deserialize&gt;::deserialize</text></g><g><title>topojson::topology::Topology::from_json_object (8 samples, 1.23%)</title><rect x="97.8462%" y="1013" width="1.2308%" height="15" fill="rgb(221,70,22)" fg:x="636" fg:w="8"/><text x="98.0962%" y="1023.50"></text></g><g><title>topojson::util::get_objects (1 samples, 0.15%)</title><rect x="98.9231%" y="997" width="0.1538%" height="15" fill="rgb(248,145,5)" fg:x="643" fg:w="1"/><text x="99.1731%" y="1007.50"></text></g><g><title>topojson::geometry::Geometry::from_json_object (1 samples, 0.15%)</title><rect x="98.9231%" y="981" width="0.1538%" height="15" fill="rgb(226,116,26)" fg:x="643" fg:w="1"/><text x="99.1731%" y="991.50"></text></g><g><title>topojson::util::get_geometries (1 samples, 0.15%)</title><rect x="98.9231%" y="965" width="0.1538%" height="15" fill="rgb(244,5,17)" fg:x="643" fg:w="1"/><text x="99.1731%" y="975.50"></text></g><g><title>topojson::geometry::Geometry::from_json_object (1 samples, 0.15%)</title><rect x="98.9231%" y="949" width="0.1538%" height="15" fill="rgb(252,159,33)" fg:x="643" fg:w="1"/><text x="99.1731%" y="959.50"></text></g><g><title>topojson::util::expect_type (1 samples, 0.15%)</title><rect x="98.9231%" y="933" width="0.1538%" height="15" fill="rgb(206,71,0)" fg:x="643" fg:w="1"/><text x="99.1731%" y="943.50"></text></g><g><title>topojson::util::expect_property (1 samples, 0.15%)</title><rect x="98.9231%" y="917" width="0.1538%" height="15" fill="rgb(233,118,54)" fg:x="643" fg:w="1"/><text x="99.1731%" y="927.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::remove (1 samples, 0.15%)</title><rect x="98.9231%" y="901" width="0.1538%" height="15" fill="rgb(234,83,48)" fg:x="643" fg:w="1"/><text x="99.1731%" y="911.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1 samples, 0.15%)</title><rect x="98.9231%" y="885" width="0.1538%" height="15" fill="rgb(228,3,54)" fg:x="643" fg:w="1"/><text x="99.1731%" y="895.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (1 samples, 0.15%)</title><rect x="98.9231%" y="869" width="0.1538%" height="15" fill="rgb(226,155,13)" fg:x="643" fg:w="1"/><text x="99.1731%" y="879.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_entry (1 samples, 0.15%)</title><rect x="98.9231%" y="853" width="0.1538%" height="15" fill="rgb(241,28,37)" fg:x="643" fg:w="1"/><text x="99.1731%" y="863.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (1 samples, 0.15%)</title><rect x="98.9231%" y="837" width="0.1538%" height="15" fill="rgb(233,93,10)" fg:x="643" fg:w="1"/><text x="99.1731%" y="847.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (1 samples, 0.15%)</title><rect x="98.9231%" y="821" width="0.1538%" height="15" fill="rgb(225,113,19)" fg:x="643" fg:w="1"/><text x="99.1731%" y="831.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (1 samples, 0.15%)</title><rect x="98.9231%" y="805" width="0.1538%" height="15" fill="rgb(241,2,18)" fg:x="643" fg:w="1"/><text x="99.1731%" y="815.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (1 samples, 0.15%)</title><rect x="98.9231%" y="789" width="0.1538%" height="15" fill="rgb(228,207,21)" fg:x="643" fg:w="1"/><text x="99.1731%" y="799.50"></text></g><g><title>alloc::collections::btree::node::slice_remove (1 samples, 0.15%)</title><rect x="98.9231%" y="773" width="0.1538%" height="15" fill="rgb(213,211,35)" fg:x="643" fg:w="1"/><text x="99.1731%" y="783.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (1 samples, 0.15%)</title><rect x="98.9231%" y="757" width="0.1538%" height="15" fill="rgb(209,83,10)" fg:x="643" fg:w="1"/><text x="99.1731%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.15%)</title><rect x="98.9231%" y="741" width="0.1538%" height="15" fill="rgb(209,164,1)" fg:x="643" fg:w="1"/><text x="99.1731%" y="751.50"></text></g><g><title>core::ptr::read (1 samples, 0.15%)</title><rect x="98.9231%" y="725" width="0.1538%" height="15" fill="rgb(213,184,43)" fg:x="643" fg:w="1"/><text x="99.1731%" y="735.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.15%)</title><rect x="98.9231%" y="709" width="0.1538%" height="15" fill="rgb(231,61,34)" fg:x="643" fg:w="1"/><text x="99.1731%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="99.0769%" y="1013" width="0.1538%" height="15" fill="rgb(235,75,3)" fg:x="644" fg:w="1"/><text x="99.3269%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.15%)</title><rect x="99.0769%" y="997" width="0.1538%" height="15" fill="rgb(220,106,47)" fg:x="644" fg:w="1"/><text x="99.3269%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.15%)</title><rect x="99.0769%" y="981" width="0.1538%" height="15" fill="rgb(210,196,33)" fg:x="644" fg:w="1"/><text x="99.3269%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.15%)</title><rect x="99.0769%" y="965" width="0.1538%" height="15" fill="rgb(229,154,42)" fg:x="644" fg:w="1"/><text x="99.3269%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="99.0769%" y="949" width="0.1538%" height="15" fill="rgb(228,114,26)" fg:x="644" fg:w="1"/><text x="99.3269%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.15%)</title><rect x="99.0769%" y="933" width="0.1538%" height="15" fill="rgb(208,144,1)" fg:x="644" fg:w="1"/><text x="99.3269%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.15%)</title><rect x="99.0769%" y="917" width="0.1538%" height="15" fill="rgb(239,112,37)" fg:x="644" fg:w="1"/><text x="99.3269%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.15%)</title><rect x="99.0769%" y="901" width="0.1538%" height="15" fill="rgb(210,96,50)" fg:x="644" fg:w="1"/><text x="99.3269%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="99.0769%" y="885" width="0.1538%" height="15" fill="rgb(222,178,2)" fg:x="644" fg:w="1"/><text x="99.3269%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.15%)</title><rect x="99.0769%" y="869" width="0.1538%" height="15" fill="rgb(226,74,18)" fg:x="644" fg:w="1"/><text x="99.3269%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.15%)</title><rect x="99.0769%" y="853" width="0.1538%" height="15" fill="rgb(225,67,54)" fg:x="644" fg:w="1"/><text x="99.3269%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.15%)</title><rect x="99.0769%" y="837" width="0.1538%" height="15" fill="rgb(251,92,32)" fg:x="644" fg:w="1"/><text x="99.3269%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="99.0769%" y="821" width="0.1538%" height="15" fill="rgb(228,149,22)" fg:x="644" fg:w="1"/><text x="99.3269%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="99.0769%" y="805" width="0.1538%" height="15" fill="rgb(243,54,13)" fg:x="644" fg:w="1"/><text x="99.3269%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.15%)</title><rect x="99.0769%" y="789" width="0.1538%" height="15" fill="rgb(243,180,28)" fg:x="644" fg:w="1"/><text x="99.3269%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.15%)</title><rect x="99.0769%" y="773" width="0.1538%" height="15" fill="rgb(208,167,24)" fg:x="644" fg:w="1"/><text x="99.3269%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="99.0769%" y="757" width="0.1538%" height="15" fill="rgb(245,73,45)" fg:x="644" fg:w="1"/><text x="99.3269%" y="767.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.15%)</title><rect x="99.0769%" y="741" width="0.1538%" height="15" fill="rgb(237,203,48)" fg:x="644" fg:w="1"/><text x="99.3269%" y="751.50"></text></g><g><title>__rdl_alloc (1 samples, 0.15%)</title><rect x="99.0769%" y="725" width="0.1538%" height="15" fill="rgb(211,197,16)" fg:x="644" fg:w="1"/><text x="99.3269%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.15%)</title><rect x="99.0769%" y="709" width="0.1538%" height="15" fill="rgb(243,99,51)" fg:x="644" fg:w="1"/><text x="99.3269%" y="719.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="99.0769%" y="693" width="0.1538%" height="15" fill="rgb(215,123,29)" fg:x="644" fg:w="1"/><text x="99.3269%" y="703.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="99.0769%" y="677" width="0.1538%" height="15" fill="rgb(239,186,37)" fg:x="644" fg:w="1"/><text x="99.3269%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="99.2308%" y="933" width="0.1538%" height="15" fill="rgb(252,136,39)" fg:x="645" fg:w="1"/><text x="99.4808%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;f64&gt;]&gt; (1 samples, 0.15%)</title><rect x="99.2308%" y="917" width="0.1538%" height="15" fill="rgb(223,213,32)" fg:x="645" fg:w="1"/><text x="99.4808%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (1 samples, 0.15%)</title><rect x="99.2308%" y="901" width="0.1538%" height="15" fill="rgb(233,115,5)" fg:x="645" fg:w="1"/><text x="99.4808%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (1 samples, 0.15%)</title><rect x="99.2308%" y="885" width="0.1538%" height="15" fill="rgb(207,226,44)" fg:x="645" fg:w="1"/><text x="99.4808%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="99.2308%" y="869" width="0.1538%" height="15" fill="rgb(208,126,0)" fg:x="645" fg:w="1"/><text x="99.4808%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.15%)</title><rect x="99.2308%" y="853" width="0.1538%" height="15" fill="rgb(244,66,21)" fg:x="645" fg:w="1"/><text x="99.4808%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.15%)</title><rect x="99.2308%" y="837" width="0.1538%" height="15" fill="rgb(222,97,12)" fg:x="645" fg:w="1"/><text x="99.4808%" y="847.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.15%)</title><rect x="99.2308%" y="821" width="0.1538%" height="15" fill="rgb(219,213,19)" fg:x="645" fg:w="1"/><text x="99.4808%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.15%)</title><rect x="99.2308%" y="805" width="0.1538%" height="15" fill="rgb(252,169,30)" fg:x="645" fg:w="1"/><text x="99.4808%" y="815.50"></text></g><g><title>free (1 samples, 0.15%)</title><rect x="99.2308%" y="789" width="0.1538%" height="15" fill="rgb(206,32,51)" fg:x="645" fg:w="1"/><text x="99.4808%" y="799.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="99.2308%" y="773" width="0.1538%" height="15" fill="rgb(250,172,42)" fg:x="645" fg:w="1"/><text x="99.4808%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_topojson_client::feature::Builder&gt; (2 samples, 0.31%)</title><rect x="99.2308%" y="1013" width="0.3077%" height="15" fill="rgb(209,34,43)" fg:x="645" fg:w="2"/><text x="99.4808%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt;&gt; (2 samples, 0.31%)</title><rect x="99.2308%" y="997" width="0.3077%" height="15" fill="rgb(223,11,35)" fg:x="645" fg:w="2"/><text x="99.4808%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.31%)</title><rect x="99.2308%" y="981" width="0.3077%" height="15" fill="rgb(251,219,26)" fg:x="645" fg:w="2"/><text x="99.4808%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;]&gt; (2 samples, 0.31%)</title><rect x="99.2308%" y="965" width="0.3077%" height="15" fill="rgb(231,119,3)" fg:x="645" fg:w="2"/><text x="99.4808%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt; (2 samples, 0.31%)</title><rect x="99.2308%" y="949" width="0.3077%" height="15" fill="rgb(216,97,11)" fg:x="645" fg:w="2"/><text x="99.4808%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt; (1 samples, 0.15%)</title><rect x="99.3846%" y="933" width="0.1538%" height="15" fill="rgb(223,59,9)" fg:x="646" fg:w="1"/><text x="99.6346%" y="943.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="99.3846%" y="917" width="0.1538%" height="15" fill="rgb(233,93,31)" fg:x="646" fg:w="1"/><text x="99.6346%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.15%)</title><rect x="99.3846%" y="901" width="0.1538%" height="15" fill="rgb(239,81,33)" fg:x="646" fg:w="1"/><text x="99.6346%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.15%)</title><rect x="99.3846%" y="885" width="0.1538%" height="15" fill="rgb(213,120,34)" fg:x="646" fg:w="1"/><text x="99.6346%" y="895.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.15%)</title><rect x="99.3846%" y="869" width="0.1538%" height="15" fill="rgb(243,49,53)" fg:x="646" fg:w="1"/><text x="99.6346%" y="879.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.15%)</title><rect x="99.3846%" y="853" width="0.1538%" height="15" fill="rgb(247,216,33)" fg:x="646" fg:w="1"/><text x="99.6346%" y="863.50"></text></g><g><title>free (1 samples, 0.15%)</title><rect x="99.3846%" y="837" width="0.1538%" height="15" fill="rgb(226,26,14)" fg:x="646" fg:w="1"/><text x="99.6346%" y="847.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="99.3846%" y="821" width="0.1538%" height="15" fill="rgb(215,49,53)" fg:x="646" fg:w="1"/><text x="99.6346%" y="831.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="99.3846%" y="805" width="0.1538%" height="15" fill="rgb(245,162,40)" fg:x="646" fg:w="1"/><text x="99.6346%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="99.5385%" y="805" width="0.1538%" height="15" fill="rgb(229,68,17)" fg:x="647" fg:w="1"/><text x="99.7885%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="99.5385%" y="789" width="0.1538%" height="15" fill="rgb(213,182,10)" fg:x="647" fg:w="1"/><text x="99.7885%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.15%)</title><rect x="99.5385%" y="773" width="0.1538%" height="15" fill="rgb(245,125,30)" fg:x="647" fg:w="1"/><text x="99.7885%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.15%)</title><rect x="99.5385%" y="757" width="0.1538%" height="15" fill="rgb(232,202,2)" fg:x="647" fg:w="1"/><text x="99.7885%" y="767.50"></text></g><g><title>rust_topojson_client::feature::Builder::polygon::{{closure}} (1 samples, 0.15%)</title><rect x="99.5385%" y="741" width="0.1538%" height="15" fill="rgb(237,140,51)" fg:x="647" fg:w="1"/><text x="99.7885%" y="751.50"></text></g><g><title>rust_topojson_client::feature::Builder::ring (1 samples, 0.15%)</title><rect x="99.5385%" y="725" width="0.1538%" height="15" fill="rgb(236,157,25)" fg:x="647" fg:w="1"/><text x="99.7885%" y="735.50"></text></g><g><title>rust_topojson_client::feature::Builder::line (1 samples, 0.15%)</title><rect x="99.5385%" y="709" width="0.1538%" height="15" fill="rgb(219,209,0)" fg:x="647" fg:w="1"/><text x="99.7885%" y="719.50"></text></g><g><title>rust_topojson_client::feature::Builder::arc (1 samples, 0.15%)</title><rect x="99.5385%" y="693" width="0.1538%" height="15" fill="rgb(240,116,54)" fg:x="647" fg:w="1"/><text x="99.7885%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnMut&lt;Args&gt;&gt;::call_mut (1 samples, 0.15%)</title><rect x="99.5385%" y="677" width="0.1538%" height="15" fill="rgb(216,10,36)" fg:x="647" fg:w="1"/><text x="99.7885%" y="687.50"></text></g><g><title>rust_topojson_client::transform::gen_transform::{{closure}} (1 samples, 0.15%)</title><rect x="99.5385%" y="661" width="0.1538%" height="15" fill="rgb(222,72,44)" fg:x="647" fg:w="1"/><text x="99.7885%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.15%)</title><rect x="99.5385%" y="645" width="0.1538%" height="15" fill="rgb(232,159,9)" fg:x="647" fg:w="1"/><text x="99.7885%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="99.5385%" y="629" width="0.1538%" height="15" fill="rgb(210,39,32)" fg:x="647" fg:w="1"/><text x="99.7885%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="99.5385%" y="613" width="0.1538%" height="15" fill="rgb(216,194,45)" fg:x="647" fg:w="1"/><text x="99.7885%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.15%)</title><rect x="99.5385%" y="597" width="0.1538%" height="15" fill="rgb(218,18,35)" fg:x="647" fg:w="1"/><text x="99.7885%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.15%)</title><rect x="99.5385%" y="581" width="0.1538%" height="15" fill="rgb(207,83,51)" fg:x="647" fg:w="1"/><text x="99.7885%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="99.5385%" y="565" width="0.1538%" height="15" fill="rgb(225,63,43)" fg:x="647" fg:w="1"/><text x="99.7885%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.15%)</title><rect x="99.5385%" y="549" width="0.1538%" height="15" fill="rgb(207,57,36)" fg:x="647" fg:w="1"/><text x="99.7885%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.15%)</title><rect x="99.5385%" y="533" width="0.1538%" height="15" fill="rgb(216,99,33)" fg:x="647" fg:w="1"/><text x="99.7885%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.15%)</title><rect x="99.5385%" y="517" width="0.1538%" height="15" fill="rgb(225,42,16)" fg:x="647" fg:w="1"/><text x="99.7885%" y="527.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="99.5385%" y="501" width="0.1538%" height="15" fill="rgb(220,201,45)" fg:x="647" fg:w="1"/><text x="99.7885%" y="511.50"></text></g><g><title>profile_target::parse_topology (596 samples, 91.69%)</title><rect x="8.1538%" y="1093" width="91.6923%" height="15" fill="rgb(225,33,4)" fg:x="53" fg:w="596"/><text x="8.4038%" y="1103.50">profile_target::parse_topology</text></g><g><title>rust_topojson_client::feature::feature_from_name (5 samples, 0.77%)</title><rect x="99.0769%" y="1077" width="0.7692%" height="15" fill="rgb(224,33,50)" fg:x="644" fg:w="5"/><text x="99.3269%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.77%)</title><rect x="99.0769%" y="1061" width="0.7692%" height="15" fill="rgb(246,198,51)" fg:x="644" fg:w="5"/><text x="99.3269%" y="1071.50"></text></g><g><title>rust_topojson_client::feature::feature_from_name::{{closure}} (5 samples, 0.77%)</title><rect x="99.0769%" y="1045" width="0.7692%" height="15" fill="rgb(205,22,4)" fg:x="644" fg:w="5"/><text x="99.3269%" y="1055.50"></text></g><g><title>rust_topojson_client::feature::feature (5 samples, 0.77%)</title><rect x="99.0769%" y="1029" width="0.7692%" height="15" fill="rgb(206,3,8)" fg:x="644" fg:w="5"/><text x="99.3269%" y="1039.50"></text></g><g><title>rust_topojson_client::feature::Builder::geometry (2 samples, 0.31%)</title><rect x="99.5385%" y="1013" width="0.3077%" height="15" fill="rgb(251,23,15)" fg:x="647" fg:w="2"/><text x="99.7885%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.31%)</title><rect x="99.5385%" y="997" width="0.3077%" height="15" fill="rgb(252,88,28)" fg:x="647" fg:w="2"/><text x="99.7885%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.31%)</title><rect x="99.5385%" y="981" width="0.3077%" height="15" fill="rgb(212,127,14)" fg:x="647" fg:w="2"/><text x="99.7885%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.31%)</title><rect x="99.5385%" y="965" width="0.3077%" height="15" fill="rgb(247,145,37)" fg:x="647" fg:w="2"/><text x="99.7885%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.31%)</title><rect x="99.5385%" y="949" width="0.3077%" height="15" fill="rgb(209,117,53)" fg:x="647" fg:w="2"/><text x="99.7885%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.31%)</title><rect x="99.5385%" y="933" width="0.3077%" height="15" fill="rgb(212,90,42)" fg:x="647" fg:w="2"/><text x="99.7885%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.31%)</title><rect x="99.5385%" y="917" width="0.3077%" height="15" fill="rgb(218,164,37)" fg:x="647" fg:w="2"/><text x="99.7885%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.31%)</title><rect x="99.5385%" y="901" width="0.3077%" height="15" fill="rgb(246,65,34)" fg:x="647" fg:w="2"/><text x="99.7885%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.31%)</title><rect x="99.5385%" y="885" width="0.3077%" height="15" fill="rgb(231,100,33)" fg:x="647" fg:w="2"/><text x="99.7885%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.31%)</title><rect x="99.5385%" y="869" width="0.3077%" height="15" fill="rgb(228,126,14)" fg:x="647" fg:w="2"/><text x="99.7885%" y="879.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.31%)</title><rect x="99.5385%" y="853" width="0.3077%" height="15" fill="rgb(215,173,21)" fg:x="647" fg:w="2"/><text x="99.7885%" y="863.50"></text></g><g><title>rust_topojson_client::feature::Builder::geometry::{{closure}} (2 samples, 0.31%)</title><rect x="99.5385%" y="837" width="0.3077%" height="15" fill="rgb(210,6,40)" fg:x="647" fg:w="2"/><text x="99.7885%" y="847.50"></text></g><g><title>rust_topojson_client::feature::Builder::geometry (2 samples, 0.31%)</title><rect x="99.5385%" y="821" width="0.3077%" height="15" fill="rgb(212,48,18)" fg:x="647" fg:w="2"/><text x="99.7885%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.15%)</title><rect x="99.6923%" y="805" width="0.1538%" height="15" fill="rgb(230,214,11)" fg:x="648" fg:w="1"/><text x="99.9423%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="99.6923%" y="789" width="0.1538%" height="15" fill="rgb(254,105,39)" fg:x="648" fg:w="1"/><text x="99.9423%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="99.6923%" y="773" width="0.1538%" height="15" fill="rgb(245,158,5)" fg:x="648" fg:w="1"/><text x="99.9423%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="99.6923%" y="757" width="0.1538%" height="15" fill="rgb(249,208,11)" fg:x="648" fg:w="1"/><text x="99.9423%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.15%)</title><rect x="99.6923%" y="741" width="0.1538%" height="15" fill="rgb(210,39,28)" fg:x="648" fg:w="1"/><text x="99.9423%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.15%)</title><rect x="99.6923%" y="725" width="0.1538%" height="15" fill="rgb(211,56,53)" fg:x="648" fg:w="1"/><text x="99.9423%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.15%)</title><rect x="99.6923%" y="709" width="0.1538%" height="15" fill="rgb(226,201,30)" fg:x="648" fg:w="1"/><text x="99.9423%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.15%)</title><rect x="99.6923%" y="693" width="0.1538%" height="15" fill="rgb(239,101,34)" fg:x="648" fg:w="1"/><text x="99.9423%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.15%)</title><rect x="99.6923%" y="677" width="0.1538%" height="15" fill="rgb(226,209,5)" fg:x="648" fg:w="1"/><text x="99.9423%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.15%)</title><rect x="99.6923%" y="661" width="0.1538%" height="15" fill="rgb(250,105,47)" fg:x="648" fg:w="1"/><text x="99.9423%" y="671.50"></text></g><g><title>rust_topojson_client::feature::Builder::geometry::{{closure}} (1 samples, 0.15%)</title><rect x="99.6923%" y="645" width="0.1538%" height="15" fill="rgb(230,72,3)" fg:x="648" fg:w="1"/><text x="99.9423%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="99.6923%" y="629" width="0.1538%" height="15" fill="rgb(232,218,39)" fg:x="648" fg:w="1"/><text x="99.9423%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="99.6923%" y="613" width="0.1538%" height="15" fill="rgb(248,166,6)" fg:x="648" fg:w="1"/><text x="99.9423%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.15%)</title><rect x="99.6923%" y="597" width="0.1538%" height="15" fill="rgb(247,89,20)" fg:x="648" fg:w="1"/><text x="99.9423%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.15%)</title><rect x="99.6923%" y="581" width="0.1538%" height="15" fill="rgb(248,130,54)" fg:x="648" fg:w="1"/><text x="99.9423%" y="591.50"></text></g><g><title>rust_topojson_client::feature::Builder::polygon::{{closure}} (1 samples, 0.15%)</title><rect x="99.6923%" y="565" width="0.1538%" height="15" fill="rgb(234,196,4)" fg:x="648" fg:w="1"/><text x="99.9423%" y="575.50"></text></g><g><title>rust_topojson_client::feature::Builder::ring (1 samples, 0.15%)</title><rect x="99.6923%" y="549" width="0.1538%" height="15" fill="rgb(250,143,31)" fg:x="648" fg:w="1"/><text x="99.9423%" y="559.50"></text></g><g><title>rust_topojson_client::feature::Builder::line (1 samples, 0.15%)</title><rect x="99.6923%" y="533" width="0.1538%" height="15" fill="rgb(211,110,34)" fg:x="648" fg:w="1"/><text x="99.9423%" y="543.50"></text></g><g><title>rust_topojson_client::feature::Builder::arc (1 samples, 0.15%)</title><rect x="99.6923%" y="517" width="0.1538%" height="15" fill="rgb(215,124,48)" fg:x="648" fg:w="1"/><text x="99.9423%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.15%)</title><rect x="99.6923%" y="501" width="0.1538%" height="15" fill="rgb(216,46,13)" fg:x="648" fg:w="1"/><text x="99.9423%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.15%)</title><rect x="99.6923%" y="485" width="0.1538%" height="15" fill="rgb(205,184,25)" fg:x="648" fg:w="1"/><text x="99.9423%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="99.6923%" y="469" width="0.1538%" height="15" fill="rgb(228,1,10)" fg:x="648" fg:w="1"/><text x="99.9423%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="99.6923%" y="453" width="0.1538%" height="15" fill="rgb(213,116,27)" fg:x="648" fg:w="1"/><text x="99.9423%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.15%)</title><rect x="99.6923%" y="437" width="0.1538%" height="15" fill="rgb(241,95,50)" fg:x="648" fg:w="1"/><text x="99.9423%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.15%)</title><rect x="99.6923%" y="421" width="0.1538%" height="15" fill="rgb(238,48,32)" fg:x="648" fg:w="1"/><text x="99.9423%" y="431.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.15%)</title><rect x="99.6923%" y="405" width="0.1538%" height="15" fill="rgb(235,113,49)" fg:x="648" fg:w="1"/><text x="99.9423%" y="415.50"></text></g><g><title>__rdl_realloc (1 samples, 0.15%)</title><rect x="99.6923%" y="389" width="0.1538%" height="15" fill="rgb(205,127,43)" fg:x="648" fg:w="1"/><text x="99.9423%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.15%)</title><rect x="99.6923%" y="373" width="0.1538%" height="15" fill="rgb(250,162,2)" fg:x="648" fg:w="1"/><text x="99.9423%" y="383.50"></text></g><g><title>realloc (1 samples, 0.15%)</title><rect x="99.6923%" y="357" width="0.1538%" height="15" fill="rgb(220,13,41)" fg:x="648" fg:w="1"/><text x="99.9423%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="99.6923%" y="341" width="0.1538%" height="15" fill="rgb(249,221,25)" fg:x="648" fg:w="1"/><text x="99.9423%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="99.6923%" y="325" width="0.1538%" height="15" fill="rgb(215,208,19)" fg:x="648" fg:w="1"/><text x="99.9423%" y="335.50"></text></g><g><title>all (650 samples, 100%)</title><rect x="0.0000%" y="1237" width="100.0000%" height="15" fill="rgb(236,175,2)" fg:x="0" fg:w="650"/><text x="0.2500%" y="1247.50"></text></g><g><title>profile_target (645 samples, 99.23%)</title><rect x="0.7692%" y="1221" width="99.2308%" height="15" fill="rgb(241,52,2)" fg:x="5" fg:w="645"/><text x="1.0192%" y="1231.50">profile_target</text></g><g><title>_start (624 samples, 96.00%)</title><rect x="4.0000%" y="1205" width="96.0000%" height="15" fill="rgb(248,140,14)" fg:x="26" fg:w="624"/><text x="4.2500%" y="1215.50">_start</text></g><g><title>__libc_start_main (624 samples, 96.00%)</title><rect x="4.0000%" y="1189" width="96.0000%" height="15" fill="rgb(253,22,42)" fg:x="26" fg:w="624"/><text x="4.2500%" y="1199.50">__libc_start_main</text></g><g><title>[libc.so.6] (624 samples, 96.00%)</title><rect x="4.0000%" y="1173" width="96.0000%" height="15" fill="rgb(234,61,47)" fg:x="26" fg:w="624"/><text x="4.2500%" y="1183.50">[libc.so.6]</text></g><g><title>main (624 samples, 96.00%)</title><rect x="4.0000%" y="1157" width="96.0000%" height="15" fill="rgb(208,226,15)" fg:x="26" fg:w="624"/><text x="4.2500%" y="1167.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (624 samples, 96.00%)</title><rect x="4.0000%" y="1141" width="96.0000%" height="15" fill="rgb(217,221,4)" fg:x="26" fg:w="624"/><text x="4.2500%" y="1151.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (624 samples, 96.00%)</title><rect x="4.0000%" y="1125" width="96.0000%" height="15" fill="rgb(212,174,34)" fg:x="26" fg:w="624"/><text x="4.2500%" y="1135.50">core::ops::function::FnOnce::call_once</text></g><g><title>profile_target::main (624 samples, 96.00%)</title><rect x="4.0000%" y="1109" width="96.0000%" height="15" fill="rgb(253,83,4)" fg:x="26" fg:w="624"/><text x="4.2500%" y="1119.50">profile_target::main</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.15%)</title><rect x="99.8462%" y="1093" width="0.1538%" height="15" fill="rgb(250,195,49)" fg:x="649" fg:w="1"/><text x="100.0962%" y="1103.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.15%)</title><rect x="99.8462%" y="1077" width="0.1538%" height="15" fill="rgb(241,192,25)" fg:x="649" fg:w="1"/><text x="100.0962%" y="1087.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.15%)</title><rect x="99.8462%" y="1061" width="0.1538%" height="15" fill="rgb(208,124,10)" fg:x="649" fg:w="1"/><text x="100.0962%" y="1071.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.15%)</title><rect x="99.8462%" y="1045" width="0.1538%" height="15" fill="rgb(222,33,0)" fg:x="649" fg:w="1"/><text x="100.0962%" y="1055.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.15%)</title><rect x="99.8462%" y="1029" width="0.1538%" height="15" fill="rgb(234,209,28)" fg:x="649" fg:w="1"/><text x="100.0962%" y="1039.50"></text></g><g><title>write (1 samples, 0.15%)</title><rect x="99.8462%" y="1013" width="0.1538%" height="15" fill="rgb(224,11,23)" fg:x="649" fg:w="1"/><text x="100.0962%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="99.8462%" y="997" width="0.1538%" height="15" fill="rgb(232,99,1)" fg:x="649" fg:w="1"/><text x="100.0962%" y="1007.50"></text></g></svg></svg>