[package]
name = "rust_d3_geo_example_ring"
description = "rust_d3_geo wasm app"
license = "MIT"
version = "0.1.0"
authors = ["martin <martinfrances107@hotmail.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
js-sys = "~0.3"
rust_d3_geo = { path = "../../lib" }
geo = "~0.23"
getrandom = { version = "~0.2", features = ["js"] }
rand = { version = "~0.8" }

# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = "~0.2"

futures = "~0.3"
wasm-bindgen-test = "~0.3"
wasm-bindgen-futures = "~0.4"

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = ['-O']

[package.metadata.wasm-pack.profile.dev.wasm-bindgen]
# Should we enable wasm-bindgen's debug assertions in its generated JS glue?
debug-js-glue = true
# Should wasm-bindgen demangle the symbols in the "name" custom section?
demangle-name-section = true
# Should we emit the DWARF debug info custom sections?

# set to true by mf, moving away from the default false
dwarf-debug-info = true

[package.metadata.wasm-pack.profile.profiling]
wasm-opt = ['-O']

[package.metadata.wasm-pack.profile.profiling.wasm-bindgen]
debug-js-glue = false
demangle-name-section = true
dwarf-debug-info = true

# `wasm-opt` is on by default in for the release profile, but it can be
# disabled by setting it to `false`
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

[package.metadata.wasm-pack.profile.release.wasm-bindgen]
debug-js-glue = false
demangle-name-section = true
dwarf-debug-info = true


# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "~0.3"
features = [
    "Attr",
    "console",
    "CanvasRenderingContext2d",
    "Document",
    "Element",
    "Event",
    "EventTarget",
    "HtmlCanvasElement",
    "HtmlCollection",
    "HtmlElement",
    "HtmlInputElement",
    "Node",
    "Performance",
    "PerformanceTiming",
    "PerformanceMeasure",
    "SvgsvgElement",
    "SvgAnimatedLength",
    "SvgLength",
    "SvgPathElement",
    "Text",
    "Window",
]
